
/Users/jamesblack/Documents/IoT/smartshop/SmartShopGroveDustSensorToHue/target/4.0.2/argon/SmartShopGroveDustSensorToHue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002534  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6550  000b6550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6574  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  2003e598  000b6578  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  2003e624  2003e624  0002e624  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6604  000b6604  00026604  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b662c  000b662c  0002662c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010d1ac  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000120b2  00000000  00000000  001337dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000383bf  00000000  00000000  0014588e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e00  00000000  00000000  0017dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a328  00000000  00000000  00180a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003728f  00000000  00000000  0018ad75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c095  00000000  00000000  001c2004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132dfa  00000000  00000000  001fe099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008038  00000000  00000000  00330e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 ff6b 	bl	b5f08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 ff73 	bl	b5f24 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e598 	.word	0x2003e598
   b4048:	000b6578 	.word	0x000b6578
   b404c:	2003e624 	.word	0x2003e624
   b4050:	2003e624 	.word	0x2003e624
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fd37 	bl	b5ad0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b652c 	.word	0x000b652c
   b407c:	000b6550 	.word	0x000b6550

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b980 	b.w	b4384 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9ef 	bl	b4468 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bcd7 	b.w	b5a40 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bca1 	b.w	b49d8 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bc9f 	b.w	b49d8 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bca5 	b.w	b49e8 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40ae:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40b0:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40b2:	4606      	mov	r6, r0
   b40b4:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40b6:	da0b      	bge.n	b40d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40b8:	2a0a      	cmp	r2, #10
   b40ba:	d109      	bne.n	b40d0 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40bc:	212d      	movs	r1, #45	; 0x2d
   b40be:	f000 fecb 	bl	b4e58 <_ZN5Print5printEc>
            val = -n;
   b40c2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40c4:	b2ea      	uxtb	r2, r5
   b40c6:	4630      	mov	r0, r6
    }
}
   b40c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40cc:	f000 bedd 	b.w	b4e8a <_ZN5Print11printNumberEmh>
            val = n;
   b40d0:	4621      	mov	r1, r4
   b40d2:	e7f7      	b.n	b40c4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40d4 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	b40e      	push	{r1, r2, r3}
   b40d6:	b503      	push	{r0, r1, lr}
   b40d8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40da:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e2:	f000 fef0 	bl	b4ec6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b40e6:	b002      	add	sp, #8
   b40e8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40ec:	b003      	add	sp, #12
   b40ee:	4770      	bx	lr

000b40f0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40f0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40f2:	6984      	ldr	r4, [r0, #24]
   b40f4:	4b0a      	ldr	r3, [pc, #40]	; (b4120 <_ZN9TCPClientD1Ev+0x30>)
   b40f6:	6003      	str	r3, [r0, #0]
   b40f8:	4605      	mov	r5, r0
   b40fa:	b17c      	cbz	r4, b411c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40fc:	6863      	ldr	r3, [r4, #4]
   b40fe:	3b01      	subs	r3, #1
   b4100:	6063      	str	r3, [r4, #4]
   b4102:	b95b      	cbnz	r3, b411c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4104:	6823      	ldr	r3, [r4, #0]
   b4106:	4620      	mov	r0, r4
   b4108:	689b      	ldr	r3, [r3, #8]
   b410a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b410c:	68a3      	ldr	r3, [r4, #8]
   b410e:	3b01      	subs	r3, #1
   b4110:	60a3      	str	r3, [r4, #8]
   b4112:	b91b      	cbnz	r3, b411c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4114:	6823      	ldr	r3, [r4, #0]
   b4116:	4620      	mov	r0, r4
   b4118:	68db      	ldr	r3, [r3, #12]
   b411a:	4798      	blx	r3
   b411c:	4628      	mov	r0, r5
   b411e:	bd38      	pop	{r3, r4, r5, pc}
   b4120:	000b62c8 	.word	0x000b62c8

000b4124 <_ZN9TCPClientD0Ev>:
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN9TCPClientD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	211c      	movs	r1, #28
   b4130:	f7ff ffb3 	bl	b409a <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b413c:	b08c      	sub	sp, #48	; 0x30
   b413e:	4605      	mov	r5, r0
   b4140:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4142:	4668      	mov	r0, sp
   b4144:	4977      	ldr	r1, [pc, #476]	; (b4324 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4146:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b414a:	4614      	mov	r4, r2
   b414c:	461e      	mov	r6, r3
  String command = "";  
   b414e:	f000 ff70 	bl	b5032 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4152:	f8df e228 	ldr.w	lr, [pc, #552]	; b437c <_Z6setHueibiii+0x244>
   b4156:	4974      	ldr	r1, [pc, #464]	; (b4328 <_Z6setHueibiii+0x1f0>)
   b4158:	f8de 3000 	ldr.w	r3, [lr]
   b415c:	4873      	ldr	r0, [pc, #460]	; (b432c <_Z6setHueibiii+0x1f4>)
   b415e:	4a74      	ldr	r2, [pc, #464]	; (b4330 <_Z6setHueibiii+0x1f8>)
   b4160:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4380 <_Z6setHueibiii+0x248>
   b4164:	42ab      	cmp	r3, r5
   b4166:	d119      	bne.n	b419c <_Z6setHueibiii+0x64>
   b4168:	680b      	ldr	r3, [r1, #0]
   b416a:	42bb      	cmp	r3, r7
   b416c:	d116      	bne.n	b419c <_Z6setHueibiii+0x64>
   b416e:	6803      	ldr	r3, [r0, #0]
   b4170:	42a3      	cmp	r3, r4
   b4172:	d113      	bne.n	b419c <_Z6setHueibiii+0x64>
   b4174:	6813      	ldr	r3, [r2, #0]
   b4176:	42b3      	cmp	r3, r6
   b4178:	d110      	bne.n	b419c <_Z6setHueibiii+0x64>
   b417a:	f8dc 3000 	ldr.w	r3, [ip]
   b417e:	4543      	cmp	r3, r8
   b4180:	d10c      	bne.n	b419c <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b4182:	f001 fb8b 	bl	b589c <_Z16_fetch_usbserialv>
   b4186:	496b      	ldr	r1, [pc, #428]	; (b4334 <_Z6setHueibiii+0x1fc>)
   b4188:	f7ff ffa4 	bl	b40d4 <_ZN5Print6printfEPKcz>
    return false;
   b418c:	2400      	movs	r4, #0
  String command = "";  
   b418e:	4668      	mov	r0, sp
   b4190:	f000 ff04 	bl	b4f9c <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b4194:	4620      	mov	r0, r4
   b4196:	b00c      	add	sp, #48	; 0x30
   b4198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b419c:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41a0:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41a2:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41a4:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41a6:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41aa:	2f00      	cmp	r7, #0
   b41ac:	f000 80b5 	beq.w	b431a <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41b0:	4961      	ldr	r1, [pc, #388]	; (b4338 <_Z6setHueibiii+0x200>)
   b41b2:	4668      	mov	r0, sp
   b41b4:	f000 ff6b 	bl	b508e <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41b8:	4669      	mov	r1, sp
   b41ba:	a808      	add	r0, sp, #32
   b41bc:	f000 ff5c 	bl	b5078 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41c0:	220a      	movs	r2, #10
   b41c2:	4641      	mov	r1, r8
   b41c4:	a804      	add	r0, sp, #16
   b41c6:	f000 ff74 	bl	b50b2 <_ZN6StringC1Eih>
   b41ca:	a904      	add	r1, sp, #16
   b41cc:	a808      	add	r0, sp, #32
   b41ce:	f000 ffa7 	bl	b5120 <_ZplRK15StringSumHelperRK6String>
   b41d2:	495a      	ldr	r1, [pc, #360]	; (b433c <_Z6setHueibiii+0x204>)
   b41d4:	f000 ffb0 	bl	b5138 <_ZplRK15StringSumHelperPKc>
   b41d8:	4601      	mov	r1, r0
   b41da:	4668      	mov	r0, sp
   b41dc:	f000 ff3d 	bl	b505a <_ZN6StringaSERKS_>
   b41e0:	a804      	add	r0, sp, #16
   b41e2:	f000 fedb 	bl	b4f9c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41e6:	a808      	add	r0, sp, #32
   b41e8:	f000 fed8 	bl	b4f9c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b41ec:	4669      	mov	r1, sp
   b41ee:	a808      	add	r0, sp, #32
   b41f0:	f000 ff42 	bl	b5078 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b41f4:	220a      	movs	r2, #10
   b41f6:	4631      	mov	r1, r6
   b41f8:	a804      	add	r0, sp, #16
   b41fa:	f000 ff5a 	bl	b50b2 <_ZN6StringC1Eih>
   b41fe:	a904      	add	r1, sp, #16
   b4200:	a808      	add	r0, sp, #32
   b4202:	f000 ff8d 	bl	b5120 <_ZplRK15StringSumHelperRK6String>
   b4206:	494e      	ldr	r1, [pc, #312]	; (b4340 <_Z6setHueibiii+0x208>)
   b4208:	f000 ff96 	bl	b5138 <_ZplRK15StringSumHelperPKc>
   b420c:	4601      	mov	r1, r0
   b420e:	4668      	mov	r0, sp
   b4210:	f000 ff23 	bl	b505a <_ZN6StringaSERKS_>
   b4214:	a804      	add	r0, sp, #16
   b4216:	f000 fec1 	bl	b4f9c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b421a:	a808      	add	r0, sp, #32
   b421c:	f000 febe 	bl	b4f9c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4220:	4669      	mov	r1, sp
   b4222:	a808      	add	r0, sp, #32
   b4224:	f000 ff28 	bl	b5078 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4228:	220a      	movs	r2, #10
   b422a:	4621      	mov	r1, r4
   b422c:	a804      	add	r0, sp, #16
   b422e:	f000 ff40 	bl	b50b2 <_ZN6StringC1Eih>
   b4232:	a904      	add	r1, sp, #16
   b4234:	a808      	add	r0, sp, #32
   b4236:	f000 ff73 	bl	b5120 <_ZplRK15StringSumHelperRK6String>
   b423a:	4942      	ldr	r1, [pc, #264]	; (b4344 <_Z6setHueibiii+0x20c>)
   b423c:	f000 ff7c 	bl	b5138 <_ZplRK15StringSumHelperPKc>
   b4240:	4601      	mov	r1, r0
   b4242:	4668      	mov	r0, sp
   b4244:	f000 ff09 	bl	b505a <_ZN6StringaSERKS_>
   b4248:	a804      	add	r0, sp, #16
   b424a:	f000 fea7 	bl	b4f9c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b424e:	a808      	add	r0, sp, #32
   b4250:	f000 fea4 	bl	b4f9c <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4254:	493c      	ldr	r1, [pc, #240]	; (b4348 <_Z6setHueibiii+0x210>)
   b4256:	483d      	ldr	r0, [pc, #244]	; (b434c <_Z6setHueibiii+0x214>)
   b4258:	2300      	movs	r3, #0
   b425a:	2250      	movs	r2, #80	; 0x50
   b425c:	f001 f84c 	bl	b52f8 <_ZN9TCPClient7connectEPKctm>
   b4260:	4604      	mov	r4, r0
   b4262:	2800      	cmp	r0, #0
   b4264:	d093      	beq.n	b418e <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4266:	f001 fb19 	bl	b589c <_Z16_fetch_usbserialv>
   b426a:	4939      	ldr	r1, [pc, #228]	; (b4350 <_Z6setHueibiii+0x218>)
   b426c:	f000 fe03 	bl	b4e76 <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4270:	f001 fb14 	bl	b589c <_Z16_fetch_usbserialv>
   b4274:	9900      	ldr	r1, [sp, #0]
   b4276:	f000 fdfe 	bl	b4e76 <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b427a:	4936      	ldr	r1, [pc, #216]	; (b4354 <_Z6setHueibiii+0x21c>)
   b427c:	4833      	ldr	r0, [pc, #204]	; (b434c <_Z6setHueibiii+0x214>)
   b427e:	f000 fde7 	bl	b4e50 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b4282:	4935      	ldr	r1, [pc, #212]	; (b4358 <_Z6setHueibiii+0x220>)
   b4284:	4831      	ldr	r0, [pc, #196]	; (b434c <_Z6setHueibiii+0x214>)
   b4286:	f000 fde3 	bl	b4e50 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b428a:	4934      	ldr	r1, [pc, #208]	; (b435c <_Z6setHueibiii+0x224>)
   b428c:	482f      	ldr	r0, [pc, #188]	; (b434c <_Z6setHueibiii+0x214>)
   b428e:	f000 fddf 	bl	b4e50 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b4292:	220a      	movs	r2, #10
   b4294:	482d      	ldr	r0, [pc, #180]	; (b434c <_Z6setHueibiii+0x214>)
   b4296:	4629      	mov	r1, r5
   b4298:	f7ff ff09 	bl	b40ae <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b429c:	4930      	ldr	r1, [pc, #192]	; (b4360 <_Z6setHueibiii+0x228>)
   b429e:	482b      	ldr	r0, [pc, #172]	; (b434c <_Z6setHueibiii+0x214>)
   b42a0:	f000 fde9 	bl	b4e76 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42a4:	492f      	ldr	r1, [pc, #188]	; (b4364 <_Z6setHueibiii+0x22c>)
   b42a6:	4829      	ldr	r0, [pc, #164]	; (b434c <_Z6setHueibiii+0x214>)
   b42a8:	f000 fde5 	bl	b4e76 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42ac:	492e      	ldr	r1, [pc, #184]	; (b4368 <_Z6setHueibiii+0x230>)
   b42ae:	4827      	ldr	r0, [pc, #156]	; (b434c <_Z6setHueibiii+0x214>)
   b42b0:	f000 fdce 	bl	b4e50 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42b4:	4924      	ldr	r1, [pc, #144]	; (b4348 <_Z6setHueibiii+0x210>)
   b42b6:	4825      	ldr	r0, [pc, #148]	; (b434c <_Z6setHueibiii+0x214>)
   b42b8:	f000 fddd 	bl	b4e76 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42bc:	492b      	ldr	r1, [pc, #172]	; (b436c <_Z6setHueibiii+0x234>)
   b42be:	4823      	ldr	r0, [pc, #140]	; (b434c <_Z6setHueibiii+0x214>)
   b42c0:	f000 fdc6 	bl	b4e50 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42c4:	220a      	movs	r2, #10
   b42c6:	9902      	ldr	r1, [sp, #8]
   b42c8:	4820      	ldr	r0, [pc, #128]	; (b434c <_Z6setHueibiii+0x214>)
   b42ca:	f000 fdde 	bl	b4e8a <_ZN5Print11printNumberEmh>
        n += println();
   b42ce:	481f      	ldr	r0, [pc, #124]	; (b434c <_Z6setHueibiii+0x214>)
   b42d0:	f000 fdc5 	bl	b4e5e <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42d4:	4926      	ldr	r1, [pc, #152]	; (b4370 <_Z6setHueibiii+0x238>)
   b42d6:	481d      	ldr	r0, [pc, #116]	; (b434c <_Z6setHueibiii+0x214>)
   b42d8:	f000 fdcd 	bl	b4e76 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42dc:	481b      	ldr	r0, [pc, #108]	; (b434c <_Z6setHueibiii+0x214>)
   b42de:	f000 fdbe 	bl	b4e5e <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42e2:	9900      	ldr	r1, [sp, #0]
   b42e4:	4819      	ldr	r0, [pc, #100]	; (b434c <_Z6setHueibiii+0x214>)
   b42e6:	f000 fdc6 	bl	b4e76 <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b42ea:	f001 fad7 	bl	b589c <_Z16_fetch_usbserialv>
   b42ee:	4921      	ldr	r1, [pc, #132]	; (b4374 <_Z6setHueibiii+0x23c>)
   b42f0:	f000 fdc1 	bl	b4e76 <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b42f4:	f001 fad2 	bl	b589c <_Z16_fetch_usbserialv>
   b42f8:	4914      	ldr	r1, [pc, #80]	; (b434c <_Z6setHueibiii+0x214>)
   b42fa:	4604      	mov	r4, r0
   b42fc:	a808      	add	r0, sp, #32
   b42fe:	f000 fe39 	bl	b4f74 <_ZN6Stream10readStringEv>
   b4302:	9908      	ldr	r1, [sp, #32]
   b4304:	4620      	mov	r0, r4
   b4306:	f000 fdb6 	bl	b4e76 <_ZN5Print7printlnEPKc>
   b430a:	a808      	add	r0, sp, #32
   b430c:	f000 fe46 	bl	b4f9c <_ZN6StringD1Ev>
    HueClient.stop();
   b4310:	480e      	ldr	r0, [pc, #56]	; (b434c <_Z6setHueibiii+0x214>)
   b4312:	f001 f9a7 	bl	b5664 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4316:	2401      	movs	r4, #1
   b4318:	e739      	b.n	b418e <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b431a:	4917      	ldr	r1, [pc, #92]	; (b4378 <_Z6setHueibiii+0x240>)
   b431c:	4668      	mov	r0, sp
   b431e:	f000 feb6 	bl	b508e <_ZN6StringaSEPKc>
   b4322:	e797      	b.n	b4254 <_Z6setHueibiii+0x11c>
   b4324:	000b618b 	.word	0x000b618b
   b4328:	2003e690 	.word	0x2003e690
   b432c:	2003e698 	.word	0x2003e698
   b4330:	2003e688 	.word	0x2003e688
   b4334:	000b60a4 	.word	0x000b60a4
   b4338:	000b60c0 	.word	0x000b60c0
   b433c:	000b60d2 	.word	0x000b60d2
   b4340:	000b60da 	.word	0x000b60da
   b4344:	000b60ed 	.word	0x000b60ed
   b4348:	000b61c0 	.word	0x000b61c0
   b434c:	2003e624 	.word	0x2003e624
   b4350:	000b60ef 	.word	0x000b60ef
   b4354:	000b6106 	.word	0x000b6106
   b4358:	000b6197 	.word	0x000b6197
   b435c:	000b6110 	.word	0x000b6110
   b4360:	000b6119 	.word	0x000b6119
   b4364:	000b6129 	.word	0x000b6129
   b4368:	000b6134 	.word	0x000b6134
   b436c:	000b613b 	.word	0x000b613b
   b4370:	000b614c 	.word	0x000b614c
   b4374:	000b6173 	.word	0x000b6173
   b4378:	000b60e2 	.word	0x000b60e2
   b437c:	2003e68c 	.word	0x2003e68c
   b4380:	2003e694 	.word	0x2003e694

000b4384 <setup>:
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
SYSTEM_MODE (SEMI_AUTOMATIC);

void setup() {
   b4384:	b530      	push	{r4, r5, lr}
   b4386:	b095      	sub	sp, #84	; 0x54
  Serial.begin(9600);
   b4388:	f001 fa88 	bl	b589c <_Z16_fetch_usbserialv>
   b438c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4390:	f001 fa74 	bl	b587c <_ZN9USBSerial5beginEl>
    pinMode(pin,INPUT);
   b4394:	4b2e      	ldr	r3, [pc, #184]	; (b4450 <setup+0xcc>)
   b4396:	2100      	movs	r1, #0
   b4398:	8818      	ldrh	r0, [r3, #0]
   b439a:	f001 fc09 	bl	b5bb0 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b439e:	f000 f92f 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
    starttime = millis();
   b43a2:	4b2c      	ldr	r3, [pc, #176]	; (b4454 <setup+0xd0>)
   b43a4:	6018      	str	r0, [r3, #0]
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b43a6:	2000      	movs	r0, #0
   b43a8:	f000 f932 	bl	b4610 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43ac:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b43b0:	4604      	mov	r4, r0
   b43b2:	2000      	movs	r0, #0
   b43b4:	f000 f92c 	bl	b4610 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43b8:	1b00      	subs	r0, r0, r4
   b43ba:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b43be:	42a8      	cmp	r0, r5
   b43c0:	f171 0300 	sbcs.w	r3, r1, #0
   b43c4:	d207      	bcs.n	b43d6 <setup+0x52>
  waitFor(Serial.isConnected,15000);
   b43c6:	f001 fa69 	bl	b589c <_Z16_fetch_usbserialv>
   b43ca:	f001 fa5b 	bl	b5884 <_ZN9USBSerial11isConnectedEv>
   b43ce:	b910      	cbnz	r0, b43d6 <setup+0x52>
            spark_process();
   b43d0:	f000 fa8a 	bl	b48e8 <spark_process>
        while (_while() && !_condition()) {
   b43d4:	e7ed      	b.n	b43b2 <setup+0x2e>
   b43d6:	f001 fa61 	bl	b589c <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b43da:	4c1f      	ldr	r4, [pc, #124]	; (b4458 <setup+0xd4>)
  WiFi.on();
  WiFi.setCredentials("IoTNetwork");

  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   b43dc:	4d1f      	ldr	r5, [pc, #124]	; (b445c <setup+0xd8>)
  waitFor(Serial.isConnected,15000);
   b43de:	f001 fa51 	bl	b5884 <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b43e2:	2300      	movs	r3, #0
   b43e4:	461a      	mov	r2, r3
   b43e6:	4619      	mov	r1, r3
   b43e8:	6860      	ldr	r0, [r4, #4]
   b43ea:	f000 faad 	bl	b4948 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b43ee:	2238      	movs	r2, #56	; 0x38
   b43f0:	2100      	movs	r1, #0
   b43f2:	a806      	add	r0, sp, #24
   b43f4:	f001 fd96 	bl	b5f24 <memset>
        creds.size = sizeof(creds);
   b43f8:	234c      	movs	r3, #76	; 0x4c
   b43fa:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b43fc:	4b18      	ldr	r3, [pc, #96]	; (b4460 <setup+0xdc>)
   b43fe:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4400:	220a      	movs	r2, #10
   b4402:	2300      	movs	r3, #0
   b4404:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4408:	4619      	mov	r1, r3
   b440a:	aa01      	add	r2, sp, #4
   b440c:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b440e:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4410:	f000 faba 	bl	b4988 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4414:	2300      	movs	r3, #0
   b4416:	6860      	ldr	r0, [r4, #4]
   b4418:	461a      	mov	r2, r3
   b441a:	4619      	mov	r1, r3
   b441c:	f000 fa74 	bl	b4908 <network_connect>
        return network_connecting(*this, 0, NULL);
   b4420:	2200      	movs	r2, #0
   b4422:	6860      	ldr	r0, [r4, #4]
   b4424:	4611      	mov	r1, r2
   b4426:	f000 fa77 	bl	b4918 <network_connecting>
  while(WiFi.connecting()) {
   b442a:	b128      	cbz	r0, b4438 <setup+0xb4>
    Serial.printf(".");
   b442c:	f001 fa36 	bl	b589c <_Z16_fetch_usbserialv>
   b4430:	4629      	mov	r1, r5
   b4432:	f7ff fe4f 	bl	b40d4 <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   b4436:	e7f3      	b.n	b4420 <setup+0x9c>
  }
  delay(1000);
   b4438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b443c:	f000 fb04 	bl	b4a48 <delay>
  Serial.printf("\n\n");
   b4440:	f001 fa2c 	bl	b589c <_Z16_fetch_usbserialv>
   b4444:	4907      	ldr	r1, [pc, #28]	; (b4464 <setup+0xe0>)
   b4446:	f7ff fe45 	bl	b40d4 <_ZN5Print6printfEPKcz>
  

}
   b444a:	b015      	add	sp, #84	; 0x54
   b444c:	bd30      	pop	{r4, r5, pc}
   b444e:	bf00      	nop
   b4450:	2003e5b0 	.word	0x2003e5b0
   b4454:	2003e6b4 	.word	0x2003e6b4
   b4458:	2003e70c 	.word	0x2003e70c
   b445c:	000b6187 	.word	0x000b6187
   b4460:	000b617c 	.word	0x000b617c
   b4464:	000b6189 	.word	0x000b6189

000b4468 <loop>:


void loop() {
   b4468:	b537      	push	{r0, r1, r2, r4, r5, lr}
  duration = pulseIn(pin, LOW);
   b446a:	4b32      	ldr	r3, [pc, #200]	; (b4534 <loop+0xcc>)
   b446c:	4d32      	ldr	r5, [pc, #200]	; (b4538 <loop+0xd0>)
   b446e:	8818      	ldrh	r0, [r3, #0]
   b4470:	4c32      	ldr	r4, [pc, #200]	; (b453c <loop+0xd4>)
   b4472:	2100      	movs	r1, #0
   b4474:	f001 fbad 	bl	b5bd2 <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b4478:	4a31      	ldr	r2, [pc, #196]	; (b4540 <loop+0xd8>)
  duration = pulseIn(pin, LOW);
   b447a:	6028      	str	r0, [r5, #0]
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b447c:	6813      	ldr	r3, [r2, #0]
   b447e:	4418      	add	r0, r3
   b4480:	6010      	str	r0, [r2, #0]
   b4482:	f000 f8bd 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms){
   b4486:	4b2f      	ldr	r3, [pc, #188]	; (b4544 <loop+0xdc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	1ac0      	subs	r0, r0, r3
   b448c:	4b2e      	ldr	r3, [pc, #184]	; (b4548 <loop+0xe0>)
   b448e:	681b      	ldr	r3, [r3, #0]
   b4490:	4298      	cmp	r0, r3
   b4492:	d92d      	bls.n	b44f0 <loop+0x88>
   b4494:	f000 f8b4 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
    concentration >=3000;
    duration = millis();
   b4498:	6028      	str	r0, [r5, #0]
  //switchON ();
    setHue(BULB5,true,HueRed,255,255);
   b449a:	25ff      	movs	r5, #255	; 0xff
   b449c:	6822      	ldr	r2, [r4, #0]
   b449e:	9500      	str	r5, [sp, #0]
   b44a0:	462b      	mov	r3, r5
   b44a2:	2101      	movs	r1, #1
   b44a4:	2005      	movs	r0, #5
   b44a6:	f7ff fe47 	bl	b4138 <_Z6setHueibiii>
    setHue(BULB4,true,HueRed,255,255);
   b44aa:	6822      	ldr	r2, [r4, #0]
   b44ac:	9500      	str	r5, [sp, #0]
   b44ae:	462b      	mov	r3, r5
   b44b0:	2101      	movs	r1, #1
   b44b2:	2004      	movs	r0, #4
   b44b4:	f7ff fe40 	bl	b4138 <_Z6setHueibiii>
    setHue(BULB3,true,HueRed,255,255);
   b44b8:	6822      	ldr	r2, [r4, #0]
   b44ba:	9500      	str	r5, [sp, #0]
   b44bc:	462b      	mov	r3, r5
   b44be:	2101      	movs	r1, #1
   b44c0:	2003      	movs	r0, #3
   b44c2:	f7ff fe39 	bl	b4138 <_Z6setHueibiii>
    setHue(BULB2,true,HueRed,255,255);
   b44c6:	6822      	ldr	r2, [r4, #0]
   b44c8:	9500      	str	r5, [sp, #0]
   b44ca:	462b      	mov	r3, r5
   b44cc:	2101      	movs	r1, #1
   b44ce:	2002      	movs	r0, #2
   b44d0:	f7ff fe32 	bl	b4138 <_Z6setHueibiii>
    setHue(BULB1,true,HueRed,255,255);
   b44d4:	6822      	ldr	r2, [r4, #0]
   b44d6:	9500      	str	r5, [sp, #0]
   b44d8:	462b      	mov	r3, r5
   b44da:	2101      	movs	r1, #1
  else {
  setHue(BULB5,false,HueRed,255,255);
  setHue(BULB4,false,HueRed,255,255);
  setHue(BULB3,false,HueRed,255,255);
  setHue(BULB2,false,HueRed,255,255);
  setHue(BULB1,false,HueRed,255,255);
   b44dc:	2001      	movs	r0, #1
   b44de:	f7ff fe2b 	bl	b4138 <_Z6setHueibiii>
    
  }    //switchOFF ();
    Serial.printf ("sensorread");
   b44e2:	f001 f9db 	bl	b589c <_Z16_fetch_usbserialv>
   b44e6:	4919      	ldr	r1, [pc, #100]	; (b454c <loop+0xe4>)
   b44e8:	f7ff fdf4 	bl	b40d4 <_ZN5Print6printfEPKcz>
   b44ec:	b003      	add	sp, #12
   b44ee:	bd30      	pop	{r4, r5, pc}
  setHue(BULB5,false,HueRed,255,255);
   b44f0:	25ff      	movs	r5, #255	; 0xff
   b44f2:	6822      	ldr	r2, [r4, #0]
   b44f4:	9500      	str	r5, [sp, #0]
   b44f6:	462b      	mov	r3, r5
   b44f8:	2100      	movs	r1, #0
   b44fa:	2005      	movs	r0, #5
   b44fc:	f7ff fe1c 	bl	b4138 <_Z6setHueibiii>
  setHue(BULB4,false,HueRed,255,255);
   b4500:	6822      	ldr	r2, [r4, #0]
   b4502:	9500      	str	r5, [sp, #0]
   b4504:	462b      	mov	r3, r5
   b4506:	2100      	movs	r1, #0
   b4508:	2004      	movs	r0, #4
   b450a:	f7ff fe15 	bl	b4138 <_Z6setHueibiii>
  setHue(BULB3,false,HueRed,255,255);
   b450e:	6822      	ldr	r2, [r4, #0]
   b4510:	9500      	str	r5, [sp, #0]
   b4512:	462b      	mov	r3, r5
   b4514:	2100      	movs	r1, #0
   b4516:	2003      	movs	r0, #3
   b4518:	f7ff fe0e 	bl	b4138 <_Z6setHueibiii>
  setHue(BULB2,false,HueRed,255,255);
   b451c:	6822      	ldr	r2, [r4, #0]
   b451e:	9500      	str	r5, [sp, #0]
   b4520:	462b      	mov	r3, r5
   b4522:	2100      	movs	r1, #0
   b4524:	2002      	movs	r0, #2
   b4526:	f7ff fe07 	bl	b4138 <_Z6setHueibiii>
  setHue(BULB1,false,HueRed,255,255);
   b452a:	6822      	ldr	r2, [r4, #0]
   b452c:	9500      	str	r5, [sp, #0]
   b452e:	462b      	mov	r3, r5
   b4530:	2100      	movs	r1, #0
   b4532:	e7d3      	b.n	b44dc <loop+0x74>
   b4534:	2003e5b0 	.word	0x2003e5b0
   b4538:	2003e69c 	.word	0x2003e69c
   b453c:	2003e65c 	.word	0x2003e65c
   b4540:	2003e6b0 	.word	0x2003e6b0
   b4544:	2003e6b4 	.word	0x2003e6b4
   b4548:	2003e5b4 	.word	0x2003e5b4
   b454c:	000b618c 	.word	0x000b618c

000b4550 <_GLOBAL__sub_I_hueOn>:
   b4550:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b4552:	4916      	ldr	r1, [pc, #88]	; (b45ac <_GLOBAL__sub_I_hueOn+0x5c>)
   b4554:	4816      	ldr	r0, [pc, #88]	; (b45b0 <_GLOBAL__sub_I_hueOn+0x60>)
   b4556:	f000 fd6c 	bl	b5032 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b455a:	4a16      	ldr	r2, [pc, #88]	; (b45b4 <_GLOBAL__sub_I_hueOn+0x64>)
   b455c:	4b16      	ldr	r3, [pc, #88]	; (b45b8 <_GLOBAL__sub_I_hueOn+0x68>)
   b455e:	6812      	ldr	r2, [r2, #0]
   b4560:	601a      	str	r2, [r3, #0]
   b4562:	4a16      	ldr	r2, [pc, #88]	; (b45bc <_GLOBAL__sub_I_hueOn+0x6c>)
TCPClient HueClient;
   b4564:	4816      	ldr	r0, [pc, #88]	; (b45c0 <_GLOBAL__sub_I_hueOn+0x70>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4566:	6812      	ldr	r2, [r2, #0]
   b4568:	605a      	str	r2, [r3, #4]
   b456a:	4a16      	ldr	r2, [pc, #88]	; (b45c4 <_GLOBAL__sub_I_hueOn+0x74>)
   b456c:	6812      	ldr	r2, [r2, #0]
   b456e:	609a      	str	r2, [r3, #8]
   b4570:	4a15      	ldr	r2, [pc, #84]	; (b45c8 <_GLOBAL__sub_I_hueOn+0x78>)
   b4572:	6812      	ldr	r2, [r2, #0]
   b4574:	60da      	str	r2, [r3, #12]
   b4576:	4a15      	ldr	r2, [pc, #84]	; (b45cc <_GLOBAL__sub_I_hueOn+0x7c>)
   b4578:	6812      	ldr	r2, [r2, #0]
   b457a:	611a      	str	r2, [r3, #16]
   b457c:	4a14      	ldr	r2, [pc, #80]	; (b45d0 <_GLOBAL__sub_I_hueOn+0x80>)
   b457e:	6812      	ldr	r2, [r2, #0]
   b4580:	615a      	str	r2, [r3, #20]
   b4582:	4a14      	ldr	r2, [pc, #80]	; (b45d4 <_GLOBAL__sub_I_hueOn+0x84>)
   b4584:	6812      	ldr	r2, [r2, #0]
   b4586:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4588:	f001 f8b6 	bl	b56f8 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b458c:	4812      	ldr	r0, [pc, #72]	; (b45d8 <_GLOBAL__sub_I_hueOn+0x88>)
   b458e:	f001 f8b3 	bl	b56f8 <_ZN9TCPClientC1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b4592:	4b12      	ldr	r3, [pc, #72]	; (b45dc <_GLOBAL__sub_I_hueOn+0x8c>)
   b4594:	2200      	movs	r2, #0
   b4596:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b459a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b459e:	609a      	str	r2, [r3, #8]
   b45a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b45a4:	2002      	movs	r0, #2
   b45a6:	f000 b97b 	b.w	b48a0 <set_system_mode>
   b45aa:	bf00      	nop
   b45ac:	000b618b 	.word	0x000b618b
   b45b0:	2003e6a0 	.word	0x2003e6a0
   b45b4:	2003e65c 	.word	0x2003e65c
   b45b8:	2003e640 	.word	0x2003e640
   b45bc:	2003e5a4 	.word	0x2003e5a4
   b45c0:	2003e624 	.word	0x2003e624
   b45c4:	2003e5ac 	.word	0x2003e5ac
   b45c8:	2003e59c 	.word	0x2003e59c
   b45cc:	2003e598 	.word	0x2003e598
   b45d0:	2003e5a0 	.word	0x2003e5a0
   b45d4:	2003e5a8 	.word	0x2003e5a8
   b45d8:	2003e66c 	.word	0x2003e66c
   b45dc:	2003e660 	.word	0x2003e660

000b45e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <os_mutex_recursive_create+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030248 	.word	0x00030248

000b45f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <HAL_RNG_GetRandomNumber+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	685b      	ldr	r3, [r3, #4]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030218 	.word	0x00030218

000b4600 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030218 	.word	0x00030218

000b4610 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <hal_timer_millis+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030218 	.word	0x00030218

000b4620 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <HAL_Pin_Mode+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	689b      	ldr	r3, [r3, #8]
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	0003022c 	.word	0x0003022c

000b4630 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <HAL_Pulse_In+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	0003022c 	.word	0x0003022c

000b4640 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <hal_i2c_write+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	6a1b      	ldr	r3, [r3, #32]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030228 	.word	0x00030228

000b4650 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <hal_i2c_available+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030228 	.word	0x00030228

000b4660 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <hal_i2c_read+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030228 	.word	0x00030228

000b4670 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <hal_i2c_peek+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	00030228 	.word	0x00030228

000b4680 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <hal_i2c_flush+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	00030228 	.word	0x00030228

000b4690 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <hal_i2c_is_enabled+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	00030228 	.word	0x00030228

000b46a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <hal_i2c_init+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	00030228 	.word	0x00030228

000b46b0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <if_index_to_name+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	695b      	ldr	r3, [r3, #20]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003026c 	.word	0x0003026c

000b46c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <inet_inet_ntop+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	695b      	ldr	r3, [r3, #20]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030264 	.word	0x00030264

000b46d0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <inet_htonl+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6a1b      	ldr	r3, [r3, #32]
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	00030264 	.word	0x00030264

000b46e0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <inet_htons+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	00030264 	.word	0x00030264

000b46f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <netdb_freeaddrinfo+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	689b      	ldr	r3, [r3, #8]
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	00030268 	.word	0x00030268

000b4700 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <netdb_getaddrinfo+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	68db      	ldr	r3, [r3, #12]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	00030268 	.word	0x00030268

000b4710 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <sock_setsockopt+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	699b      	ldr	r3, [r3, #24]
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	00030238 	.word	0x00030238

000b4720 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <sock_close+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	69db      	ldr	r3, [r3, #28]
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	00030238 	.word	0x00030238

000b4730 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <sock_connect+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6a1b      	ldr	r3, [r3, #32]
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030238 	.word	0x00030238

000b4740 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <sock_recv+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030238 	.word	0x00030238

000b4750 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <sock_send+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	00030238 	.word	0x00030238

000b4760 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <sock_socket+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	00030238 	.word	0x00030238

000b4770 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <hal_spi_init+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	69db      	ldr	r3, [r3, #28]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	00030230 	.word	0x00030230

000b4780 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <hal_spi_is_enabled+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	6a1b      	ldr	r3, [r3, #32]
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	00030230 	.word	0x00030230

000b4790 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <hal_usart_write+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	68db      	ldr	r3, [r3, #12]
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	0003023c 	.word	0x0003023c

000b47a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <hal_usart_available+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	691b      	ldr	r3, [r3, #16]
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	0003023c 	.word	0x0003023c

000b47b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <hal_usart_read+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	695b      	ldr	r3, [r3, #20]
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	0003023c 	.word	0x0003023c

000b47c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <hal_usart_peek+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	699b      	ldr	r3, [r3, #24]
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	0003023c 	.word	0x0003023c

000b47d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <hal_usart_flush+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	69db      	ldr	r3, [r3, #28]
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	0003023c 	.word	0x0003023c

000b47e0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <hal_usart_is_enabled+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	6a1b      	ldr	r3, [r3, #32]
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	0003023c 	.word	0x0003023c

000b47f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <hal_usart_available_data_for_write+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	0003023c 	.word	0x0003023c

000b4800 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <hal_usart_init_ex+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	0003023c 	.word	0x0003023c

000b4810 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <HAL_USB_USART_Init+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	681b      	ldr	r3, [r3, #0]
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	0003024c 	.word	0x0003024c

000b4820 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <HAL_USB_USART_Begin+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	685b      	ldr	r3, [r3, #4]
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	0003024c 	.word	0x0003024c

000b4830 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <HAL_USB_USART_Available_Data+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	691b      	ldr	r3, [r3, #16]
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	0003024c 	.word	0x0003024c

000b4840 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	695b      	ldr	r3, [r3, #20]
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	0003024c 	.word	0x0003024c

000b4850 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <HAL_USB_USART_Receive_Data+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	699b      	ldr	r3, [r3, #24]
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	0003024c 	.word	0x0003024c

000b4860 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <HAL_USB_USART_Send_Data+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	69db      	ldr	r3, [r3, #28]
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	0003024c 	.word	0x0003024c

000b4870 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <HAL_USB_USART_Flush_Data+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	6a1b      	ldr	r3, [r3, #32]
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	0003024c 	.word	0x0003024c

000b4880 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <HAL_USB_USART_Is_Connected+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	0003024c 	.word	0x0003024c

000b4890 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <log_message+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030260 	.word	0x00030260

000b48a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <set_system_mode+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	685b      	ldr	r3, [r3, #4]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030220 	.word	0x00030220

000b48b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <system_delay_ms+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	695b      	ldr	r3, [r3, #20]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030220 	.word	0x00030220

000b48c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b03      	ldr	r3, [pc, #12]	; (b48d0 <system_ctrl_set_app_request_handler+0x10>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b48ca:	9301      	str	r3, [sp, #4]
   b48cc:	bd08      	pop	{r3, pc}
   b48ce:	0000      	.short	0x0000
   b48d0:	00030220 	.word	0x00030220

000b48d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b03      	ldr	r3, [pc, #12]	; (b48e4 <system_ctrl_set_result+0x10>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b48de:	9301      	str	r3, [sp, #4]
   b48e0:	bd08      	pop	{r3, pc}
   b48e2:	0000      	.short	0x0000
   b48e4:	00030220 	.word	0x00030220

000b48e8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <spark_process+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	689b      	ldr	r3, [r3, #8]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030244 	.word	0x00030244

000b48f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <spark_set_random_seed_from_cloud_handler+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030244 	.word	0x00030244

000b4908 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <network_connect+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	685b      	ldr	r3, [r3, #4]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030240 	.word	0x00030240

000b4918 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <network_connecting+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	689b      	ldr	r3, [r3, #8]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030240 	.word	0x00030240

000b4928 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <network_disconnect+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	68db      	ldr	r3, [r3, #12]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030240 	.word	0x00030240

000b4938 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <network_ready+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	691b      	ldr	r3, [r3, #16]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030240 	.word	0x00030240

000b4948 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <network_on+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	695b      	ldr	r3, [r3, #20]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030240 	.word	0x00030240

000b4958 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <network_off+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	699b      	ldr	r3, [r3, #24]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030240 	.word	0x00030240

000b4968 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <network_listen+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	69db      	ldr	r3, [r3, #28]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030240 	.word	0x00030240

000b4978 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <network_listening+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	6a1b      	ldr	r3, [r3, #32]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030240 	.word	0x00030240

000b4988 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <network_set_credentials+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030240 	.word	0x00030240

000b4998 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <network_set_listen_timeout+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030240 	.word	0x00030240

000b49a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <network_get_listen_timeout+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030240 	.word	0x00030240

000b49b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <network_is_on+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030240 	.word	0x00030240

000b49c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <network_is_off+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030240 	.word	0x00030240

000b49d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <malloc+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	681b      	ldr	r3, [r3, #0]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	0003021c 	.word	0x0003021c

000b49e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <free+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	685b      	ldr	r3, [r3, #4]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	0003021c 	.word	0x0003021c

000b49f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <realloc+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	689b      	ldr	r3, [r3, #8]
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	0003021c 	.word	0x0003021c

000b4a08 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <vsnprintf+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	0003021c 	.word	0x0003021c

000b4a18 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <__errno+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	0003021c 	.word	0x0003021c

000b4a28 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <__assert_func+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	0003021c 	.word	0x0003021c

000b4a38 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <newlib_impure_ptr_callback+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	0003021c 	.word	0x0003021c

000b4a48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4a48:	2100      	movs	r1, #0
   b4a4a:	f7ff bf31 	b.w	b48b0 <system_delay_ms>
	...

000b4a50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4a50:	4802      	ldr	r0, [pc, #8]	; (b4a5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4a52:	2300      	movs	r3, #0
   b4a54:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4a56:	f7ff bdc3 	b.w	b45e0 <os_mutex_recursive_create>
   b4a5a:	bf00      	nop
   b4a5c:	2003e6b8 	.word	0x2003e6b8

000b4a60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4a60:	2200      	movs	r2, #0
   b4a62:	6840      	ldr	r0, [r0, #4]
   b4a64:	4611      	mov	r1, r2
   b4a66:	f7ff bf87 	b.w	b4978 <network_listening>

000b4a6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a6a:	2200      	movs	r2, #0
   b4a6c:	6840      	ldr	r0, [r0, #4]
   b4a6e:	4611      	mov	r1, r2
   b4a70:	f7ff bf9a 	b.w	b49a8 <network_get_listen_timeout>

000b4a74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a74:	6840      	ldr	r0, [r0, #4]
   b4a76:	2200      	movs	r2, #0
   b4a78:	f7ff bf8e 	b.w	b4998 <network_set_listen_timeout>

000b4a7c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a7c:	6840      	ldr	r0, [r0, #4]
   b4a7e:	2200      	movs	r2, #0
   b4a80:	f081 0101 	eor.w	r1, r1, #1
   b4a84:	f7ff bf70 	b.w	b4968 <network_listen>

000b4a88 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a88:	2300      	movs	r3, #0
   b4a8a:	6840      	ldr	r0, [r0, #4]
   b4a8c:	461a      	mov	r2, r3
   b4a8e:	4619      	mov	r1, r3
   b4a90:	f7ff bf62 	b.w	b4958 <network_off>

000b4a94 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a94:	2300      	movs	r3, #0
   b4a96:	6840      	ldr	r0, [r0, #4]
   b4a98:	461a      	mov	r2, r3
   b4a9a:	4619      	mov	r1, r3
   b4a9c:	f7ff bf54 	b.w	b4948 <network_on>

000b4aa0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4aa0:	2200      	movs	r2, #0
   b4aa2:	6840      	ldr	r0, [r0, #4]
   b4aa4:	4611      	mov	r1, r2
   b4aa6:	f7ff bf47 	b.w	b4938 <network_ready>

000b4aaa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4aaa:	2200      	movs	r2, #0
   b4aac:	6840      	ldr	r0, [r0, #4]
   b4aae:	4611      	mov	r1, r2
   b4ab0:	f7ff bf32 	b.w	b4918 <network_connecting>

000b4ab4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ab4:	6840      	ldr	r0, [r0, #4]
   b4ab6:	2200      	movs	r2, #0
   b4ab8:	2102      	movs	r1, #2
   b4aba:	f7ff bf35 	b.w	b4928 <network_disconnect>

000b4abe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4abe:	2300      	movs	r3, #0
   b4ac0:	6840      	ldr	r0, [r0, #4]
   b4ac2:	461a      	mov	r2, r3
   b4ac4:	f7ff bf20 	b.w	b4908 <network_connect>

000b4ac8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ac8:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4aca:	2203      	movs	r2, #3
   b4acc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4ace:	4a02      	ldr	r2, [pc, #8]	; (b4ad8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4ad0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4ad2:	4770      	bx	lr
   b4ad4:	2003e6bc 	.word	0x2003e6bc
   b4ad8:	000b61dc 	.word	0x000b61dc

000b4adc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4adc:	4770      	bx	lr

000b4ade <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ae0:	4606      	mov	r6, r0
   b4ae2:	4615      	mov	r5, r2
   b4ae4:	460c      	mov	r4, r1
   b4ae6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4ae8:	42bc      	cmp	r4, r7
   b4aea:	d006      	beq.n	b4afa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4aec:	6833      	ldr	r3, [r6, #0]
   b4aee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4af2:	689b      	ldr	r3, [r3, #8]
   b4af4:	4630      	mov	r0, r6
   b4af6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4af8:	e7f6      	b.n	b4ae8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4afa:	4628      	mov	r0, r5
   b4afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4afe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4afe:	7c00      	ldrb	r0, [r0, #16]
   b4b00:	2200      	movs	r2, #0
   b4b02:	f7ff bd9d 	b.w	b4640 <hal_i2c_write>

000b4b06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4b06:	7c00      	ldrb	r0, [r0, #16]
   b4b08:	2100      	movs	r1, #0
   b4b0a:	f7ff bda1 	b.w	b4650 <hal_i2c_available>

000b4b0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4b0e:	7c00      	ldrb	r0, [r0, #16]
   b4b10:	2100      	movs	r1, #0
   b4b12:	f7ff bda5 	b.w	b4660 <hal_i2c_read>

000b4b16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4b16:	7c00      	ldrb	r0, [r0, #16]
   b4b18:	2100      	movs	r1, #0
   b4b1a:	f7ff bda9 	b.w	b4670 <hal_i2c_peek>

000b4b1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4b1e:	7c00      	ldrb	r0, [r0, #16]
   b4b20:	2100      	movs	r1, #0
   b4b22:	f7ff bdad 	b.w	b4680 <hal_i2c_flush>

000b4b26 <_ZN7TwoWireD0Ev>:
   b4b26:	b510      	push	{r4, lr}
   b4b28:	2114      	movs	r1, #20
   b4b2a:	4604      	mov	r4, r0
   b4b2c:	f7ff fab5 	bl	b409a <_ZdlPvj>
   b4b30:	4620      	mov	r0, r4
   b4b32:	bd10      	pop	{r4, pc}

000b4b34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4b34:	b538      	push	{r3, r4, r5, lr}
   b4b36:	4604      	mov	r4, r0
   b4b38:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b3e:	2200      	movs	r2, #0
   b4b40:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4b44:	4b09      	ldr	r3, [pc, #36]	; (b4b6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4b46:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4b48:	4608      	mov	r0, r1
   b4b4a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4b4c:	4629      	mov	r1, r5
   b4b4e:	f7ff fda7 	bl	b46a0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4b52:	30bf      	adds	r0, #191	; 0xbf
   b4b54:	d108      	bne.n	b4b68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4b56:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4b58:	07db      	lsls	r3, r3, #31
   b4b5a:	d505      	bpl.n	b4b68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4b5c:	6868      	ldr	r0, [r5, #4]
   b4b5e:	f7ff ff43 	bl	b49e8 <free>
    free(conf.tx_buffer);
   b4b62:	68e8      	ldr	r0, [r5, #12]
   b4b64:	f7ff ff40 	bl	b49e8 <free>
}
   b4b68:	4620      	mov	r0, r4
   b4b6a:	bd38      	pop	{r3, r4, r5, pc}
   b4b6c:	000b6218 	.word	0x000b6218

000b4b70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4b70:	4770      	bx	lr

000b4b72 <_ZN9IPAddressD0Ev>:
   b4b72:	b510      	push	{r4, lr}
   b4b74:	2118      	movs	r1, #24
   b4b76:	4604      	mov	r4, r0
   b4b78:	f7ff fa8f 	bl	b409a <_ZdlPvj>
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	bd10      	pop	{r4, pc}

000b4b80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4b80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4b82:	7d03      	ldrb	r3, [r0, #20]
   b4b84:	2b06      	cmp	r3, #6
{
   b4b86:	b08d      	sub	sp, #52	; 0x34
   b4b88:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b8a:	f100 0704 	add.w	r7, r0, #4
   b4b8e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4b92:	d012      	beq.n	b4bba <_ZNK9IPAddress7printToER5Print+0x3a>
   b4b94:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4b9c:	220a      	movs	r2, #10
   b4b9e:	4630      	mov	r0, r6
   b4ba0:	f000 f973 	bl	b4e8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4ba4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4ba6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ba8:	d019      	beq.n	b4bde <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4baa:	2c00      	cmp	r4, #0
   b4bac:	d0f4      	beq.n	b4b98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4bae:	212e      	movs	r1, #46	; 0x2e
   b4bb0:	4630      	mov	r0, r6
   b4bb2:	f000 f951 	bl	b4e58 <_ZN5Print5printEc>
   b4bb6:	4404      	add	r4, r0
   b4bb8:	e7ee      	b.n	b4b98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4bba:	232f      	movs	r3, #47	; 0x2f
   b4bbc:	466a      	mov	r2, sp
   b4bbe:	4639      	mov	r1, r7
   b4bc0:	200a      	movs	r0, #10
		buf[0] = 0;
   b4bc2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4bc6:	f7ff fd7b 	bl	b46c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4bca:	4668      	mov	r0, sp
   b4bcc:	f001 f9f2 	bl	b5fb4 <strlen>
   b4bd0:	6833      	ldr	r3, [r6, #0]
   b4bd2:	4602      	mov	r2, r0
   b4bd4:	68db      	ldr	r3, [r3, #12]
   b4bd6:	4669      	mov	r1, sp
   b4bd8:	4630      	mov	r0, r6
   b4bda:	4798      	blx	r3
   b4bdc:	4604      	mov	r4, r0
    }
    return n;
}
   b4bde:	4620      	mov	r0, r4
   b4be0:	b00d      	add	sp, #52	; 0x34
   b4be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4be4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4be4:	b510      	push	{r4, lr}
   b4be6:	4b05      	ldr	r3, [pc, #20]	; (b4bfc <_ZN9IPAddressC1Ev+0x18>)
   b4be8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4bea:	2211      	movs	r2, #17
   b4bec:	f840 3b04 	str.w	r3, [r0], #4
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	f001 f997 	bl	b5f24 <memset>
}
   b4bf6:	4620      	mov	r0, r4
   b4bf8:	bd10      	pop	{r4, pc}
   b4bfa:	bf00      	nop
   b4bfc:	000b6240 	.word	0x000b6240

000b4c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4c00:	4603      	mov	r3, r0
   b4c02:	4a07      	ldr	r2, [pc, #28]	; (b4c20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4c04:	b510      	push	{r4, lr}
   b4c06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4c0a:	f101 0210 	add.w	r2, r1, #16
   b4c0e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4c12:	f843 4b04 	str.w	r4, [r3], #4
   b4c16:	4291      	cmp	r1, r2
   b4c18:	d1f9      	bne.n	b4c0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4c1a:	780a      	ldrb	r2, [r1, #0]
   b4c1c:	701a      	strb	r2, [r3, #0]
}
   b4c1e:	bd10      	pop	{r4, pc}
   b4c20:	000b6240 	.word	0x000b6240

000b4c24 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4c24:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4c26:	2b04      	cmp	r3, #4
   b4c28:	d104      	bne.n	b4c34 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4c2a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4c2c:	3800      	subs	r0, #0
   b4c2e:	bf18      	it	ne
   b4c30:	2001      	movne	r0, #1
   b4c32:	4770      	bx	lr
    } else if (version() == 6) {
   b4c34:	2b06      	cmp	r3, #6
   b4c36:	d107      	bne.n	b4c48 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4c38:	6843      	ldr	r3, [r0, #4]
   b4c3a:	b93b      	cbnz	r3, b4c4c <_ZNK9IPAddresscvbEv+0x28>
   b4c3c:	6883      	ldr	r3, [r0, #8]
   b4c3e:	b92b      	cbnz	r3, b4c4c <_ZNK9IPAddresscvbEv+0x28>
   b4c40:	68c3      	ldr	r3, [r0, #12]
   b4c42:	b91b      	cbnz	r3, b4c4c <_ZNK9IPAddresscvbEv+0x28>
   b4c44:	6900      	ldr	r0, [r0, #16]
   b4c46:	e7f1      	b.n	b4c2c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4c48:	2000      	movs	r0, #0
   b4c4a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4c4c:	2001      	movs	r0, #1
}
   b4c4e:	4770      	bx	lr

000b4c50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4c50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4c52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4c56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4c5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4c5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4c62:	2304      	movs	r3, #4
   b4c64:	6041      	str	r1, [r0, #4]
   b4c66:	7503      	strb	r3, [r0, #20]
}
   b4c68:	bd10      	pop	{r4, pc}
	...

000b4c6c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4c6c:	b507      	push	{r0, r1, r2, lr}
   b4c6e:	4b06      	ldr	r3, [pc, #24]	; (b4c88 <_ZN9IPAddressC1EPKh+0x1c>)
   b4c70:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4c72:	78cb      	ldrb	r3, [r1, #3]
   b4c74:	9300      	str	r3, [sp, #0]
   b4c76:	788b      	ldrb	r3, [r1, #2]
   b4c78:	784a      	ldrb	r2, [r1, #1]
   b4c7a:	7809      	ldrb	r1, [r1, #0]
   b4c7c:	f7ff ffe8 	bl	b4c50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4c80:	b003      	add	sp, #12
   b4c82:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c86:	bf00      	nop
   b4c88:	000b6240 	.word	0x000b6240

000b4c8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4c8c:	4b01      	ldr	r3, [pc, #4]	; (b4c94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4c8e:	4a02      	ldr	r2, [pc, #8]	; (b4c98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4c90:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4c92:	4770      	bx	lr
   b4c94:	2003e6c4 	.word	0x2003e6c4
   b4c98:	000b624c 	.word	0x000b624c

000b4c9c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4c9c:	2300      	movs	r3, #0
   b4c9e:	6840      	ldr	r0, [r0, #4]
   b4ca0:	461a      	mov	r2, r3
   b4ca2:	f7ff be31 	b.w	b4908 <network_connect>

000b4ca6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4ca6:	6840      	ldr	r0, [r0, #4]
   b4ca8:	2200      	movs	r2, #0
   b4caa:	2102      	movs	r1, #2
   b4cac:	f7ff be3c 	b.w	b4928 <network_disconnect>

000b4cb0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4cb0:	2200      	movs	r2, #0
   b4cb2:	6840      	ldr	r0, [r0, #4]
   b4cb4:	4611      	mov	r1, r2
   b4cb6:	f7ff be2f 	b.w	b4918 <network_connecting>

000b4cba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4cba:	2200      	movs	r2, #0
   b4cbc:	6840      	ldr	r0, [r0, #4]
   b4cbe:	4611      	mov	r1, r2
   b4cc0:	f7ff be3a 	b.w	b4938 <network_ready>

000b4cc4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4cc4:	2300      	movs	r3, #0
   b4cc6:	6840      	ldr	r0, [r0, #4]
   b4cc8:	461a      	mov	r2, r3
   b4cca:	4619      	mov	r1, r3
   b4ccc:	f7ff be3c 	b.w	b4948 <network_on>

000b4cd0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4cd0:	2300      	movs	r3, #0
   b4cd2:	6840      	ldr	r0, [r0, #4]
   b4cd4:	461a      	mov	r2, r3
   b4cd6:	4619      	mov	r1, r3
   b4cd8:	f7ff be3e 	b.w	b4958 <network_off>

000b4cdc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4cdc:	6840      	ldr	r0, [r0, #4]
   b4cde:	2100      	movs	r1, #0
   b4ce0:	f7ff be6a 	b.w	b49b8 <network_is_on>

000b4ce4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4ce4:	6840      	ldr	r0, [r0, #4]
   b4ce6:	2100      	movs	r1, #0
   b4ce8:	f7ff be6e 	b.w	b49c8 <network_is_off>

000b4cec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4cec:	6840      	ldr	r0, [r0, #4]
   b4cee:	2200      	movs	r2, #0
   b4cf0:	f081 0101 	eor.w	r1, r1, #1
   b4cf4:	f7ff be38 	b.w	b4968 <network_listen>

000b4cf8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4cf8:	6840      	ldr	r0, [r0, #4]
   b4cfa:	2200      	movs	r2, #0
   b4cfc:	f7ff be4c 	b.w	b4998 <network_set_listen_timeout>

000b4d00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4d00:	2200      	movs	r2, #0
   b4d02:	6840      	ldr	r0, [r0, #4]
   b4d04:	4611      	mov	r1, r2
   b4d06:	f7ff be4f 	b.w	b49a8 <network_get_listen_timeout>

000b4d0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4d0a:	2200      	movs	r2, #0
   b4d0c:	6840      	ldr	r0, [r0, #4]
   b4d0e:	4611      	mov	r1, r2
   b4d10:	f7ff be32 	b.w	b4978 <network_listening>

000b4d14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4d18:	b095      	sub	sp, #84	; 0x54
   b4d1a:	4614      	mov	r4, r2
   b4d1c:	460d      	mov	r5, r1
   b4d1e:	4607      	mov	r7, r0
    IPAddress addr;
   b4d20:	f7ff ff60 	bl	b4be4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4d24:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4d26:	221c      	movs	r2, #28
   b4d28:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4d2a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4d2c:	f001 f8fa 	bl	b5f24 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4d30:	2340      	movs	r3, #64	; 0x40
   b4d32:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4d34:	4620      	mov	r0, r4
   b4d36:	466b      	mov	r3, sp
   b4d38:	aa0c      	add	r2, sp, #48	; 0x30
   b4d3a:	2100      	movs	r1, #0
   b4d3c:	f7ff fce0 	bl	b4700 <netdb_getaddrinfo>
    if (!r) {
   b4d40:	4604      	mov	r4, r0
   b4d42:	2800      	cmp	r0, #0
   b4d44:	d14b      	bne.n	b4dde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4d46:	4602      	mov	r2, r0
   b4d48:	2101      	movs	r1, #1
   b4d4a:	6868      	ldr	r0, [r5, #4]
   b4d4c:	f7ff fdf4 	bl	b4938 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4d50:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4d52:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4d54:	4622      	mov	r2, r4
   b4d56:	6868      	ldr	r0, [r5, #4]
   b4d58:	f7ff fdee 	bl	b4938 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4d5c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4d5e:	4681      	mov	r9, r0
        bool ok = false;
   b4d60:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4d62:	2e00      	cmp	r6, #0
   b4d64:	d03b      	beq.n	b4dde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4d66:	2900      	cmp	r1, #0
   b4d68:	d139      	bne.n	b4dde <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4d6a:	6873      	ldr	r3, [r6, #4]
   b4d6c:	2b02      	cmp	r3, #2
   b4d6e:	d003      	beq.n	b4d78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4d70:	2b0a      	cmp	r3, #10
   b4d72:	d011      	beq.n	b4d98 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4d74:	69f6      	ldr	r6, [r6, #28]
   b4d76:	e7f4      	b.n	b4d62 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4d78:	f1b8 0f00 	cmp.w	r8, #0
   b4d7c:	d0fa      	beq.n	b4d74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4d7e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4d80:	a806      	add	r0, sp, #24
   b4d82:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4d84:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4d86:	f7ff ff71 	bl	b4c6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d8c:	1d3c      	adds	r4, r7, #4
   b4d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d90:	682b      	ldr	r3, [r5, #0]
   b4d92:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4d94:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4d96:	e7ed      	b.n	b4d74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4d98:	f1b9 0f00 	cmp.w	r9, #0
   b4d9c:	d0ea      	beq.n	b4d74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4d9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4da0:	2210      	movs	r2, #16
   b4da2:	a801      	add	r0, sp, #4
   b4da4:	f001 f8be 	bl	b5f24 <memset>
                    a.v = 6;
   b4da8:	2306      	movs	r3, #6
   b4daa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4dae:	ad01      	add	r5, sp, #4
   b4db0:	f104 0308 	add.w	r3, r4, #8
   b4db4:	3418      	adds	r4, #24
   b4db6:	6818      	ldr	r0, [r3, #0]
   b4db8:	6859      	ldr	r1, [r3, #4]
   b4dba:	462a      	mov	r2, r5
   b4dbc:	c203      	stmia	r2!, {r0, r1}
   b4dbe:	3308      	adds	r3, #8
   b4dc0:	42a3      	cmp	r3, r4
   b4dc2:	4615      	mov	r5, r2
   b4dc4:	d1f7      	bne.n	b4db6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4dc6:	a901      	add	r1, sp, #4
   b4dc8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4dca:	ad07      	add	r5, sp, #28
   b4dcc:	f7ff ff18 	bl	b4c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4dd2:	1d3c      	adds	r4, r7, #4
   b4dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4dd6:	682b      	ldr	r3, [r5, #0]
   b4dd8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4dda:	4649      	mov	r1, r9
   b4ddc:	e7ca      	b.n	b4d74 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4dde:	9800      	ldr	r0, [sp, #0]
   b4de0:	f7ff fc86 	bl	b46f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4de4:	4638      	mov	r0, r7
   b4de6:	b015      	add	sp, #84	; 0x54
   b4de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4dec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4dec:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4dee:	4a03      	ldr	r2, [pc, #12]	; (b4dfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4df0:	601a      	str	r2, [r3, #0]
   b4df2:	2200      	movs	r2, #0
   b4df4:	605a      	str	r2, [r3, #4]

} // spark
   b4df6:	4770      	bx	lr
   b4df8:	2003e6c8 	.word	0x2003e6c8
   b4dfc:	000b6258 	.word	0x000b6258

000b4e00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e02:	4606      	mov	r6, r0
   b4e04:	460d      	mov	r5, r1
  size_t n = 0;
   b4e06:	188f      	adds	r7, r1, r2
   b4e08:	2400      	movs	r4, #0
  while (size--) {
   b4e0a:	42bd      	cmp	r5, r7
   b4e0c:	d00c      	beq.n	b4e28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4e0e:	6833      	ldr	r3, [r6, #0]
   b4e10:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e14:	689b      	ldr	r3, [r3, #8]
   b4e16:	4630      	mov	r0, r6
   b4e18:	4798      	blx	r3
     if (chunk>=0)
   b4e1a:	1e03      	subs	r3, r0, #0
   b4e1c:	db01      	blt.n	b4e22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e1e:	441c      	add	r4, r3
  while (size--) {
   b4e20:	e7f3      	b.n	b4e0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e22:	2c00      	cmp	r4, #0
   b4e24:	bf08      	it	eq
   b4e26:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e28:	4620      	mov	r0, r4
   b4e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e2c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4e2c:	b513      	push	{r0, r1, r4, lr}
   b4e2e:	4604      	mov	r4, r0
    }
   b4e30:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4e32:	b159      	cbz	r1, b4e4c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4e34:	9101      	str	r1, [sp, #4]
   b4e36:	f001 f8bd 	bl	b5fb4 <strlen>
   b4e3a:	6823      	ldr	r3, [r4, #0]
   b4e3c:	9901      	ldr	r1, [sp, #4]
   b4e3e:	68db      	ldr	r3, [r3, #12]
   b4e40:	4602      	mov	r2, r0
   b4e42:	4620      	mov	r0, r4
    }
   b4e44:	b002      	add	sp, #8
   b4e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4e4a:	4718      	bx	r3
    }
   b4e4c:	b002      	add	sp, #8
   b4e4e:	bd10      	pop	{r4, pc}

000b4e50 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4e50:	b508      	push	{r3, lr}
  return write(str);
   b4e52:	f7ff ffeb 	bl	b4e2c <_ZN5Print5writeEPKc>
}
   b4e56:	bd08      	pop	{r3, pc}

000b4e58 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b4e58:	6803      	ldr	r3, [r0, #0]
   b4e5a:	689b      	ldr	r3, [r3, #8]
   b4e5c:	4718      	bx	r3

000b4e5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4e5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4e60:	210d      	movs	r1, #13
{
   b4e62:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4e64:	f7ff fff8 	bl	b4e58 <_ZN5Print5printEc>
  n += print('\n');
   b4e68:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4e6a:	4604      	mov	r4, r0
  n += print('\n');
   b4e6c:	4628      	mov	r0, r5
   b4e6e:	f7ff fff3 	bl	b4e58 <_ZN5Print5printEc>
  return n;
}
   b4e72:	4420      	add	r0, r4
   b4e74:	bd38      	pop	{r3, r4, r5, pc}

000b4e76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4e76:	b538      	push	{r3, r4, r5, lr}
   b4e78:	4605      	mov	r5, r0
  return write(str);
   b4e7a:	f7ff ffd7 	bl	b4e2c <_ZN5Print5writeEPKc>
   b4e7e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4e80:	4628      	mov	r0, r5
   b4e82:	f7ff ffec 	bl	b4e5e <_ZN5Print7printlnEv>
  return n;
}
   b4e86:	4420      	add	r0, r4
   b4e88:	bd38      	pop	{r3, r4, r5, pc}

000b4e8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e8a:	b530      	push	{r4, r5, lr}
   b4e8c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e8e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e90:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e96:	bf98      	it	ls
   b4e98:	220a      	movls	r2, #10
   b4e9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e9c:	460d      	mov	r5, r1
   b4e9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4ea2:	fb01 5312 	mls	r3, r1, r2, r5
   b4ea6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4eaa:	2b09      	cmp	r3, #9
   b4eac:	bf94      	ite	ls
   b4eae:	3330      	addls	r3, #48	; 0x30
   b4eb0:	3337      	addhi	r3, #55	; 0x37
   b4eb2:	b2db      	uxtb	r3, r3
  } while(n);
   b4eb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4eb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4eba:	d9ef      	bls.n	b4e9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ebc:	4621      	mov	r1, r4
   b4ebe:	f7ff ffb5 	bl	b4e2c <_ZN5Print5writeEPKc>
}
   b4ec2:	b00b      	add	sp, #44	; 0x2c
   b4ec4:	bd30      	pop	{r4, r5, pc}

000b4ec6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4eca:	b086      	sub	sp, #24
   b4ecc:	af00      	add	r7, sp, #0
   b4ece:	4605      	mov	r5, r0
   b4ed0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4ed2:	1d38      	adds	r0, r7, #4
   b4ed4:	2114      	movs	r1, #20
{
   b4ed6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4ed8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4eda:	f7ff fd95 	bl	b4a08 <vsnprintf>

    if (n<bufsize)
   b4ede:	2813      	cmp	r0, #19
   b4ee0:	d80e      	bhi.n	b4f00 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4ee2:	1d39      	adds	r1, r7, #4
   b4ee4:	4628      	mov	r0, r5
   b4ee6:	f7ff ffa1 	bl	b4e2c <_ZN5Print5writeEPKc>
   b4eea:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4eec:	b11e      	cbz	r6, b4ef6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4eee:	4628      	mov	r0, r5
   b4ef0:	f7ff ffb5 	bl	b4e5e <_ZN5Print7printlnEv>
   b4ef4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	3718      	adds	r7, #24
   b4efa:	46bd      	mov	sp, r7
   b4efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4f00:	f100 0308 	add.w	r3, r0, #8
   b4f04:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4f08:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4f0a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4f0e:	4622      	mov	r2, r4
   b4f10:	1c41      	adds	r1, r0, #1
   b4f12:	683b      	ldr	r3, [r7, #0]
   b4f14:	4668      	mov	r0, sp
   b4f16:	f7ff fd77 	bl	b4a08 <vsnprintf>
  return write(str);
   b4f1a:	4669      	mov	r1, sp
   b4f1c:	4628      	mov	r0, r5
   b4f1e:	f7ff ff85 	bl	b4e2c <_ZN5Print5writeEPKc>
   b4f22:	4604      	mov	r4, r0
   b4f24:	46c5      	mov	sp, r8
   b4f26:	e7e1      	b.n	b4eec <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4f28 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4f28:	4b01      	ldr	r3, [pc, #4]	; (b4f30 <_GLOBAL__sub_I_RGB+0x8>)
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f2e:	4770      	bx	lr
   b4f30:	2003e6d0 	.word	0x2003e6d0

000b4f34 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4f34:	b510      	push	{r4, lr}
   b4f36:	4604      	mov	r4, r0
   b4f38:	4608      	mov	r0, r1
{
    _spi = spi;
   b4f3a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4f3c:	f7ff fc18 	bl	b4770 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4f40:	2300      	movs	r3, #0
   b4f42:	6063      	str	r3, [r4, #4]
}
   b4f44:	4620      	mov	r0, r4
   b4f46:	bd10      	pop	{r4, pc}

000b4f48 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4f48:	b510      	push	{r4, lr}
   b4f4a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4f4c:	f7ff fb58 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4f50:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4f52:	6823      	ldr	r3, [r4, #0]
   b4f54:	4620      	mov	r0, r4
   b4f56:	695b      	ldr	r3, [r3, #20]
   b4f58:	4798      	blx	r3
    if (c >= 0) return c;
   b4f5a:	2800      	cmp	r0, #0
   b4f5c:	da08      	bge.n	b4f70 <_ZN6Stream9timedReadEv+0x28>
   b4f5e:	f7ff fb4f 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4f62:	68e3      	ldr	r3, [r4, #12]
   b4f64:	1ac0      	subs	r0, r0, r3
   b4f66:	68a3      	ldr	r3, [r4, #8]
   b4f68:	4298      	cmp	r0, r3
   b4f6a:	d3f2      	bcc.n	b4f52 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b4f70:	bd10      	pop	{r4, pc}
	...

000b4f74 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b4f74:	b538      	push	{r3, r4, r5, lr}
   b4f76:	460d      	mov	r5, r1
  String ret;
   b4f78:	4907      	ldr	r1, [pc, #28]	; (b4f98 <_ZN6Stream10readStringEv+0x24>)
{
   b4f7a:	4604      	mov	r4, r0
  String ret;
   b4f7c:	f000 f859 	bl	b5032 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4f80:	4628      	mov	r0, r5
   b4f82:	f7ff ffe1 	bl	b4f48 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b4f86:	2800      	cmp	r0, #0
   b4f88:	db04      	blt.n	b4f94 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4f8a:	b2c1      	uxtb	r1, r0
   b4f8c:	4620      	mov	r0, r4
   b4f8e:	f000 f8ba 	bl	b5106 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4f92:	e7f5      	b.n	b4f80 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b4f94:	4620      	mov	r0, r4
   b4f96:	bd38      	pop	{r3, r4, r5, pc}
   b4f98:	000b618b 	.word	0x000b618b

000b4f9c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4f9c:	b510      	push	{r4, lr}
   b4f9e:	4604      	mov	r4, r0
{
	free(buffer);
   b4fa0:	6800      	ldr	r0, [r0, #0]
   b4fa2:	f7ff fd21 	bl	b49e8 <free>
}
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	bd10      	pop	{r4, pc}

000b4faa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4faa:	b510      	push	{r4, lr}
   b4fac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4fae:	6800      	ldr	r0, [r0, #0]
   b4fb0:	b108      	cbz	r0, b4fb6 <_ZN6String10invalidateEv+0xc>
   b4fb2:	f7ff fd19 	bl	b49e8 <free>
	buffer = NULL;
   b4fb6:	2300      	movs	r3, #0
	capacity = len = 0;
   b4fb8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4fbc:	6023      	str	r3, [r4, #0]
}
   b4fbe:	bd10      	pop	{r4, pc}

000b4fc0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4fc0:	b538      	push	{r3, r4, r5, lr}
   b4fc2:	4604      	mov	r4, r0
   b4fc4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4fc6:	6800      	ldr	r0, [r0, #0]
   b4fc8:	3101      	adds	r1, #1
   b4fca:	f7ff fd15 	bl	b49f8 <realloc>
	if (newbuffer) {
   b4fce:	b110      	cbz	r0, b4fd6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4fd0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4fd4:	2001      	movs	r0, #1
	}
	return 0;
}
   b4fd6:	bd38      	pop	{r3, r4, r5, pc}

000b4fd8 <_ZN6String7reserveEj>:
{
   b4fd8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4fda:	6803      	ldr	r3, [r0, #0]
{
   b4fdc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4fde:	b123      	cbz	r3, b4fea <_ZN6String7reserveEj+0x12>
   b4fe0:	6843      	ldr	r3, [r0, #4]
   b4fe2:	428b      	cmp	r3, r1
   b4fe4:	d301      	bcc.n	b4fea <_ZN6String7reserveEj+0x12>
   b4fe6:	2001      	movs	r0, #1
}
   b4fe8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4fea:	4620      	mov	r0, r4
   b4fec:	f7ff ffe8 	bl	b4fc0 <_ZN6String12changeBufferEj>
   b4ff0:	2800      	cmp	r0, #0
   b4ff2:	d0f9      	beq.n	b4fe8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4ff4:	68a3      	ldr	r3, [r4, #8]
   b4ff6:	2b00      	cmp	r3, #0
   b4ff8:	d1f5      	bne.n	b4fe6 <_ZN6String7reserveEj+0xe>
   b4ffa:	6822      	ldr	r2, [r4, #0]
   b4ffc:	7013      	strb	r3, [r2, #0]
   b4ffe:	e7f2      	b.n	b4fe6 <_ZN6String7reserveEj+0xe>

000b5000 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5000:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5002:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5004:	4611      	mov	r1, r2
   b5006:	9201      	str	r2, [sp, #4]
{
   b5008:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b500a:	f7ff ffe5 	bl	b4fd8 <_ZN6String7reserveEj>
   b500e:	9a01      	ldr	r2, [sp, #4]
   b5010:	b928      	cbnz	r0, b501e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5012:	4620      	mov	r0, r4
   b5014:	f7ff ffc9 	bl	b4faa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5018:	4620      	mov	r0, r4
   b501a:	b003      	add	sp, #12
   b501c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b501e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5020:	4629      	mov	r1, r5
   b5022:	6820      	ldr	r0, [r4, #0]
   b5024:	f000 ff70 	bl	b5f08 <memcpy>
	buffer[len] = 0;
   b5028:	6822      	ldr	r2, [r4, #0]
   b502a:	68a3      	ldr	r3, [r4, #8]
   b502c:	2100      	movs	r1, #0
   b502e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5030:	e7f2      	b.n	b5018 <_ZN6String4copyEPKcj+0x18>

000b5032 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5032:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5034:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5036:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b503a:	4604      	mov	r4, r0
	len = 0;
   b503c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b503e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5040:	b141      	cbz	r1, b5054 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5042:	4608      	mov	r0, r1
   b5044:	9101      	str	r1, [sp, #4]
   b5046:	f000 ffb5 	bl	b5fb4 <strlen>
   b504a:	9901      	ldr	r1, [sp, #4]
   b504c:	4602      	mov	r2, r0
   b504e:	4620      	mov	r0, r4
   b5050:	f7ff ffd6 	bl	b5000 <_ZN6String4copyEPKcj>
}
   b5054:	4620      	mov	r0, r4
   b5056:	b002      	add	sp, #8
   b5058:	bd10      	pop	{r4, pc}

000b505a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b505a:	4288      	cmp	r0, r1
{
   b505c:	b510      	push	{r4, lr}
   b505e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5060:	d005      	beq.n	b506e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5062:	680b      	ldr	r3, [r1, #0]
   b5064:	b12b      	cbz	r3, b5072 <_ZN6StringaSERKS_+0x18>
   b5066:	688a      	ldr	r2, [r1, #8]
   b5068:	4619      	mov	r1, r3
   b506a:	f7ff ffc9 	bl	b5000 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b506e:	4620      	mov	r0, r4
   b5070:	bd10      	pop	{r4, pc}
	else invalidate();
   b5072:	f7ff ff9a 	bl	b4faa <_ZN6String10invalidateEv>
   b5076:	e7fa      	b.n	b506e <_ZN6StringaSERKS_+0x14>

000b5078 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5078:	b510      	push	{r4, lr}
	buffer = NULL;
   b507a:	2300      	movs	r3, #0
String::String(const String &value)
   b507c:	4604      	mov	r4, r0
	capacity = 0;
   b507e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5082:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5084:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5086:	f7ff ffe8 	bl	b505a <_ZN6StringaSERKS_>
}
   b508a:	4620      	mov	r0, r4
   b508c:	bd10      	pop	{r4, pc}

000b508e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b508e:	b513      	push	{r0, r1, r4, lr}
   b5090:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5092:	b159      	cbz	r1, b50ac <_ZN6StringaSEPKc+0x1e>
   b5094:	4608      	mov	r0, r1
   b5096:	9101      	str	r1, [sp, #4]
   b5098:	f000 ff8c 	bl	b5fb4 <strlen>
   b509c:	9901      	ldr	r1, [sp, #4]
   b509e:	4602      	mov	r2, r0
   b50a0:	4620      	mov	r0, r4
   b50a2:	f7ff ffad 	bl	b5000 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b50a6:	4620      	mov	r0, r4
   b50a8:	b002      	add	sp, #8
   b50aa:	bd10      	pop	{r4, pc}
	else invalidate();
   b50ac:	f7ff ff7d 	bl	b4faa <_ZN6String10invalidateEv>
   b50b0:	e7f9      	b.n	b50a6 <_ZN6StringaSEPKc+0x18>

000b50b2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b50b2:	b510      	push	{r4, lr}
   b50b4:	4604      	mov	r4, r0
   b50b6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b50b8:	2300      	movs	r3, #0
	capacity = 0;
   b50ba:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b50be:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b50c0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b50c2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b50c4:	a901      	add	r1, sp, #4
   b50c6:	f000 fc83 	bl	b59d0 <itoa>
	*this = buf;
   b50ca:	a901      	add	r1, sp, #4
   b50cc:	4620      	mov	r0, r4
   b50ce:	f7ff ffde 	bl	b508e <_ZN6StringaSEPKc>
}
   b50d2:	4620      	mov	r0, r4
   b50d4:	b00a      	add	sp, #40	; 0x28
   b50d6:	bd10      	pop	{r4, pc}

000b50d8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b50d8:	b570      	push	{r4, r5, r6, lr}
   b50da:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b50dc:	460e      	mov	r6, r1
   b50de:	b909      	cbnz	r1, b50e4 <_ZN6String6concatEPKcj+0xc>
   b50e0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b50e2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b50e4:	b16a      	cbz	r2, b5102 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b50e6:	6884      	ldr	r4, [r0, #8]
   b50e8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b50ea:	4621      	mov	r1, r4
   b50ec:	f7ff ff74 	bl	b4fd8 <_ZN6String7reserveEj>
   b50f0:	2800      	cmp	r0, #0
   b50f2:	d0f5      	beq.n	b50e0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b50f4:	6828      	ldr	r0, [r5, #0]
   b50f6:	68ab      	ldr	r3, [r5, #8]
   b50f8:	4631      	mov	r1, r6
   b50fa:	4418      	add	r0, r3
   b50fc:	f000 ff52 	bl	b5fa4 <strcpy>
	len = newlen;
   b5100:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5102:	2001      	movs	r0, #1
   b5104:	e7ed      	b.n	b50e2 <_ZN6String6concatEPKcj+0xa>

000b5106 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5106:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5108:	2300      	movs	r3, #0
	buf[0] = c;
   b510a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b510e:	2201      	movs	r2, #1
   b5110:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5112:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5116:	f7ff ffdf 	bl	b50d8 <_ZN6String6concatEPKcj>
}
   b511a:	b003      	add	sp, #12
   b511c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5120 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5120:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5122:	688a      	ldr	r2, [r1, #8]
   b5124:	6809      	ldr	r1, [r1, #0]
{
   b5126:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5128:	f7ff ffd6 	bl	b50d8 <_ZN6String6concatEPKcj>
   b512c:	b910      	cbnz	r0, b5134 <_ZplRK15StringSumHelperRK6String+0x14>
   b512e:	4620      	mov	r0, r4
   b5130:	f7ff ff3b 	bl	b4faa <_ZN6String10invalidateEv>
	return a;
}
   b5134:	4620      	mov	r0, r4
   b5136:	bd10      	pop	{r4, pc}

000b5138 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5138:	b513      	push	{r0, r1, r4, lr}
   b513a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b513c:	b929      	cbnz	r1, b514a <_ZplRK15StringSumHelperPKc+0x12>
   b513e:	4620      	mov	r0, r4
   b5140:	f7ff ff33 	bl	b4faa <_ZN6String10invalidateEv>
	return a;
}
   b5144:	4620      	mov	r0, r4
   b5146:	b002      	add	sp, #8
   b5148:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b514a:	4608      	mov	r0, r1
   b514c:	9101      	str	r1, [sp, #4]
   b514e:	f000 ff31 	bl	b5fb4 <strlen>
   b5152:	9901      	ldr	r1, [sp, #4]
   b5154:	4602      	mov	r2, r0
   b5156:	4620      	mov	r0, r4
   b5158:	f7ff ffbe 	bl	b50d8 <_ZN6String6concatEPKcj>
   b515c:	2800      	cmp	r0, #0
   b515e:	d0ee      	beq.n	b513e <_ZplRK15StringSumHelperPKc+0x6>
   b5160:	e7f0      	b.n	b5144 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b5164 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5164:	4b05      	ldr	r3, [pc, #20]	; (b517c <_GLOBAL__sub_I_System+0x18>)
   b5166:	2202      	movs	r2, #2
   b5168:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b516a:	4b05      	ldr	r3, [pc, #20]	; (b5180 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b516c:	4a05      	ldr	r2, [pc, #20]	; (b5184 <_GLOBAL__sub_I_System+0x20>)
   b516e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5170:	2000      	movs	r0, #0
   b5172:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5176:	f7ff bb93 	b.w	b48a0 <set_system_mode>
   b517a:	bf00      	nop
   b517c:	2003e6ec 	.word	0x2003e6ec
   b5180:	2003e6e0 	.word	0x2003e6e0
   b5184:	ffff0000 	.word	0xffff0000

000b5188 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5188:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b518a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b518c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5190:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5192:	2201      	movs	r2, #1
   b5194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5198:	f10d 0107 	add.w	r1, sp, #7
   b519c:	47a0      	blx	r4
}
   b519e:	b002      	add	sp, #8
   b51a0:	bd10      	pop	{r4, pc}

000b51a2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b51a2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51a4:	6803      	ldr	r3, [r0, #0]
   b51a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b51ac:	46a4      	mov	ip, r4
}
   b51ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51b2:	4760      	bx	ip

000b51b4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51b4:	b513      	push	{r0, r1, r4, lr}
   b51b6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b51b8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51ba:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b51be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b51c0:	f10d 0107 	add.w	r1, sp, #7
   b51c4:	2201      	movs	r2, #1
   b51c6:	47a0      	blx	r4
}
   b51c8:	b002      	add	sp, #8
   b51ca:	bd10      	pop	{r4, pc}

000b51cc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b51cc:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51ce:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b51d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b51d8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b51da:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51dc:	d008      	beq.n	b51f0 <_ZN9TCPClient4readEv+0x24>
   b51de:	6963      	ldr	r3, [r4, #20]
   b51e0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b51e4:	1c51      	adds	r1, r2, #1
   b51e6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b51ea:	4413      	add	r3, r2
   b51ec:	7918      	ldrb	r0, [r3, #4]
}
   b51ee:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51f0:	6803      	ldr	r3, [r0, #0]
   b51f2:	691b      	ldr	r3, [r3, #16]
   b51f4:	4798      	blx	r3
   b51f6:	2800      	cmp	r0, #0
   b51f8:	d1f1      	bne.n	b51de <_ZN9TCPClient4readEv+0x12>
   b51fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b51fe:	e7f6      	b.n	b51ee <_ZN9TCPClient4readEv+0x22>

000b5200 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5200:	4770      	bx	lr

000b5202 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5202:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5204:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5206:	43c0      	mvns	r0, r0
   b5208:	0fc0      	lsrs	r0, r0, #31
   b520a:	4770      	bx	lr

000b520c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b520c:	4770      	bx	lr
	...

000b5210 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5210:	4b06      	ldr	r3, [pc, #24]	; (b522c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5212:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5214:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5216:	f100 040c 	add.w	r4, r0, #12
	    ||
   b521a:	d005      	beq.n	b5228 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b521c:	4608      	mov	r0, r1
   b521e:	f000 fd5b 	bl	b5cd8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5222:	2800      	cmp	r0, #0
   b5224:	bf08      	it	eq
   b5226:	2400      	moveq	r4, #0
      }
   b5228:	4620      	mov	r0, r4
   b522a:	bd10      	pop	{r4, pc}
   b522c:	000b61cc 	.word	0x000b61cc

000b5230 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5230:	b510      	push	{r4, lr}
   b5232:	21ac      	movs	r1, #172	; 0xac
   b5234:	4604      	mov	r4, r0
   b5236:	f7fe ff30 	bl	b409a <_ZdlPvj>
   b523a:	4620      	mov	r0, r4
   b523c:	bd10      	pop	{r4, pc}

000b523e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b523e:	21ac      	movs	r1, #172	; 0xac
   b5240:	f7fe bf2b 	b.w	b409a <_ZdlPvj>

000b5244 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5248:	f04f 0800 	mov.w	r8, #0
   b524c:	b086      	sub	sp, #24
   b524e:	461c      	mov	r4, r3
   b5250:	f8c0 8004 	str.w	r8, [r0, #4]
   b5254:	4605      	mov	r5, r0
   b5256:	460e      	mov	r6, r1
   b5258:	4617      	mov	r7, r2
    struct timeval tv = {};
   b525a:	4641      	mov	r1, r8
   b525c:	2210      	movs	r2, #16
   b525e:	a802      	add	r0, sp, #8
   b5260:	f000 fe60 	bl	b5f24 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5264:	1c63      	adds	r3, r4, #1
   b5266:	d009      	beq.n	b527c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b526c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5270:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5274:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5278:	435c      	muls	r4, r3
   b527a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b527c:	6968      	ldr	r0, [r5, #20]
   b527e:	2310      	movs	r3, #16
   b5280:	9300      	str	r3, [sp, #0]
   b5282:	6800      	ldr	r0, [r0, #0]
   b5284:	ab02      	add	r3, sp, #8
   b5286:	f241 0205 	movw	r2, #4101	; 0x1005
   b528a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b528e:	f7ff fa3f 	bl	b4710 <sock_setsockopt>
    if (ret < 0) {
   b5292:	2800      	cmp	r0, #0
   b5294:	da07      	bge.n	b52a6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5296:	f7ff fbbf 	bl	b4a18 <__errno>
   b529a:	6803      	ldr	r3, [r0, #0]
   b529c:	606b      	str	r3, [r5, #4]
        return 0;
   b529e:	2000      	movs	r0, #0
}
   b52a0:	b006      	add	sp, #24
   b52a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b52a6:	6968      	ldr	r0, [r5, #20]
   b52a8:	2300      	movs	r3, #0
   b52aa:	6800      	ldr	r0, [r0, #0]
   b52ac:	463a      	mov	r2, r7
   b52ae:	4631      	mov	r1, r6
   b52b0:	f7ff fa4e 	bl	b4750 <sock_send>
    if (ret < 0) {
   b52b4:	1e03      	subs	r3, r0, #0
   b52b6:	dbee      	blt.n	b5296 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b52b8:	4618      	mov	r0, r3
   b52ba:	e7f1      	b.n	b52a0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b52bc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b52bc:	b530      	push	{r4, r5, lr}
   b52be:	b087      	sub	sp, #28
   b52c0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b52c2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b52c4:	4668      	mov	r0, sp
   b52c6:	f7ff fcd1 	bl	b4c6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52cc:	3404      	adds	r4, #4
   b52ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52d0:	682b      	ldr	r3, [r5, #0]
   b52d2:	7023      	strb	r3, [r4, #0]
    }
   b52d4:	b007      	add	sp, #28
   b52d6:	bd30      	pop	{r4, r5, pc}

000b52d8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b52d8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b52da:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b52dc:	4b05      	ldr	r3, [pc, #20]	; (b52f4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b52de:	4604      	mov	r4, r0
   b52e0:	358c      	adds	r5, #140	; 0x8c
   b52e2:	f844 3b04 	str.w	r3, [r4], #4
   b52e6:	4606      	mov	r6, r0
   b52e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52ec:	682b      	ldr	r3, [r5, #0]
   b52ee:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b52f0:	4630      	mov	r0, r6
   b52f2:	bd70      	pop	{r4, r5, r6, pc}
   b52f4:	000b6240 	.word	0x000b6240

000b52f8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52fc:	4698      	mov	r8, r3
    stop();
   b52fe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5300:	b093      	sub	sp, #76	; 0x4c
   b5302:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5304:	2400      	movs	r4, #0
    stop();
   b5306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5308:	4606      	mov	r6, r0
   b530a:	4617      	mov	r7, r2
    stop();
   b530c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b530e:	4628      	mov	r0, r5
   b5310:	466b      	mov	r3, sp
   b5312:	4622      	mov	r2, r4
   b5314:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5316:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5318:	f7ff f9f2 	bl	b4700 <netdb_getaddrinfo>
   b531c:	4605      	mov	r5, r0
   b531e:	2800      	cmp	r0, #0
   b5320:	d163      	bne.n	b53ea <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5322:	9b00      	ldr	r3, [sp, #0]
   b5324:	2b00      	cmp	r3, #0
   b5326:	d04b      	beq.n	b53c0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5328:	695b      	ldr	r3, [r3, #20]
   b532a:	2b00      	cmp	r3, #0
   b532c:	d048      	beq.n	b53c0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b532e:	a806      	add	r0, sp, #24
   b5330:	f7ff fc58 	bl	b4be4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5334:	9b00      	ldr	r3, [sp, #0]
   b5336:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5338:	7863      	ldrb	r3, [r4, #1]
   b533a:	2b02      	cmp	r3, #2
   b533c:	d104      	bne.n	b5348 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b533e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5340:	a806      	add	r0, sp, #24
   b5342:	f7ff ffbb 	bl	b52bc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5346:	e026      	b.n	b5396 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5348:	2b0a      	cmp	r3, #10
   b534a:	d124      	bne.n	b5396 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b534c:	2211      	movs	r2, #17
   b534e:	4629      	mov	r1, r5
   b5350:	a801      	add	r0, sp, #4
   b5352:	f000 fde7 	bl	b5f24 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5356:	68a3      	ldr	r3, [r4, #8]
   b5358:	2b00      	cmp	r3, #0
   b535a:	d038      	beq.n	b53ce <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b535c:	f104 0308 	add.w	r3, r4, #8
   b5360:	f10d 0c04 	add.w	ip, sp, #4
   b5364:	3418      	adds	r4, #24
   b5366:	6818      	ldr	r0, [r3, #0]
   b5368:	6859      	ldr	r1, [r3, #4]
   b536a:	4662      	mov	r2, ip
   b536c:	c203      	stmia	r2!, {r0, r1}
   b536e:	3308      	adds	r3, #8
   b5370:	42a3      	cmp	r3, r4
   b5372:	4694      	mov	ip, r2
   b5374:	d1f7      	bne.n	b5366 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5376:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5378:	a901      	add	r1, sp, #4
   b537a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b537c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5380:	f7ff fc3e 	bl	b4c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5384:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5388:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b538c:	ac07      	add	r4, sp, #28
   b538e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5390:	f8dc 3000 	ldr.w	r3, [ip]
   b5394:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5396:	a806      	add	r0, sp, #24
   b5398:	f7ff fc44 	bl	b4c24 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b539c:	b180      	cbz	r0, b53c0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b539e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b53a0:	ad07      	add	r5, sp, #28
   b53a2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b53a6:	4b12      	ldr	r3, [pc, #72]	; (b53f0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b53a8:	930c      	str	r3, [sp, #48]	; 0x30
   b53aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53ac:	ac0d      	add	r4, sp, #52	; 0x34
   b53ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53b0:	682b      	ldr	r3, [r5, #0]
   b53b2:	7023      	strb	r3, [r4, #0]
   b53b4:	463a      	mov	r2, r7
   b53b6:	4643      	mov	r3, r8
   b53b8:	a90c      	add	r1, sp, #48	; 0x30
   b53ba:	4630      	mov	r0, r6
   b53bc:	47c8      	blx	r9
   b53be:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b53c0:	9800      	ldr	r0, [sp, #0]
   b53c2:	f7ff f995 	bl	b46f0 <netdb_freeaddrinfo>
}
   b53c6:	4628      	mov	r0, r5
   b53c8:	b013      	add	sp, #76	; 0x4c
   b53ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b53ce:	68e3      	ldr	r3, [r4, #12]
   b53d0:	2b00      	cmp	r3, #0
   b53d2:	d1c3      	bne.n	b535c <_ZN9TCPClient7connectEPKctm+0x64>
   b53d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b53d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b53dc:	f7ff f978 	bl	b46d0 <inet_htonl>
   b53e0:	4581      	cmp	r9, r0
   b53e2:	d1bb      	bne.n	b535c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b53e4:	f104 0114 	add.w	r1, r4, #20
   b53e8:	e7aa      	b.n	b5340 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b53ea:	4625      	mov	r5, r4
   b53ec:	e7e8      	b.n	b53c0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b53ee:	bf00      	nop
   b53f0:	000b6240 	.word	0x000b6240

000b53f4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b53f4:	b538      	push	{r3, r4, r5, lr}
   b53f6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b53f8:	681a      	ldr	r2, [r3, #0]
   b53fa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b53fc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b53fe:	da10      	bge.n	b5422 <_ZN9TCPClient9connectedEv+0x2e>
   b5400:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5404:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5408:	429a      	cmp	r2, r3
   b540a:	d10a      	bne.n	b5422 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b540c:	6803      	ldr	r3, [r0, #0]
   b540e:	691b      	ldr	r3, [r3, #16]
   b5410:	4798      	blx	r3
        if (!rv) {
   b5412:	4604      	mov	r4, r0
   b5414:	b928      	cbnz	r0, b5422 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5416:	682b      	ldr	r3, [r5, #0]
   b5418:	4628      	mov	r0, r5
   b541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b541c:	4798      	blx	r3
        rv = available();
   b541e:	4620      	mov	r0, r4
}
   b5420:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5422:	2001      	movs	r0, #1
   b5424:	e7fc      	b.n	b5420 <_ZN9TCPClient9connectedEv+0x2c>

000b5426 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5426:	b510      	push	{r4, lr}
   b5428:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b542a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b542e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5432:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5434:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5436:	d005      	beq.n	b5444 <_ZN9TCPClient4peekEv+0x1e>
   b5438:	6963      	ldr	r3, [r4, #20]
   b543a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b543e:	4413      	add	r3, r2
   b5440:	7918      	ldrb	r0, [r3, #4]
}
   b5442:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5444:	6803      	ldr	r3, [r0, #0]
   b5446:	691b      	ldr	r3, [r3, #16]
   b5448:	4798      	blx	r3
   b544a:	2800      	cmp	r0, #0
   b544c:	d1f4      	bne.n	b5438 <_ZN9TCPClient4peekEv+0x12>
   b544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5452:	e7f6      	b.n	b5442 <_ZN9TCPClient4peekEv+0x1c>

000b5454 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5456:	6943      	ldr	r3, [r0, #20]
   b5458:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b545a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b545e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5462:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5464:	4605      	mov	r5, r0
   b5466:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5468:	d016      	beq.n	b5498 <_ZN9TCPClient4readEPhj+0x44>
   b546a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b546c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5470:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5474:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5476:	42bc      	cmp	r4, r7
   b5478:	bf28      	it	cs
   b547a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b547c:	3304      	adds	r3, #4
   b547e:	4622      	mov	r2, r4
   b5480:	4419      	add	r1, r3
   b5482:	4630      	mov	r0, r6
   b5484:	f000 fd40 	bl	b5f08 <memcpy>
   b5488:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b548a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b548e:	4423      	add	r3, r4
   b5490:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5494:	4620      	mov	r0, r4
   b5496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5498:	6803      	ldr	r3, [r0, #0]
   b549a:	691b      	ldr	r3, [r3, #16]
   b549c:	4798      	blx	r3
   b549e:	2800      	cmp	r0, #0
   b54a0:	d1e3      	bne.n	b546a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b54a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b54a6:	e7f5      	b.n	b5494 <_ZN9TCPClient4readEPhj+0x40>

000b54a8 <_ZN9TCPClient12flush_bufferEv>:
   b54a8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b54aa:	2300      	movs	r3, #0
   b54ac:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b54b0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b54b2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b54b6:	4770      	bx	lr

000b54b8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54bc:	461f      	mov	r7, r3
    stop();
   b54be:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54c0:	460c      	mov	r4, r1
    stop();
   b54c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54c4:	b08a      	sub	sp, #40	; 0x28
   b54c6:	4605      	mov	r5, r0
   b54c8:	4616      	mov	r6, r2
    stop();
   b54ca:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b54cc:	7d23      	ldrb	r3, [r4, #20]
   b54ce:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b54d2:	2b04      	cmp	r3, #4
   b54d4:	bf0c      	ite	eq
   b54d6:	2002      	moveq	r0, #2
   b54d8:	200a      	movne	r0, #10
   b54da:	2206      	movs	r2, #6
   b54dc:	2101      	movs	r1, #1
   b54de:	f7ff f93f 	bl	b4760 <sock_socket>
   b54e2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b54e6:	696b      	ldr	r3, [r5, #20]
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	2b00      	cmp	r3, #0
   b54ec:	da08      	bge.n	b5500 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b54ee:	682b      	ldr	r3, [r5, #0]
   b54f0:	4628      	mov	r0, r5
   b54f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b54f4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b54f6:	4798      	blx	r3
}
   b54f8:	4620      	mov	r0, r4
   b54fa:	b00a      	add	sp, #40	; 0x28
   b54fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5500:	4628      	mov	r0, r5
   b5502:	f7ff ffd1 	bl	b54a8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5506:	b1b7      	cbz	r7, b5536 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5508:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b550a:	a903      	add	r1, sp, #12
   b550c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b550e:	9303      	str	r3, [sp, #12]
   b5510:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5514:	f7ff f8cc 	bl	b46b0 <if_index_to_name>
   b5518:	2800      	cmp	r0, #0
   b551a:	d1e8      	bne.n	b54ee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b551c:	6968      	ldr	r0, [r5, #20]
   b551e:	2306      	movs	r3, #6
   b5520:	9300      	str	r3, [sp, #0]
   b5522:	6800      	ldr	r0, [r0, #0]
   b5524:	ab03      	add	r3, sp, #12
   b5526:	f241 020b 	movw	r2, #4107	; 0x100b
   b552a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b552e:	f7ff f8ef 	bl	b4710 <sock_setsockopt>
   b5532:	2800      	cmp	r0, #0
   b5534:	d1db      	bne.n	b54ee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5536:	221c      	movs	r2, #28
   b5538:	2100      	movs	r1, #0
   b553a:	a803      	add	r0, sp, #12
   b553c:	f000 fcf2 	bl	b5f24 <memset>
    if (ip.version() == 4) {
   b5540:	7d23      	ldrb	r3, [r4, #20]
   b5542:	2b04      	cmp	r3, #4
   b5544:	d11d      	bne.n	b5582 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5546:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b554a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b554c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5550:	f7ff f8c6 	bl	b46e0 <inet_htons>
   b5554:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5558:	6860      	ldr	r0, [r4, #4]
   b555a:	f7ff f8b9 	bl	b46d0 <inet_htonl>
   b555e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5560:	696b      	ldr	r3, [r5, #20]
   b5562:	221c      	movs	r2, #28
   b5564:	6818      	ldr	r0, [r3, #0]
   b5566:	a903      	add	r1, sp, #12
   b5568:	f7ff f8e2 	bl	b4730 <sock_connect>
   b556c:	2800      	cmp	r0, #0
   b556e:	d1be      	bne.n	b54ee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5570:	3404      	adds	r4, #4
   b5572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5574:	696d      	ldr	r5, [r5, #20]
   b5576:	358c      	adds	r5, #140	; 0x8c
   b5578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b557a:	6823      	ldr	r3, [r4, #0]
   b557c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b557e:	2401      	movs	r4, #1
   b5580:	e7ba      	b.n	b54f8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5582:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5586:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5588:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b558c:	f7ff f8a8 	bl	b46e0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5590:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5592:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5596:	1d23      	adds	r3, r4, #4
   b5598:	f104 0714 	add.w	r7, r4, #20
   b559c:	6818      	ldr	r0, [r3, #0]
   b559e:	6859      	ldr	r1, [r3, #4]
   b55a0:	4632      	mov	r2, r6
   b55a2:	c203      	stmia	r2!, {r0, r1}
   b55a4:	3308      	adds	r3, #8
   b55a6:	42bb      	cmp	r3, r7
   b55a8:	4616      	mov	r6, r2
   b55aa:	d1f7      	bne.n	b559c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b55ac:	e7d8      	b.n	b5560 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b55b0 <_ZN9TCPClient9availableEv>:
{
   b55b0:	b530      	push	{r4, r5, lr}
   b55b2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b55b4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b55b8:	b08b      	sub	sp, #44	; 0x2c
   b55ba:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b55bc:	b12b      	cbz	r3, b55ca <_ZN9TCPClient9availableEv+0x1a>
   b55be:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b55c2:	429a      	cmp	r2, r3
   b55c4:	d101      	bne.n	b55ca <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b55c6:	f7ff ff6f 	bl	b54a8 <_ZN9TCPClient12flush_bufferEv>
   b55ca:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b55cc:	6808      	ldr	r0, [r1, #0]
   b55ce:	2800      	cmp	r0, #0
   b55d0:	db18      	blt.n	b5604 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b55d2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b55d6:	2d7f      	cmp	r5, #127	; 0x7f
   b55d8:	d814      	bhi.n	b5604 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b55da:	3104      	adds	r1, #4
   b55dc:	2308      	movs	r3, #8
   b55de:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b55e2:	4429      	add	r1, r5
   b55e4:	f7ff f8ac 	bl	b4740 <sock_recv>
            if (ret > 0) {
   b55e8:	2800      	cmp	r0, #0
   b55ea:	dd13      	ble.n	b5614 <_ZN9TCPClient9availableEv+0x64>
   b55ec:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b55ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55f2:	b90a      	cbnz	r2, b55f8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b55f4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b55f8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b55fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55fe:	4410      	add	r0, r2
   b5600:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5604:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5606:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b560a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b560e:	1ac0      	subs	r0, r0, r3
   b5610:	b00b      	add	sp, #44	; 0x2c
   b5612:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5614:	f7ff fa00 	bl	b4a18 <__errno>
   b5618:	6803      	ldr	r3, [r0, #0]
   b561a:	2b0b      	cmp	r3, #11
   b561c:	d0f2      	beq.n	b5604 <_ZN9TCPClient9availableEv+0x54>
   b561e:	f7ff f9fb 	bl	b4a18 <__errno>
   b5622:	6803      	ldr	r3, [r0, #0]
   b5624:	2b0b      	cmp	r3, #11
   b5626:	d0ed      	beq.n	b5604 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5628:	2320      	movs	r3, #32
   b562a:	2500      	movs	r5, #0
   b562c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5630:	f7ff f9f2 	bl	b4a18 <__errno>
   b5634:	6803      	ldr	r3, [r0, #0]
   b5636:	9301      	str	r3, [sp, #4]
   b5638:	4b08      	ldr	r3, [pc, #32]	; (b565c <_ZN9TCPClient9availableEv+0xac>)
   b563a:	4909      	ldr	r1, [pc, #36]	; (b5660 <_ZN9TCPClient9availableEv+0xb0>)
   b563c:	9300      	str	r3, [sp, #0]
   b563e:	aa02      	add	r2, sp, #8
   b5640:	462b      	mov	r3, r5
   b5642:	2032      	movs	r0, #50	; 0x32
   b5644:	f7ff f924 	bl	b4890 <log_message>
                    sock_close(d_->sock);
   b5648:	6963      	ldr	r3, [r4, #20]
   b564a:	6818      	ldr	r0, [r3, #0]
   b564c:	f7ff f868 	bl	b4720 <sock_close>
   b5650:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5656:	601a      	str	r2, [r3, #0]
   b5658:	e7d4      	b.n	b5604 <_ZN9TCPClient9availableEv+0x54>
   b565a:	bf00      	nop
   b565c:	000b6293 	.word	0x000b6293
   b5660:	000b628c 	.word	0x000b628c

000b5664 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5664:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5666:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5668:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b566a:	6818      	ldr	r0, [r3, #0]
   b566c:	2800      	cmp	r0, #0
   b566e:	db01      	blt.n	b5674 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5670:	f7ff f856 	bl	b4720 <sock_close>
   b5674:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b567a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b567c:	6960      	ldr	r0, [r4, #20]
   b567e:	2211      	movs	r2, #17
   b5680:	2100      	movs	r1, #0
   b5682:	308c      	adds	r0, #140	; 0x8c
   b5684:	f000 fc4e 	bl	b5f24 <memset>
    flush_buffer();
   b5688:	4620      	mov	r0, r4
}
   b568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b568e:	f7ff bf0b 	b.w	b54a8 <_ZN9TCPClient12flush_bufferEv>

000b5692 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5692:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5694:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5696:	4604      	mov	r4, r0
          total(0) {
   b5698:	6001      	str	r1, [r0, #0]
   b569a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b569e:	3088      	adds	r0, #136	; 0x88
   b56a0:	f7ff faa0 	bl	b4be4 <_ZN9IPAddressC1Ev>
}
   b56a4:	4620      	mov	r0, r4
   b56a6:	bd10      	pop	{r4, pc}

000b56a8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b56a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b56aa:	2300      	movs	r3, #0
   b56ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b56b0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b56b4:	4a0e      	ldr	r2, [pc, #56]	; (b56f0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b56b6:	6103      	str	r3, [r0, #16]
   b56b8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b56ba:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b56bc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56be:	20ac      	movs	r0, #172	; 0xac
   b56c0:	9101      	str	r1, [sp, #4]
   b56c2:	f7fe fce6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b56c6:	1e05      	subs	r5, r0, #0
   b56c8:	f105 060c 	add.w	r6, r5, #12
   b56cc:	d008      	beq.n	b56e0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b56ce:	2301      	movs	r3, #1
   b56d0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b56d4:	4b07      	ldr	r3, [pc, #28]	; (b56f4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b56d6:	9901      	ldr	r1, [sp, #4]
   b56d8:	602b      	str	r3, [r5, #0]
   b56da:	4630      	mov	r0, r6
   b56dc:	f7ff ffd9 	bl	b5692 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b56e0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b56e2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b56e6:	f7ff fedf 	bl	b54a8 <_ZN9TCPClient12flush_bufferEv>
}
   b56ea:	b002      	add	sp, #8
   b56ec:	bd70      	pop	{r4, r5, r6, pc}
   b56ee:	bf00      	nop
   b56f0:	000b62c8 	.word	0x000b62c8
   b56f4:	000b62ac 	.word	0x000b62ac

000b56f8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b56f8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b56fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b56fe:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5700:	f7ff ffd2 	bl	b56a8 <_ZN9TCPClientC1Ei>
}
   b5704:	4620      	mov	r0, r4
   b5706:	bd10      	pop	{r4, pc}

000b5708 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5708:	b510      	push	{r4, lr}
   b570a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b570c:	6800      	ldr	r0, [r0, #0]
   b570e:	2800      	cmp	r0, #0
   b5710:	db01      	blt.n	b5716 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5712:	f7ff f805 	bl	b4720 <sock_close>
    }
}
   b5716:	4620      	mov	r0, r4
   b5718:	bd10      	pop	{r4, pc}

000b571a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b571a:	300c      	adds	r0, #12
   b571c:	f7ff bff4 	b.w	b5708 <_ZN9TCPClient4DataD1Ev>

000b5720 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5720:	4b02      	ldr	r3, [pc, #8]	; (b572c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5722:	681a      	ldr	r2, [r3, #0]
   b5724:	4b02      	ldr	r3, [pc, #8]	; (b5730 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5726:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5728:	4770      	bx	lr
   b572a:	bf00      	nop
   b572c:	2003e5b8 	.word	0x2003e5b8
   b5730:	2003e6f0 	.word	0x2003e6f0

000b5734 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5734:	4770      	bx	lr

000b5736 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5736:	7441      	strb	r1, [r0, #17]
}
   b5738:	4770      	bx	lr

000b573a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b573a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b573c:	7c00      	ldrb	r0, [r0, #16]
   b573e:	f7ff f857 	bl	b47f0 <hal_usart_available_data_for_write>
}
   b5742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5746:	bd08      	pop	{r3, pc}

000b5748 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5748:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b574a:	7c00      	ldrb	r0, [r0, #16]
   b574c:	f7ff f828 	bl	b47a0 <hal_usart_available>
}
   b5750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5754:	bd08      	pop	{r3, pc}

000b5756 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5756:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5758:	7c00      	ldrb	r0, [r0, #16]
   b575a:	f7ff f831 	bl	b47c0 <hal_usart_peek>
}
   b575e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5762:	bd08      	pop	{r3, pc}

000b5764 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5764:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5766:	7c00      	ldrb	r0, [r0, #16]
   b5768:	f7ff f822 	bl	b47b0 <hal_usart_read>
}
   b576c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5770:	bd08      	pop	{r3, pc}

000b5772 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5772:	7c00      	ldrb	r0, [r0, #16]
   b5774:	f7ff b82c 	b.w	b47d0 <hal_usart_flush>

000b5778 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5778:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b577a:	7c45      	ldrb	r5, [r0, #17]
{
   b577c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b577e:	b12d      	cbz	r5, b578c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5780:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5782:	b003      	add	sp, #12
   b5784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5788:	f7ff b802 	b.w	b4790 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b578c:	7c00      	ldrb	r0, [r0, #16]
   b578e:	9101      	str	r1, [sp, #4]
   b5790:	f7ff f82e 	bl	b47f0 <hal_usart_available_data_for_write>
   b5794:	2800      	cmp	r0, #0
   b5796:	9901      	ldr	r1, [sp, #4]
   b5798:	dcf2      	bgt.n	b5780 <_ZN11USARTSerial5writeEh+0x8>
}
   b579a:	4628      	mov	r0, r5
   b579c:	b003      	add	sp, #12
   b579e:	bd30      	pop	{r4, r5, pc}

000b57a0 <_ZN11USARTSerialD0Ev>:
   b57a0:	b510      	push	{r4, lr}
   b57a2:	2114      	movs	r1, #20
   b57a4:	4604      	mov	r4, r0
   b57a6:	f7fe fc78 	bl	b409a <_ZdlPvj>
   b57aa:	4620      	mov	r0, r4
   b57ac:	bd10      	pop	{r4, pc}
	...

000b57b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b57b0:	b510      	push	{r4, lr}
   b57b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57b6:	4604      	mov	r4, r0
   b57b8:	4608      	mov	r0, r1
   b57ba:	4611      	mov	r1, r2
   b57bc:	2200      	movs	r2, #0
   b57be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57c2:	4b04      	ldr	r3, [pc, #16]	; (b57d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b57c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57c6:	2301      	movs	r3, #1
  _serial = serial;
   b57c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b57cc:	f7ff f818 	bl	b4800 <hal_usart_init_ex>
}
   b57d0:	4620      	mov	r0, r4
   b57d2:	bd10      	pop	{r4, pc}
   b57d4:	000b6330 	.word	0x000b6330

000b57d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b57d8:	7441      	strb	r1, [r0, #17]
}
   b57da:	4770      	bx	lr

000b57dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57dc:	4770      	bx	lr

000b57de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b57de:	4770      	bx	lr

000b57e0 <_ZN9USBSerial4readEv>:
{
   b57e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b57e2:	2100      	movs	r1, #0
   b57e4:	7c00      	ldrb	r0, [r0, #16]
   b57e6:	f7ff f833 	bl	b4850 <HAL_USB_USART_Receive_Data>
}
   b57ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57ee:	bd08      	pop	{r3, pc}

000b57f0 <_ZN9USBSerial4peekEv>:
{
   b57f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b57f2:	2101      	movs	r1, #1
   b57f4:	7c00      	ldrb	r0, [r0, #16]
   b57f6:	f7ff f82b 	bl	b4850 <HAL_USB_USART_Receive_Data>
}
   b57fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57fe:	bd08      	pop	{r3, pc}

000b5800 <_ZN9USBSerial17availableForWriteEv>:
{
   b5800:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5802:	7c00      	ldrb	r0, [r0, #16]
   b5804:	f7ff f81c 	bl	b4840 <HAL_USB_USART_Available_Data_For_Write>
}
   b5808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b580c:	bd08      	pop	{r3, pc}

000b580e <_ZN9USBSerial9availableEv>:
{
   b580e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5810:	7c00      	ldrb	r0, [r0, #16]
   b5812:	f7ff f80d 	bl	b4830 <HAL_USB_USART_Available_Data>
}
   b5816:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b581a:	bd08      	pop	{r3, pc}

000b581c <_ZN9USBSerial5writeEh>:
{
   b581c:	b513      	push	{r0, r1, r4, lr}
   b581e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5820:	7c00      	ldrb	r0, [r0, #16]
{
   b5822:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5824:	f7ff f80c 	bl	b4840 <HAL_USB_USART_Available_Data_For_Write>
   b5828:	2800      	cmp	r0, #0
   b582a:	9901      	ldr	r1, [sp, #4]
   b582c:	dc01      	bgt.n	b5832 <_ZN9USBSerial5writeEh+0x16>
   b582e:	7c60      	ldrb	r0, [r4, #17]
   b5830:	b120      	cbz	r0, b583c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5832:	7c20      	ldrb	r0, [r4, #16]
   b5834:	f7ff f814 	bl	b4860 <HAL_USB_USART_Send_Data>
   b5838:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b583c:	b002      	add	sp, #8
   b583e:	bd10      	pop	{r4, pc}

000b5840 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5840:	7c00      	ldrb	r0, [r0, #16]
   b5842:	f7ff b815 	b.w	b4870 <HAL_USB_USART_Flush_Data>

000b5846 <_ZN9USBSerialD0Ev>:
   b5846:	b510      	push	{r4, lr}
   b5848:	2114      	movs	r1, #20
   b584a:	4604      	mov	r4, r0
   b584c:	f7fe fc25 	bl	b409a <_ZdlPvj>
   b5850:	4620      	mov	r0, r4
   b5852:	bd10      	pop	{r4, pc}

000b5854 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5854:	b510      	push	{r4, lr}
   b5856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b585a:	4604      	mov	r4, r0
   b585c:	4608      	mov	r0, r1
   b585e:	2100      	movs	r1, #0
   b5860:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5864:	4b04      	ldr	r3, [pc, #16]	; (b5878 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5866:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5868:	2301      	movs	r3, #1
  _serial = serial;
   b586a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b586c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b586e:	4611      	mov	r1, r2
   b5870:	f7fe ffce 	bl	b4810 <HAL_USB_USART_Init>
}
   b5874:	4620      	mov	r0, r4
   b5876:	bd10      	pop	{r4, pc}
   b5878:	000b6360 	.word	0x000b6360

000b587c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b587c:	7c00      	ldrb	r0, [r0, #16]
   b587e:	2200      	movs	r2, #0
   b5880:	f7fe bfce 	b.w	b4820 <HAL_USB_USART_Begin>

000b5884 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5884:	7c00      	ldrb	r0, [r0, #16]
   b5886:	f7fe bffb 	b.w	b4880 <HAL_USB_USART_Is_Connected>

000b588a <_Z19acquireSerialBufferv>:
{
   b588a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b588c:	2214      	movs	r2, #20
{
   b588e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5890:	2100      	movs	r1, #0
   b5892:	f000 fb47 	bl	b5f24 <memset>
}
   b5896:	4620      	mov	r0, r4
   b5898:	bd10      	pop	{r4, pc}
	...

000b589c <_Z16_fetch_usbserialv>:
{
   b589c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b589e:	4c0f      	ldr	r4, [pc, #60]	; (b58dc <_Z16_fetch_usbserialv+0x40>)
{
   b58a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b58a2:	a803      	add	r0, sp, #12
   b58a4:	f7ff fff1 	bl	b588a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58a8:	7821      	ldrb	r1, [r4, #0]
   b58aa:	f3bf 8f5b 	dmb	ish
   b58ae:	f011 0101 	ands.w	r1, r1, #1
   b58b2:	d10f      	bne.n	b58d4 <_Z16_fetch_usbserialv+0x38>
   b58b4:	4620      	mov	r0, r4
   b58b6:	9101      	str	r1, [sp, #4]
   b58b8:	f7fe fbf1 	bl	b409e <__cxa_guard_acquire>
   b58bc:	9901      	ldr	r1, [sp, #4]
   b58be:	b148      	cbz	r0, b58d4 <_Z16_fetch_usbserialv+0x38>
   b58c0:	aa03      	add	r2, sp, #12
   b58c2:	4807      	ldr	r0, [pc, #28]	; (b58e0 <_Z16_fetch_usbserialv+0x44>)
   b58c4:	f7ff ffc6 	bl	b5854 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b58c8:	4620      	mov	r0, r4
   b58ca:	f7fe fbed 	bl	b40a8 <__cxa_guard_release>
   b58ce:	4805      	ldr	r0, [pc, #20]	; (b58e4 <_Z16_fetch_usbserialv+0x48>)
   b58d0:	f000 fb14 	bl	b5efc <atexit>
	return _usbserial;
}
   b58d4:	4802      	ldr	r0, [pc, #8]	; (b58e0 <_Z16_fetch_usbserialv+0x44>)
   b58d6:	b008      	add	sp, #32
   b58d8:	bd10      	pop	{r4, pc}
   b58da:	bf00      	nop
   b58dc:	2003e6f4 	.word	0x2003e6f4
   b58e0:	2003e6f8 	.word	0x2003e6f8
   b58e4:	000b57dd 	.word	0x000b57dd

000b58e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b58e8:	2200      	movs	r2, #0
   b58ea:	6840      	ldr	r0, [r0, #4]
   b58ec:	4611      	mov	r1, r2
   b58ee:	f7ff b823 	b.w	b4938 <network_ready>

000b58f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58f2:	2200      	movs	r2, #0
   b58f4:	6840      	ldr	r0, [r0, #4]
   b58f6:	4611      	mov	r1, r2
   b58f8:	f7ff b83e 	b.w	b4978 <network_listening>

000b58fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58fc:	2200      	movs	r2, #0
   b58fe:	6840      	ldr	r0, [r0, #4]
   b5900:	4611      	mov	r1, r2
   b5902:	f7ff b851 	b.w	b49a8 <network_get_listen_timeout>

000b5906 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5906:	6840      	ldr	r0, [r0, #4]
   b5908:	2200      	movs	r2, #0
   b590a:	f7ff b845 	b.w	b4998 <network_set_listen_timeout>

000b590e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b590e:	6840      	ldr	r0, [r0, #4]
   b5910:	2200      	movs	r2, #0
   b5912:	f081 0101 	eor.w	r1, r1, #1
   b5916:	f7ff b827 	b.w	b4968 <network_listen>

000b591a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b591a:	2300      	movs	r3, #0
   b591c:	6840      	ldr	r0, [r0, #4]
   b591e:	461a      	mov	r2, r3
   b5920:	4619      	mov	r1, r3
   b5922:	f7ff b819 	b.w	b4958 <network_off>

000b5926 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5926:	2300      	movs	r3, #0
   b5928:	6840      	ldr	r0, [r0, #4]
   b592a:	461a      	mov	r2, r3
   b592c:	4619      	mov	r1, r3
   b592e:	f7ff b80b 	b.w	b4948 <network_on>

000b5932 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5932:	2200      	movs	r2, #0
   b5934:	6840      	ldr	r0, [r0, #4]
   b5936:	4611      	mov	r1, r2
   b5938:	f7fe bfee 	b.w	b4918 <network_connecting>

000b593c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b593c:	6840      	ldr	r0, [r0, #4]
   b593e:	2200      	movs	r2, #0
   b5940:	2102      	movs	r1, #2
   b5942:	f7fe bff1 	b.w	b4928 <network_disconnect>

000b5946 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5946:	2300      	movs	r3, #0
   b5948:	6840      	ldr	r0, [r0, #4]
   b594a:	461a      	mov	r2, r3
   b594c:	f7fe bfdc 	b.w	b4908 <network_connect>

000b5950 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5950:	4b02      	ldr	r3, [pc, #8]	; (b595c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5952:	2204      	movs	r2, #4
   b5954:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5956:	4a02      	ldr	r2, [pc, #8]	; (b5960 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5958:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b595a:	4770      	bx	lr
   b595c:	2003e70c 	.word	0x2003e70c
   b5960:	000b6390 	.word	0x000b6390

000b5964 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5964:	b510      	push	{r4, lr}
   b5966:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5968:	f000 fb24 	bl	b5fb4 <strlen>
   b596c:	3801      	subs	r0, #1
   b596e:	1823      	adds	r3, r4, r0
   b5970:	4620      	mov	r0, r4
	while(i<j){
   b5972:	4283      	cmp	r3, r0
   b5974:	d906      	bls.n	b5984 <_Z11str_reversePc+0x20>
		c = *i;
   b5976:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5978:	7819      	ldrb	r1, [r3, #0]
   b597a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b597e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5982:	e7f6      	b.n	b5972 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5984:	bd10      	pop	{r4, pc}

000b5986 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5986:	b570      	push	{r4, r5, r6, lr}
   b5988:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b598a:	1e91      	subs	r1, r2, #2
   b598c:	2922      	cmp	r1, #34	; 0x22
   b598e:	d81d      	bhi.n	b59cc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5990:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5992:	b930      	cbnz	r0, b59a2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5994:	4423      	add	r3, r4
            *ptr++ = '0';
   b5996:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5998:	429d      	cmp	r5, r3
   b599a:	d210      	bcs.n	b59be <ultoa+0x38>
            *ptr++ = '0';
   b599c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b59a0:	e7fa      	b.n	b5998 <ultoa+0x12>
            result.quot = a/radix;
   b59a2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b59a6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b59aa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b59ac:	2809      	cmp	r0, #9
                *ptr += '0';
   b59ae:	bf94      	ite	ls
   b59b0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b59b2:	3157      	addhi	r1, #87	; 0x57
   b59b4:	b2c9      	uxtb	r1, r1
   b59b6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b59ba:	4630      	mov	r0, r6
	while(a){
   b59bc:	e7e9      	b.n	b5992 <ultoa+0xc>

	*ptr = '\0';
   b59be:	2300      	movs	r3, #0
	str_reverse(buffer);
   b59c0:	4620      	mov	r0, r4
	*ptr = '\0';
   b59c2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b59c4:	f7ff ffce 	bl	b5964 <_Z11str_reversePc>
	return buffer;
   b59c8:	4620      	mov	r0, r4
}
   b59ca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b59cc:	2000      	movs	r0, #0
   b59ce:	e7fc      	b.n	b59ca <ultoa+0x44>

000b59d0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b59d0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b59d2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b59d4:	460c      	mov	r4, r1
   b59d6:	4615      	mov	r5, r2
	if(a<0){
   b59d8:	da0e      	bge.n	b59f8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b59da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b59de:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b59e2:	bf14      	ite	ne
   b59e4:	4258      	negne	r0, r3
   b59e6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b59e8:	2301      	movs	r3, #1
		*buffer = '-';
   b59ea:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b59ec:	462a      	mov	r2, r5
   b59ee:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b59f0:	f7ff ffc9 	bl	b5986 <ultoa>
	}
	return buffer;
}
   b59f4:	4620      	mov	r0, r4
   b59f6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b59f8:	2301      	movs	r3, #1
   b59fa:	e7f9      	b.n	b59f0 <itoa+0x20>

000b59fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b59fc:	4b01      	ldr	r3, [pc, #4]	; (b5a04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b59fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5a00:	4770      	bx	lr
   b5a02:	bf00      	nop
   b5a04:	2003e5bc 	.word	0x2003e5bc

000b5a08 <serialEventRun>:
{
   b5a08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5a0a:	4b0b      	ldr	r3, [pc, #44]	; (b5a38 <serialEventRun+0x30>)
   b5a0c:	b143      	cbz	r3, b5a20 <serialEventRun+0x18>
   b5a0e:	f7ff ff45 	bl	b589c <_Z16_fetch_usbserialv>
   b5a12:	6803      	ldr	r3, [r0, #0]
   b5a14:	691b      	ldr	r3, [r3, #16]
   b5a16:	4798      	blx	r3
   b5a18:	2800      	cmp	r0, #0
   b5a1a:	dd01      	ble.n	b5a20 <serialEventRun+0x18>
        serialEvent();
   b5a1c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5a20:	4b06      	ldr	r3, [pc, #24]	; (b5a3c <serialEventRun+0x34>)
   b5a22:	b143      	cbz	r3, b5a36 <serialEventRun+0x2e>
   b5a24:	f000 f932 	bl	b5c8c <_Z22__fetch_global_Serial1v>
   b5a28:	6803      	ldr	r3, [r0, #0]
   b5a2a:	691b      	ldr	r3, [r3, #16]
   b5a2c:	4798      	blx	r3
   b5a2e:	2800      	cmp	r0, #0
   b5a30:	dd01      	ble.n	b5a36 <serialEventRun+0x2e>
        serialEvent1();
   b5a32:	f3af 8000 	nop.w
}
   b5a36:	bd08      	pop	{r3, pc}
	...

000b5a40 <_post_loop>:
{
   b5a40:	b508      	push	{r3, lr}
	serialEventRun();
   b5a42:	f7ff ffe1 	bl	b5a08 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5a46:	f7fe fddb 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5a4a:	4b01      	ldr	r3, [pc, #4]	; (b5a50 <_post_loop+0x10>)
   b5a4c:	6018      	str	r0, [r3, #0]
}
   b5a4e:	bd08      	pop	{r3, pc}
   b5a50:	2003e728 	.word	0x2003e728

000b5a54 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a54:	4805      	ldr	r0, [pc, #20]	; (b5a6c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5a56:	4a06      	ldr	r2, [pc, #24]	; (b5a70 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5a58:	4906      	ldr	r1, [pc, #24]	; (b5a74 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5a5a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5a5c:	1a12      	subs	r2, r2, r0
   b5a5e:	f000 fa53 	bl	b5f08 <memcpy>
    __backup_sram_signature = signature;
   b5a62:	4b05      	ldr	r3, [pc, #20]	; (b5a78 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5a64:	4a05      	ldr	r2, [pc, #20]	; (b5a7c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5a66:	601a      	str	r2, [r3, #0]
}
   b5a68:	bd08      	pop	{r3, pc}
   b5a6a:	bf00      	nop
   b5a6c:	2003f400 	.word	0x2003f400
   b5a70:	2003f404 	.word	0x2003f404
   b5a74:	000b6574 	.word	0x000b6574
   b5a78:	2003f400 	.word	0x2003f400
   b5a7c:	9a271c1e 	.word	0x9a271c1e

000b5a80 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5a80:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5a82:	2300      	movs	r3, #0
   b5a84:	9300      	str	r3, [sp, #0]
   b5a86:	461a      	mov	r2, r3
   b5a88:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5a8c:	f7fe ff22 	bl	b48d4 <system_ctrl_set_result>
}
   b5a90:	b003      	add	sp, #12
   b5a92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5a98 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5a98:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5a9a:	8843      	ldrh	r3, [r0, #2]
   b5a9c:	2b0a      	cmp	r3, #10
   b5a9e:	d008      	beq.n	b5ab2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5aa0:	2b50      	cmp	r3, #80	; 0x50
   b5aa2:	d10b      	bne.n	b5abc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5aa4:	4b09      	ldr	r3, [pc, #36]	; (b5acc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5aa6:	681b      	ldr	r3, [r3, #0]
   b5aa8:	b14b      	cbz	r3, b5abe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5aaa:	b003      	add	sp, #12
   b5aac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ab0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ab2:	f7ff ffe5 	bl	b5a80 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ab6:	b003      	add	sp, #12
   b5ab8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5abc:	2300      	movs	r3, #0
   b5abe:	9300      	str	r3, [sp, #0]
   b5ac0:	461a      	mov	r2, r3
   b5ac2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5ac6:	f7fe ff05 	bl	b48d4 <system_ctrl_set_result>
}
   b5aca:	e7f4      	b.n	b5ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5acc:	2003e718 	.word	0x2003e718

000b5ad0 <module_user_init_hook>:
{
   b5ad0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5ad2:	4812      	ldr	r0, [pc, #72]	; (b5b1c <module_user_init_hook+0x4c>)
   b5ad4:	2100      	movs	r1, #0
   b5ad6:	f7fe ffaf 	bl	b4a38 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5ada:	4b11      	ldr	r3, [pc, #68]	; (b5b20 <module_user_init_hook+0x50>)
   b5adc:	681a      	ldr	r2, [r3, #0]
   b5ade:	4b11      	ldr	r3, [pc, #68]	; (b5b24 <module_user_init_hook+0x54>)
   b5ae0:	429a      	cmp	r2, r3
   b5ae2:	4b11      	ldr	r3, [pc, #68]	; (b5b28 <module_user_init_hook+0x58>)
   b5ae4:	bf0c      	ite	eq
   b5ae6:	2201      	moveq	r2, #1
   b5ae8:	2200      	movne	r2, #0
   b5aea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5aec:	d001      	beq.n	b5af2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5aee:	f7ff ffb1 	bl	b5a54 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5af2:	f7fe fd7d 	bl	b45f0 <HAL_RNG_GetRandomNumber>
   b5af6:	4604      	mov	r4, r0
    srand(seed);
   b5af8:	f000 fa1c 	bl	b5f34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5afc:	4b0b      	ldr	r3, [pc, #44]	; (b5b2c <module_user_init_hook+0x5c>)
   b5afe:	b113      	cbz	r3, b5b06 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5b00:	4620      	mov	r0, r4
   b5b02:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5b06:	2100      	movs	r1, #0
   b5b08:	4808      	ldr	r0, [pc, #32]	; (b5b2c <module_user_init_hook+0x5c>)
   b5b0a:	f7fe fef5 	bl	b48f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5b12:	4807      	ldr	r0, [pc, #28]	; (b5b30 <module_user_init_hook+0x60>)
   b5b14:	2100      	movs	r1, #0
   b5b16:	f7fe bed3 	b.w	b48c0 <system_ctrl_set_app_request_handler>
   b5b1a:	bf00      	nop
   b5b1c:	000b59fd 	.word	0x000b59fd
   b5b20:	2003f400 	.word	0x2003f400
   b5b24:	9a271c1e 	.word	0x9a271c1e
   b5b28:	2003e714 	.word	0x2003e714
   b5b2c:	00000000 	.word	0x00000000
   b5b30:	000b5a99 	.word	0x000b5a99

000b5b34 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5b34:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5b36:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5b38:	d902      	bls.n	b5b40 <pinAvailable+0xc>
    return false;
   b5b3a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5b3c:	b002      	add	sp, #8
   b5b3e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5b40:	f1a0 030b 	sub.w	r3, r0, #11
   b5b44:	2b02      	cmp	r3, #2
   b5b46:	d81a      	bhi.n	b5b7e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5b48:	4c17      	ldr	r4, [pc, #92]	; (b5ba8 <pinAvailable+0x74>)
   b5b4a:	7821      	ldrb	r1, [r4, #0]
   b5b4c:	f3bf 8f5b 	dmb	ish
   b5b50:	f011 0101 	ands.w	r1, r1, #1
   b5b54:	d10b      	bne.n	b5b6e <pinAvailable+0x3a>
   b5b56:	4620      	mov	r0, r4
   b5b58:	9101      	str	r1, [sp, #4]
   b5b5a:	f7fe faa0 	bl	b409e <__cxa_guard_acquire>
   b5b5e:	9901      	ldr	r1, [sp, #4]
   b5b60:	b128      	cbz	r0, b5b6e <pinAvailable+0x3a>
   b5b62:	4812      	ldr	r0, [pc, #72]	; (b5bac <pinAvailable+0x78>)
   b5b64:	f7ff f9e6 	bl	b4f34 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5b68:	4620      	mov	r0, r4
   b5b6a:	f7fe fa9d 	bl	b40a8 <__cxa_guard_release>
   b5b6e:	4b0f      	ldr	r3, [pc, #60]	; (b5bac <pinAvailable+0x78>)
   b5b70:	7818      	ldrb	r0, [r3, #0]
   b5b72:	f7fe fe05 	bl	b4780 <hal_spi_is_enabled>
   b5b76:	2800      	cmp	r0, #0
   b5b78:	d1df      	bne.n	b5b3a <pinAvailable+0x6>
  return true; // 'pin' is available
   b5b7a:	2001      	movs	r0, #1
   b5b7c:	e7de      	b.n	b5b3c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5b7e:	2801      	cmp	r0, #1
   b5b80:	d809      	bhi.n	b5b96 <pinAvailable+0x62>
   b5b82:	f000 f843 	bl	b5c0c <_Z19__fetch_global_Wirev>
   b5b86:	2100      	movs	r1, #0
   b5b88:	7c00      	ldrb	r0, [r0, #16]
   b5b8a:	f7fe fd81 	bl	b4690 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5b8e:	f080 0001 	eor.w	r0, r0, #1
   b5b92:	b2c0      	uxtb	r0, r0
   b5b94:	e7d2      	b.n	b5b3c <pinAvailable+0x8>
   b5b96:	3809      	subs	r0, #9
   b5b98:	2801      	cmp	r0, #1
   b5b9a:	d8ee      	bhi.n	b5b7a <pinAvailable+0x46>
   b5b9c:	f000 f876 	bl	b5c8c <_Z22__fetch_global_Serial1v>
   b5ba0:	7c00      	ldrb	r0, [r0, #16]
   b5ba2:	f7fe fe1d 	bl	b47e0 <hal_usart_is_enabled>
   b5ba6:	e7f2      	b.n	b5b8e <pinAvailable+0x5a>
   b5ba8:	2003e71c 	.word	0x2003e71c
   b5bac:	2003e720 	.word	0x2003e720

000b5bb0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5bb0:	2823      	cmp	r0, #35	; 0x23
{
   b5bb2:	b538      	push	{r3, r4, r5, lr}
   b5bb4:	4604      	mov	r4, r0
   b5bb6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5bb8:	d80a      	bhi.n	b5bd0 <pinMode+0x20>
   b5bba:	29ff      	cmp	r1, #255	; 0xff
   b5bbc:	d008      	beq.n	b5bd0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5bbe:	f7ff ffb9 	bl	b5b34 <pinAvailable>
   b5bc2:	b128      	cbz	r0, b5bd0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5bc4:	4629      	mov	r1, r5
   b5bc6:	4620      	mov	r0, r4
}
   b5bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5bcc:	f7fe bd28 	b.w	b4620 <HAL_Pin_Mode>
}
   b5bd0:	bd38      	pop	{r3, r4, r5, pc}

000b5bd2 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b5bd2:	f7fe bd2d 	b.w	b4630 <HAL_Pulse_In>

000b5bd6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5bd6:	4770      	bx	lr

000b5bd8 <_Z17acquireWireBufferv>:
{
   b5bd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5bda:	4b0a      	ldr	r3, [pc, #40]	; (b5c04 <_Z17acquireWireBufferv+0x2c>)
   b5bdc:	6003      	str	r3, [r0, #0]
   b5bde:	2301      	movs	r3, #1
{
   b5be0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5be2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5be4:	4908      	ldr	r1, [pc, #32]	; (b5c08 <_Z17acquireWireBufferv+0x30>)
   b5be6:	2020      	movs	r0, #32
   b5be8:	f000 f874 	bl	b5cd4 <_ZnajRKSt9nothrow_t>
	};
   b5bec:	2520      	movs	r5, #32
   b5bee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5bf0:	4905      	ldr	r1, [pc, #20]	; (b5c08 <_Z17acquireWireBufferv+0x30>)
	};
   b5bf2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5bf4:	4628      	mov	r0, r5
   b5bf6:	f000 f86d 	bl	b5cd4 <_ZnajRKSt9nothrow_t>
	};
   b5bfa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5bfe:	4620      	mov	r0, r4
   b5c00:	bd38      	pop	{r3, r4, r5, pc}
   b5c02:	bf00      	nop
   b5c04:	00010018 	.word	0x00010018
   b5c08:	000b63c4 	.word	0x000b63c4

000b5c0c <_Z19__fetch_global_Wirev>:
{
   b5c0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c0e:	4d0e      	ldr	r5, [pc, #56]	; (b5c48 <_Z19__fetch_global_Wirev+0x3c>)
   b5c10:	7829      	ldrb	r1, [r5, #0]
   b5c12:	f3bf 8f5b 	dmb	ish
   b5c16:	f011 0401 	ands.w	r4, r1, #1
{
   b5c1a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5c1c:	d111      	bne.n	b5c42 <_Z19__fetch_global_Wirev+0x36>
   b5c1e:	4628      	mov	r0, r5
   b5c20:	f7fe fa3d 	bl	b409e <__cxa_guard_acquire>
   b5c24:	b168      	cbz	r0, b5c42 <_Z19__fetch_global_Wirev+0x36>
   b5c26:	4668      	mov	r0, sp
   b5c28:	f7ff ffd6 	bl	b5bd8 <_Z17acquireWireBufferv>
   b5c2c:	466a      	mov	r2, sp
   b5c2e:	4621      	mov	r1, r4
   b5c30:	4806      	ldr	r0, [pc, #24]	; (b5c4c <_Z19__fetch_global_Wirev+0x40>)
   b5c32:	f7fe ff7f 	bl	b4b34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5c36:	4628      	mov	r0, r5
   b5c38:	f7fe fa36 	bl	b40a8 <__cxa_guard_release>
   b5c3c:	4804      	ldr	r0, [pc, #16]	; (b5c50 <_Z19__fetch_global_Wirev+0x44>)
   b5c3e:	f000 f95d 	bl	b5efc <atexit>
	return wire;
}
   b5c42:	4802      	ldr	r0, [pc, #8]	; (b5c4c <_Z19__fetch_global_Wirev+0x40>)
   b5c44:	b007      	add	sp, #28
   b5c46:	bd30      	pop	{r4, r5, pc}
   b5c48:	2003e72c 	.word	0x2003e72c
   b5c4c:	2003e730 	.word	0x2003e730
   b5c50:	000b5bd7 	.word	0x000b5bd7

000b5c54 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c54:	4770      	bx	lr
	...

000b5c58 <_Z20acquireSerial1Bufferv>:
{
   b5c58:	b538      	push	{r3, r4, r5, lr}
   b5c5a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5c5c:	2514      	movs	r5, #20
   b5c5e:	462a      	mov	r2, r5
   b5c60:	2100      	movs	r1, #0
   b5c62:	f000 f95f 	bl	b5f24 <memset>
   b5c66:	8025      	strh	r5, [r4, #0]
   b5c68:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c6a:	4907      	ldr	r1, [pc, #28]	; (b5c88 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5c6c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c6e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5c70:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c72:	f000 f82f 	bl	b5cd4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c76:	4904      	ldr	r1, [pc, #16]	; (b5c88 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5c78:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5c7a:	4628      	mov	r0, r5
   b5c7c:	f000 f82a 	bl	b5cd4 <_ZnajRKSt9nothrow_t>
    };
   b5c80:	60e0      	str	r0, [r4, #12]
}
   b5c82:	4620      	mov	r0, r4
   b5c84:	bd38      	pop	{r3, r4, r5, pc}
   b5c86:	bf00      	nop
   b5c88:	000b63c4 	.word	0x000b63c4

000b5c8c <_Z22__fetch_global_Serial1v>:
{
   b5c8c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c8e:	4d0e      	ldr	r5, [pc, #56]	; (b5cc8 <_Z22__fetch_global_Serial1v+0x3c>)
   b5c90:	7829      	ldrb	r1, [r5, #0]
   b5c92:	f3bf 8f5b 	dmb	ish
   b5c96:	f011 0401 	ands.w	r4, r1, #1
{
   b5c9a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c9c:	d111      	bne.n	b5cc2 <_Z22__fetch_global_Serial1v+0x36>
   b5c9e:	4628      	mov	r0, r5
   b5ca0:	f7fe f9fd 	bl	b409e <__cxa_guard_acquire>
   b5ca4:	b168      	cbz	r0, b5cc2 <_Z22__fetch_global_Serial1v+0x36>
   b5ca6:	a801      	add	r0, sp, #4
   b5ca8:	f7ff ffd6 	bl	b5c58 <_Z20acquireSerial1Bufferv>
   b5cac:	aa01      	add	r2, sp, #4
   b5cae:	4621      	mov	r1, r4
   b5cb0:	4806      	ldr	r0, [pc, #24]	; (b5ccc <_Z22__fetch_global_Serial1v+0x40>)
   b5cb2:	f7ff fd7d 	bl	b57b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5cb6:	4628      	mov	r0, r5
   b5cb8:	f7fe f9f6 	bl	b40a8 <__cxa_guard_release>
   b5cbc:	4804      	ldr	r0, [pc, #16]	; (b5cd0 <_Z22__fetch_global_Serial1v+0x44>)
   b5cbe:	f000 f91d 	bl	b5efc <atexit>
    return serial1;
}
   b5cc2:	4802      	ldr	r0, [pc, #8]	; (b5ccc <_Z22__fetch_global_Serial1v+0x40>)
   b5cc4:	b007      	add	sp, #28
   b5cc6:	bd30      	pop	{r4, r5, pc}
   b5cc8:	2003e744 	.word	0x2003e744
   b5ccc:	2003e748 	.word	0x2003e748
   b5cd0:	000b5c55 	.word	0x000b5c55

000b5cd4 <_ZnajRKSt9nothrow_t>:
   b5cd4:	f7fe b9df 	b.w	b4096 <_Znaj>

000b5cd8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5cd8:	4901      	ldr	r1, [pc, #4]	; (b5ce0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5cda:	f000 b8f9 	b.w	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5cde:	bf00      	nop
   b5ce0:	000b63e0 	.word	0x000b63e0

000b5ce4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5ce6:	2400      	movs	r4, #0
   b5ce8:	2310      	movs	r3, #16
   b5cea:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5cee:	6803      	ldr	r3, [r0, #0]
   b5cf0:	4615      	mov	r5, r2
   b5cf2:	699e      	ldr	r6, [r3, #24]
   b5cf4:	6812      	ldr	r2, [r2, #0]
   b5cf6:	466b      	mov	r3, sp
   b5cf8:	e9cd 4400 	strd	r4, r4, [sp]
   b5cfc:	47b0      	blx	r6
   b5cfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5d02:	f003 0306 	and.w	r3, r3, #6
   b5d06:	2b06      	cmp	r3, #6
   b5d08:	bf03      	ittte	eq
   b5d0a:	9b00      	ldreq	r3, [sp, #0]
   b5d0c:	602b      	streq	r3, [r5, #0]
   b5d0e:	2001      	moveq	r0, #1
   b5d10:	4620      	movne	r0, r4
   b5d12:	b004      	add	sp, #16
   b5d14:	bd70      	pop	{r4, r5, r6, pc}

000b5d16 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5d16:	9800      	ldr	r0, [sp, #0]
   b5d18:	4290      	cmp	r0, r2
   b5d1a:	bf14      	ite	ne
   b5d1c:	2001      	movne	r0, #1
   b5d1e:	2006      	moveq	r0, #6
   b5d20:	4770      	bx	lr
	...

000b5d24 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5d24:	b510      	push	{r4, lr}
   b5d26:	4b03      	ldr	r3, [pc, #12]	; (b5d34 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5d28:	6003      	str	r3, [r0, #0]
   b5d2a:	4604      	mov	r4, r0
   b5d2c:	f000 f8cd 	bl	b5eca <_ZNSt9type_infoD1Ev>
   b5d30:	4620      	mov	r0, r4
   b5d32:	bd10      	pop	{r4, pc}
   b5d34:	000b6420 	.word	0x000b6420

000b5d38 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5d38:	b510      	push	{r4, lr}
   b5d3a:	4604      	mov	r4, r0
   b5d3c:	f7ff fff2 	bl	b5d24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5d40:	4620      	mov	r0, r4
   b5d42:	2108      	movs	r1, #8
   b5d44:	f7fe f9a9 	bl	b409a <_ZdlPvj>
   b5d48:	4620      	mov	r0, r4
   b5d4a:	bd10      	pop	{r4, pc}

000b5d4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d50:	461f      	mov	r7, r3
   b5d52:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5d56:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5d5a:	4598      	cmp	r8, r3
   b5d5c:	4606      	mov	r6, r0
   b5d5e:	4615      	mov	r5, r2
   b5d60:	d107      	bne.n	b5d72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5d62:	9907      	ldr	r1, [sp, #28]
   b5d64:	f000 f8b4 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5d68:	b118      	cbz	r0, b5d72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5d6a:	7165      	strb	r5, [r4, #5]
   b5d6c:	2000      	movs	r0, #0
   b5d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d72:	4639      	mov	r1, r7
   b5d74:	4630      	mov	r0, r6
   b5d76:	f000 f8ab 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5d7a:	2800      	cmp	r0, #0
   b5d7c:	d0f6      	beq.n	b5d6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5d7e:	2301      	movs	r3, #1
   b5d80:	f8c4 8000 	str.w	r8, [r4]
   b5d84:	7125      	strb	r5, [r4, #4]
   b5d86:	71a3      	strb	r3, [r4, #6]
   b5d88:	e7f0      	b.n	b5d6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5d8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5d8a:	b538      	push	{r3, r4, r5, lr}
   b5d8c:	4615      	mov	r5, r2
   b5d8e:	461c      	mov	r4, r3
   b5d90:	f000 f89e 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5d94:	b120      	cbz	r0, b5da0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5d96:	2308      	movs	r3, #8
   b5d98:	60e3      	str	r3, [r4, #12]
   b5d9a:	2306      	movs	r3, #6
   b5d9c:	6025      	str	r5, [r4, #0]
   b5d9e:	7123      	strb	r3, [r4, #4]
   b5da0:	bd38      	pop	{r3, r4, r5, pc}

000b5da2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5da4:	4605      	mov	r5, r0
   b5da6:	460c      	mov	r4, r1
   b5da8:	9201      	str	r2, [sp, #4]
   b5daa:	461e      	mov	r6, r3
   b5dac:	f000 f890 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5db0:	b950      	cbnz	r0, b5dc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5db2:	2e03      	cmp	r6, #3
   b5db4:	d808      	bhi.n	b5dc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5db6:	6823      	ldr	r3, [r4, #0]
   b5db8:	9a01      	ldr	r2, [sp, #4]
   b5dba:	695b      	ldr	r3, [r3, #20]
   b5dbc:	4629      	mov	r1, r5
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	b002      	add	sp, #8
   b5dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5dc6:	4718      	bx	r3
   b5dc8:	b002      	add	sp, #8
   b5dca:	bd70      	pop	{r4, r5, r6, pc}

000b5dcc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5dcc:	b510      	push	{r4, lr}
   b5dce:	4b03      	ldr	r3, [pc, #12]	; (b5ddc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5dd0:	6003      	str	r3, [r0, #0]
   b5dd2:	4604      	mov	r4, r0
   b5dd4:	f7ff ffa6 	bl	b5d24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5dd8:	4620      	mov	r0, r4
   b5dda:	bd10      	pop	{r4, pc}
   b5ddc:	000b6480 	.word	0x000b6480

000b5de0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5de0:	b510      	push	{r4, lr}
   b5de2:	4604      	mov	r4, r0
   b5de4:	f7ff fff2 	bl	b5dcc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5de8:	4620      	mov	r0, r4
   b5dea:	210c      	movs	r1, #12
   b5dec:	f7fe f955 	bl	b409a <_ZdlPvj>
   b5df0:	4620      	mov	r0, r4
   b5df2:	bd10      	pop	{r4, pc}

000b5df4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5df6:	9f08      	ldr	r7, [sp, #32]
   b5df8:	4297      	cmp	r7, r2
   b5dfa:	4605      	mov	r5, r0
   b5dfc:	460e      	mov	r6, r1
   b5dfe:	4614      	mov	r4, r2
   b5e00:	d00a      	beq.n	b5e18 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5e02:	68a8      	ldr	r0, [r5, #8]
   b5e04:	6802      	ldr	r2, [r0, #0]
   b5e06:	9708      	str	r7, [sp, #32]
   b5e08:	6a15      	ldr	r5, [r2, #32]
   b5e0a:	4631      	mov	r1, r6
   b5e0c:	4622      	mov	r2, r4
   b5e0e:	46ac      	mov	ip, r5
   b5e10:	b003      	add	sp, #12
   b5e12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5e16:	4760      	bx	ip
   b5e18:	4619      	mov	r1, r3
   b5e1a:	9301      	str	r3, [sp, #4]
   b5e1c:	f000 f858 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5e20:	9b01      	ldr	r3, [sp, #4]
   b5e22:	2800      	cmp	r0, #0
   b5e24:	d0ed      	beq.n	b5e02 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5e26:	2006      	movs	r0, #6
   b5e28:	b003      	add	sp, #12
   b5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5e2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5e2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e30:	460d      	mov	r5, r1
   b5e32:	4619      	mov	r1, r3
   b5e34:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5e38:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5e3c:	4681      	mov	r9, r0
   b5e3e:	4617      	mov	r7, r2
   b5e40:	4698      	mov	r8, r3
   b5e42:	f000 f845 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5e46:	b190      	cbz	r0, b5e6e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5e48:	2d00      	cmp	r5, #0
   b5e4a:	6034      	str	r4, [r6, #0]
   b5e4c:	7137      	strb	r7, [r6, #4]
   b5e4e:	db09      	blt.n	b5e64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5e50:	1961      	adds	r1, r4, r5
   b5e52:	458a      	cmp	sl, r1
   b5e54:	bf0c      	ite	eq
   b5e56:	2106      	moveq	r1, #6
   b5e58:	2101      	movne	r1, #1
   b5e5a:	71b1      	strb	r1, [r6, #6]
   b5e5c:	2000      	movs	r0, #0
   b5e5e:	b001      	add	sp, #4
   b5e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e64:	3502      	adds	r5, #2
   b5e66:	d1f9      	bne.n	b5e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5e68:	2301      	movs	r3, #1
   b5e6a:	71b3      	strb	r3, [r6, #6]
   b5e6c:	e7f6      	b.n	b5e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5e6e:	4554      	cmp	r4, sl
   b5e70:	d106      	bne.n	b5e80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5e72:	4659      	mov	r1, fp
   b5e74:	4648      	mov	r0, r9
   b5e76:	f000 f82b 	bl	b5ed0 <_ZNKSt9type_infoeqERKS_>
   b5e7a:	b108      	cbz	r0, b5e80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5e7c:	7177      	strb	r7, [r6, #5]
   b5e7e:	e7ed      	b.n	b5e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5e80:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5e84:	6803      	ldr	r3, [r0, #0]
   b5e86:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5e8a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5e8e:	69dc      	ldr	r4, [r3, #28]
   b5e90:	463a      	mov	r2, r7
   b5e92:	4643      	mov	r3, r8
   b5e94:	4629      	mov	r1, r5
   b5e96:	46a4      	mov	ip, r4
   b5e98:	b001      	add	sp, #4
   b5e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e9e:	4760      	bx	ip

000b5ea0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ea4:	4607      	mov	r7, r0
   b5ea6:	460c      	mov	r4, r1
   b5ea8:	4615      	mov	r5, r2
   b5eaa:	461e      	mov	r6, r3
   b5eac:	f7ff ff6d 	bl	b5d8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5eb0:	b948      	cbnz	r0, b5ec6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5eb2:	68b8      	ldr	r0, [r7, #8]
   b5eb4:	6803      	ldr	r3, [r0, #0]
   b5eb6:	699f      	ldr	r7, [r3, #24]
   b5eb8:	462a      	mov	r2, r5
   b5eba:	4633      	mov	r3, r6
   b5ebc:	4621      	mov	r1, r4
   b5ebe:	46bc      	mov	ip, r7
   b5ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5ec4:	4760      	bx	ip
   b5ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5eca <_ZNSt9type_infoD1Ev>:
   b5eca:	4770      	bx	lr

000b5ecc <_ZNKSt9type_info14__is_pointer_pEv>:
   b5ecc:	2000      	movs	r0, #0
   b5ece:	4770      	bx	lr

000b5ed0 <_ZNKSt9type_infoeqERKS_>:
   b5ed0:	4281      	cmp	r1, r0
   b5ed2:	b508      	push	{r3, lr}
   b5ed4:	d00e      	beq.n	b5ef4 <_ZNKSt9type_infoeqERKS_+0x24>
   b5ed6:	6840      	ldr	r0, [r0, #4]
   b5ed8:	7803      	ldrb	r3, [r0, #0]
   b5eda:	2b2a      	cmp	r3, #42	; 0x2a
   b5edc:	d00c      	beq.n	b5ef8 <_ZNKSt9type_infoeqERKS_+0x28>
   b5ede:	6849      	ldr	r1, [r1, #4]
   b5ee0:	780b      	ldrb	r3, [r1, #0]
   b5ee2:	2b2a      	cmp	r3, #42	; 0x2a
   b5ee4:	bf08      	it	eq
   b5ee6:	3101      	addeq	r1, #1
   b5ee8:	f000 f852 	bl	b5f90 <strcmp>
   b5eec:	fab0 f080 	clz	r0, r0
   b5ef0:	0940      	lsrs	r0, r0, #5
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	2001      	movs	r0, #1
   b5ef6:	e7fc      	b.n	b5ef2 <_ZNKSt9type_infoeqERKS_+0x22>
   b5ef8:	2000      	movs	r0, #0
   b5efa:	e7fa      	b.n	b5ef2 <_ZNKSt9type_infoeqERKS_+0x22>

000b5efc <atexit>:
   b5efc:	2300      	movs	r3, #0
   b5efe:	4601      	mov	r1, r0
   b5f00:	461a      	mov	r2, r3
   b5f02:	4618      	mov	r0, r3
   b5f04:	f000 b85e 	b.w	b5fc4 <__register_exitproc>

000b5f08 <memcpy>:
   b5f08:	440a      	add	r2, r1
   b5f0a:	4291      	cmp	r1, r2
   b5f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5f10:	d100      	bne.n	b5f14 <memcpy+0xc>
   b5f12:	4770      	bx	lr
   b5f14:	b510      	push	{r4, lr}
   b5f16:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5f1e:	4291      	cmp	r1, r2
   b5f20:	d1f9      	bne.n	b5f16 <memcpy+0xe>
   b5f22:	bd10      	pop	{r4, pc}

000b5f24 <memset>:
   b5f24:	4402      	add	r2, r0
   b5f26:	4603      	mov	r3, r0
   b5f28:	4293      	cmp	r3, r2
   b5f2a:	d100      	bne.n	b5f2e <memset+0xa>
   b5f2c:	4770      	bx	lr
   b5f2e:	f803 1b01 	strb.w	r1, [r3], #1
   b5f32:	e7f9      	b.n	b5f28 <memset+0x4>

000b5f34 <srand>:
   b5f34:	b538      	push	{r3, r4, r5, lr}
   b5f36:	4b10      	ldr	r3, [pc, #64]	; (b5f78 <srand+0x44>)
   b5f38:	681d      	ldr	r5, [r3, #0]
   b5f3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f3c:	4604      	mov	r4, r0
   b5f3e:	b9b3      	cbnz	r3, b5f6e <srand+0x3a>
   b5f40:	2018      	movs	r0, #24
   b5f42:	f7fe fd49 	bl	b49d8 <malloc>
   b5f46:	4602      	mov	r2, r0
   b5f48:	63a8      	str	r0, [r5, #56]	; 0x38
   b5f4a:	b920      	cbnz	r0, b5f56 <srand+0x22>
   b5f4c:	4b0b      	ldr	r3, [pc, #44]	; (b5f7c <srand+0x48>)
   b5f4e:	480c      	ldr	r0, [pc, #48]	; (b5f80 <srand+0x4c>)
   b5f50:	2142      	movs	r1, #66	; 0x42
   b5f52:	f7fe fd69 	bl	b4a28 <__assert_func>
   b5f56:	490b      	ldr	r1, [pc, #44]	; (b5f84 <srand+0x50>)
   b5f58:	4b0b      	ldr	r3, [pc, #44]	; (b5f88 <srand+0x54>)
   b5f5a:	e9c0 1300 	strd	r1, r3, [r0]
   b5f5e:	4b0b      	ldr	r3, [pc, #44]	; (b5f8c <srand+0x58>)
   b5f60:	6083      	str	r3, [r0, #8]
   b5f62:	230b      	movs	r3, #11
   b5f64:	8183      	strh	r3, [r0, #12]
   b5f66:	2100      	movs	r1, #0
   b5f68:	2001      	movs	r0, #1
   b5f6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5f6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f70:	2200      	movs	r2, #0
   b5f72:	611c      	str	r4, [r3, #16]
   b5f74:	615a      	str	r2, [r3, #20]
   b5f76:	bd38      	pop	{r3, r4, r5, pc}
   b5f78:	2003e5bc 	.word	0x2003e5bc
   b5f7c:	000b64b9 	.word	0x000b64b9
   b5f80:	000b64d0 	.word	0x000b64d0
   b5f84:	abcd330e 	.word	0xabcd330e
   b5f88:	e66d1234 	.word	0xe66d1234
   b5f8c:	0005deec 	.word	0x0005deec

000b5f90 <strcmp>:
   b5f90:	f810 2b01 	ldrb.w	r2, [r0], #1
   b5f94:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5f98:	2a01      	cmp	r2, #1
   b5f9a:	bf28      	it	cs
   b5f9c:	429a      	cmpcs	r2, r3
   b5f9e:	d0f7      	beq.n	b5f90 <strcmp>
   b5fa0:	1ad0      	subs	r0, r2, r3
   b5fa2:	4770      	bx	lr

000b5fa4 <strcpy>:
   b5fa4:	4603      	mov	r3, r0
   b5fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5faa:	f803 2b01 	strb.w	r2, [r3], #1
   b5fae:	2a00      	cmp	r2, #0
   b5fb0:	d1f9      	bne.n	b5fa6 <strcpy+0x2>
   b5fb2:	4770      	bx	lr

000b5fb4 <strlen>:
   b5fb4:	4603      	mov	r3, r0
   b5fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5fba:	2a00      	cmp	r2, #0
   b5fbc:	d1fb      	bne.n	b5fb6 <strlen+0x2>
   b5fbe:	1a18      	subs	r0, r3, r0
   b5fc0:	3801      	subs	r0, #1
   b5fc2:	4770      	bx	lr

000b5fc4 <__register_exitproc>:
   b5fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5fc8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6084 <__register_exitproc+0xc0>
   b5fcc:	4606      	mov	r6, r0
   b5fce:	f8d8 0000 	ldr.w	r0, [r8]
   b5fd2:	461f      	mov	r7, r3
   b5fd4:	460d      	mov	r5, r1
   b5fd6:	4691      	mov	r9, r2
   b5fd8:	f000 f856 	bl	b6088 <__retarget_lock_acquire_recursive>
   b5fdc:	4b25      	ldr	r3, [pc, #148]	; (b6074 <__register_exitproc+0xb0>)
   b5fde:	681c      	ldr	r4, [r3, #0]
   b5fe0:	b934      	cbnz	r4, b5ff0 <__register_exitproc+0x2c>
   b5fe2:	4c25      	ldr	r4, [pc, #148]	; (b6078 <__register_exitproc+0xb4>)
   b5fe4:	601c      	str	r4, [r3, #0]
   b5fe6:	4b25      	ldr	r3, [pc, #148]	; (b607c <__register_exitproc+0xb8>)
   b5fe8:	b113      	cbz	r3, b5ff0 <__register_exitproc+0x2c>
   b5fea:	681b      	ldr	r3, [r3, #0]
   b5fec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5ff0:	6863      	ldr	r3, [r4, #4]
   b5ff2:	2b1f      	cmp	r3, #31
   b5ff4:	dd07      	ble.n	b6006 <__register_exitproc+0x42>
   b5ff6:	f8d8 0000 	ldr.w	r0, [r8]
   b5ffa:	f000 f847 	bl	b608c <__retarget_lock_release_recursive>
   b5ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6006:	b34e      	cbz	r6, b605c <__register_exitproc+0x98>
   b6008:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b600c:	b988      	cbnz	r0, b6032 <__register_exitproc+0x6e>
   b600e:	4b1c      	ldr	r3, [pc, #112]	; (b6080 <__register_exitproc+0xbc>)
   b6010:	b923      	cbnz	r3, b601c <__register_exitproc+0x58>
   b6012:	f8d8 0000 	ldr.w	r0, [r8]
   b6016:	f000 f838 	bl	b608a <__retarget_lock_release>
   b601a:	e7f0      	b.n	b5ffe <__register_exitproc+0x3a>
   b601c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6020:	f7fe fcda 	bl	b49d8 <malloc>
   b6024:	2800      	cmp	r0, #0
   b6026:	d0f4      	beq.n	b6012 <__register_exitproc+0x4e>
   b6028:	2300      	movs	r3, #0
   b602a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b602e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6032:	6863      	ldr	r3, [r4, #4]
   b6034:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6038:	2201      	movs	r2, #1
   b603a:	409a      	lsls	r2, r3
   b603c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6040:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6044:	4313      	orrs	r3, r2
   b6046:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b604a:	2e02      	cmp	r6, #2
   b604c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6050:	bf02      	ittt	eq
   b6052:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6056:	4313      	orreq	r3, r2
   b6058:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b605c:	6863      	ldr	r3, [r4, #4]
   b605e:	f8d8 0000 	ldr.w	r0, [r8]
   b6062:	1c5a      	adds	r2, r3, #1
   b6064:	3302      	adds	r3, #2
   b6066:	6062      	str	r2, [r4, #4]
   b6068:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b606c:	f000 f80e 	bl	b608c <__retarget_lock_release_recursive>
   b6070:	2000      	movs	r0, #0
   b6072:	e7c6      	b.n	b6002 <__register_exitproc+0x3e>
   b6074:	2003e7e8 	.word	0x2003e7e8
   b6078:	2003e75c 	.word	0x2003e75c
   b607c:	00000000 	.word	0x00000000
   b6080:	000b49d9 	.word	0x000b49d9
   b6084:	2003e620 	.word	0x2003e620

000b6088 <__retarget_lock_acquire_recursive>:
   b6088:	4770      	bx	lr

000b608a <__retarget_lock_release>:
   b608a:	4770      	bx	lr

000b608c <__retarget_lock_release_recursive>:
   b608c:	4770      	bx	lr

000b608e <link_code_end>:
	...

000b6090 <dynalib_user>:
   b6090:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b60a0:	0000 0000 6f4e 4320 6168 676e 2065 202d     ....No Change - 
   b60b0:	6143 636e 6c65 696c 676e 4320 444d 000a     Cancelling CMD..
   b60c0:	227b 6e6f 3a22 7274 6575 222c 6173 2274     {"on":true,"sat"
   b60d0:	003a 222c 7262 2269 003a 222c 7568 2265     :.,"bri":.,"hue"
   b60e0:	003a 227b 6e6f 3a22 6166 736c 7d65 5300     :.{"on":false}.S
   b60f0:	6e65 6964 676e 4320 6d6f 616d 646e 7420     ending Command t
   b6100:	206f 7548 0065 5550 2054 612f 6970 002f     o Hue.PUT /api/.
   b6110:	6c2f 6769 7468 2f73 2f00 7473 7461 2065     /lights/./state 
   b6120:	5448 5054 312f 312e 6b00 6565 2d70 6c61     HTTP/1.1.keep-al
   b6130:	7669 0065 6f48 7473 203a 4300 6e6f 6574     ive.Host: .Conte
   b6140:	746e 4c2d 6e65 7467 3a68 0020 6f43 746e     nt-Length: .Cont
   b6150:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
   b6160:	616c 6e69 633b 6168 7372 7465 553d 4654     lain;charset=UTF
   b6170:	382d 4600 6f72 206d 7548 0065 6f49 4e54     -8.From Hue.IoTN
   b6180:	7465 6f77 6b72 2e00 0a00 000a 6573 736e     etwork......sens
   b6190:	726f 6572 6461                               orread.

000b6197 <_ZL11hueUsername>:
   b6197:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b61a7:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b61b7:	7438 334d 4637 5433                          8tM37F3T.

000b61c0 <_ZL8hueHubIP>:
   b61c0:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b61cc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b61d4 <_ZTVN5spark13EthernetClassE>:
	...
   b61dc:	4abf 000b 4ab5 000b 4aab 000b 4aa1 000b     .J...J...J...J..
   b61ec:	4a95 000b 4a89 000b 4cdd 000b 4ce5 000b     .J...J...L...L..
   b61fc:	4a7d 000b 4a75 000b 4a6b 000b 4a61 000b     }J..uJ..kJ..aJ..
   b620c:	4d15 000b                                   .M..

000b6210 <_ZTV7TwoWire>:
	...
   b6218:	4add 000b 4b27 000b 4aff 000b 4adf 000b     .J..'K...J...J..
   b6228:	4b07 000b 4b0f 000b 4b17 000b 4b1f 000b     .K...K...K...K..

000b6238 <_ZTV9IPAddress>:
	...
   b6240:	4b81 000b 4b71 000b 4b73 000b 7061 0070     .K..qK..sK..app.

000b6250 <_ZTVN5spark12NetworkClassE>:
	...
   b6258:	4c9d 000b 4ca7 000b 4cb1 000b 4cbb 000b     .L...L...L...L..
   b6268:	4cc5 000b 4cd1 000b 4cdd 000b 4ce5 000b     .L...L...L...L..
   b6278:	4ced 000b 4cf9 000b 4d01 000b 4d0b 000b     .L...L...M...M..
   b6288:	4d15 000b 6977 6972 676e 7200 6365 2076     .M..wiring.recv 
   b6298:	7265 6f72 2072 203d 6425 0000               error = %d..

000b62a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b62ac:	520d 000b 5231 000b 571b 000b 523f 000b     .R..1R...W..?R..
   b62bc:	5211 000b                                   .R..

000b62c0 <_ZTV9TCPClient>:
	...
   b62c8:	40f1 000b 4125 000b 5189 000b 51a3 000b     .@..%A...Q...Q..
   b62d8:	55b1 000b 51cd 000b 5427 000b 5201 000b     .U...Q..'T...R..
   b62e8:	54b9 000b 52f9 000b 5455 000b 5665 000b     .T...R..UT..eV..
   b62f8:	53f5 000b 5203 000b 51b5 000b 5245 000b     .S...R...Q..ER..
   b6308:	52d9 000b 5925 252d 2d6d 6425 2554 3a48     .R..%Y-%m-%dT%H:
   b6318:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6328 <_ZTV11USARTSerial>:
	...
   b6330:	5735 000b 57a1 000b 5779 000b 4e01 000b     5W...W..yW...N..
   b6340:	5749 000b 5765 000b 5757 000b 5773 000b     IW..eW..WW..sW..
   b6350:	5737 000b 573b 000b                         7W..;W..

000b6358 <_ZTV9USBSerial>:
	...
   b6360:	57df 000b 5847 000b 581d 000b 4e01 000b     .W..GX...X...N..
   b6370:	580f 000b 57e1 000b 57f1 000b 5841 000b     .X...W...W..AX..
   b6380:	5801 000b 57d9 000b                         .X...W..

000b6388 <_ZTVN5spark9WiFiClassE>:
	...
   b6390:	5947 000b 593d 000b 5933 000b 58e9 000b     GY..=Y..3Y...X..
   b63a0:	5927 000b 591b 000b 4cdd 000b 4ce5 000b     'Y...Y...L...L..
   b63b0:	590f 000b 5907 000b 58fd 000b 58f3 000b     .Y...Y...X...X..
   b63c0:	4d15 000b                                   .M..

000b63c4 <_ZSt7nothrow>:
	...

000b63c5 <_ZTSSt19_Sp_make_shared_tag>:
   b63c5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b63d5:	6572 5f64 6174 0067 0000                     red_tag....

000b63e0 <_ZTISt19_Sp_make_shared_tag>:
   b63e0:	6420 000b 63c5 000b                          d...c..

000b63e8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b63e8:	6480 000b 63f4 000b 64a4 000b               .d...c...d..

000b63f4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b63f4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6404:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6414:	0045 0000                                   E...

000b6418 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6418:	0000 0000 63e8 000b 5d25 000b 5d39 000b     .....c..%]..9]..
   b6428:	5ecd 000b 5ecd 000b 5da3 000b 5ce5 000b     .^...^...]...\..
   b6438:	5d8b 000b 5d4d 000b 5d17 000b               .]..M]...]..

000b6444 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6444:	6480 000b 6450 000b 63e8 000b               .d..Pd...c..

000b6450 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6450:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6460:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6470:	666e 456f 0000 0000                         nfoE....

000b6478 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6478:	0000 0000 6444 000b 5dcd 000b 5de1 000b     ....Dd...]...]..
   b6488:	5ecd 000b 5ecd 000b 5da3 000b 5ce5 000b     .^...^...]...\..
   b6498:	5ea1 000b 5e2d 000b 5df5 000b               .^..-^...]..

000b64a4 <_ZTISt9type_info>:
   b64a4:	6420 000b 64ac 000b                          d...d..

000b64ac <_ZTSSt9type_info>:
   b64ac:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b64bc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b64cc:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b64dc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b64ec:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b64fc:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b650c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b651c:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b6529 <link_const_variable_data_end>:
   b6529:	00          	.byte	0x00
	...

000b652c <link_constructors_location>:
   b652c:	000b4551 	.word	0x000b4551
   b6530:	000b4a51 	.word	0x000b4a51
   b6534:	000b4ac9 	.word	0x000b4ac9
   b6538:	000b4c8d 	.word	0x000b4c8d
   b653c:	000b4ded 	.word	0x000b4ded
   b6540:	000b4f29 	.word	0x000b4f29
   b6544:	000b5165 	.word	0x000b5165
   b6548:	000b5721 	.word	0x000b5721
   b654c:	000b5951 	.word	0x000b5951
