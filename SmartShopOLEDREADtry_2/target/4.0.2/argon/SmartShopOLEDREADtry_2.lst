
/Users/jamesblack/Documents/IoT/smartshop/SmartShopOLEDREADtry_2/target/4.0.2/argon/SmartShopOLEDREADtry_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004190  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b81b0  000b81b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b81d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000488  2003e1f8  000b81d8  0001e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  2003e680  2003e680  0002e680  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8660  000b8660  00028660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8688  000b8688  00028688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001009f9  00000000  00000000  0002868c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011208  00000000  00000000  00129085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00033b2b  00000000  00000000  0013a28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f0  00000000  00000000  0016ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009398  00000000  00000000  001706a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037fa3  00000000  00000000  00179a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003af8f  00000000  00000000  001b19e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f133  00000000  00000000  001ec972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000750c  00000000  00000000  0031baa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fc1d 	bl	b7870 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fc25 	bl	b788c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e1f8 	.word	0x2003e1f8
   b404c:	000b81d8 	.word	0x000b81d8
   b4050:	2003e680 	.word	0x2003e680
   b4054:	2003e680 	.word	0x2003e680
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fd7b 	bl	b5b5c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8188 	.word	0x000b8188
   b4080:	000b81ac 	.word	0x000b81ac

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b82e 	b.w	b40e4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f859 	bl	b4140 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bd1b 	b.w	b5acc <_post_loop>

000b4096 <_Znaj>:
   b4096:	f001 b875 	b.w	b5184 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b87b 	b.w	b5194 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f000 ffd8 	bl	b505c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b4dad 	.word	0x000b4dad
   b40b4:	000b79e8 	.word	0x000b79e8

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 fab4 	bl	b5642 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
#define OLED_RESET D0

// Create OLED display object
Adafruit_SSD1306 display(OLED_RESET);

void setup() {
   b40e4:	b510      	push	{r4, lr}
  
  Wire.begin();

  // Initialize OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b40e6:	4c13      	ldr	r4, [pc, #76]	; (b4134 <setup+0x50>)
  Wire.begin();
   b40e8:	f001 fe12 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b40ec:	f001 f90e 	bl	b530c <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b40f0:	223c      	movs	r2, #60	; 0x3c
   b40f2:	2102      	movs	r1, #2
   b40f4:	4620      	mov	r0, r4
   b40f6:	f000 fd71 	bl	b4bdc <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b40fa:	4620      	mov	r0, r4
   b40fc:	f000 fc86 	bl	b4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4100:	4620      	mov	r0, r4
   b4102:	2101      	movs	r1, #1
   b4104:	f000 fa99 	bl	b463a <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b4108:	4620      	mov	r0, r4
   b410a:	2101      	movs	r1, #1
   b410c:	f000 fa9a 	bl	b4644 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0); // Set cursor position for text
   b4110:	2200      	movs	r2, #0
   b4112:	4611      	mov	r1, r2
   b4114:	4620      	mov	r0, r4
   b4116:	f000 fa8d 	bl	b4634 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("SMARTSHOP");
   b411a:	4907      	ldr	r1, [pc, #28]	; (b4138 <setup+0x54>)
   b411c:	4620      	mov	r0, r4
   b411e:	f7ff ffd3 	bl	b40c8 <_ZN5Print6printfEPKcz>
  display.display();
   b4122:	4620      	mov	r0, r4
   b4124:	f000 fcea 	bl	b4afc <_ZN16Adafruit_SSD13067displayEv>

  // Set system mode to semi-automatic
  SYSTEM_MODE(SEMI_AUTOMATIC);
}
   b4128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b412c:	2002      	movs	r0, #2
   b412e:	f000 bf9d 	b.w	b506c <set_system_mode>
   b4132:	bf00      	nop
   b4134:	2003e684 	.word	0x2003e684
   b4138:	000b79fd 	.word	0x000b79fd
   b413c:	00000000 	.word	0x00000000

000b4140 <loop>:

void loop() {
   b4140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4144:	ed2d 8b02 	vpush	{d8}
  duration = pulseIn(pin, LOW);
   b4148:	4b57      	ldr	r3, [pc, #348]	; (b42a8 <loop+0x168>)
  lowpulseoccupancy += duration; // Increment low pulse occupancy with each reading
   b414a:	4c58      	ldr	r4, [pc, #352]	; (b42ac <loop+0x16c>)
  duration = pulseIn(pin, LOW);
   b414c:	8818      	ldrh	r0, [r3, #0]

  if ((millis() - starttime) > sampletime_ms) {
   b414e:	4d58      	ldr	r5, [pc, #352]	; (b42b0 <loop+0x170>)
  duration = pulseIn(pin, LOW);
   b4150:	2100      	movs	r1, #0
   b4152:	f001 fdbf 	bl	b5cd4 <pulseIn>
   b4156:	4b57      	ldr	r3, [pc, #348]	; (b42b4 <loop+0x174>)
   b4158:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy += duration; // Increment low pulse occupancy with each reading
   b415a:	6823      	ldr	r3, [r4, #0]
   b415c:	4418      	add	r0, r3
   b415e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4160:	f000 fe2c 	bl	b4dbc <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - starttime) > sampletime_ms) {
   b4164:	4b54      	ldr	r3, [pc, #336]	; (b42b8 <loop+0x178>)
   b4166:	f8d3 8000 	ldr.w	r8, [r3]
   b416a:	682b      	ldr	r3, [r5, #0]
   b416c:	1ac0      	subs	r0, r0, r3
   b416e:	4540      	cmp	r0, r8
   b4170:	f240 8086 	bls.w	b4280 <loop+0x140>
    ratio = lowpulseoccupancy / (sampletime_ms * 10.0); // Calculate ratio
   b4174:	6820      	ldr	r0, [r4, #0]
   b4176:	f002 fffb 	bl	b7170 <__aeabi_ui2d>
   b417a:	4606      	mov	r6, r0
   b417c:	4640      	mov	r0, r8
   b417e:	460f      	mov	r7, r1
   b4180:	f002 fff6 	bl	b7170 <__aeabi_ui2d>
   b4184:	4b4d      	ldr	r3, [pc, #308]	; (b42bc <loop+0x17c>)
   b4186:	f8df 8150 	ldr.w	r8, [pc, #336]	; b42d8 <loop+0x198>
   b418a:	2200      	movs	r2, #0
   b418c:	f003 f86a 	bl	b7264 <__aeabi_dmul>
   b4190:	4602      	mov	r2, r0
   b4192:	460b      	mov	r3, r1
   b4194:	4630      	mov	r0, r6
   b4196:	4639      	mov	r1, r7
   b4198:	f003 f98e 	bl	b74b8 <__aeabi_ddiv>
   b419c:	f003 fb12 	bl	b77c4 <__aeabi_d2f>
   b41a0:	f8c8 0000 	str.w	r0, [r8]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b41a4:	f003 f806 	bl	b71b4 <__aeabi_f2d>
   b41a8:	ed9f 1b37 	vldr	d1, [pc, #220]	; b4288 <loop+0x148>
   b41ac:	ec41 0b10 	vmov	d0, r0, r1
   b41b0:	f001 fe16 	bl	b5de0 <pow>
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b41b4:	ed98 8a00 	vldr	s16, [r8]
   b41b8:	ee18 0a10 	vmov	r0, s16
   b41bc:	ec57 6b10 	vmov	r6, r7, d0
   b41c0:	f002 fff8 	bl	b71b4 <__aeabi_f2d>
   b41c4:	a332      	add	r3, pc, #200	; (adr r3, b4290 <loop+0x150>)
   b41c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41ca:	4680      	mov	r8, r0
   b41cc:	4689      	mov	r9, r1
   b41ce:	4630      	mov	r0, r6
   b41d0:	4639      	mov	r1, r7
   b41d2:	f003 f847 	bl	b7264 <__aeabi_dmul>
   b41d6:	4642      	mov	r2, r8
   b41d8:	4606      	mov	r6, r0
   b41da:	460f      	mov	r7, r1
   b41dc:	464b      	mov	r3, r9
   b41de:	4640      	mov	r0, r8
   b41e0:	4649      	mov	r1, r9
   b41e2:	f003 f83f 	bl	b7264 <__aeabi_dmul>
   b41e6:	a32c      	add	r3, pc, #176	; (adr r3, b4298 <loop+0x158>)
   b41e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41ec:	f003 f83a 	bl	b7264 <__aeabi_dmul>
   b41f0:	4602      	mov	r2, r0
   b41f2:	460b      	mov	r3, r1
   b41f4:	4630      	mov	r0, r6
   b41f6:	4639      	mov	r1, r7
   b41f8:	f002 fe7c 	bl	b6ef4 <__aeabi_dsub>
   b41fc:	eddf 7a30 	vldr	s15, [pc, #192]	; b42c0 <loop+0x180>
   b4200:	ee68 7a27 	vmul.f32	s15, s16, s15
   b4204:	4606      	mov	r6, r0
   b4206:	ee17 0a90 	vmov	r0, s15
   b420a:	460f      	mov	r7, r1
   b420c:	f002 ffd2 	bl	b71b4 <__aeabi_f2d>
   b4210:	4602      	mov	r2, r0
   b4212:	460b      	mov	r3, r1
   b4214:	4630      	mov	r0, r6
   b4216:	4639      	mov	r1, r7
   b4218:	f002 fe6e 	bl	b6ef8 <__adddf3>
   b421c:	a320      	add	r3, pc, #128	; (adr r3, b42a0 <loop+0x160>)
   b421e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4222:	f002 fe69 	bl	b6ef8 <__adddf3>
   b4226:	f003 facd 	bl	b77c4 <__aeabi_d2f>

    // If concentration is greater than or equal to 3000, display message on OLED screen
    if (concentration >= 3000) {
   b422a:	ed9f 7a26 	vldr	s14, [pc, #152]	; b42c4 <loop+0x184>
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b422e:	4b26      	ldr	r3, [pc, #152]	; (b42c8 <loop+0x188>)
   b4230:	ee07 0a90 	vmov	s15, r0
    if (concentration >= 3000) {
   b4234:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b423c:	6018      	str	r0, [r3, #0]
    if (concentration >= 3000) {
   b423e:	db1a      	blt.n	b4276 <loop+0x136>
      display.clearDisplay();
   b4240:	4822      	ldr	r0, [pc, #136]	; (b42cc <loop+0x18c>)
   b4242:	f000 fbe3 	bl	b4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   b4246:	4821      	ldr	r0, [pc, #132]	; (b42cc <loop+0x18c>)
   b4248:	2101      	movs	r1, #1
   b424a:	f000 f9f6 	bl	b463a <_ZN12Adafruit_GFX11setTextSizeEh>
      display.setTextColor(WHITE);
   b424e:	481f      	ldr	r0, [pc, #124]	; (b42cc <loop+0x18c>)
   b4250:	2101      	movs	r1, #1
   b4252:	f000 f9f7 	bl	b4644 <_ZN12Adafruit_GFX12setTextColorEt>
      display.setCursor(0,0);
   b4256:	2200      	movs	r2, #0
   b4258:	4611      	mov	r1, r2
   b425a:	481c      	ldr	r0, [pc, #112]	; (b42cc <loop+0x18c>)
   b425c:	f000 f9ea 	bl	b4634 <_ZN12Adafruit_GFX9setCursorEss>
      display.printf("SMARTSHOP");
   b4260:	491b      	ldr	r1, [pc, #108]	; (b42d0 <loop+0x190>)
   b4262:	481a      	ldr	r0, [pc, #104]	; (b42cc <loop+0x18c>)
   b4264:	f7ff ff30 	bl	b40c8 <_ZN5Print6printfEPKcz>
      display.printf("Smoke detected!");
   b4268:	491a      	ldr	r1, [pc, #104]	; (b42d4 <loop+0x194>)
   b426a:	4818      	ldr	r0, [pc, #96]	; (b42cc <loop+0x18c>)
   b426c:	f7ff ff2c 	bl	b40c8 <_ZN5Print6printfEPKcz>
      display.display();
   b4270:	4816      	ldr	r0, [pc, #88]	; (b42cc <loop+0x18c>)
   b4272:	f000 fc43 	bl	b4afc <_ZN16Adafruit_SSD13067displayEv>
    }

    // Reset variables for next reading
    lowpulseoccupancy = 0;
   b4276:	2300      	movs	r3, #0
   b4278:	6023      	str	r3, [r4, #0]
   b427a:	f000 fd9f 	bl	b4dbc <HAL_Timer_Get_Milli_Seconds>
    starttime = millis();
   b427e:	6028      	str	r0, [r5, #0]
  }
   b4280:	ecbd 8b02 	vpop	{d8}
   b4284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4288:	00000000 	.word	0x00000000
   b428c:	40080000 	.word	0x40080000
   b4290:	9999999a 	.word	0x9999999a
   b4294:	3ff19999 	.word	0x3ff19999
   b4298:	66666666 	.word	0x66666666
   b429c:	400e6666 	.word	0x400e6666
   b42a0:	3d70a3d7 	.word	0x3d70a3d7
   b42a4:	3fe3d70a 	.word	0x3fe3d70a
   b42a8:	2003e1f8 	.word	0x2003e1f8
   b42ac:	2003e6ac 	.word	0x2003e6ac
   b42b0:	2003e6b4 	.word	0x2003e6b4
   b42b4:	2003e6a8 	.word	0x2003e6a8
   b42b8:	2003e1fc 	.word	0x2003e1fc
   b42bc:	40240000 	.word	0x40240000
   b42c0:	44020000 	.word	0x44020000
   b42c4:	453b8000 	.word	0x453b8000
   b42c8:	2003e680 	.word	0x2003e680
   b42cc:	2003e684 	.word	0x2003e684
   b42d0:	000b79fd 	.word	0x000b79fd
   b42d4:	000b7a07 	.word	0x000b7a07
   b42d8:	2003e6b0 	.word	0x2003e6b0

000b42dc <_GLOBAL__sub_I_pin>:
Adafruit_SSD1306 display(OLED_RESET);
   b42dc:	4801      	ldr	r0, [pc, #4]	; (b42e4 <_GLOBAL__sub_I_pin+0x8>)
   b42de:	2100      	movs	r1, #0
   b42e0:	f000 bb7e 	b.w	b49e0 <_ZN16Adafruit_SSD1306C1Ea>
   b42e4:	2003e684 	.word	0x2003e684

000b42e8 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b42e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42ec:	b085      	sub	sp, #20
   b42ee:	461f      	mov	r7, r3
   b42f0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b42f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b42f8:	eba8 0902 	sub.w	r9, r8, r2
   b42fc:	eba7 0a01 	sub.w	sl, r7, r1
   b4300:	f1b9 0f00 	cmp.w	r9, #0
   b4304:	bfb8      	it	lt
   b4306:	f1c9 0900 	rsblt	r9, r9, #0
   b430a:	f1ba 0f00 	cmp.w	sl, #0
   b430e:	bfb8      	it	lt
   b4310:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4314:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4316:	4683      	mov	fp, r0
   b4318:	460c      	mov	r4, r1
   b431a:	4615      	mov	r5, r2
  if (steep) {
   b431c:	dd04      	ble.n	b4328 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b431e:	463a      	mov	r2, r7
    swap(x0, y0);
   b4320:	462c      	mov	r4, r5
    swap(x1, y1);
   b4322:	4647      	mov	r7, r8
    swap(x0, y0);
   b4324:	460d      	mov	r5, r1
    swap(x1, y1);
   b4326:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4328:	42bc      	cmp	r4, r7
   b432a:	dd05      	ble.n	b4338 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b432c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b432e:	4645      	mov	r5, r8
   b4330:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4332:	4622      	mov	r2, r4
   b4334:	463c      	mov	r4, r7
   b4336:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4338:	1b3e      	subs	r6, r7, r4
   b433a:	b2b2      	uxth	r2, r6
   b433c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b433e:	eba8 0205 	sub.w	r2, r8, r5
   b4342:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4346:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b434a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b434e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4352:	4545      	cmp	r5, r8
   b4354:	bfb4      	ite	lt
   b4356:	2201      	movlt	r2, #1
   b4358:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b435c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b435e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4360:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4362:	42bc      	cmp	r4, r7
   b4364:	dc1c      	bgt.n	b43a0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4366:	f8db 2000 	ldr.w	r2, [fp]
   b436a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b436c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b436e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4372:	bfc7      	ittee	gt
   b4374:	4629      	movgt	r1, r5
   b4376:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4378:	462a      	movle	r2, r5
   b437a:	4621      	movle	r1, r4
   b437c:	4658      	mov	r0, fp
   b437e:	47c0      	blx	r8
    }
    err -= dy;
   b4380:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4382:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4384:	1ab6      	subs	r6, r6, r2
   b4386:	b2b1      	uxth	r1, r6
   b4388:	b236      	sxth	r6, r6
    if (err < 0) {
   b438a:	2e00      	cmp	r6, #0
   b438c:	da05      	bge.n	b439a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b438e:	9a02      	ldr	r2, [sp, #8]
   b4390:	4415      	add	r5, r2
      err += dx;
   b4392:	9a00      	ldr	r2, [sp, #0]
   b4394:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4396:	b22d      	sxth	r5, r5
      err += dx;
   b4398:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b439a:	3401      	adds	r4, #1
   b439c:	b224      	sxth	r4, r4
   b439e:	e7e0      	b.n	b4362 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b43a0:	b005      	add	sp, #20
   b43a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b43a6 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b43a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b43aa:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b43ae:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b43b0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b43b4:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b43b8:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b43ba:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b43bc:	4616      	mov	r6, r2
   b43be:	468a      	mov	sl, r1
   b43c0:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b43c2:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b43c4:	6823      	ldr	r3, [r4, #0]
   b43c6:	f8cd 8000 	str.w	r8, [sp]
   b43ca:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b43ce:	4432      	add	r2, r6
   b43d0:	69df      	ldr	r7, [r3, #28]
   b43d2:	4651      	mov	r1, sl
   b43d4:	462b      	mov	r3, r5
   b43d6:	4620      	mov	r0, r4
   b43d8:	b212      	sxth	r2, r2
   b43da:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b43dc:	6823      	ldr	r3, [r4, #0]
   b43de:	f8cd 8000 	str.w	r8, [sp]
   b43e2:	699f      	ldr	r7, [r3, #24]
   b43e4:	4632      	mov	r2, r6
   b43e6:	464b      	mov	r3, r9
   b43e8:	4651      	mov	r1, sl
   b43ea:	4620      	mov	r0, r4
   b43ec:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b43ee:	1e6b      	subs	r3, r5, #1
   b43f0:	eb03 010a 	add.w	r1, r3, sl
   b43f4:	6823      	ldr	r3, [r4, #0]
   b43f6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b43fa:	699d      	ldr	r5, [r3, #24]
   b43fc:	4632      	mov	r2, r6
   b43fe:	464b      	mov	r3, r9
   b4400:	b209      	sxth	r1, r1
   b4402:	4620      	mov	r0, r4
   b4404:	46ac      	mov	ip, r5
}
   b4406:	b002      	add	sp, #8
   b4408:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b440c:	4760      	bx	ip

000b440e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b440e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4410:	3b01      	subs	r3, #1
   b4412:	4413      	add	r3, r2
   b4414:	6804      	ldr	r4, [r0, #0]
   b4416:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b441a:	9501      	str	r5, [sp, #4]
   b441c:	b21b      	sxth	r3, r3
   b441e:	9300      	str	r3, [sp, #0]
   b4420:	6964      	ldr	r4, [r4, #20]
   b4422:	460b      	mov	r3, r1
   b4424:	47a0      	blx	r4
}
   b4426:	b003      	add	sp, #12
   b4428:	bd30      	pop	{r4, r5, pc}

000b442a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b442a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b442c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4430:	6804      	ldr	r4, [r0, #0]
   b4432:	e9cd 2500 	strd	r2, r5, [sp]
   b4436:	3b01      	subs	r3, #1
   b4438:	440b      	add	r3, r1
   b443a:	6964      	ldr	r4, [r4, #20]
   b443c:	b21b      	sxth	r3, r3
   b443e:	47a0      	blx	r4
}
   b4440:	b003      	add	sp, #12
   b4442:	bd30      	pop	{r4, r5, pc}

000b4444 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4444:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4448:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b444c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4450:	4605      	mov	r5, r0
   b4452:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4454:	460c      	mov	r4, r1
   b4456:	18ce      	adds	r6, r1, r3
   b4458:	42b4      	cmp	r4, r6
   b445a:	da0b      	bge.n	b4474 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b445c:	682b      	ldr	r3, [r5, #0]
   b445e:	f8cd 8000 	str.w	r8, [sp]
   b4462:	699f      	ldr	r7, [r3, #24]
   b4464:	4621      	mov	r1, r4
   b4466:	464b      	mov	r3, r9
   b4468:	4652      	mov	r2, sl
   b446a:	4628      	mov	r0, r5
   b446c:	3401      	adds	r4, #1
   b446e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4470:	b224      	sxth	r4, r4
   b4472:	e7f1      	b.n	b4458 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4474:	b002      	add	sp, #8
   b4476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b447a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b447a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b447c:	6802      	ldr	r2, [r0, #0]
   b447e:	9101      	str	r1, [sp, #4]
   b4480:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4484:	9100      	str	r1, [sp, #0]
   b4486:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4488:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b448c:	2200      	movs	r2, #0
   b448e:	4611      	mov	r1, r2
   b4490:	47a0      	blx	r4
}
   b4492:	b002      	add	sp, #8
   b4494:	bd10      	pop	{r4, pc}

000b4496 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4496:	4770      	bx	lr

000b4498 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4498:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b449a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b449c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b449e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b44a2:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b44a4:	4d05      	ldr	r5, [pc, #20]	; (b44bc <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b44a6:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b44a8:	2201      	movs	r2, #1
   b44aa:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b44ac:	6005      	str	r5, [r0, #0]
   b44ae:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b44b0:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b44b2:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b44b4:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b44b6:	7682      	strb	r2, [r0, #26]
}
   b44b8:	bd30      	pop	{r4, r5, pc}
   b44ba:	bf00      	nop
   b44bc:	000b7f1c 	.word	0x000b7f1c

000b44c0 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b44c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44c4:	ed2d 8b02 	vpush	{d8}
   b44c8:	b08d      	sub	sp, #52	; 0x34
   b44ca:	4607      	mov	r7, r0
   b44cc:	9104      	str	r1, [sp, #16]
   b44ce:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b44d2:	9105      	str	r1, [sp, #20]
   b44d4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b44d8:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b44da:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b44de:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b44e0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b44e4:	4281      	cmp	r1, r0
   b44e6:	dd52      	ble.n	b458e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b44e8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b44ec:	4291      	cmp	r1, r2
   b44ee:	dd4e      	ble.n	b458e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b44f0:	2106      	movs	r1, #6
   b44f2:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b44f6:	2c00      	cmp	r4, #0
   b44f8:	dd49      	ble.n	b458e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b44fa:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b44fe:	2c00      	cmp	r4, #0
   b4500:	dd45      	ble.n	b458e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4502:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4506:	930b      	str	r3, [sp, #44]	; 0x2c
   b4508:	b293      	uxth	r3, r2
   b450a:	9307      	str	r3, [sp, #28]
   b450c:	3308      	adds	r3, #8
   b450e:	b29b      	uxth	r3, r3
   b4510:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4512:	2400      	movs	r4, #0
   b4514:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4516:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4518:	bf1c      	itt	ne
   b451a:	4b2c      	ldrne	r3, [pc, #176]	; (b45cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b451c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b451e:	9e07      	ldr	r6, [sp, #28]
   b4520:	bf16      	itet	ne
   b4522:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4524:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4526:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4528:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b452a:	9a04      	ldr	r2, [sp, #16]
   b452c:	b2ab      	uxth	r3, r5
   b452e:	930a      	str	r3, [sp, #40]	; 0x28
   b4530:	fb04 f305 	mul.w	r3, r4, r5
   b4534:	fa13 f382 	uxtah	r3, r3, r2
   b4538:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b453a:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b453e:	ee08 3a10 	vmov	s16, r3
   b4542:	46b0      	mov	r8, r6
   b4544:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4548:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b454c:	9b03      	ldr	r3, [sp, #12]
   b454e:	07db      	lsls	r3, r3, #31
   b4550:	d52f      	bpl.n	b45b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4552:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4554:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4556:	d11f      	bne.n	b4598 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4558:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b455c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b455e:	b232      	sxth	r2, r6
   b4560:	4651      	mov	r1, sl
   b4562:	4638      	mov	r0, r7
   b4564:	47d8      	blx	fp
      line >>= 1;
   b4566:	9b03      	ldr	r3, [sp, #12]
   b4568:	085b      	lsrs	r3, r3, #1
   b456a:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b456c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b456e:	3601      	adds	r6, #1
   b4570:	4498      	add	r8, r3
   b4572:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4574:	b2b6      	uxth	r6, r6
   b4576:	42b3      	cmp	r3, r6
   b4578:	fa1f f888 	uxth.w	r8, r8
   b457c:	d1e6      	bne.n	b454c <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b457e:	9b08      	ldr	r3, [sp, #32]
   b4580:	3b01      	subs	r3, #1
   b4582:	3401      	adds	r4, #1
   b4584:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4588:	b264      	sxtb	r4, r4
   b458a:	9308      	str	r3, [sp, #32]
   b458c:	d1c3      	bne.n	b4516 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b458e:	b00d      	add	sp, #52	; 0x34
   b4590:	ecbd 8b02 	vpop	{d8}
   b4594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4598:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b459a:	e9cd 9200 	strd	r9, r2, [sp]
   b459e:	ee18 1a10 	vmov	r1, s16
   b45a2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b45a6:	fa0f f288 	sxth.w	r2, r8
   b45aa:	464b      	mov	r3, r9
   b45ac:	4638      	mov	r0, r7
   b45ae:	47d8      	blx	fp
   b45b0:	e7d9      	b.n	b4566 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b45b2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b45b6:	4293      	cmp	r3, r2
   b45b8:	d0d5      	beq.n	b4566 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b45ba:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b45bc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b45be:	d103      	bne.n	b45c8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b45c0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b45c4:	9b06      	ldr	r3, [sp, #24]
   b45c6:	e7ca      	b.n	b455e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b45c8:	9a06      	ldr	r2, [sp, #24]
   b45ca:	e7e6      	b.n	b459a <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b45cc:	000b7a17 	.word	0x000b7a17

000b45d0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b45d0:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b45d2:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b45d4:	b085      	sub	sp, #20
   b45d6:	4604      	mov	r4, r0
  if (c == '\n') {
   b45d8:	d107      	bne.n	b45ea <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b45da:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b45dc:	8a63      	ldrh	r3, [r4, #18]
   b45de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b45e2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b45e4:	2300      	movs	r3, #0
   b45e6:	8223      	strh	r3, [r4, #16]
   b45e8:	e021      	b.n	b462e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b45ea:	290d      	cmp	r1, #13
   b45ec:	d01f      	beq.n	b462e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b45ee:	7e03      	ldrb	r3, [r0, #24]
   b45f0:	9302      	str	r3, [sp, #8]
   b45f2:	8ac3      	ldrh	r3, [r0, #22]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	8a83      	ldrh	r3, [r0, #20]
   b45f8:	9300      	str	r3, [sp, #0]
   b45fa:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b45fe:	460b      	mov	r3, r1
   b4600:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4604:	f7ff ff5c 	bl	b44c0 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4608:	7e20      	ldrb	r0, [r4, #24]
   b460a:	8a23      	ldrh	r3, [r4, #16]
   b460c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4610:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4614:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4616:	b21b      	sxth	r3, r3
   b4618:	4602      	mov	r2, r0
   b461a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b461c:	b139      	cbz	r1, b462e <_ZN12Adafruit_GFX5writeEh+0x5e>
   b461e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4622:	f06f 0505 	mvn.w	r5, #5
   b4626:	fb05 1100 	mla	r1, r5, r0, r1
   b462a:	428b      	cmp	r3, r1
   b462c:	dcd6      	bgt.n	b45dc <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b462e:	2001      	movs	r0, #1
   b4630:	b005      	add	sp, #20
   b4632:	bd30      	pop	{r4, r5, pc}

000b4634 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4634:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4636:	8242      	strh	r2, [r0, #18]
}
   b4638:	4770      	bx	lr

000b463a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b463a:	2901      	cmp	r1, #1
   b463c:	bf38      	it	cc
   b463e:	2101      	movcc	r1, #1
   b4640:	7601      	strb	r1, [r0, #24]
}
   b4642:	4770      	bx	lr

000b4644 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b4644:	82c1      	strh	r1, [r0, #22]
   b4646:	8281      	strh	r1, [r0, #20]
}
   b4648:	4770      	bx	lr

000b464a <_ZN12Adafruit_GFX11getRotationEv>:
}
   b464a:	7e40      	ldrb	r0, [r0, #25]
   b464c:	4770      	bx	lr

000b464e <_ZN12Adafruit_GFX5widthEv>:
}
   b464e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4652:	4770      	bx	lr

000b4654 <_ZN12Adafruit_GFX6heightEv>:
}
   b4654:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4658:	4770      	bx	lr
	...

000b465c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b465c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b465e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4660:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4664:	2d02      	cmp	r5, #2
   b4666:	d069      	beq.n	b473c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4668:	2d03      	cmp	r5, #3
   b466a:	f000 8099 	beq.w	b47a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b466e:	2d01      	cmp	r5, #1
   b4670:	d16c      	bne.n	b474c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4672:	8905      	ldrh	r5, [r0, #8]
   b4674:	43d2      	mvns	r2, r2
   b4676:	442a      	add	r2, r5
   b4678:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b467a:	2a00      	cmp	r2, #0
   b467c:	db5d      	blt.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b467e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4682:	4295      	cmp	r5, r2
   b4684:	dd59      	ble.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4686:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4688:	bfbe      	ittt	lt
   b468a:	185b      	addlt	r3, r3, r1
   b468c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b468e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4690:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4694:	18cd      	adds	r5, r1, r3
   b4696:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4698:	bfc4      	itt	gt
   b469a:	1a43      	subgt	r3, r0, r1
   b469c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b469e:	2b00      	cmp	r3, #0
   b46a0:	dd4b      	ble.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b46a2:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b46a6:	f8df c120 	ldr.w	ip, [pc, #288]	; b47c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b46aa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b46ae:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b46b2:	b2db      	uxtb	r3, r3
  pBuf += x;
   b46b4:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b46b8:	d01a      	beq.n	b46f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b46ba:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b46be:	4e40      	ldr	r6, [pc, #256]	; (b47c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b46c0:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b46c2:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b46c4:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b46c6:	bf3f      	itttt	cc
   b46c8:	eba5 0e03 	subcc.w	lr, r5, r3
   b46cc:	26ff      	movcc	r6, #255	; 0xff
   b46ce:	fa46 f60e 	asrcc.w	r6, r6, lr
   b46d2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b46d4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b46d8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b46da:	bf0c      	ite	eq
   b46dc:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b46de:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b46e0:	42ab      	cmp	r3, r5
   b46e2:	f80c 6002 	strb.w	r6, [ip, r2]
   b46e6:	d328      	bcc.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b46e8:	3908      	subs	r1, #8
   b46ea:	440b      	add	r3, r1
   b46ec:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b46ee:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b46f0:	2b07      	cmp	r3, #7
   b46f2:	d919      	bls.n	b4728 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b46f4:	2c01      	cmp	r4, #1
   b46f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b46fa:	bf18      	it	ne
   b46fc:	2500      	movne	r5, #0
   b46fe:	b2ed      	uxtb	r5, r5
   b4700:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4704:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4706:	3a08      	subs	r2, #8
   b4708:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b470a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b470c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4710:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4714:	d8f7      	bhi.n	b4706 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4716:	f1a3 0208 	sub.w	r2, r3, #8
   b471a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b471e:	3201      	adds	r2, #1
   b4720:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4724:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4728:	b13b      	cbz	r3, b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b472a:	4a26      	ldr	r2, [pc, #152]	; (b47c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b472c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b472e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4730:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4732:	bf0c      	ite	eq
   b4734:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4736:	4393      	bicne	r3, r2
   b4738:	7003      	strb	r3, [r0, #0]
}
   b473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b473c:	8945      	ldrh	r5, [r0, #10]
   b473e:	43d2      	mvns	r2, r2
   b4740:	442a      	add	r2, r5
      x -= (w-1);
   b4742:	18cd      	adds	r5, r1, r3
   b4744:	8901      	ldrh	r1, [r0, #8]
   b4746:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4748:	b212      	sxth	r2, r2
      x -= (w-1);
   b474a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b474c:	2a00      	cmp	r2, #0
   b474e:	dbf4      	blt.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4750:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4754:	4295      	cmp	r5, r2
   b4756:	ddf0      	ble.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4758:	2900      	cmp	r1, #0
    w += x;
   b475a:	bfbe      	ittt	lt
   b475c:	185b      	addlt	r3, r3, r1
   b475e:	b21b      	sxthlt	r3, r3
    x = 0;
   b4760:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4762:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4766:	18ce      	adds	r6, r1, r3
   b4768:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b476a:	bfc4      	itt	gt
   b476c:	1a6b      	subgt	r3, r5, r1
   b476e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4770:	2b00      	cmp	r3, #0
   b4772:	dde2      	ble.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4774:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4776:	2580      	movs	r5, #128	; 0x80
   b4778:	fb10 1105 	smlabb	r1, r0, r5, r1
   b477c:	4812      	ldr	r0, [pc, #72]	; (b47c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b477e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4780:	f002 0007 	and.w	r0, r2, #7
   b4784:	2201      	movs	r2, #1
   b4786:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4788:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b478a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b478c:	440b      	add	r3, r1
   b478e:	d10c      	bne.n	b47aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4790:	428b      	cmp	r3, r1
   b4792:	d0d2      	beq.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4794:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4798:	4310      	orrs	r0, r2
   b479a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b479e:	e7f7      	b.n	b4790 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b47a0:	18cd      	adds	r5, r1, r3
   b47a2:	8941      	ldrh	r1, [r0, #10]
   b47a4:	1b49      	subs	r1, r1, r5
   b47a6:	b209      	sxth	r1, r1
      break;
   b47a8:	e767      	b.n	b467a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b47aa:	43d2      	mvns	r2, r2
   b47ac:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b47ae:	428b      	cmp	r3, r1
   b47b0:	d0c3      	beq.n	b473a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b47b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b47b6:	4010      	ands	r0, r2
   b47b8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b47bc:	e7f7      	b.n	b47ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b47be:	bf00      	nop
   b47c0:	2003e208 	.word	0x2003e208
   b47c4:	2003e200 	.word	0x2003e200
   b47c8:	2003e210 	.word	0x2003e210

000b47cc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b47cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b47ce:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b47d0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b47d4:	2d02      	cmp	r5, #2
   b47d6:	d034      	beq.n	b4842 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b47d8:	2d03      	cmp	r5, #3
   b47da:	f000 809b 	beq.w	b4914 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b47de:	2d01      	cmp	r5, #1
   b47e0:	d137      	bne.n	b4852 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b47e2:	18d5      	adds	r5, r2, r3
   b47e4:	8902      	ldrh	r2, [r0, #8]
   b47e6:	1b52      	subs	r2, r2, r5
   b47e8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b47ea:	2900      	cmp	r1, #0
   b47ec:	f2c0 8091 	blt.w	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b47f0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b47f4:	428d      	cmp	r5, r1
   b47f6:	f340 808c 	ble.w	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b47fa:	2a00      	cmp	r2, #0
    w += x;
   b47fc:	bfbe      	ittt	lt
   b47fe:	189b      	addlt	r3, r3, r2
   b4800:	b21b      	sxthlt	r3, r3
    x = 0;
   b4802:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4804:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4808:	18d6      	adds	r6, r2, r3
   b480a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b480c:	bfc4      	itt	gt
   b480e:	1aab      	subgt	r3, r5, r2
   b4810:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4812:	2b00      	cmp	r3, #0
   b4814:	dd7d      	ble.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4816:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4818:	2580      	movs	r5, #128	; 0x80
   b481a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b481e:	4845      	ldr	r0, [pc, #276]	; (b4934 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4820:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4822:	f001 0007 	and.w	r0, r1, #7
   b4826:	2101      	movs	r1, #1
   b4828:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b482a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b482c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b482e:	4413      	add	r3, r2
   b4830:	d175      	bne.n	b491e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4832:	429a      	cmp	r2, r3
   b4834:	d06d      	beq.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4836:	f812 0b01 	ldrb.w	r0, [r2], #1
   b483a:	4308      	orrs	r0, r1
   b483c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4840:	e7f7      	b.n	b4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4842:	8905      	ldrh	r5, [r0, #8]
   b4844:	43c9      	mvns	r1, r1
   b4846:	4429      	add	r1, r5
      y -= (h-1);
   b4848:	18d5      	adds	r5, r2, r3
   b484a:	8942      	ldrh	r2, [r0, #10]
   b484c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b484e:	b209      	sxth	r1, r1
      y -= (h-1);
   b4850:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4852:	2900      	cmp	r1, #0
   b4854:	db5d      	blt.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4856:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b485a:	428d      	cmp	r5, r1
   b485c:	dd59      	ble.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b485e:	2a00      	cmp	r2, #0
    __h += __y;
   b4860:	bfbe      	ittt	lt
   b4862:	189b      	addlt	r3, r3, r2
   b4864:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4866:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4868:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b486c:	18d5      	adds	r5, r2, r3
   b486e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4870:	bfc4      	itt	gt
   b4872:	1a83      	subgt	r3, r0, r2
   b4874:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4876:	2b00      	cmp	r3, #0
   b4878:	dd4b      	ble.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b487a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b487e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4934 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4882:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4886:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b488a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b488c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4890:	d01a      	beq.n	b48c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4892:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4896:	4e28      	ldr	r6, [pc, #160]	; (b4938 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4898:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b489a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b489c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b489e:	bf3f      	itttt	cc
   b48a0:	eba5 0e03 	subcc.w	lr, r5, r3
   b48a4:	26ff      	movcc	r6, #255	; 0xff
   b48a6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b48aa:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b48ac:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b48b0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b48b2:	bf0c      	ite	eq
   b48b4:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b48b6:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b48b8:	42ab      	cmp	r3, r5
   b48ba:	f80c 6001 	strb.w	r6, [ip, r1]
   b48be:	d328      	bcc.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b48c0:	3a08      	subs	r2, #8
   b48c2:	4413      	add	r3, r2
   b48c4:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b48c6:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b48c8:	2b07      	cmp	r3, #7
   b48ca:	d919      	bls.n	b4900 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b48cc:	2c01      	cmp	r4, #1
   b48ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b48d2:	bf18      	it	ne
   b48d4:	2500      	movne	r5, #0
   b48d6:	b2ed      	uxtb	r5, r5
   b48d8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b48dc:	461a      	mov	r2, r3
      h -= 8;
   b48de:	3a08      	subs	r2, #8
   b48e0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b48e2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b48e4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b48e8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b48ec:	d8f7      	bhi.n	b48de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b48ee:	f1a3 0208 	sub.w	r2, r3, #8
   b48f2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b48f6:	3201      	adds	r2, #1
   b48f8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b48fc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4900:	b13b      	cbz	r3, b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4902:	4a0e      	ldr	r2, [pc, #56]	; (b493c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4904:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4906:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4908:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b490a:	bf0c      	ite	eq
   b490c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b490e:	4393      	bicne	r3, r2
   b4910:	7003      	strb	r3, [r0, #0]
}
   b4912:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4914:	8945      	ldrh	r5, [r0, #10]
   b4916:	43c9      	mvns	r1, r1
   b4918:	4429      	add	r1, r5
   b491a:	b209      	sxth	r1, r1
      break;
   b491c:	e765      	b.n	b47ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b491e:	43c9      	mvns	r1, r1
   b4920:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4922:	429a      	cmp	r2, r3
   b4924:	d0f5      	beq.n	b4912 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4926:	f812 0b01 	ldrb.w	r0, [r2], #1
   b492a:	4008      	ands	r0, r1
   b492c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4930:	e7f7      	b.n	b4922 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4932:	bf00      	nop
   b4934:	2003e210 	.word	0x2003e210
   b4938:	2003e208 	.word	0x2003e208
   b493c:	2003e200 	.word	0x2003e200

000b4940 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4940:	4770      	bx	lr
	...

000b4944 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4946:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4948:	4606      	mov	r6, r0
   b494a:	4614      	mov	r4, r2
   b494c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b494e:	db2d      	blt.n	b49ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4950:	f7ff fe7d 	bl	b464e <_ZN12Adafruit_GFX5widthEv>
   b4954:	42a8      	cmp	r0, r5
   b4956:	dd29      	ble.n	b49ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4958:	2c00      	cmp	r4, #0
   b495a:	db27      	blt.n	b49ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b495c:	4630      	mov	r0, r6
   b495e:	f7ff fe79 	bl	b4654 <_ZN12Adafruit_GFX6heightEv>
   b4962:	42a0      	cmp	r0, r4
   b4964:	dd22      	ble.n	b49ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4966:	4630      	mov	r0, r6
   b4968:	f7ff fe6f 	bl	b464a <_ZN12Adafruit_GFX11getRotationEv>
   b496c:	2802      	cmp	r0, #2
   b496e:	d01e      	beq.n	b49ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4970:	2803      	cmp	r0, #3
   b4972:	d025      	beq.n	b49c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4974:	2801      	cmp	r0, #1
   b4976:	d104      	bne.n	b4982 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4978:	8933      	ldrh	r3, [r6, #8]
   b497a:	43e2      	mvns	r2, r4
   b497c:	441a      	add	r2, r3
    break;
   b497e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4980:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4982:	2c00      	cmp	r4, #0
   b4984:	4622      	mov	r2, r4
   b4986:	bfb8      	it	lt
   b4988:	1de2      	addlt	r2, r4, #7
   b498a:	10d2      	asrs	r2, r2, #3
   b498c:	2180      	movs	r1, #128	; 0x80
   b498e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4992:	490e      	ldr	r1, [pc, #56]	; (b49cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4994:	2201      	movs	r2, #1
   b4996:	f004 0407 	and.w	r4, r4, #7
   b499a:	574b      	ldrsb	r3, [r1, r5]
   b499c:	fa02 f404 	lsl.w	r4, r2, r4
   b49a0:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b49a2:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b49a4:	bf0c      	ite	eq
   b49a6:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b49a8:	43a3      	bicne	r3, r4
   b49aa:	554b      	strb	r3, [r1, r5]
}
   b49ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b49ae:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b49b0:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b49b2:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b49b4:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b49b6:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b49b8:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b49ba:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b49bc:	b224      	sxth	r4, r4
    break;
   b49be:	e7e0      	b.n	b4982 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b49c0:	8973      	ldrh	r3, [r6, #10]
   b49c2:	3b01      	subs	r3, #1
   b49c4:	1b5b      	subs	r3, r3, r5
    break;
   b49c6:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b49c8:	b21c      	sxth	r4, r3
    break;
   b49ca:	e7da      	b.n	b4982 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b49cc:	2003e210 	.word	0x2003e210

000b49d0 <_ZN16Adafruit_SSD1306D0Ev>:
   b49d0:	b510      	push	{r4, lr}
   b49d2:	2124      	movs	r1, #36	; 0x24
   b49d4:	4604      	mov	r4, r0
   b49d6:	f7ff fb60 	bl	b409a <_ZdlPvj>
   b49da:	4620      	mov	r0, r4
   b49dc:	bd10      	pop	{r4, pc}
	...

000b49e0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b49e0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b49e2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b49e4:	4604      	mov	r4, r0
   b49e6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b49e8:	2180      	movs	r1, #128	; 0x80
   b49ea:	f7ff fd55 	bl	b4498 <_ZN12Adafruit_GFXC1Ess>
   b49ee:	4b06      	ldr	r3, [pc, #24]	; (b4a08 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b49f0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b49f2:	23ff      	movs	r3, #255	; 0xff
   b49f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b49f8:	7763      	strb	r3, [r4, #29]
   b49fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b49fe:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4a00:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4a04:	4620      	mov	r0, r4
   b4a06:	bd38      	pop	{r3, r4, r5, pc}
   b4a08:	000b7f54 	.word	0x000b7f54

000b4a0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4a0c:	4802      	ldr	r0, [pc, #8]	; (b4a18 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4a12:	2100      	movs	r1, #0
   b4a14:	f002 bf3a 	b.w	b788c <memset>
   b4a18:	2003e210 	.word	0x2003e210

000b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4a1c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4a1e:	4c0b      	ldr	r4, [pc, #44]	; (b4a4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4a20:	7821      	ldrb	r1, [r4, #0]
   b4a22:	f3bf 8f5b 	dmb	ish
   b4a26:	f011 0101 	ands.w	r1, r1, #1
   b4a2a:	d10b      	bne.n	b4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a2c:	4620      	mov	r0, r4
   b4a2e:	9101      	str	r1, [sp, #4]
   b4a30:	f7ff fb42 	bl	b40b8 <__cxa_guard_acquire>
   b4a34:	9901      	ldr	r1, [sp, #4]
   b4a36:	b128      	cbz	r0, b4a44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a38:	4805      	ldr	r0, [pc, #20]	; (b4a50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a3a:	f000 fe3f 	bl	b56bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4a3e:	4620      	mov	r0, r4
   b4a40:	f7ff fb3f 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4a44:	4802      	ldr	r0, [pc, #8]	; (b4a50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a46:	b002      	add	sp, #8
   b4a48:	bd10      	pop	{r4, pc}
   b4a4a:	bf00      	nop
   b4a4c:	2003e6b8 	.word	0x2003e6b8
   b4a50:	2003e6bc 	.word	0x2003e6bc

000b4a54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4a54:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4a56:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4a5a:	b143      	cbz	r3, b4a6e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4a5c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4a5e:	f7ff ffdd 	bl	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a62:	9901      	ldr	r1, [sp, #4]
}
   b4a64:	b003      	add	sp, #12
   b4a66:	f85d eb04 	ldr.w	lr, [sp], #4
   b4a6a:	f000 bedb 	b.w	b5824 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a6e:	460b      	mov	r3, r1
   b4a70:	7f81      	ldrb	r1, [r0, #30]
   b4a72:	7f40      	ldrb	r0, [r0, #29]
   b4a74:	2201      	movs	r2, #1
}
   b4a76:	b003      	add	sp, #12
   b4a78:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4a7c:	f001 b908 	b.w	b5c90 <shiftOut>

000b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a80:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4a82:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4a86:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4a88:	4604      	mov	r4, r0
   b4a8a:	460d      	mov	r5, r1
  if (sid != -1)
   b4a8c:	d01d      	beq.n	b4aca <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4a8e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4a92:	2101      	movs	r1, #1
   b4a94:	b280      	uxth	r0, r0
   b4a96:	f001 f8e2 	bl	b5c5e <digitalWrite>
    digitalWrite(dc, LOW);
   b4a9a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4a9e:	2100      	movs	r1, #0
   b4aa0:	b280      	uxth	r0, r0
   b4aa2:	f001 f8dc 	bl	b5c5e <digitalWrite>
    digitalWrite(cs, LOW);
   b4aa6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4aaa:	2100      	movs	r1, #0
   b4aac:	b280      	uxth	r0, r0
   b4aae:	f001 f8d6 	bl	b5c5e <digitalWrite>
    fastSPIwrite(c);
   b4ab2:	4629      	mov	r1, r5
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	f7ff ffcd 	bl	b4a54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4aba:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4abe:	2101      	movs	r1, #1
}
   b4ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4ac4:	b280      	uxth	r0, r0
   b4ac6:	f001 b8ca 	b.w	b5c5e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4aca:	f001 f921 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4ace:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4ad2:	f000 fc25 	bl	b5320 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4ad6:	f001 f91b 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4ada:	6803      	ldr	r3, [r0, #0]
   b4adc:	2100      	movs	r1, #0
   b4ade:	689b      	ldr	r3, [r3, #8]
   b4ae0:	4798      	blx	r3
    Wire.write(c);
   b4ae2:	f001 f915 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4ae6:	6803      	ldr	r3, [r0, #0]
   b4ae8:	4629      	mov	r1, r5
   b4aea:	689b      	ldr	r3, [r3, #8]
   b4aec:	4798      	blx	r3
    Wire.endTransmission();
   b4aee:	f001 f90f 	bl	b5d10 <_Z19__fetch_global_Wirev>
}
   b4af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4af6:	f000 bc1a 	b.w	b532e <_ZN7TwoWire15endTransmissionEv>
	...

000b4afc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4afe:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4b00:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4b02:	f7ff ffbd 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4b06:	2100      	movs	r1, #0
   b4b08:	4620      	mov	r0, r4
   b4b0a:	f7ff ffb9 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4b0e:	217f      	movs	r1, #127	; 0x7f
   b4b10:	4620      	mov	r0, r4
   b4b12:	f7ff ffb5 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4b16:	2122      	movs	r1, #34	; 0x22
   b4b18:	4620      	mov	r0, r4
   b4b1a:	f7ff ffb1 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4b1e:	2100      	movs	r1, #0
   b4b20:	4620      	mov	r0, r4
   b4b22:	f7ff ffad 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4b26:	2107      	movs	r1, #7
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f7ff ffa9 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4b2e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4b32:	4f29      	ldr	r7, [pc, #164]	; (b4bd8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4b34:	3301      	adds	r3, #1
   b4b36:	d02a      	beq.n	b4b8e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4b38:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b3c:	2101      	movs	r1, #1
   b4b3e:	b280      	uxth	r0, r0
   b4b40:	f001 f88d 	bl	b5c5e <digitalWrite>
    digitalWrite(dc, HIGH);
   b4b44:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4b48:	2101      	movs	r1, #1
   b4b4a:	b280      	uxth	r0, r0
   b4b4c:	f001 f887 	bl	b5c5e <digitalWrite>
    digitalWrite(cs, LOW);
   b4b50:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b54:	2100      	movs	r1, #0
   b4b56:	b280      	uxth	r0, r0
   b4b58:	f001 f881 	bl	b5c5e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4b5c:	2001      	movs	r0, #1
   b4b5e:	f000 f925 	bl	b4dac <HAL_Delay_Microseconds>
   b4b62:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b66:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4b68:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4b6c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b6e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4b70:	f7ff ff70 	bl	b4a54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b74:	2d00      	cmp	r5, #0
   b4b76:	d1f6      	bne.n	b4b66 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4b78:	2001      	movs	r0, #1
   b4b7a:	f000 f917 	bl	b4dac <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4b7e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4b82:	2101      	movs	r1, #1
}
   b4b84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4b88:	b280      	uxth	r0, r0
   b4b8a:	f001 b868 	b.w	b5c5e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4b8e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4b90:	f001 f8be 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4b94:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4b98:	f000 fbc2 	bl	b5320 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4b9c:	f001 f8b8 	bl	b5d10 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4ba0:	6803      	ldr	r3, [r0, #0]
   b4ba2:	2140      	movs	r1, #64	; 0x40
   b4ba4:	689b      	ldr	r3, [r3, #8]
   b4ba6:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4ba8:	f105 0610 	add.w	r6, r5, #16
   b4bac:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4bae:	f001 f8af 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4bb2:	6803      	ldr	r3, [r0, #0]
   b4bb4:	5d79      	ldrb	r1, [r7, r5]
   b4bb6:	689b      	ldr	r3, [r3, #8]
   b4bb8:	4798      	blx	r3
		i++;
   b4bba:	1c6b      	adds	r3, r5, #1
   b4bbc:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4bbe:	42ae      	cmp	r6, r5
   b4bc0:	d1f5      	bne.n	b4bae <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4bc2:	f001 f8a5 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4bc6:	f000 fbb2 	bl	b532e <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4bca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4bce:	d100      	bne.n	b4bd2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4bd2:	4635      	mov	r5, r6
   b4bd4:	e7dc      	b.n	b4b90 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4bd6:	bf00      	nop
   b4bd8:	2003e210 	.word	0x2003e210

000b4bdc <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4bdc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4bde:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4be2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4be4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4be6:	4604      	mov	r4, r0
   b4be8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4bea:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4bec:	f000 80c9 	beq.w	b4d82 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4bf0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4bf4:	2101      	movs	r1, #1
   b4bf6:	b280      	uxth	r0, r0
   b4bf8:	f001 f820 	bl	b5c3c <pinMode>
    pinMode(cs, OUTPUT);
   b4bfc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4c00:	2101      	movs	r1, #1
   b4c02:	b280      	uxth	r0, r0
   b4c04:	f001 f81a 	bl	b5c3c <pinMode>
    if (!hwSPI){
   b4c08:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4c0c:	2b00      	cmp	r3, #0
   b4c0e:	f000 80a6 	beq.w	b4d5e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4c12:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4c16:	2101      	movs	r1, #1
   b4c18:	b280      	uxth	r0, r0
   b4c1a:	f001 f820 	bl	b5c5e <digitalWrite>
        instance().setBitOrder(order);
   b4c1e:	f7ff fefd 	bl	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c22:	2101      	movs	r1, #1
   b4c24:	f000 fd68 	bl	b56f8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4c28:	f7ff fef8 	bl	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c2c:	2110      	movs	r1, #16
   b4c2e:	f000 fdd3 	bl	b57d8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4c32:	f7ff fef3 	bl	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c36:	2100      	movs	r1, #0
   b4c38:	f000 fd72 	bl	b5720 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4c3c:	f7ff feee 	bl	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4c40:	f000 fd46 	bl	b56d0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4c44:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c48:	2101      	movs	r1, #1
   b4c4a:	b280      	uxth	r0, r0
   b4c4c:	f000 fff6 	bl	b5c3c <pinMode>
  digitalWrite(rst, HIGH);
   b4c50:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c54:	2101      	movs	r1, #1
   b4c56:	b280      	uxth	r0, r0
   b4c58:	f001 f801 	bl	b5c5e <digitalWrite>
  delay(1);
   b4c5c:	2001      	movs	r0, #1
   b4c5e:	f000 fac1 	bl	b51e4 <delay>
  digitalWrite(rst, LOW);
   b4c62:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c66:	2100      	movs	r1, #0
   b4c68:	b280      	uxth	r0, r0
   b4c6a:	f000 fff8 	bl	b5c5e <digitalWrite>
  delay(10);
   b4c6e:	200a      	movs	r0, #10
   b4c70:	f000 fab8 	bl	b51e4 <delay>
  digitalWrite(rst, HIGH);
   b4c74:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4c78:	2101      	movs	r1, #1
   b4c7a:	b280      	uxth	r0, r0
   b4c7c:	f000 ffef 	bl	b5c5e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4c80:	4620      	mov	r0, r4
   b4c82:	21ae      	movs	r1, #174	; 0xae
   b4c84:	f7ff fefc 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4c88:	4620      	mov	r0, r4
   b4c8a:	21d5      	movs	r1, #213	; 0xd5
   b4c8c:	f7ff fef8 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4c90:	4620      	mov	r0, r4
   b4c92:	2180      	movs	r1, #128	; 0x80
   b4c94:	f7ff fef4 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b4c98:	4620      	mov	r0, r4
   b4c9a:	21a8      	movs	r1, #168	; 0xa8
   b4c9c:	f7ff fef0 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	213f      	movs	r1, #63	; 0x3f
   b4ca4:	f7ff feec 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b4ca8:	4620      	mov	r0, r4
   b4caa:	21d3      	movs	r1, #211	; 0xd3
   b4cac:	f7ff fee8 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	2100      	movs	r1, #0
   b4cb4:	f7ff fee4 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b4cb8:	4620      	mov	r0, r4
   b4cba:	2140      	movs	r1, #64	; 0x40
   b4cbc:	f7ff fee0 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b4cc0:	218d      	movs	r1, #141	; 0x8d
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	f7ff fedc 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4cc8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b4cca:	bf0c      	ite	eq
   b4ccc:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b4cce:	2114      	movne	r1, #20
   b4cd0:	4620      	mov	r0, r4
   b4cd2:	f7ff fed5 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b4cd6:	4620      	mov	r0, r4
   b4cd8:	2120      	movs	r1, #32
   b4cda:	f7ff fed1 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b4cde:	4620      	mov	r0, r4
   b4ce0:	2100      	movs	r1, #0
   b4ce2:	f7ff fecd 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b4ce6:	4620      	mov	r0, r4
   b4ce8:	21a1      	movs	r1, #161	; 0xa1
   b4cea:	f7ff fec9 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b4cee:	4620      	mov	r0, r4
   b4cf0:	21c8      	movs	r1, #200	; 0xc8
   b4cf2:	f7ff fec5 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	21da      	movs	r1, #218	; 0xda
   b4cfa:	f7ff fec1 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4cfe:	4620      	mov	r0, r4
   b4d00:	2112      	movs	r1, #18
   b4d02:	f7ff febd 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4d06:	2181      	movs	r1, #129	; 0x81
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f7ff feb9 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4d0e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4d10:	bf0c      	ite	eq
   b4d12:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4d14:	21cf      	movne	r1, #207	; 0xcf
   b4d16:	4620      	mov	r0, r4
   b4d18:	f7ff feb2 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4d1c:	21d9      	movs	r1, #217	; 0xd9
   b4d1e:	4620      	mov	r0, r4
   b4d20:	f7ff feae 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4d24:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4d26:	bf0c      	ite	eq
   b4d28:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4d2a:	21f1      	movne	r1, #241	; 0xf1
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	f7ff fea7 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4d32:	4620      	mov	r0, r4
   b4d34:	21db      	movs	r1, #219	; 0xdb
   b4d36:	f7ff fea3 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	2140      	movs	r1, #64	; 0x40
   b4d3e:	f7ff fe9f 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4d42:	4620      	mov	r0, r4
   b4d44:	21a4      	movs	r1, #164	; 0xa4
   b4d46:	f7ff fe9b 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	21a6      	movs	r1, #166	; 0xa6
   b4d4e:	f7ff fe97 	bl	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4d52:	4620      	mov	r0, r4
   b4d54:	21af      	movs	r1, #175	; 0xaf
}
   b4d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4d5a:	f7ff be91 	b.w	b4a80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4d5e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4d62:	2101      	movs	r1, #1
   b4d64:	b280      	uxth	r0, r0
   b4d66:	f000 ff69 	bl	b5c3c <pinMode>
    	pinMode(sclk, OUTPUT);
   b4d6a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4d6e:	2101      	movs	r1, #1
   b4d70:	b280      	uxth	r0, r0
   b4d72:	f000 ff63 	bl	b5c3c <pinMode>
    if (hwSPI){
   b4d76:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4d7a:	2b00      	cmp	r3, #0
   b4d7c:	f43f af62 	beq.w	b4c44 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4d80:	e747      	b.n	b4c12 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4d82:	f000 ffc5 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b4d86:	f000 fac1 	bl	b530c <_ZN7TwoWire5beginEv>
   b4d8a:	e75b      	b.n	b4c44 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4d8c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <os_mutex_recursive_create+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030248 	.word	0x00030248

000b4d9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <HAL_RNG_GetRandomNumber+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	685b      	ldr	r3, [r3, #4]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030218 	.word	0x00030218

000b4dac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <HAL_Delay_Microseconds+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	68db      	ldr	r3, [r3, #12]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030218 	.word	0x00030218

000b4dbc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	695b      	ldr	r3, [r3, #20]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030218 	.word	0x00030218

000b4dcc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <HAL_Pin_Mode+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	689b      	ldr	r3, [r3, #8]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	0003022c 	.word	0x0003022c

000b4ddc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <HAL_Get_Pin_Mode+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	68db      	ldr	r3, [r3, #12]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	0003022c 	.word	0x0003022c

000b4dec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <HAL_GPIO_Write+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	691b      	ldr	r3, [r3, #16]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003022c 	.word	0x0003022c

000b4dfc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <HAL_Pulse_In+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003022c 	.word	0x0003022c

000b4e0c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_i2c_begin+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	68db      	ldr	r3, [r3, #12]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030228 	.word	0x00030228

000b4e1c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_i2c_begin_transmission+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	699b      	ldr	r3, [r3, #24]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030228 	.word	0x00030228

000b4e2c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_i2c_end_transmission+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	69db      	ldr	r3, [r3, #28]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030228 	.word	0x00030228

000b4e3c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_i2c_write+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6a1b      	ldr	r3, [r3, #32]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030228 	.word	0x00030228

000b4e4c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <hal_i2c_available+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	00030228 	.word	0x00030228

000b4e5c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <hal_i2c_read+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	00030228 	.word	0x00030228

000b4e6c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <hal_i2c_peek+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	00030228 	.word	0x00030228

000b4e7c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <hal_i2c_flush+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	00030228 	.word	0x00030228

000b4e8c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <hal_i2c_is_enabled+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	00030228 	.word	0x00030228

000b4e9c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <hal_i2c_init+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	00030228 	.word	0x00030228

000b4eac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <inet_inet_ntop+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	695b      	ldr	r3, [r3, #20]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	00030264 	.word	0x00030264

000b4ebc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <netdb_freeaddrinfo+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	689b      	ldr	r3, [r3, #8]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	00030268 	.word	0x00030268

000b4ecc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <netdb_getaddrinfo+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	68db      	ldr	r3, [r3, #12]
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030268 	.word	0x00030268

000b4edc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <hal_spi_begin+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	681b      	ldr	r3, [r3, #0]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030230 	.word	0x00030230

000b4eec <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <hal_spi_set_bit_order+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	689b      	ldr	r3, [r3, #8]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030230 	.word	0x00030230

000b4efc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <hal_spi_set_data_mode+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	68db      	ldr	r3, [r3, #12]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030230 	.word	0x00030230

000b4f0c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <hal_spi_set_clock_divider+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	691b      	ldr	r3, [r3, #16]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030230 	.word	0x00030230

000b4f1c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <hal_spi_transfer+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	695b      	ldr	r3, [r3, #20]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030230 	.word	0x00030230

000b4f2c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <hal_spi_init+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	69db      	ldr	r3, [r3, #28]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	00030230 	.word	0x00030230

000b4f3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <hal_spi_is_enabled+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	6a1b      	ldr	r3, [r3, #32]
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	00030230 	.word	0x00030230

000b4f4c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <hal_spi_info+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	00030230 	.word	0x00030230

000b4f5c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <hal_spi_acquire+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	00030230 	.word	0x00030230

000b4f6c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <hal_spi_release+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	00030230 	.word	0x00030230

000b4f7c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <hal_usart_write+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	68db      	ldr	r3, [r3, #12]
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	0003023c 	.word	0x0003023c

000b4f8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_usart_available+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	691b      	ldr	r3, [r3, #16]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	0003023c 	.word	0x0003023c

000b4f9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <hal_usart_read+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	695b      	ldr	r3, [r3, #20]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	0003023c 	.word	0x0003023c

000b4fac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <hal_usart_peek+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	699b      	ldr	r3, [r3, #24]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	0003023c 	.word	0x0003023c

000b4fbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <hal_usart_flush+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	69db      	ldr	r3, [r3, #28]
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	0003023c 	.word	0x0003023c

000b4fcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <hal_usart_is_enabled+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	6a1b      	ldr	r3, [r3, #32]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	0003023c 	.word	0x0003023c

000b4fdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <hal_usart_available_data_for_write+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	0003023c 	.word	0x0003023c

000b4fec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <hal_usart_init_ex+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	0003023c 	.word	0x0003023c

000b4ffc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <HAL_USB_USART_Init+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	681b      	ldr	r3, [r3, #0]
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	0003024c 	.word	0x0003024c

000b500c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <HAL_USB_USART_Available_Data+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	691b      	ldr	r3, [r3, #16]
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	0003024c 	.word	0x0003024c

000b501c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	695b      	ldr	r3, [r3, #20]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003024c 	.word	0x0003024c

000b502c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <HAL_USB_USART_Receive_Data+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	699b      	ldr	r3, [r3, #24]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	0003024c 	.word	0x0003024c

000b503c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <HAL_USB_USART_Send_Data+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	69db      	ldr	r3, [r3, #28]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	0003024c 	.word	0x0003024c

000b504c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <HAL_USB_USART_Flush_Data+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	6a1b      	ldr	r3, [r3, #32]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	0003024c 	.word	0x0003024c

000b505c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <panic_+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030260 	.word	0x00030260

000b506c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <set_system_mode+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	685b      	ldr	r3, [r3, #4]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030220 	.word	0x00030220

000b507c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <system_delay_ms+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	695b      	ldr	r3, [r3, #20]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030220 	.word	0x00030220

000b508c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b03      	ldr	r3, [pc, #12]	; (b509c <system_ctrl_set_app_request_handler+0x10>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5096:	9301      	str	r3, [sp, #4]
   b5098:	bd08      	pop	{r3, pc}
   b509a:	0000      	.short	0x0000
   b509c:	00030220 	.word	0x00030220

000b50a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b03      	ldr	r3, [pc, #12]	; (b50b0 <system_ctrl_set_result+0x10>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b50aa:	9301      	str	r3, [sp, #4]
   b50ac:	bd08      	pop	{r3, pc}
   b50ae:	0000      	.short	0x0000
   b50b0:	00030220 	.word	0x00030220

000b50b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030244 	.word	0x00030244

000b50c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <network_connect+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	685b      	ldr	r3, [r3, #4]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030240 	.word	0x00030240

000b50d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <network_connecting+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	689b      	ldr	r3, [r3, #8]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030240 	.word	0x00030240

000b50e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <network_disconnect+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	68db      	ldr	r3, [r3, #12]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030240 	.word	0x00030240

000b50f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <network_ready+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	691b      	ldr	r3, [r3, #16]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030240 	.word	0x00030240

000b5104 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <network_on+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	695b      	ldr	r3, [r3, #20]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030240 	.word	0x00030240

000b5114 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <network_off+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	699b      	ldr	r3, [r3, #24]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030240 	.word	0x00030240

000b5124 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <network_listen+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	69db      	ldr	r3, [r3, #28]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	00030240 	.word	0x00030240

000b5134 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <network_listening+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6a1b      	ldr	r3, [r3, #32]
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030240 	.word	0x00030240

000b5144 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <network_set_listen_timeout+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030240 	.word	0x00030240

000b5154 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <network_get_listen_timeout+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030240 	.word	0x00030240

000b5164 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <network_is_on+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030240 	.word	0x00030240

000b5174 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b02      	ldr	r3, [pc, #8]	; (b5180 <network_is_off+0xc>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	bd08      	pop	{r3, pc}
   b5180:	00030240 	.word	0x00030240

000b5184 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5184:	b508      	push	{r3, lr}
   b5186:	4b02      	ldr	r3, [pc, #8]	; (b5190 <malloc+0xc>)
   b5188:	681b      	ldr	r3, [r3, #0]
   b518a:	681b      	ldr	r3, [r3, #0]
   b518c:	9301      	str	r3, [sp, #4]
   b518e:	bd08      	pop	{r3, pc}
   b5190:	0003021c 	.word	0x0003021c

000b5194 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5194:	b508      	push	{r3, lr}
   b5196:	4b02      	ldr	r3, [pc, #8]	; (b51a0 <free+0xc>)
   b5198:	681b      	ldr	r3, [r3, #0]
   b519a:	685b      	ldr	r3, [r3, #4]
   b519c:	9301      	str	r3, [sp, #4]
   b519e:	bd08      	pop	{r3, pc}
   b51a0:	0003021c 	.word	0x0003021c

000b51a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b51a4:	b508      	push	{r3, lr}
   b51a6:	4b02      	ldr	r3, [pc, #8]	; (b51b0 <vsnprintf+0xc>)
   b51a8:	681b      	ldr	r3, [r3, #0]
   b51aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b51ac:	9301      	str	r3, [sp, #4]
   b51ae:	bd08      	pop	{r3, pc}
   b51b0:	0003021c 	.word	0x0003021c

000b51b4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b51b4:	b508      	push	{r3, lr}
   b51b6:	4b02      	ldr	r3, [pc, #8]	; (b51c0 <__errno+0xc>)
   b51b8:	681b      	ldr	r3, [r3, #0]
   b51ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51bc:	9301      	str	r3, [sp, #4]
   b51be:	bd08      	pop	{r3, pc}
   b51c0:	0003021c 	.word	0x0003021c

000b51c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b02      	ldr	r3, [pc, #8]	; (b51d0 <__assert_func+0xc>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51cc:	9301      	str	r3, [sp, #4]
   b51ce:	bd08      	pop	{r3, pc}
   b51d0:	0003021c 	.word	0x0003021c

000b51d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b51d4:	b508      	push	{r3, lr}
   b51d6:	4b02      	ldr	r3, [pc, #8]	; (b51e0 <newlib_impure_ptr_callback+0xc>)
   b51d8:	681b      	ldr	r3, [r3, #0]
   b51da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b51dc:	9301      	str	r3, [sp, #4]
   b51de:	bd08      	pop	{r3, pc}
   b51e0:	0003021c 	.word	0x0003021c

000b51e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b51e4:	2100      	movs	r1, #0
   b51e6:	f7ff bf49 	b.w	b507c <system_delay_ms>
	...

000b51ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b51ec:	4802      	ldr	r0, [pc, #8]	; (b51f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b51ee:	2300      	movs	r3, #0
   b51f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b51f2:	f7ff bdcb 	b.w	b4d8c <os_mutex_recursive_create>
   b51f6:	bf00      	nop
   b51f8:	2003e6c4 	.word	0x2003e6c4

000b51fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b51fc:	2200      	movs	r2, #0
   b51fe:	6840      	ldr	r0, [r0, #4]
   b5200:	4611      	mov	r1, r2
   b5202:	f7ff bf97 	b.w	b5134 <network_listening>

000b5206 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5206:	2200      	movs	r2, #0
   b5208:	6840      	ldr	r0, [r0, #4]
   b520a:	4611      	mov	r1, r2
   b520c:	f7ff bfa2 	b.w	b5154 <network_get_listen_timeout>

000b5210 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5210:	6840      	ldr	r0, [r0, #4]
   b5212:	2200      	movs	r2, #0
   b5214:	f7ff bf96 	b.w	b5144 <network_set_listen_timeout>

000b5218 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5218:	6840      	ldr	r0, [r0, #4]
   b521a:	2200      	movs	r2, #0
   b521c:	f081 0101 	eor.w	r1, r1, #1
   b5220:	f7ff bf80 	b.w	b5124 <network_listen>

000b5224 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5224:	2300      	movs	r3, #0
   b5226:	6840      	ldr	r0, [r0, #4]
   b5228:	461a      	mov	r2, r3
   b522a:	4619      	mov	r1, r3
   b522c:	f7ff bf72 	b.w	b5114 <network_off>

000b5230 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5230:	2300      	movs	r3, #0
   b5232:	6840      	ldr	r0, [r0, #4]
   b5234:	461a      	mov	r2, r3
   b5236:	4619      	mov	r1, r3
   b5238:	f7ff bf64 	b.w	b5104 <network_on>

000b523c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b523c:	2200      	movs	r2, #0
   b523e:	6840      	ldr	r0, [r0, #4]
   b5240:	4611      	mov	r1, r2
   b5242:	f7ff bf57 	b.w	b50f4 <network_ready>

000b5246 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5246:	2200      	movs	r2, #0
   b5248:	6840      	ldr	r0, [r0, #4]
   b524a:	4611      	mov	r1, r2
   b524c:	f7ff bf42 	b.w	b50d4 <network_connecting>

000b5250 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5250:	6840      	ldr	r0, [r0, #4]
   b5252:	2200      	movs	r2, #0
   b5254:	2102      	movs	r1, #2
   b5256:	f7ff bf45 	b.w	b50e4 <network_disconnect>

000b525a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b525a:	2300      	movs	r3, #0
   b525c:	6840      	ldr	r0, [r0, #4]
   b525e:	461a      	mov	r2, r3
   b5260:	f7ff bf30 	b.w	b50c4 <network_connect>

000b5264 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5264:	4b02      	ldr	r3, [pc, #8]	; (b5270 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5266:	2203      	movs	r2, #3
   b5268:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b526a:	4a02      	ldr	r2, [pc, #8]	; (b5274 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b526c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b526e:	4770      	bx	lr
   b5270:	2003e6c8 	.word	0x2003e6c8
   b5274:	000b7f8c 	.word	0x000b7f8c

000b5278 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5278:	4770      	bx	lr

000b527a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b527a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b527c:	4606      	mov	r6, r0
   b527e:	4615      	mov	r5, r2
   b5280:	460c      	mov	r4, r1
   b5282:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5284:	42bc      	cmp	r4, r7
   b5286:	d006      	beq.n	b5296 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5288:	6833      	ldr	r3, [r6, #0]
   b528a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b528e:	689b      	ldr	r3, [r3, #8]
   b5290:	4630      	mov	r0, r6
   b5292:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5294:	e7f6      	b.n	b5284 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5296:	4628      	mov	r0, r5
   b5298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b529a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b529a:	7c00      	ldrb	r0, [r0, #16]
   b529c:	2200      	movs	r2, #0
   b529e:	f7ff bdcd 	b.w	b4e3c <hal_i2c_write>

000b52a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b52a2:	7c00      	ldrb	r0, [r0, #16]
   b52a4:	2100      	movs	r1, #0
   b52a6:	f7ff bdd1 	b.w	b4e4c <hal_i2c_available>

000b52aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b52aa:	7c00      	ldrb	r0, [r0, #16]
   b52ac:	2100      	movs	r1, #0
   b52ae:	f7ff bdd5 	b.w	b4e5c <hal_i2c_read>

000b52b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b52b2:	7c00      	ldrb	r0, [r0, #16]
   b52b4:	2100      	movs	r1, #0
   b52b6:	f7ff bdd9 	b.w	b4e6c <hal_i2c_peek>

000b52ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b52ba:	7c00      	ldrb	r0, [r0, #16]
   b52bc:	2100      	movs	r1, #0
   b52be:	f7ff bddd 	b.w	b4e7c <hal_i2c_flush>

000b52c2 <_ZN7TwoWireD0Ev>:
   b52c2:	b510      	push	{r4, lr}
   b52c4:	2114      	movs	r1, #20
   b52c6:	4604      	mov	r4, r0
   b52c8:	f7fe fee7 	bl	b409a <_ZdlPvj>
   b52cc:	4620      	mov	r0, r4
   b52ce:	bd10      	pop	{r4, pc}

000b52d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52d0:	b538      	push	{r3, r4, r5, lr}
   b52d2:	4604      	mov	r4, r0
   b52d4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b52d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52da:	2200      	movs	r2, #0
   b52dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b52e0:	4b09      	ldr	r3, [pc, #36]	; (b5308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b52e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52e4:	4608      	mov	r0, r1
   b52e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b52e8:	4629      	mov	r1, r5
   b52ea:	f7ff fdd7 	bl	b4e9c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52ee:	30bf      	adds	r0, #191	; 0xbf
   b52f0:	d108      	bne.n	b5304 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b52f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52f4:	07db      	lsls	r3, r3, #31
   b52f6:	d505      	bpl.n	b5304 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b52f8:	6868      	ldr	r0, [r5, #4]
   b52fa:	f7ff ff4b 	bl	b5194 <free>
    free(conf.tx_buffer);
   b52fe:	68e8      	ldr	r0, [r5, #12]
   b5300:	f7ff ff48 	bl	b5194 <free>
}
   b5304:	4620      	mov	r0, r4
   b5306:	bd38      	pop	{r3, r4, r5, pc}
   b5308:	000b7fc8 	.word	0x000b7fc8

000b530c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b530c:	2300      	movs	r3, #0
   b530e:	7c00      	ldrb	r0, [r0, #16]
   b5310:	461a      	mov	r2, r3
   b5312:	4619      	mov	r1, r3
   b5314:	f7ff bd7a 	b.w	b4e0c <hal_i2c_begin>

000b5318 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5318:	7c00      	ldrb	r0, [r0, #16]
   b531a:	2200      	movs	r2, #0
   b531c:	f7ff bd7e 	b.w	b4e1c <hal_i2c_begin_transmission>

000b5320 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5320:	b2c9      	uxtb	r1, r1
   b5322:	f7ff bff9 	b.w	b5318 <_ZN7TwoWire17beginTransmissionEh>

000b5326 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5326:	7c00      	ldrb	r0, [r0, #16]
   b5328:	2200      	movs	r2, #0
   b532a:	f7ff bd7f 	b.w	b4e2c <hal_i2c_end_transmission>

000b532e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b532e:	2101      	movs	r1, #1
   b5330:	f7ff bff9 	b.w	b5326 <_ZN7TwoWire15endTransmissionEh>

000b5334 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5334:	4770      	bx	lr

000b5336 <_ZN9IPAddressD0Ev>:
   b5336:	b510      	push	{r4, lr}
   b5338:	2118      	movs	r1, #24
   b533a:	4604      	mov	r4, r0
   b533c:	f7fe fead 	bl	b409a <_ZdlPvj>
   b5340:	4620      	mov	r0, r4
   b5342:	bd10      	pop	{r4, pc}

000b5344 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5344:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5346:	7d03      	ldrb	r3, [r0, #20]
   b5348:	2b06      	cmp	r3, #6
{
   b534a:	b08d      	sub	sp, #52	; 0x34
   b534c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b534e:	f100 0704 	add.w	r7, r0, #4
   b5352:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5356:	d012      	beq.n	b537e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5358:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b535c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5360:	220a      	movs	r2, #10
   b5362:	4630      	mov	r0, r6
   b5364:	f000 f94f 	bl	b5606 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5368:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b536a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b536c:	d019      	beq.n	b53a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b536e:	2c00      	cmp	r4, #0
   b5370:	d0f4      	beq.n	b535c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5372:	212e      	movs	r1, #46	; 0x2e
   b5374:	4630      	mov	r0, r6
   b5376:	f000 f937 	bl	b55e8 <_ZN5Print5printEc>
   b537a:	4404      	add	r4, r0
   b537c:	e7ee      	b.n	b535c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b537e:	232f      	movs	r3, #47	; 0x2f
   b5380:	466a      	mov	r2, sp
   b5382:	4639      	mov	r1, r7
   b5384:	200a      	movs	r0, #10
		buf[0] = 0;
   b5386:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b538a:	f7ff fd8f 	bl	b4eac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b538e:	4668      	mov	r0, sp
   b5390:	f002 fab2 	bl	b78f8 <strlen>
   b5394:	6833      	ldr	r3, [r6, #0]
   b5396:	4602      	mov	r2, r0
   b5398:	68db      	ldr	r3, [r3, #12]
   b539a:	4669      	mov	r1, sp
   b539c:	4630      	mov	r0, r6
   b539e:	4798      	blx	r3
   b53a0:	4604      	mov	r4, r0
    }
    return n;
}
   b53a2:	4620      	mov	r0, r4
   b53a4:	b00d      	add	sp, #52	; 0x34
   b53a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b53a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b53a8:	b510      	push	{r4, lr}
   b53aa:	4b05      	ldr	r3, [pc, #20]	; (b53c0 <_ZN9IPAddressC1Ev+0x18>)
   b53ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b53ae:	2211      	movs	r2, #17
   b53b0:	f840 3b04 	str.w	r3, [r0], #4
   b53b4:	2100      	movs	r1, #0
   b53b6:	f002 fa69 	bl	b788c <memset>
}
   b53ba:	4620      	mov	r0, r4
   b53bc:	bd10      	pop	{r4, pc}
   b53be:	bf00      	nop
   b53c0:	000b7ff0 	.word	0x000b7ff0

000b53c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b53c4:	4603      	mov	r3, r0
   b53c6:	4a07      	ldr	r2, [pc, #28]	; (b53e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b53c8:	b510      	push	{r4, lr}
   b53ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b53ce:	f101 0210 	add.w	r2, r1, #16
   b53d2:	f851 4b04 	ldr.w	r4, [r1], #4
   b53d6:	f843 4b04 	str.w	r4, [r3], #4
   b53da:	4291      	cmp	r1, r2
   b53dc:	d1f9      	bne.n	b53d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b53de:	780a      	ldrb	r2, [r1, #0]
   b53e0:	701a      	strb	r2, [r3, #0]
}
   b53e2:	bd10      	pop	{r4, pc}
   b53e4:	000b7ff0 	.word	0x000b7ff0

000b53e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b53e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b53ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b53ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b53f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b53f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b53fa:	2304      	movs	r3, #4
   b53fc:	6041      	str	r1, [r0, #4]
   b53fe:	7503      	strb	r3, [r0, #20]
}
   b5400:	bd10      	pop	{r4, pc}
	...

000b5404 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5404:	b507      	push	{r0, r1, r2, lr}
   b5406:	4b06      	ldr	r3, [pc, #24]	; (b5420 <_ZN9IPAddressC1EPKh+0x1c>)
   b5408:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b540a:	78cb      	ldrb	r3, [r1, #3]
   b540c:	9300      	str	r3, [sp, #0]
   b540e:	788b      	ldrb	r3, [r1, #2]
   b5410:	784a      	ldrb	r2, [r1, #1]
   b5412:	7809      	ldrb	r1, [r1, #0]
   b5414:	f7ff ffe8 	bl	b53e8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5418:	b003      	add	sp, #12
   b541a:	f85d fb04 	ldr.w	pc, [sp], #4
   b541e:	bf00      	nop
   b5420:	000b7ff0 	.word	0x000b7ff0

000b5424 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5424:	4b01      	ldr	r3, [pc, #4]	; (b542c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5426:	4a02      	ldr	r2, [pc, #8]	; (b5430 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5428:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b542a:	4770      	bx	lr
   b542c:	2003e6d0 	.word	0x2003e6d0
   b5430:	000b7ffc 	.word	0x000b7ffc

000b5434 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5434:	2300      	movs	r3, #0
   b5436:	6840      	ldr	r0, [r0, #4]
   b5438:	461a      	mov	r2, r3
   b543a:	f7ff be43 	b.w	b50c4 <network_connect>

000b543e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b543e:	6840      	ldr	r0, [r0, #4]
   b5440:	2200      	movs	r2, #0
   b5442:	2102      	movs	r1, #2
   b5444:	f7ff be4e 	b.w	b50e4 <network_disconnect>

000b5448 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5448:	2200      	movs	r2, #0
   b544a:	6840      	ldr	r0, [r0, #4]
   b544c:	4611      	mov	r1, r2
   b544e:	f7ff be41 	b.w	b50d4 <network_connecting>

000b5452 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5452:	2200      	movs	r2, #0
   b5454:	6840      	ldr	r0, [r0, #4]
   b5456:	4611      	mov	r1, r2
   b5458:	f7ff be4c 	b.w	b50f4 <network_ready>

000b545c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b545c:	2300      	movs	r3, #0
   b545e:	6840      	ldr	r0, [r0, #4]
   b5460:	461a      	mov	r2, r3
   b5462:	4619      	mov	r1, r3
   b5464:	f7ff be4e 	b.w	b5104 <network_on>

000b5468 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5468:	2300      	movs	r3, #0
   b546a:	6840      	ldr	r0, [r0, #4]
   b546c:	461a      	mov	r2, r3
   b546e:	4619      	mov	r1, r3
   b5470:	f7ff be50 	b.w	b5114 <network_off>

000b5474 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5474:	6840      	ldr	r0, [r0, #4]
   b5476:	2100      	movs	r1, #0
   b5478:	f7ff be74 	b.w	b5164 <network_is_on>

000b547c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b547c:	6840      	ldr	r0, [r0, #4]
   b547e:	2100      	movs	r1, #0
   b5480:	f7ff be78 	b.w	b5174 <network_is_off>

000b5484 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5484:	6840      	ldr	r0, [r0, #4]
   b5486:	2200      	movs	r2, #0
   b5488:	f081 0101 	eor.w	r1, r1, #1
   b548c:	f7ff be4a 	b.w	b5124 <network_listen>

000b5490 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5490:	6840      	ldr	r0, [r0, #4]
   b5492:	2200      	movs	r2, #0
   b5494:	f7ff be56 	b.w	b5144 <network_set_listen_timeout>

000b5498 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5498:	2200      	movs	r2, #0
   b549a:	6840      	ldr	r0, [r0, #4]
   b549c:	4611      	mov	r1, r2
   b549e:	f7ff be59 	b.w	b5154 <network_get_listen_timeout>

000b54a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b54a2:	2200      	movs	r2, #0
   b54a4:	6840      	ldr	r0, [r0, #4]
   b54a6:	4611      	mov	r1, r2
   b54a8:	f7ff be44 	b.w	b5134 <network_listening>

000b54ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b54ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b54b0:	b095      	sub	sp, #84	; 0x54
   b54b2:	4614      	mov	r4, r2
   b54b4:	460d      	mov	r5, r1
   b54b6:	4607      	mov	r7, r0
    IPAddress addr;
   b54b8:	f7ff ff76 	bl	b53a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b54bc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b54be:	221c      	movs	r2, #28
   b54c0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b54c2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b54c4:	f002 f9e2 	bl	b788c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b54c8:	2340      	movs	r3, #64	; 0x40
   b54ca:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b54cc:	4620      	mov	r0, r4
   b54ce:	466b      	mov	r3, sp
   b54d0:	aa0c      	add	r2, sp, #48	; 0x30
   b54d2:	2100      	movs	r1, #0
   b54d4:	f7ff fcfa 	bl	b4ecc <netdb_getaddrinfo>
    if (!r) {
   b54d8:	4604      	mov	r4, r0
   b54da:	2800      	cmp	r0, #0
   b54dc:	d14b      	bne.n	b5576 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54de:	4602      	mov	r2, r0
   b54e0:	2101      	movs	r1, #1
   b54e2:	6868      	ldr	r0, [r5, #4]
   b54e4:	f7ff fe06 	bl	b50f4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54ec:	4622      	mov	r2, r4
   b54ee:	6868      	ldr	r0, [r5, #4]
   b54f0:	f7ff fe00 	bl	b50f4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54f6:	4681      	mov	r9, r0
        bool ok = false;
   b54f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54fa:	2e00      	cmp	r6, #0
   b54fc:	d03b      	beq.n	b5576 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b54fe:	2900      	cmp	r1, #0
   b5500:	d139      	bne.n	b5576 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5502:	6873      	ldr	r3, [r6, #4]
   b5504:	2b02      	cmp	r3, #2
   b5506:	d003      	beq.n	b5510 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5508:	2b0a      	cmp	r3, #10
   b550a:	d011      	beq.n	b5530 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b550c:	69f6      	ldr	r6, [r6, #28]
   b550e:	e7f4      	b.n	b54fa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5510:	f1b8 0f00 	cmp.w	r8, #0
   b5514:	d0fa      	beq.n	b550c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5516:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5518:	a806      	add	r0, sp, #24
   b551a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b551c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b551e:	f7ff ff71 	bl	b5404 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5524:	1d3c      	adds	r4, r7, #4
   b5526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5528:	682b      	ldr	r3, [r5, #0]
   b552a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b552c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b552e:	e7ed      	b.n	b550c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5530:	f1b9 0f00 	cmp.w	r9, #0
   b5534:	d0ea      	beq.n	b550c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5536:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5538:	2210      	movs	r2, #16
   b553a:	a801      	add	r0, sp, #4
   b553c:	f002 f9a6 	bl	b788c <memset>
                    a.v = 6;
   b5540:	2306      	movs	r3, #6
   b5542:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5546:	ad01      	add	r5, sp, #4
   b5548:	f104 0308 	add.w	r3, r4, #8
   b554c:	3418      	adds	r4, #24
   b554e:	6818      	ldr	r0, [r3, #0]
   b5550:	6859      	ldr	r1, [r3, #4]
   b5552:	462a      	mov	r2, r5
   b5554:	c203      	stmia	r2!, {r0, r1}
   b5556:	3308      	adds	r3, #8
   b5558:	42a3      	cmp	r3, r4
   b555a:	4615      	mov	r5, r2
   b555c:	d1f7      	bne.n	b554e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b555e:	a901      	add	r1, sp, #4
   b5560:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5562:	ad07      	add	r5, sp, #28
   b5564:	f7ff ff2e 	bl	b53c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b556a:	1d3c      	adds	r4, r7, #4
   b556c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b556e:	682b      	ldr	r3, [r5, #0]
   b5570:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5572:	4649      	mov	r1, r9
   b5574:	e7ca      	b.n	b550c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5576:	9800      	ldr	r0, [sp, #0]
   b5578:	f7ff fca0 	bl	b4ebc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b557c:	4638      	mov	r0, r7
   b557e:	b015      	add	sp, #84	; 0x54
   b5580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5584 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5584:	4b02      	ldr	r3, [pc, #8]	; (b5590 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5586:	4a03      	ldr	r2, [pc, #12]	; (b5594 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5588:	601a      	str	r2, [r3, #0]
   b558a:	2200      	movs	r2, #0
   b558c:	605a      	str	r2, [r3, #4]

} // spark
   b558e:	4770      	bx	lr
   b5590:	2003e6d4 	.word	0x2003e6d4
   b5594:	000b8008 	.word	0x000b8008

000b5598 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b559a:	4606      	mov	r6, r0
   b559c:	460d      	mov	r5, r1
  size_t n = 0;
   b559e:	188f      	adds	r7, r1, r2
   b55a0:	2400      	movs	r4, #0
  while (size--) {
   b55a2:	42bd      	cmp	r5, r7
   b55a4:	d00c      	beq.n	b55c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b55a6:	6833      	ldr	r3, [r6, #0]
   b55a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b55ac:	689b      	ldr	r3, [r3, #8]
   b55ae:	4630      	mov	r0, r6
   b55b0:	4798      	blx	r3
     if (chunk>=0)
   b55b2:	1e03      	subs	r3, r0, #0
   b55b4:	db01      	blt.n	b55ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b55b6:	441c      	add	r4, r3
  while (size--) {
   b55b8:	e7f3      	b.n	b55a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b55ba:	2c00      	cmp	r4, #0
   b55bc:	bf08      	it	eq
   b55be:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b55c0:	4620      	mov	r0, r4
   b55c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55c4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b55c4:	b513      	push	{r0, r1, r4, lr}
   b55c6:	4604      	mov	r4, r0
    }
   b55c8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b55ca:	b159      	cbz	r1, b55e4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b55cc:	9101      	str	r1, [sp, #4]
   b55ce:	f002 f993 	bl	b78f8 <strlen>
   b55d2:	6823      	ldr	r3, [r4, #0]
   b55d4:	9901      	ldr	r1, [sp, #4]
   b55d6:	68db      	ldr	r3, [r3, #12]
   b55d8:	4602      	mov	r2, r0
   b55da:	4620      	mov	r0, r4
    }
   b55dc:	b002      	add	sp, #8
   b55de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b55e2:	4718      	bx	r3
    }
   b55e4:	b002      	add	sp, #8
   b55e6:	bd10      	pop	{r4, pc}

000b55e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b55e8:	6803      	ldr	r3, [r0, #0]
   b55ea:	689b      	ldr	r3, [r3, #8]
   b55ec:	4718      	bx	r3

000b55ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b55ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b55f0:	210d      	movs	r1, #13
{
   b55f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b55f4:	f7ff fff8 	bl	b55e8 <_ZN5Print5printEc>
  n += print('\n');
   b55f8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b55fa:	4604      	mov	r4, r0
  n += print('\n');
   b55fc:	4628      	mov	r0, r5
   b55fe:	f7ff fff3 	bl	b55e8 <_ZN5Print5printEc>
  return n;
}
   b5602:	4420      	add	r0, r4
   b5604:	bd38      	pop	{r3, r4, r5, pc}

000b5606 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5606:	b530      	push	{r4, r5, lr}
   b5608:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b560a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b560c:	2a01      	cmp	r2, #1
  *str = '\0';
   b560e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5612:	bf98      	it	ls
   b5614:	220a      	movls	r2, #10
   b5616:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5618:	460d      	mov	r5, r1
   b561a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b561e:	fb01 5312 	mls	r3, r1, r2, r5
   b5622:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5626:	2b09      	cmp	r3, #9
   b5628:	bf94      	ite	ls
   b562a:	3330      	addls	r3, #48	; 0x30
   b562c:	3337      	addhi	r3, #55	; 0x37
   b562e:	b2db      	uxtb	r3, r3
  } while(n);
   b5630:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5632:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5636:	d9ef      	bls.n	b5618 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5638:	4621      	mov	r1, r4
   b563a:	f7ff ffc3 	bl	b55c4 <_ZN5Print5writeEPKc>
}
   b563e:	b00b      	add	sp, #44	; 0x2c
   b5640:	bd30      	pop	{r4, r5, pc}

000b5642 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5646:	b086      	sub	sp, #24
   b5648:	af00      	add	r7, sp, #0
   b564a:	4605      	mov	r5, r0
   b564c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b564e:	1d38      	adds	r0, r7, #4
   b5650:	2114      	movs	r1, #20
{
   b5652:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5654:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5656:	f7ff fda5 	bl	b51a4 <vsnprintf>

    if (n<bufsize)
   b565a:	2813      	cmp	r0, #19
   b565c:	d80e      	bhi.n	b567c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b565e:	1d39      	adds	r1, r7, #4
   b5660:	4628      	mov	r0, r5
   b5662:	f7ff ffaf 	bl	b55c4 <_ZN5Print5writeEPKc>
   b5666:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5668:	b11e      	cbz	r6, b5672 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b566a:	4628      	mov	r0, r5
   b566c:	f7ff ffbf 	bl	b55ee <_ZN5Print7printlnEv>
   b5670:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5672:	4620      	mov	r0, r4
   b5674:	3718      	adds	r7, #24
   b5676:	46bd      	mov	sp, r7
   b5678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b567c:	f100 0308 	add.w	r3, r0, #8
   b5680:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5684:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5686:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b568a:	4622      	mov	r2, r4
   b568c:	1c41      	adds	r1, r0, #1
   b568e:	683b      	ldr	r3, [r7, #0]
   b5690:	4668      	mov	r0, sp
   b5692:	f7ff fd87 	bl	b51a4 <vsnprintf>
  return write(str);
   b5696:	4669      	mov	r1, sp
   b5698:	4628      	mov	r0, r5
   b569a:	f7ff ff93 	bl	b55c4 <_ZN5Print5writeEPKc>
   b569e:	4604      	mov	r4, r0
   b56a0:	46c5      	mov	sp, r8
   b56a2:	e7e1      	b.n	b5668 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b56a4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b56a4:	4b01      	ldr	r3, [pc, #4]	; (b56ac <_GLOBAL__sub_I_RGB+0x8>)
   b56a6:	2200      	movs	r2, #0
   b56a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b56aa:	4770      	bx	lr
   b56ac:	2003e6dc 	.word	0x2003e6dc

000b56b0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b56b0:	2100      	movs	r1, #0
   b56b2:	f7ff bc5b 	b.w	b4f6c <hal_spi_release>

000b56b6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b56b6:	2100      	movs	r1, #0
   b56b8:	f7ff bc50 	b.w	b4f5c <hal_spi_acquire>

000b56bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b56bc:	b510      	push	{r4, lr}
   b56be:	4604      	mov	r4, r0
   b56c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b56c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b56c4:	f7ff fc32 	bl	b4f2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b56c8:	2300      	movs	r3, #0
   b56ca:	6063      	str	r3, [r4, #4]
}
   b56cc:	4620      	mov	r0, r4
   b56ce:	bd10      	pop	{r4, pc}

000b56d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b56d0:	b513      	push	{r0, r1, r4, lr}
   b56d2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b56d4:	7800      	ldrb	r0, [r0, #0]
   b56d6:	f7ff ffee 	bl	b56b6 <_ZN8SPIClass4lockEv.isra.0>
   b56da:	b958      	cbnz	r0, b56f4 <_ZN8SPIClass5beginEv+0x24>
   b56dc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b56de:	9001      	str	r0, [sp, #4]
   b56e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b56e4:	f7ff fbfa 	bl	b4edc <hal_spi_begin>
        unlock();
   b56e8:	9801      	ldr	r0, [sp, #4]
    }
}
   b56ea:	b002      	add	sp, #8
   b56ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b56f0:	f7ff bfde 	b.w	b56b0 <_ZN8SPIClass6unlockEv.isra.0>
   b56f4:	b002      	add	sp, #8
   b56f6:	bd10      	pop	{r4, pc}

000b56f8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b56f8:	b513      	push	{r0, r1, r4, lr}
   b56fa:	4604      	mov	r4, r0
    if (!lock())
   b56fc:	7800      	ldrb	r0, [r0, #0]
{
   b56fe:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5700:	f7ff ffd9 	bl	b56b6 <_ZN8SPIClass4lockEv.isra.0>
   b5704:	9901      	ldr	r1, [sp, #4]
   b5706:	b948      	cbnz	r0, b571c <_ZN8SPIClass11setBitOrderEh+0x24>
   b5708:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b570a:	9001      	str	r0, [sp, #4]
   b570c:	f7ff fbee 	bl	b4eec <hal_spi_set_bit_order>
        unlock();
   b5710:	9801      	ldr	r0, [sp, #4]
    }
}
   b5712:	b002      	add	sp, #8
   b5714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5718:	f7ff bfca 	b.w	b56b0 <_ZN8SPIClass6unlockEv.isra.0>
   b571c:	b002      	add	sp, #8
   b571e:	bd10      	pop	{r4, pc}

000b5720 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5720:	b513      	push	{r0, r1, r4, lr}
   b5722:	4604      	mov	r4, r0
    if (!lock())
   b5724:	7800      	ldrb	r0, [r0, #0]
{
   b5726:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5728:	f7ff ffc5 	bl	b56b6 <_ZN8SPIClass4lockEv.isra.0>
   b572c:	9901      	ldr	r1, [sp, #4]
   b572e:	b948      	cbnz	r0, b5744 <_ZN8SPIClass11setDataModeEh+0x24>
   b5730:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5732:	9001      	str	r0, [sp, #4]
   b5734:	f7ff fbe2 	bl	b4efc <hal_spi_set_data_mode>
        unlock();
   b5738:	9801      	ldr	r0, [sp, #4]
    }
}
   b573a:	b002      	add	sp, #8
   b573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5740:	f7ff bfb6 	b.w	b56b0 <_ZN8SPIClass6unlockEv.isra.0>
   b5744:	b002      	add	sp, #8
   b5746:	bd10      	pop	{r4, pc}

000b5748 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5748:	0840      	lsrs	r0, r0, #1
{
   b574a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b574c:	6018      	str	r0, [r3, #0]
   b574e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5750:	6818      	ldr	r0, [r3, #0]
   b5752:	4288      	cmp	r0, r1
   b5754:	b2e5      	uxtb	r5, r4
   b5756:	d906      	bls.n	b5766 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5758:	3401      	adds	r4, #1
   b575a:	2c08      	cmp	r4, #8
   b575c:	d002      	beq.n	b5764 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b575e:	0840      	lsrs	r0, r0, #1
   b5760:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5762:	e7f5      	b.n	b5750 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5764:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5768:	5d5b      	ldrb	r3, [r3, r5]
   b576a:	7013      	strb	r3, [r2, #0]
}
   b576c:	bd30      	pop	{r4, r5, pc}
   b576e:	bf00      	nop
   b5770:	000b803c 	.word	0x000b803c

000b5774 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5778:	b088      	sub	sp, #32
    unsigned clock = 0;
   b577a:	2300      	movs	r3, #0
{
   b577c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b577e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5780:	9302      	str	r3, [sp, #8]
{
   b5782:	460e      	mov	r6, r1
   b5784:	4617      	mov	r7, r2
    if (!lock())
   b5786:	f7ff ff96 	bl	b56b6 <_ZN8SPIClass4lockEv.isra.0>
   b578a:	4605      	mov	r5, r0
   b578c:	bb00      	cbnz	r0, b57d0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b578e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5792:	4601      	mov	r1, r0
   b5794:	2214      	movs	r2, #20
   b5796:	a803      	add	r0, sp, #12
   b5798:	f002 f878 	bl	b788c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b579c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b579e:	462a      	mov	r2, r5
   b57a0:	a903      	add	r1, sp, #12
   b57a2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b57a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b57a8:	f7ff fbd0 	bl	b4f4c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b57ac:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b57ae:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b57b2:	ab02      	add	r3, sp, #8
   b57b4:	f10d 0207 	add.w	r2, sp, #7
   b57b8:	fb07 f106 	mul.w	r1, r7, r6
   b57bc:	f7ff ffc4 	bl	b5748 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b57c0:	7820      	ldrb	r0, [r4, #0]
   b57c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b57c6:	f7ff fba1 	bl	b4f0c <hal_spi_set_clock_divider>
        unlock();
   b57ca:	7820      	ldrb	r0, [r4, #0]
   b57cc:	f7ff ff70 	bl	b56b0 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b57d0:	9802      	ldr	r0, [sp, #8]
   b57d2:	b008      	add	sp, #32
   b57d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b57d8 <_ZN8SPIClass15setClockDividerEh>:
{
   b57d8:	b538      	push	{r3, r4, r5, lr}
   b57da:	4604      	mov	r4, r0
    if (!lock())
   b57dc:	7800      	ldrb	r0, [r0, #0]
{
   b57de:	460d      	mov	r5, r1
    if (!lock())
   b57e0:	f7ff ff69 	bl	b56b6 <_ZN8SPIClass4lockEv.isra.0>
   b57e4:	4603      	mov	r3, r0
   b57e6:	b9d0      	cbnz	r0, b581e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b57e8:	6861      	ldr	r1, [r4, #4]
   b57ea:	b199      	cbz	r1, b5814 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b57ec:	4a0c      	ldr	r2, [pc, #48]	; (b5820 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b57ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   b57f2:	4285      	cmp	r5, r0
   b57f4:	d002      	beq.n	b57fc <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b57f6:	3301      	adds	r3, #1
   b57f8:	2b08      	cmp	r3, #8
   b57fa:	d1f8      	bne.n	b57ee <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b57fc:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b57fe:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5800:	2201      	movs	r2, #1
   b5802:	40d9      	lsrs	r1, r3
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff ffb5 	bl	b5774 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b580a:	7820      	ldrb	r0, [r4, #0]
}
   b580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5810:	f7ff bf4e 	b.w	b56b0 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5814:	7820      	ldrb	r0, [r4, #0]
   b5816:	4629      	mov	r1, r5
   b5818:	f7ff fb78 	bl	b4f0c <hal_spi_set_clock_divider>
   b581c:	e7f5      	b.n	b580a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b581e:	bd38      	pop	{r3, r4, r5, pc}
   b5820:	000b803c 	.word	0x000b803c

000b5824 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5824:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5826:	7800      	ldrb	r0, [r0, #0]
   b5828:	f7ff fb78 	bl	b4f1c <hal_spi_transfer>
}
   b582c:	b2c0      	uxtb	r0, r0
   b582e:	bd08      	pop	{r3, pc}

000b5830 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5830:	4b05      	ldr	r3, [pc, #20]	; (b5848 <_GLOBAL__sub_I_System+0x18>)
   b5832:	2202      	movs	r2, #2
   b5834:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5836:	4b05      	ldr	r3, [pc, #20]	; (b584c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5838:	4a05      	ldr	r2, [pc, #20]	; (b5850 <_GLOBAL__sub_I_System+0x20>)
   b583a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b583c:	2000      	movs	r0, #0
   b583e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5842:	f7ff bc13 	b.w	b506c <set_system_mode>
   b5846:	bf00      	nop
   b5848:	2003e6f8 	.word	0x2003e6f8
   b584c:	2003e6ec 	.word	0x2003e6ec
   b5850:	ffff0000 	.word	0xffff0000

000b5854 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5854:	4b02      	ldr	r3, [pc, #8]	; (b5860 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5856:	681a      	ldr	r2, [r3, #0]
   b5858:	4b02      	ldr	r3, [pc, #8]	; (b5864 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b585a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b585c:	4770      	bx	lr
   b585e:	bf00      	nop
   b5860:	2003e610 	.word	0x2003e610
   b5864:	2003e6fc 	.word	0x2003e6fc

000b5868 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5868:	4770      	bx	lr

000b586a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b586a:	7441      	strb	r1, [r0, #17]
}
   b586c:	4770      	bx	lr

000b586e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b586e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5870:	7c00      	ldrb	r0, [r0, #16]
   b5872:	f7ff fbb3 	bl	b4fdc <hal_usart_available_data_for_write>
}
   b5876:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b587a:	bd08      	pop	{r3, pc}

000b587c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b587c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b587e:	7c00      	ldrb	r0, [r0, #16]
   b5880:	f7ff fb84 	bl	b4f8c <hal_usart_available>
}
   b5884:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5888:	bd08      	pop	{r3, pc}

000b588a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b588a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b588c:	7c00      	ldrb	r0, [r0, #16]
   b588e:	f7ff fb8d 	bl	b4fac <hal_usart_peek>
}
   b5892:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5896:	bd08      	pop	{r3, pc}

000b5898 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5898:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b589a:	7c00      	ldrb	r0, [r0, #16]
   b589c:	f7ff fb7e 	bl	b4f9c <hal_usart_read>
}
   b58a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58a4:	bd08      	pop	{r3, pc}

000b58a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b58a6:	7c00      	ldrb	r0, [r0, #16]
   b58a8:	f7ff bb88 	b.w	b4fbc <hal_usart_flush>

000b58ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b58ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b58ae:	7c45      	ldrb	r5, [r0, #17]
{
   b58b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b58b2:	b12d      	cbz	r5, b58c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b58b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b58b6:	b003      	add	sp, #12
   b58b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b58bc:	f7ff bb5e 	b.w	b4f7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b58c0:	7c00      	ldrb	r0, [r0, #16]
   b58c2:	9101      	str	r1, [sp, #4]
   b58c4:	f7ff fb8a 	bl	b4fdc <hal_usart_available_data_for_write>
   b58c8:	2800      	cmp	r0, #0
   b58ca:	9901      	ldr	r1, [sp, #4]
   b58cc:	dcf2      	bgt.n	b58b4 <_ZN11USARTSerial5writeEh+0x8>
}
   b58ce:	4628      	mov	r0, r5
   b58d0:	b003      	add	sp, #12
   b58d2:	bd30      	pop	{r4, r5, pc}

000b58d4 <_ZN11USARTSerialD0Ev>:
   b58d4:	b510      	push	{r4, lr}
   b58d6:	2114      	movs	r1, #20
   b58d8:	4604      	mov	r4, r0
   b58da:	f7fe fbde 	bl	b409a <_ZdlPvj>
   b58de:	4620      	mov	r0, r4
   b58e0:	bd10      	pop	{r4, pc}
	...

000b58e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b58e4:	b510      	push	{r4, lr}
   b58e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58ea:	4604      	mov	r4, r0
   b58ec:	4608      	mov	r0, r1
   b58ee:	4611      	mov	r1, r2
   b58f0:	2200      	movs	r2, #0
   b58f2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b58f6:	4b04      	ldr	r3, [pc, #16]	; (b5908 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b58f8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b58fa:	2301      	movs	r3, #1
  _serial = serial;
   b58fc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b58fe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5900:	f7ff fb74 	bl	b4fec <hal_usart_init_ex>
}
   b5904:	4620      	mov	r0, r4
   b5906:	bd10      	pop	{r4, pc}
   b5908:	000b8068 	.word	0x000b8068

000b590c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b590c:	7441      	strb	r1, [r0, #17]
}
   b590e:	4770      	bx	lr

000b5910 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5910:	4770      	bx	lr

000b5912 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5912:	4770      	bx	lr

000b5914 <_ZN9USBSerial4readEv>:
{
   b5914:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5916:	2100      	movs	r1, #0
   b5918:	7c00      	ldrb	r0, [r0, #16]
   b591a:	f7ff fb87 	bl	b502c <HAL_USB_USART_Receive_Data>
}
   b591e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5922:	bd08      	pop	{r3, pc}

000b5924 <_ZN9USBSerial4peekEv>:
{
   b5924:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5926:	2101      	movs	r1, #1
   b5928:	7c00      	ldrb	r0, [r0, #16]
   b592a:	f7ff fb7f 	bl	b502c <HAL_USB_USART_Receive_Data>
}
   b592e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5932:	bd08      	pop	{r3, pc}

000b5934 <_ZN9USBSerial17availableForWriteEv>:
{
   b5934:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5936:	7c00      	ldrb	r0, [r0, #16]
   b5938:	f7ff fb70 	bl	b501c <HAL_USB_USART_Available_Data_For_Write>
}
   b593c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5940:	bd08      	pop	{r3, pc}

000b5942 <_ZN9USBSerial9availableEv>:
{
   b5942:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5944:	7c00      	ldrb	r0, [r0, #16]
   b5946:	f7ff fb61 	bl	b500c <HAL_USB_USART_Available_Data>
}
   b594a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b594e:	bd08      	pop	{r3, pc}

000b5950 <_ZN9USBSerial5writeEh>:
{
   b5950:	b513      	push	{r0, r1, r4, lr}
   b5952:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5954:	7c00      	ldrb	r0, [r0, #16]
{
   b5956:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5958:	f7ff fb60 	bl	b501c <HAL_USB_USART_Available_Data_For_Write>
   b595c:	2800      	cmp	r0, #0
   b595e:	9901      	ldr	r1, [sp, #4]
   b5960:	dc01      	bgt.n	b5966 <_ZN9USBSerial5writeEh+0x16>
   b5962:	7c60      	ldrb	r0, [r4, #17]
   b5964:	b120      	cbz	r0, b5970 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5966:	7c20      	ldrb	r0, [r4, #16]
   b5968:	f7ff fb68 	bl	b503c <HAL_USB_USART_Send_Data>
   b596c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5970:	b002      	add	sp, #8
   b5972:	bd10      	pop	{r4, pc}

000b5974 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5974:	7c00      	ldrb	r0, [r0, #16]
   b5976:	f7ff bb69 	b.w	b504c <HAL_USB_USART_Flush_Data>

000b597a <_ZN9USBSerialD0Ev>:
   b597a:	b510      	push	{r4, lr}
   b597c:	2114      	movs	r1, #20
   b597e:	4604      	mov	r4, r0
   b5980:	f7fe fb8b 	bl	b409a <_ZdlPvj>
   b5984:	4620      	mov	r0, r4
   b5986:	bd10      	pop	{r4, pc}

000b5988 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5988:	b510      	push	{r4, lr}
   b598a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b598e:	4604      	mov	r4, r0
   b5990:	4608      	mov	r0, r1
   b5992:	2100      	movs	r1, #0
   b5994:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5998:	4b04      	ldr	r3, [pc, #16]	; (b59ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b599a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b599c:	2301      	movs	r3, #1
  _serial = serial;
   b599e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b59a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b59a2:	4611      	mov	r1, r2
   b59a4:	f7ff fb2a 	bl	b4ffc <HAL_USB_USART_Init>
}
   b59a8:	4620      	mov	r0, r4
   b59aa:	bd10      	pop	{r4, pc}
   b59ac:	000b8098 	.word	0x000b8098

000b59b0 <_Z19acquireSerialBufferv>:
{
   b59b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b59b2:	2214      	movs	r2, #20
{
   b59b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b59b6:	2100      	movs	r1, #0
   b59b8:	f001 ff68 	bl	b788c <memset>
}
   b59bc:	4620      	mov	r0, r4
   b59be:	bd10      	pop	{r4, pc}

000b59c0 <_Z16_fetch_usbserialv>:
{
   b59c0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59c2:	4c0f      	ldr	r4, [pc, #60]	; (b5a00 <_Z16_fetch_usbserialv+0x40>)
{
   b59c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b59c6:	a803      	add	r0, sp, #12
   b59c8:	f7ff fff2 	bl	b59b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b59cc:	7821      	ldrb	r1, [r4, #0]
   b59ce:	f3bf 8f5b 	dmb	ish
   b59d2:	f011 0101 	ands.w	r1, r1, #1
   b59d6:	d10f      	bne.n	b59f8 <_Z16_fetch_usbserialv+0x38>
   b59d8:	4620      	mov	r0, r4
   b59da:	9101      	str	r1, [sp, #4]
   b59dc:	f7fe fb6c 	bl	b40b8 <__cxa_guard_acquire>
   b59e0:	9901      	ldr	r1, [sp, #4]
   b59e2:	b148      	cbz	r0, b59f8 <_Z16_fetch_usbserialv+0x38>
   b59e4:	aa03      	add	r2, sp, #12
   b59e6:	4807      	ldr	r0, [pc, #28]	; (b5a04 <_Z16_fetch_usbserialv+0x44>)
   b59e8:	f7ff ffce 	bl	b5988 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b59ec:	4620      	mov	r0, r4
   b59ee:	f7fe fb68 	bl	b40c2 <__cxa_guard_release>
   b59f2:	4805      	ldr	r0, [pc, #20]	; (b5a08 <_Z16_fetch_usbserialv+0x48>)
   b59f4:	f001 ff36 	bl	b7864 <atexit>
	return _usbserial;
}
   b59f8:	4802      	ldr	r0, [pc, #8]	; (b5a04 <_Z16_fetch_usbserialv+0x44>)
   b59fa:	b008      	add	sp, #32
   b59fc:	bd10      	pop	{r4, pc}
   b59fe:	bf00      	nop
   b5a00:	2003e700 	.word	0x2003e700
   b5a04:	2003e704 	.word	0x2003e704
   b5a08:	000b5911 	.word	0x000b5911

000b5a0c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5a0c:	2200      	movs	r2, #0
   b5a0e:	6840      	ldr	r0, [r0, #4]
   b5a10:	4611      	mov	r1, r2
   b5a12:	f7ff bb6f 	b.w	b50f4 <network_ready>

000b5a16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a16:	2200      	movs	r2, #0
   b5a18:	6840      	ldr	r0, [r0, #4]
   b5a1a:	4611      	mov	r1, r2
   b5a1c:	f7ff bb8a 	b.w	b5134 <network_listening>

000b5a20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a20:	2200      	movs	r2, #0
   b5a22:	6840      	ldr	r0, [r0, #4]
   b5a24:	4611      	mov	r1, r2
   b5a26:	f7ff bb95 	b.w	b5154 <network_get_listen_timeout>

000b5a2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a2a:	6840      	ldr	r0, [r0, #4]
   b5a2c:	2200      	movs	r2, #0
   b5a2e:	f7ff bb89 	b.w	b5144 <network_set_listen_timeout>

000b5a32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a32:	6840      	ldr	r0, [r0, #4]
   b5a34:	2200      	movs	r2, #0
   b5a36:	f081 0101 	eor.w	r1, r1, #1
   b5a3a:	f7ff bb73 	b.w	b5124 <network_listen>

000b5a3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a3e:	2300      	movs	r3, #0
   b5a40:	6840      	ldr	r0, [r0, #4]
   b5a42:	461a      	mov	r2, r3
   b5a44:	4619      	mov	r1, r3
   b5a46:	f7ff bb65 	b.w	b5114 <network_off>

000b5a4a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a4a:	2300      	movs	r3, #0
   b5a4c:	6840      	ldr	r0, [r0, #4]
   b5a4e:	461a      	mov	r2, r3
   b5a50:	4619      	mov	r1, r3
   b5a52:	f7ff bb57 	b.w	b5104 <network_on>

000b5a56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a56:	2200      	movs	r2, #0
   b5a58:	6840      	ldr	r0, [r0, #4]
   b5a5a:	4611      	mov	r1, r2
   b5a5c:	f7ff bb3a 	b.w	b50d4 <network_connecting>

000b5a60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a60:	6840      	ldr	r0, [r0, #4]
   b5a62:	2200      	movs	r2, #0
   b5a64:	2102      	movs	r1, #2
   b5a66:	f7ff bb3d 	b.w	b50e4 <network_disconnect>

000b5a6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a6a:	2300      	movs	r3, #0
   b5a6c:	6840      	ldr	r0, [r0, #4]
   b5a6e:	461a      	mov	r2, r3
   b5a70:	f7ff bb28 	b.w	b50c4 <network_connect>

000b5a74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5a74:	4b02      	ldr	r3, [pc, #8]	; (b5a80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5a76:	2204      	movs	r2, #4
   b5a78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5a7a:	4a02      	ldr	r2, [pc, #8]	; (b5a84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5a7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5a7e:	4770      	bx	lr
   b5a80:	2003e718 	.word	0x2003e718
   b5a84:	000b80c8 	.word	0x000b80c8

000b5a88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5a88:	4b01      	ldr	r3, [pc, #4]	; (b5a90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5a8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5a8c:	4770      	bx	lr
   b5a8e:	bf00      	nop
   b5a90:	2003e618 	.word	0x2003e618

000b5a94 <serialEventRun>:
{
   b5a94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5a96:	4b0b      	ldr	r3, [pc, #44]	; (b5ac4 <serialEventRun+0x30>)
   b5a98:	b143      	cbz	r3, b5aac <serialEventRun+0x18>
   b5a9a:	f7ff ff91 	bl	b59c0 <_Z16_fetch_usbserialv>
   b5a9e:	6803      	ldr	r3, [r0, #0]
   b5aa0:	691b      	ldr	r3, [r3, #16]
   b5aa2:	4798      	blx	r3
   b5aa4:	2800      	cmp	r0, #0
   b5aa6:	dd01      	ble.n	b5aac <serialEventRun+0x18>
        serialEvent();
   b5aa8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5aac:	4b06      	ldr	r3, [pc, #24]	; (b5ac8 <serialEventRun+0x34>)
   b5aae:	b143      	cbz	r3, b5ac2 <serialEventRun+0x2e>
   b5ab0:	f000 f96e 	bl	b5d90 <_Z22__fetch_global_Serial1v>
   b5ab4:	6803      	ldr	r3, [r0, #0]
   b5ab6:	691b      	ldr	r3, [r3, #16]
   b5ab8:	4798      	blx	r3
   b5aba:	2800      	cmp	r0, #0
   b5abc:	dd01      	ble.n	b5ac2 <serialEventRun+0x2e>
        serialEvent1();
   b5abe:	f3af 8000 	nop.w
}
   b5ac2:	bd08      	pop	{r3, pc}
	...

000b5acc <_post_loop>:
{
   b5acc:	b508      	push	{r3, lr}
	serialEventRun();
   b5ace:	f7ff ffe1 	bl	b5a94 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5ad2:	f7ff f973 	bl	b4dbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5ad6:	4b01      	ldr	r3, [pc, #4]	; (b5adc <_post_loop+0x10>)
   b5ad8:	6018      	str	r0, [r3, #0]
}
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	2003e728 	.word	0x2003e728

000b5ae0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ae0:	4805      	ldr	r0, [pc, #20]	; (b5af8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5ae2:	4a06      	ldr	r2, [pc, #24]	; (b5afc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5ae4:	4906      	ldr	r1, [pc, #24]	; (b5b00 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5ae6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ae8:	1a12      	subs	r2, r2, r0
   b5aea:	f001 fec1 	bl	b7870 <memcpy>
    __backup_sram_signature = signature;
   b5aee:	4b05      	ldr	r3, [pc, #20]	; (b5b04 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5af0:	4a05      	ldr	r2, [pc, #20]	; (b5b08 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5af2:	601a      	str	r2, [r3, #0]
}
   b5af4:	bd08      	pop	{r3, pc}
   b5af6:	bf00      	nop
   b5af8:	2003f400 	.word	0x2003f400
   b5afc:	2003f404 	.word	0x2003f404
   b5b00:	000b81d4 	.word	0x000b81d4
   b5b04:	2003f400 	.word	0x2003f400
   b5b08:	9a271c1e 	.word	0x9a271c1e

000b5b0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5b0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5b0e:	2300      	movs	r3, #0
   b5b10:	9300      	str	r3, [sp, #0]
   b5b12:	461a      	mov	r2, r3
   b5b14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5b18:	f7ff fac2 	bl	b50a0 <system_ctrl_set_result>
}
   b5b1c:	b003      	add	sp, #12
   b5b1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5b24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5b24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5b26:	8843      	ldrh	r3, [r0, #2]
   b5b28:	2b0a      	cmp	r3, #10
   b5b2a:	d008      	beq.n	b5b3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5b2c:	2b50      	cmp	r3, #80	; 0x50
   b5b2e:	d10b      	bne.n	b5b48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5b30:	4b09      	ldr	r3, [pc, #36]	; (b5b58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5b32:	681b      	ldr	r3, [r3, #0]
   b5b34:	b14b      	cbz	r3, b5b4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5b36:	b003      	add	sp, #12
   b5b38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5b3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5b3e:	f7ff ffe5 	bl	b5b0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5b42:	b003      	add	sp, #12
   b5b44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5b48:	2300      	movs	r3, #0
   b5b4a:	9300      	str	r3, [sp, #0]
   b5b4c:	461a      	mov	r2, r3
   b5b4e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5b52:	f7ff faa5 	bl	b50a0 <system_ctrl_set_result>
}
   b5b56:	e7f4      	b.n	b5b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5b58:	2003e724 	.word	0x2003e724

000b5b5c <module_user_init_hook>:
{
   b5b5c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5b5e:	4812      	ldr	r0, [pc, #72]	; (b5ba8 <module_user_init_hook+0x4c>)
   b5b60:	2100      	movs	r1, #0
   b5b62:	f7ff fb37 	bl	b51d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5b66:	4b11      	ldr	r3, [pc, #68]	; (b5bac <module_user_init_hook+0x50>)
   b5b68:	681a      	ldr	r2, [r3, #0]
   b5b6a:	4b11      	ldr	r3, [pc, #68]	; (b5bb0 <module_user_init_hook+0x54>)
   b5b6c:	429a      	cmp	r2, r3
   b5b6e:	4b11      	ldr	r3, [pc, #68]	; (b5bb4 <module_user_init_hook+0x58>)
   b5b70:	bf0c      	ite	eq
   b5b72:	2201      	moveq	r2, #1
   b5b74:	2200      	movne	r2, #0
   b5b76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5b78:	d001      	beq.n	b5b7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5b7a:	f7ff ffb1 	bl	b5ae0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5b7e:	f7ff f90d 	bl	b4d9c <HAL_RNG_GetRandomNumber>
   b5b82:	4604      	mov	r4, r0
    srand(seed);
   b5b84:	f001 fe8a 	bl	b789c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5b88:	4b0b      	ldr	r3, [pc, #44]	; (b5bb8 <module_user_init_hook+0x5c>)
   b5b8a:	b113      	cbz	r3, b5b92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5b92:	2100      	movs	r1, #0
   b5b94:	4808      	ldr	r0, [pc, #32]	; (b5bb8 <module_user_init_hook+0x5c>)
   b5b96:	f7ff fa8d 	bl	b50b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5b9e:	4807      	ldr	r0, [pc, #28]	; (b5bbc <module_user_init_hook+0x60>)
   b5ba0:	2100      	movs	r1, #0
   b5ba2:	f7ff ba73 	b.w	b508c <system_ctrl_set_app_request_handler>
   b5ba6:	bf00      	nop
   b5ba8:	000b5a89 	.word	0x000b5a89
   b5bac:	2003f400 	.word	0x2003f400
   b5bb0:	9a271c1e 	.word	0x9a271c1e
   b5bb4:	2003e720 	.word	0x2003e720
   b5bb8:	00000000 	.word	0x00000000
   b5bbc:	000b5b25 	.word	0x000b5b25

000b5bc0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5bc0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5bc2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5bc4:	d902      	bls.n	b5bcc <pinAvailable+0xc>
    return false;
   b5bc6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5bc8:	b002      	add	sp, #8
   b5bca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5bcc:	f1a0 030b 	sub.w	r3, r0, #11
   b5bd0:	2b02      	cmp	r3, #2
   b5bd2:	d81a      	bhi.n	b5c0a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5bd4:	4c17      	ldr	r4, [pc, #92]	; (b5c34 <pinAvailable+0x74>)
   b5bd6:	7821      	ldrb	r1, [r4, #0]
   b5bd8:	f3bf 8f5b 	dmb	ish
   b5bdc:	f011 0101 	ands.w	r1, r1, #1
   b5be0:	d10b      	bne.n	b5bfa <pinAvailable+0x3a>
   b5be2:	4620      	mov	r0, r4
   b5be4:	9101      	str	r1, [sp, #4]
   b5be6:	f7fe fa67 	bl	b40b8 <__cxa_guard_acquire>
   b5bea:	9901      	ldr	r1, [sp, #4]
   b5bec:	b128      	cbz	r0, b5bfa <pinAvailable+0x3a>
   b5bee:	4812      	ldr	r0, [pc, #72]	; (b5c38 <pinAvailable+0x78>)
   b5bf0:	f7ff fd64 	bl	b56bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	f7fe fa64 	bl	b40c2 <__cxa_guard_release>
   b5bfa:	4b0f      	ldr	r3, [pc, #60]	; (b5c38 <pinAvailable+0x78>)
   b5bfc:	7818      	ldrb	r0, [r3, #0]
   b5bfe:	f7ff f99d 	bl	b4f3c <hal_spi_is_enabled>
   b5c02:	2800      	cmp	r0, #0
   b5c04:	d1df      	bne.n	b5bc6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5c06:	2001      	movs	r0, #1
   b5c08:	e7de      	b.n	b5bc8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5c0a:	2801      	cmp	r0, #1
   b5c0c:	d809      	bhi.n	b5c22 <pinAvailable+0x62>
   b5c0e:	f000 f87f 	bl	b5d10 <_Z19__fetch_global_Wirev>
   b5c12:	2100      	movs	r1, #0
   b5c14:	7c00      	ldrb	r0, [r0, #16]
   b5c16:	f7ff f939 	bl	b4e8c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5c1a:	f080 0001 	eor.w	r0, r0, #1
   b5c1e:	b2c0      	uxtb	r0, r0
   b5c20:	e7d2      	b.n	b5bc8 <pinAvailable+0x8>
   b5c22:	3809      	subs	r0, #9
   b5c24:	2801      	cmp	r0, #1
   b5c26:	d8ee      	bhi.n	b5c06 <pinAvailable+0x46>
   b5c28:	f000 f8b2 	bl	b5d90 <_Z22__fetch_global_Serial1v>
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
   b5c2e:	f7ff f9cd 	bl	b4fcc <hal_usart_is_enabled>
   b5c32:	e7f2      	b.n	b5c1a <pinAvailable+0x5a>
   b5c34:	2003e6b8 	.word	0x2003e6b8
   b5c38:	2003e6bc 	.word	0x2003e6bc

000b5c3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c3c:	2823      	cmp	r0, #35	; 0x23
{
   b5c3e:	b538      	push	{r3, r4, r5, lr}
   b5c40:	4604      	mov	r4, r0
   b5c42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5c44:	d80a      	bhi.n	b5c5c <pinMode+0x20>
   b5c46:	29ff      	cmp	r1, #255	; 0xff
   b5c48:	d008      	beq.n	b5c5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5c4a:	f7ff ffb9 	bl	b5bc0 <pinAvailable>
   b5c4e:	b128      	cbz	r0, b5c5c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5c50:	4629      	mov	r1, r5
   b5c52:	4620      	mov	r0, r4
}
   b5c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5c58:	f7ff b8b8 	b.w	b4dcc <HAL_Pin_Mode>
}
   b5c5c:	bd38      	pop	{r3, r4, r5, pc}

000b5c5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5c5e:	b538      	push	{r3, r4, r5, lr}
   b5c60:	4604      	mov	r4, r0
   b5c62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5c64:	f7ff f8ba 	bl	b4ddc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5c68:	28ff      	cmp	r0, #255	; 0xff
   b5c6a:	d010      	beq.n	b5c8e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5c6c:	2806      	cmp	r0, #6
   b5c6e:	d804      	bhi.n	b5c7a <digitalWrite+0x1c>
   b5c70:	234d      	movs	r3, #77	; 0x4d
   b5c72:	fa23 f000 	lsr.w	r0, r3, r0
   b5c76:	07c3      	lsls	r3, r0, #31
   b5c78:	d409      	bmi.n	b5c8e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	f7ff ffa0 	bl	b5bc0 <pinAvailable>
   b5c80:	b128      	cbz	r0, b5c8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5c82:	4629      	mov	r1, r5
   b5c84:	4620      	mov	r0, r4
}
   b5c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5c8a:	f7ff b8af 	b.w	b4dec <HAL_GPIO_Write>
}
   b5c8e:	bd38      	pop	{r3, r4, r5, pc}

000b5c90 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b5c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c94:	4690      	mov	r8, r2
   b5c96:	461f      	mov	r7, r3
   b5c98:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b5c9a:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b5c9c:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b5c9e:	f1c4 0107 	rsb	r1, r4, #7
   b5ca2:	f1b8 0f00 	cmp.w	r8, #0
   b5ca6:	d112      	bne.n	b5cce <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b5ca8:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b5cac:	f001 0101 	and.w	r1, r1, #1
   b5cb0:	4630      	mov	r0, r6
   b5cb2:	f7ff ffd4 	bl	b5c5e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b5cb6:	2101      	movs	r1, #1
   b5cb8:	4628      	mov	r0, r5
   b5cba:	f7ff ffd0 	bl	b5c5e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b5cbe:	2100      	movs	r1, #0
   b5cc0:	4628      	mov	r0, r5
   b5cc2:	f7ff ffcc 	bl	b5c5e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b5cc6:	3c01      	subs	r4, #1
   b5cc8:	d2e9      	bcs.n	b5c9e <shiftOut+0xe>
  }
}
   b5cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b5cce:	fa47 f104 	asr.w	r1, r7, r4
   b5cd2:	e7eb      	b.n	b5cac <shiftOut+0x1c>

000b5cd4 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b5cd4:	f7ff b892 	b.w	b4dfc <HAL_Pulse_In>

000b5cd8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5cd8:	4770      	bx	lr
	...

000b5cdc <_Z17acquireWireBufferv>:
{
   b5cdc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5cde:	4b0a      	ldr	r3, [pc, #40]	; (b5d08 <_Z17acquireWireBufferv+0x2c>)
   b5ce0:	6003      	str	r3, [r0, #0]
   b5ce2:	2301      	movs	r3, #1
{
   b5ce4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5ce6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5ce8:	4908      	ldr	r1, [pc, #32]	; (b5d0c <_Z17acquireWireBufferv+0x30>)
   b5cea:	2020      	movs	r0, #32
   b5cec:	f000 f874 	bl	b5dd8 <_ZnajRKSt9nothrow_t>
	};
   b5cf0:	2520      	movs	r5, #32
   b5cf2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5cf4:	4905      	ldr	r1, [pc, #20]	; (b5d0c <_Z17acquireWireBufferv+0x30>)
	};
   b5cf6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5cf8:	4628      	mov	r0, r5
   b5cfa:	f000 f86d 	bl	b5dd8 <_ZnajRKSt9nothrow_t>
	};
   b5cfe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5d02:	4620      	mov	r0, r4
   b5d04:	bd38      	pop	{r3, r4, r5, pc}
   b5d06:	bf00      	nop
   b5d08:	00010018 	.word	0x00010018
   b5d0c:	000b80fc 	.word	0x000b80fc

000b5d10 <_Z19__fetch_global_Wirev>:
{
   b5d10:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d12:	4d0e      	ldr	r5, [pc, #56]	; (b5d4c <_Z19__fetch_global_Wirev+0x3c>)
   b5d14:	7829      	ldrb	r1, [r5, #0]
   b5d16:	f3bf 8f5b 	dmb	ish
   b5d1a:	f011 0401 	ands.w	r4, r1, #1
{
   b5d1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5d20:	d111      	bne.n	b5d46 <_Z19__fetch_global_Wirev+0x36>
   b5d22:	4628      	mov	r0, r5
   b5d24:	f7fe f9c8 	bl	b40b8 <__cxa_guard_acquire>
   b5d28:	b168      	cbz	r0, b5d46 <_Z19__fetch_global_Wirev+0x36>
   b5d2a:	4668      	mov	r0, sp
   b5d2c:	f7ff ffd6 	bl	b5cdc <_Z17acquireWireBufferv>
   b5d30:	466a      	mov	r2, sp
   b5d32:	4621      	mov	r1, r4
   b5d34:	4806      	ldr	r0, [pc, #24]	; (b5d50 <_Z19__fetch_global_Wirev+0x40>)
   b5d36:	f7ff facb 	bl	b52d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5d3a:	4628      	mov	r0, r5
   b5d3c:	f7fe f9c1 	bl	b40c2 <__cxa_guard_release>
   b5d40:	4804      	ldr	r0, [pc, #16]	; (b5d54 <_Z19__fetch_global_Wirev+0x44>)
   b5d42:	f001 fd8f 	bl	b7864 <atexit>
	return wire;
}
   b5d46:	4802      	ldr	r0, [pc, #8]	; (b5d50 <_Z19__fetch_global_Wirev+0x40>)
   b5d48:	b007      	add	sp, #28
   b5d4a:	bd30      	pop	{r4, r5, pc}
   b5d4c:	2003e72c 	.word	0x2003e72c
   b5d50:	2003e730 	.word	0x2003e730
   b5d54:	000b5cd9 	.word	0x000b5cd9

000b5d58 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d58:	4770      	bx	lr
	...

000b5d5c <_Z20acquireSerial1Bufferv>:
{
   b5d5c:	b538      	push	{r3, r4, r5, lr}
   b5d5e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5d60:	2514      	movs	r5, #20
   b5d62:	462a      	mov	r2, r5
   b5d64:	2100      	movs	r1, #0
   b5d66:	f001 fd91 	bl	b788c <memset>
   b5d6a:	8025      	strh	r5, [r4, #0]
   b5d6c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d6e:	4907      	ldr	r1, [pc, #28]	; (b5d8c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5d70:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d72:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5d74:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d76:	f000 f82f 	bl	b5dd8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d7a:	4904      	ldr	r1, [pc, #16]	; (b5d8c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5d7c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d7e:	4628      	mov	r0, r5
   b5d80:	f000 f82a 	bl	b5dd8 <_ZnajRKSt9nothrow_t>
    };
   b5d84:	60e0      	str	r0, [r4, #12]
}
   b5d86:	4620      	mov	r0, r4
   b5d88:	bd38      	pop	{r3, r4, r5, pc}
   b5d8a:	bf00      	nop
   b5d8c:	000b80fc 	.word	0x000b80fc

000b5d90 <_Z22__fetch_global_Serial1v>:
{
   b5d90:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d92:	4d0e      	ldr	r5, [pc, #56]	; (b5dcc <_Z22__fetch_global_Serial1v+0x3c>)
   b5d94:	7829      	ldrb	r1, [r5, #0]
   b5d96:	f3bf 8f5b 	dmb	ish
   b5d9a:	f011 0401 	ands.w	r4, r1, #1
{
   b5d9e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5da0:	d111      	bne.n	b5dc6 <_Z22__fetch_global_Serial1v+0x36>
   b5da2:	4628      	mov	r0, r5
   b5da4:	f7fe f988 	bl	b40b8 <__cxa_guard_acquire>
   b5da8:	b168      	cbz	r0, b5dc6 <_Z22__fetch_global_Serial1v+0x36>
   b5daa:	a801      	add	r0, sp, #4
   b5dac:	f7ff ffd6 	bl	b5d5c <_Z20acquireSerial1Bufferv>
   b5db0:	aa01      	add	r2, sp, #4
   b5db2:	4621      	mov	r1, r4
   b5db4:	4806      	ldr	r0, [pc, #24]	; (b5dd0 <_Z22__fetch_global_Serial1v+0x40>)
   b5db6:	f7ff fd95 	bl	b58e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5dba:	4628      	mov	r0, r5
   b5dbc:	f7fe f981 	bl	b40c2 <__cxa_guard_release>
   b5dc0:	4804      	ldr	r0, [pc, #16]	; (b5dd4 <_Z22__fetch_global_Serial1v+0x44>)
   b5dc2:	f001 fd4f 	bl	b7864 <atexit>
    return serial1;
}
   b5dc6:	4802      	ldr	r0, [pc, #8]	; (b5dd0 <_Z22__fetch_global_Serial1v+0x40>)
   b5dc8:	b007      	add	sp, #28
   b5dca:	bd30      	pop	{r4, r5, pc}
   b5dcc:	2003e744 	.word	0x2003e744
   b5dd0:	2003e748 	.word	0x2003e748
   b5dd4:	000b5d59 	.word	0x000b5d59

000b5dd8 <_ZnajRKSt9nothrow_t>:
   b5dd8:	f7fe b95d 	b.w	b4096 <_Znaj>
   b5ddc:	0000      	movs	r0, r0
	...

000b5de0 <pow>:
   b5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5de2:	ed2d 8b02 	vpush	{d8}
   b5de6:	ec57 6b10 	vmov	r6, r7, d0
   b5dea:	ec55 4b11 	vmov	r4, r5, d1
   b5dee:	f000 f8cb 	bl	b5f88 <__ieee754_pow>
   b5df2:	4b63      	ldr	r3, [pc, #396]	; (b5f80 <pow+0x1a0>)
   b5df4:	eeb0 8a40 	vmov.f32	s16, s0
   b5df8:	eef0 8a60 	vmov.f32	s17, s1
   b5dfc:	f993 3000 	ldrsb.w	r3, [r3]
   b5e00:	3301      	adds	r3, #1
   b5e02:	d02a      	beq.n	b5e5a <pow+0x7a>
   b5e04:	4622      	mov	r2, r4
   b5e06:	462b      	mov	r3, r5
   b5e08:	4620      	mov	r0, r4
   b5e0a:	4629      	mov	r1, r5
   b5e0c:	f001 fcc4 	bl	b7798 <__aeabi_dcmpun>
   b5e10:	bb18      	cbnz	r0, b5e5a <pow+0x7a>
   b5e12:	4632      	mov	r2, r6
   b5e14:	463b      	mov	r3, r7
   b5e16:	4630      	mov	r0, r6
   b5e18:	4639      	mov	r1, r7
   b5e1a:	f001 fcbd 	bl	b7798 <__aeabi_dcmpun>
   b5e1e:	2800      	cmp	r0, #0
   b5e20:	d144      	bne.n	b5eac <pow+0xcc>
   b5e22:	2200      	movs	r2, #0
   b5e24:	2300      	movs	r3, #0
   b5e26:	4630      	mov	r0, r6
   b5e28:	4639      	mov	r1, r7
   b5e2a:	f001 fc83 	bl	b7734 <__aeabi_dcmpeq>
   b5e2e:	b1d8      	cbz	r0, b5e68 <pow+0x88>
   b5e30:	2200      	movs	r2, #0
   b5e32:	2300      	movs	r3, #0
   b5e34:	4620      	mov	r0, r4
   b5e36:	4629      	mov	r1, r5
   b5e38:	f001 fc7c 	bl	b7734 <__aeabi_dcmpeq>
   b5e3c:	2800      	cmp	r0, #0
   b5e3e:	d13d      	bne.n	b5ebc <pow+0xdc>
   b5e40:	ec45 4b10 	vmov	d0, r4, r5
   b5e44:	f000 ff10 	bl	b6c68 <finite>
   b5e48:	b138      	cbz	r0, b5e5a <pow+0x7a>
   b5e4a:	4620      	mov	r0, r4
   b5e4c:	4629      	mov	r1, r5
   b5e4e:	2200      	movs	r2, #0
   b5e50:	2300      	movs	r3, #0
   b5e52:	f001 fc79 	bl	b7748 <__aeabi_dcmplt>
   b5e56:	2800      	cmp	r0, #0
   b5e58:	d15c      	bne.n	b5f14 <pow+0x134>
   b5e5a:	eeb0 0a48 	vmov.f32	s0, s16
   b5e5e:	eef0 0a68 	vmov.f32	s1, s17
   b5e62:	ecbd 8b02 	vpop	{d8}
   b5e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5e68:	eeb0 0a48 	vmov.f32	s0, s16
   b5e6c:	eef0 0a68 	vmov.f32	s1, s17
   b5e70:	f000 fefa 	bl	b6c68 <finite>
   b5e74:	b358      	cbz	r0, b5ece <pow+0xee>
   b5e76:	ec51 0b18 	vmov	r0, r1, d8
   b5e7a:	2200      	movs	r2, #0
   b5e7c:	2300      	movs	r3, #0
   b5e7e:	f001 fc59 	bl	b7734 <__aeabi_dcmpeq>
   b5e82:	2800      	cmp	r0, #0
   b5e84:	d0e9      	beq.n	b5e5a <pow+0x7a>
   b5e86:	ec47 6b10 	vmov	d0, r6, r7
   b5e8a:	f000 feed 	bl	b6c68 <finite>
   b5e8e:	2800      	cmp	r0, #0
   b5e90:	d0e3      	beq.n	b5e5a <pow+0x7a>
   b5e92:	ec45 4b10 	vmov	d0, r4, r5
   b5e96:	f000 fee7 	bl	b6c68 <finite>
   b5e9a:	2800      	cmp	r0, #0
   b5e9c:	d0dd      	beq.n	b5e5a <pow+0x7a>
   b5e9e:	f7ff f989 	bl	b51b4 <__errno>
   b5ea2:	2322      	movs	r3, #34	; 0x22
   b5ea4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b5f60 <pow+0x180>
   b5ea8:	6003      	str	r3, [r0, #0]
   b5eaa:	e7d6      	b.n	b5e5a <pow+0x7a>
   b5eac:	4620      	mov	r0, r4
   b5eae:	4629      	mov	r1, r5
   b5eb0:	2200      	movs	r2, #0
   b5eb2:	2300      	movs	r3, #0
   b5eb4:	f001 fc3e 	bl	b7734 <__aeabi_dcmpeq>
   b5eb8:	2800      	cmp	r0, #0
   b5eba:	d0ce      	beq.n	b5e5a <pow+0x7a>
   b5ebc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b5f68 <pow+0x188>
   b5ec0:	eeb0 0a48 	vmov.f32	s0, s16
   b5ec4:	eef0 0a68 	vmov.f32	s1, s17
   b5ec8:	ecbd 8b02 	vpop	{d8}
   b5ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5ece:	ec47 6b10 	vmov	d0, r6, r7
   b5ed2:	f000 fec9 	bl	b6c68 <finite>
   b5ed6:	2800      	cmp	r0, #0
   b5ed8:	d0cd      	beq.n	b5e76 <pow+0x96>
   b5eda:	ec45 4b10 	vmov	d0, r4, r5
   b5ede:	f000 fec3 	bl	b6c68 <finite>
   b5ee2:	2800      	cmp	r0, #0
   b5ee4:	d0c7      	beq.n	b5e76 <pow+0x96>
   b5ee6:	ec53 2b18 	vmov	r2, r3, d8
   b5eea:	ee18 0a10 	vmov	r0, s16
   b5eee:	4619      	mov	r1, r3
   b5ef0:	f001 fc52 	bl	b7798 <__aeabi_dcmpun>
   b5ef4:	bb20      	cbnz	r0, b5f40 <pow+0x160>
   b5ef6:	f7ff f95d 	bl	b51b4 <__errno>
   b5efa:	4603      	mov	r3, r0
   b5efc:	2222      	movs	r2, #34	; 0x22
   b5efe:	601a      	str	r2, [r3, #0]
   b5f00:	4630      	mov	r0, r6
   b5f02:	4639      	mov	r1, r7
   b5f04:	2200      	movs	r2, #0
   b5f06:	2300      	movs	r3, #0
   b5f08:	f001 fc1e 	bl	b7748 <__aeabi_dcmplt>
   b5f0c:	b948      	cbnz	r0, b5f22 <pow+0x142>
   b5f0e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b5f70 <pow+0x190>
   b5f12:	e7a2      	b.n	b5e5a <pow+0x7a>
   b5f14:	f7ff f94e 	bl	b51b4 <__errno>
   b5f18:	2321      	movs	r3, #33	; 0x21
   b5f1a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b5f78 <pow+0x198>
   b5f1e:	6003      	str	r3, [r0, #0]
   b5f20:	e79b      	b.n	b5e5a <pow+0x7a>
   b5f22:	ec45 4b10 	vmov	d0, r4, r5
   b5f26:	f000 feb3 	bl	b6c90 <rint>
   b5f2a:	4622      	mov	r2, r4
   b5f2c:	ec51 0b10 	vmov	r0, r1, d0
   b5f30:	462b      	mov	r3, r5
   b5f32:	f001 fbff 	bl	b7734 <__aeabi_dcmpeq>
   b5f36:	2800      	cmp	r0, #0
   b5f38:	d1e9      	bne.n	b5f0e <pow+0x12e>
   b5f3a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b5f78 <pow+0x198>
   b5f3e:	e78c      	b.n	b5e5a <pow+0x7a>
   b5f40:	f7ff f938 	bl	b51b4 <__errno>
   b5f44:	2200      	movs	r2, #0
   b5f46:	2300      	movs	r3, #0
   b5f48:	2121      	movs	r1, #33	; 0x21
   b5f4a:	6001      	str	r1, [r0, #0]
   b5f4c:	4610      	mov	r0, r2
   b5f4e:	4619      	mov	r1, r3
   b5f50:	f001 fab2 	bl	b74b8 <__aeabi_ddiv>
   b5f54:	ec41 0b18 	vmov	d8, r0, r1
   b5f58:	e77f      	b.n	b5e5a <pow+0x7a>
   b5f5a:	bf00      	nop
   b5f5c:	f3af 8000 	nop.w
	...
   b5f6c:	3ff00000 	.word	0x3ff00000
   b5f70:	00000000 	.word	0x00000000
   b5f74:	7ff00000 	.word	0x7ff00000
   b5f78:	00000000 	.word	0x00000000
   b5f7c:	fff00000 	.word	0xfff00000
   b5f80:	2003e614 	.word	0x2003e614
   b5f84:	00000000 	.word	0x00000000

000b5f88 <__ieee754_pow>:
   b5f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f8c:	ec57 6b11 	vmov	r6, r7, d1
   b5f90:	ed2d 8b0c 	vpush	{d8-d13}
   b5f94:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b5f98:	ea5a 0206 	orrs.w	r2, sl, r6
   b5f9c:	b087      	sub	sp, #28
   b5f9e:	d03d      	beq.n	b601c <__ieee754_pow+0x94>
   b5fa0:	ec55 4b10 	vmov	r4, r5, d0
   b5fa4:	4972      	ldr	r1, [pc, #456]	; (b6170 <__ieee754_pow+0x1e8>)
   b5fa6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b5faa:	4588      	cmp	r8, r1
   b5fac:	ee10 2a10 	vmov	r2, s0
   b5fb0:	46a9      	mov	r9, r5
   b5fb2:	dc2c      	bgt.n	b600e <__ieee754_pow+0x86>
   b5fb4:	ee11 3a10 	vmov	r3, s2
   b5fb8:	46bb      	mov	fp, r7
   b5fba:	d036      	beq.n	b602a <__ieee754_pow+0xa2>
   b5fbc:	458a      	cmp	sl, r1
   b5fbe:	dc26      	bgt.n	b600e <__ieee754_pow+0x86>
   b5fc0:	496b      	ldr	r1, [pc, #428]	; (b6170 <__ieee754_pow+0x1e8>)
   b5fc2:	458a      	cmp	sl, r1
   b5fc4:	d021      	beq.n	b600a <__ieee754_pow+0x82>
   b5fc6:	f1b9 0f00 	cmp.w	r9, #0
   b5fca:	db39      	blt.n	b6040 <__ieee754_pow+0xb8>
   b5fcc:	2100      	movs	r1, #0
   b5fce:	9100      	str	r1, [sp, #0]
   b5fd0:	2b00      	cmp	r3, #0
   b5fd2:	d151      	bne.n	b6078 <__ieee754_pow+0xf0>
   b5fd4:	4b66      	ldr	r3, [pc, #408]	; (b6170 <__ieee754_pow+0x1e8>)
   b5fd6:	459a      	cmp	sl, r3
   b5fd8:	f000 80a2 	beq.w	b6120 <__ieee754_pow+0x198>
   b5fdc:	4b65      	ldr	r3, [pc, #404]	; (b6174 <__ieee754_pow+0x1ec>)
   b5fde:	459a      	cmp	sl, r3
   b5fe0:	f000 80b0 	beq.w	b6144 <__ieee754_pow+0x1bc>
   b5fe4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5fe8:	f000 84c0 	beq.w	b696c <__ieee754_pow+0x9e4>
   b5fec:	4b62      	ldr	r3, [pc, #392]	; (b6178 <__ieee754_pow+0x1f0>)
   b5fee:	459b      	cmp	fp, r3
   b5ff0:	d142      	bne.n	b6078 <__ieee754_pow+0xf0>
   b5ff2:	f1b9 0f00 	cmp.w	r9, #0
   b5ff6:	db3f      	blt.n	b6078 <__ieee754_pow+0xf0>
   b5ff8:	ec45 4b10 	vmov	d0, r4, r5
   b5ffc:	b007      	add	sp, #28
   b5ffe:	ecbd 8b0c 	vpop	{d8-d13}
   b6002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6006:	f000 bd59 	b.w	b6abc <__ieee754_sqrt>
   b600a:	2b00      	cmp	r3, #0
   b600c:	d0db      	beq.n	b5fc6 <__ieee754_pow+0x3e>
   b600e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6012:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6016:	ea58 0302 	orrs.w	r3, r8, r2
   b601a:	d109      	bne.n	b6030 <__ieee754_pow+0xa8>
   b601c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6160 <__ieee754_pow+0x1d8>
   b6020:	b007      	add	sp, #28
   b6022:	ecbd 8b0c 	vpop	{d8-d13}
   b6026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b602a:	b90c      	cbnz	r4, b6030 <__ieee754_pow+0xa8>
   b602c:	45c2      	cmp	sl, r8
   b602e:	ddc7      	ble.n	b5fc0 <__ieee754_pow+0x38>
   b6030:	4852      	ldr	r0, [pc, #328]	; (b617c <__ieee754_pow+0x1f4>)
   b6032:	b007      	add	sp, #28
   b6034:	ecbd 8b0c 	vpop	{d8-d13}
   b6038:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b603c:	f000 be20 	b.w	b6c80 <nan>
   b6040:	494f      	ldr	r1, [pc, #316]	; (b6180 <__ieee754_pow+0x1f8>)
   b6042:	458a      	cmp	sl, r1
   b6044:	f300 8085 	bgt.w	b6152 <__ieee754_pow+0x1ca>
   b6048:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b604c:	458a      	cmp	sl, r1
   b604e:	dd0f      	ble.n	b6070 <__ieee754_pow+0xe8>
   b6050:	ea4f 512a 	mov.w	r1, sl, asr #20
   b6054:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6058:	2914      	cmp	r1, #20
   b605a:	f340 849b 	ble.w	b6994 <__ieee754_pow+0xa0c>
   b605e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b6062:	fa23 f001 	lsr.w	r0, r3, r1
   b6066:	fa00 f101 	lsl.w	r1, r0, r1
   b606a:	4299      	cmp	r1, r3
   b606c:	f000 84ed 	beq.w	b6a4a <__ieee754_pow+0xac2>
   b6070:	2100      	movs	r1, #0
   b6072:	9100      	str	r1, [sp, #0]
   b6074:	2b00      	cmp	r3, #0
   b6076:	d0b1      	beq.n	b5fdc <__ieee754_pow+0x54>
   b6078:	ec45 4b10 	vmov	d0, r4, r5
   b607c:	9202      	str	r2, [sp, #8]
   b607e:	f000 fde9 	bl	b6c54 <fabs>
   b6082:	9a02      	ldr	r2, [sp, #8]
   b6084:	bb5a      	cbnz	r2, b60de <__ieee754_pow+0x156>
   b6086:	f1b8 0f00 	cmp.w	r8, #0
   b608a:	d004      	beq.n	b6096 <__ieee754_pow+0x10e>
   b608c:	4b39      	ldr	r3, [pc, #228]	; (b6174 <__ieee754_pow+0x1ec>)
   b608e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b6092:	429a      	cmp	r2, r3
   b6094:	d123      	bne.n	b60de <__ieee754_pow+0x156>
   b6096:	f1bb 0f00 	cmp.w	fp, #0
   b609a:	da07      	bge.n	b60ac <__ieee754_pow+0x124>
   b609c:	ec53 2b10 	vmov	r2, r3, d0
   b60a0:	4934      	ldr	r1, [pc, #208]	; (b6174 <__ieee754_pow+0x1ec>)
   b60a2:	2000      	movs	r0, #0
   b60a4:	f001 fa08 	bl	b74b8 <__aeabi_ddiv>
   b60a8:	ec41 0b10 	vmov	d0, r0, r1
   b60ac:	f1b9 0f00 	cmp.w	r9, #0
   b60b0:	dab6      	bge.n	b6020 <__ieee754_pow+0x98>
   b60b2:	9b00      	ldr	r3, [sp, #0]
   b60b4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b60b8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b60bc:	ea58 0303 	orrs.w	r3, r8, r3
   b60c0:	f040 848d 	bne.w	b69de <__ieee754_pow+0xa56>
   b60c4:	ec53 2b10 	vmov	r2, r3, d0
   b60c8:	4610      	mov	r0, r2
   b60ca:	4619      	mov	r1, r3
   b60cc:	f000 ff12 	bl	b6ef4 <__aeabi_dsub>
   b60d0:	4602      	mov	r2, r0
   b60d2:	460b      	mov	r3, r1
   b60d4:	f001 f9f0 	bl	b74b8 <__aeabi_ddiv>
   b60d8:	ec41 0b10 	vmov	d0, r0, r1
   b60dc:	e7a0      	b.n	b6020 <__ieee754_pow+0x98>
   b60de:	9a00      	ldr	r2, [sp, #0]
   b60e0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b60e4:	3b01      	subs	r3, #1
   b60e6:	9304      	str	r3, [sp, #16]
   b60e8:	4313      	orrs	r3, r2
   b60ea:	d035      	beq.n	b6158 <__ieee754_pow+0x1d0>
   b60ec:	4b25      	ldr	r3, [pc, #148]	; (b6184 <__ieee754_pow+0x1fc>)
   b60ee:	459a      	cmp	sl, r3
   b60f0:	dd4c      	ble.n	b618c <__ieee754_pow+0x204>
   b60f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b60f6:	459a      	cmp	sl, r3
   b60f8:	4b23      	ldr	r3, [pc, #140]	; (b6188 <__ieee754_pow+0x200>)
   b60fa:	f340 83db 	ble.w	b68b4 <__ieee754_pow+0x92c>
   b60fe:	4598      	cmp	r8, r3
   b6100:	f340 8360 	ble.w	b67c4 <__ieee754_pow+0x83c>
   b6104:	f1bb 0f00 	cmp.w	fp, #0
   b6108:	f340 8360 	ble.w	b67cc <__ieee754_pow+0x844>
   b610c:	a316      	add	r3, pc, #88	; (adr r3, b6168 <__ieee754_pow+0x1e0>)
   b610e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6112:	4610      	mov	r0, r2
   b6114:	4619      	mov	r1, r3
   b6116:	f001 f8a5 	bl	b7264 <__aeabi_dmul>
   b611a:	ec41 0b10 	vmov	d0, r0, r1
   b611e:	e77f      	b.n	b6020 <__ieee754_pow+0x98>
   b6120:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b6124:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6128:	4313      	orrs	r3, r2
   b612a:	f43f af77 	beq.w	b601c <__ieee754_pow+0x94>
   b612e:	4b16      	ldr	r3, [pc, #88]	; (b6188 <__ieee754_pow+0x200>)
   b6130:	4598      	cmp	r8, r3
   b6132:	f340 837a 	ble.w	b682a <__ieee754_pow+0x8a2>
   b6136:	f1bb 0f00 	cmp.w	fp, #0
   b613a:	f2c0 8347 	blt.w	b67cc <__ieee754_pow+0x844>
   b613e:	ec47 6b10 	vmov	d0, r6, r7
   b6142:	e76d      	b.n	b6020 <__ieee754_pow+0x98>
   b6144:	f1bb 0f00 	cmp.w	fp, #0
   b6148:	f2c0 841a 	blt.w	b6980 <__ieee754_pow+0x9f8>
   b614c:	ec45 4b10 	vmov	d0, r4, r5
   b6150:	e766      	b.n	b6020 <__ieee754_pow+0x98>
   b6152:	2102      	movs	r1, #2
   b6154:	9100      	str	r1, [sp, #0]
   b6156:	e73b      	b.n	b5fd0 <__ieee754_pow+0x48>
   b6158:	4622      	mov	r2, r4
   b615a:	462b      	mov	r3, r5
   b615c:	e7b4      	b.n	b60c8 <__ieee754_pow+0x140>
   b615e:	bf00      	nop
   b6160:	00000000 	.word	0x00000000
   b6164:	3ff00000 	.word	0x3ff00000
   b6168:	8800759c 	.word	0x8800759c
   b616c:	7e37e43c 	.word	0x7e37e43c
   b6170:	7ff00000 	.word	0x7ff00000
   b6174:	3ff00000 	.word	0x3ff00000
   b6178:	3fe00000 	.word	0x3fe00000
   b617c:	000b8100 	.word	0x000b8100
   b6180:	433fffff 	.word	0x433fffff
   b6184:	41e00000 	.word	0x41e00000
   b6188:	3fefffff 	.word	0x3fefffff
   b618c:	4be4      	ldr	r3, [pc, #912]	; (b6520 <__ieee754_pow+0x598>)
   b618e:	ea09 0303 	and.w	r3, r9, r3
   b6192:	2200      	movs	r2, #0
   b6194:	b953      	cbnz	r3, b61ac <__ieee754_pow+0x224>
   b6196:	ec51 0b10 	vmov	r0, r1, d0
   b619a:	4be2      	ldr	r3, [pc, #904]	; (b6524 <__ieee754_pow+0x59c>)
   b619c:	f001 f862 	bl	b7264 <__aeabi_dmul>
   b61a0:	ec41 0b10 	vmov	d0, r0, r1
   b61a4:	ee10 8a90 	vmov	r8, s1
   b61a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b61ac:	ea4f 5328 	mov.w	r3, r8, asr #20
   b61b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b61b4:	189a      	adds	r2, r3, r2
   b61b6:	4bdc      	ldr	r3, [pc, #880]	; (b6528 <__ieee754_pow+0x5a0>)
   b61b8:	9205      	str	r2, [sp, #20]
   b61ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b61be:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b61c2:	4598      	cmp	r8, r3
   b61c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b61c8:	dd07      	ble.n	b61da <__ieee754_pow+0x252>
   b61ca:	4bd8      	ldr	r3, [pc, #864]	; (b652c <__ieee754_pow+0x5a4>)
   b61cc:	4598      	cmp	r8, r3
   b61ce:	f340 8414 	ble.w	b69fa <__ieee754_pow+0xa72>
   b61d2:	3201      	adds	r2, #1
   b61d4:	9205      	str	r2, [sp, #20]
   b61d6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b61da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b64c0 <__ieee754_pow+0x538>
   b61de:	ed9f 7bba 	vldr	d7, [pc, #744]	; b64c8 <__ieee754_pow+0x540>
   b61e2:	ec53 2b16 	vmov	r2, r3, d6
   b61e6:	eeb0 ca47 	vmov.f32	s24, s14
   b61ea:	eef0 ca67 	vmov.f32	s25, s15
   b61ee:	2500      	movs	r5, #0
   b61f0:	eeb0 da47 	vmov.f32	s26, s14
   b61f4:	eef0 da67 	vmov.f32	s27, s15
   b61f8:	ec5b ab10 	vmov	sl, fp, d0
   b61fc:	46a3      	mov	fp, r4
   b61fe:	4650      	mov	r0, sl
   b6200:	4659      	mov	r1, fp
   b6202:	ec43 2b1a 	vmov	d10, r2, r3
   b6206:	f000 fe75 	bl	b6ef4 <__aeabi_dsub>
   b620a:	ec53 2b1a 	vmov	r2, r3, d10
   b620e:	4680      	mov	r8, r0
   b6210:	4689      	mov	r9, r1
   b6212:	4650      	mov	r0, sl
   b6214:	4659      	mov	r1, fp
   b6216:	f000 fe6f 	bl	b6ef8 <__adddf3>
   b621a:	4602      	mov	r2, r0
   b621c:	460b      	mov	r3, r1
   b621e:	2000      	movs	r0, #0
   b6220:	49c3      	ldr	r1, [pc, #780]	; (b6530 <__ieee754_pow+0x5a8>)
   b6222:	f001 f949 	bl	b74b8 <__aeabi_ddiv>
   b6226:	ec41 0b1b 	vmov	d11, r0, r1
   b622a:	4640      	mov	r0, r8
   b622c:	ec53 2b1b 	vmov	r2, r3, d11
   b6230:	4649      	mov	r1, r9
   b6232:	f001 f817 	bl	b7264 <__aeabi_dmul>
   b6236:	ec41 0b18 	vmov	d8, r0, r1
   b623a:	460a      	mov	r2, r1
   b623c:	4601      	mov	r1, r0
   b623e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b6242:	2100      	movs	r1, #0
   b6244:	9102      	str	r1, [sp, #8]
   b6246:	1064      	asrs	r4, r4, #1
   b6248:	ec4b ab19 	vmov	d9, sl, fp
   b624c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6250:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b6254:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6258:	2000      	movs	r0, #0
   b625a:	1959      	adds	r1, r3, r5
   b625c:	4604      	mov	r4, r0
   b625e:	460d      	mov	r5, r1
   b6260:	4602      	mov	r2, r0
   b6262:	460b      	mov	r3, r1
   b6264:	4650      	mov	r0, sl
   b6266:	4659      	mov	r1, fp
   b6268:	f000 fffc 	bl	b7264 <__aeabi_dmul>
   b626c:	4602      	mov	r2, r0
   b626e:	460b      	mov	r3, r1
   b6270:	4640      	mov	r0, r8
   b6272:	4649      	mov	r1, r9
   b6274:	f000 fe3e 	bl	b6ef4 <__aeabi_dsub>
   b6278:	ec53 2b1a 	vmov	r2, r3, d10
   b627c:	4680      	mov	r8, r0
   b627e:	4689      	mov	r9, r1
   b6280:	4620      	mov	r0, r4
   b6282:	4629      	mov	r1, r5
   b6284:	f000 fe36 	bl	b6ef4 <__aeabi_dsub>
   b6288:	4602      	mov	r2, r0
   b628a:	460b      	mov	r3, r1
   b628c:	ec51 0b19 	vmov	r0, r1, d9
   b6290:	f000 fe30 	bl	b6ef4 <__aeabi_dsub>
   b6294:	4652      	mov	r2, sl
   b6296:	465b      	mov	r3, fp
   b6298:	f000 ffe4 	bl	b7264 <__aeabi_dmul>
   b629c:	4602      	mov	r2, r0
   b629e:	460b      	mov	r3, r1
   b62a0:	4640      	mov	r0, r8
   b62a2:	4649      	mov	r1, r9
   b62a4:	f000 fe26 	bl	b6ef4 <__aeabi_dsub>
   b62a8:	ec53 2b1b 	vmov	r2, r3, d11
   b62ac:	f000 ffda 	bl	b7264 <__aeabi_dmul>
   b62b0:	ec53 2b18 	vmov	r2, r3, d8
   b62b4:	ec41 0b19 	vmov	d9, r0, r1
   b62b8:	ec51 0b18 	vmov	r0, r1, d8
   b62bc:	f000 ffd2 	bl	b7264 <__aeabi_dmul>
   b62c0:	a383      	add	r3, pc, #524	; (adr r3, b64d0 <__ieee754_pow+0x548>)
   b62c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62c6:	4604      	mov	r4, r0
   b62c8:	460d      	mov	r5, r1
   b62ca:	f000 ffcb 	bl	b7264 <__aeabi_dmul>
   b62ce:	a382      	add	r3, pc, #520	; (adr r3, b64d8 <__ieee754_pow+0x550>)
   b62d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62d4:	f000 fe10 	bl	b6ef8 <__adddf3>
   b62d8:	4622      	mov	r2, r4
   b62da:	462b      	mov	r3, r5
   b62dc:	f000 ffc2 	bl	b7264 <__aeabi_dmul>
   b62e0:	a37f      	add	r3, pc, #508	; (adr r3, b64e0 <__ieee754_pow+0x558>)
   b62e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62e6:	f000 fe07 	bl	b6ef8 <__adddf3>
   b62ea:	4622      	mov	r2, r4
   b62ec:	462b      	mov	r3, r5
   b62ee:	f000 ffb9 	bl	b7264 <__aeabi_dmul>
   b62f2:	a37d      	add	r3, pc, #500	; (adr r3, b64e8 <__ieee754_pow+0x560>)
   b62f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62f8:	f000 fdfe 	bl	b6ef8 <__adddf3>
   b62fc:	4622      	mov	r2, r4
   b62fe:	462b      	mov	r3, r5
   b6300:	f000 ffb0 	bl	b7264 <__aeabi_dmul>
   b6304:	a37a      	add	r3, pc, #488	; (adr r3, b64f0 <__ieee754_pow+0x568>)
   b6306:	e9d3 2300 	ldrd	r2, r3, [r3]
   b630a:	f000 fdf5 	bl	b6ef8 <__adddf3>
   b630e:	4622      	mov	r2, r4
   b6310:	462b      	mov	r3, r5
   b6312:	f000 ffa7 	bl	b7264 <__aeabi_dmul>
   b6316:	a378      	add	r3, pc, #480	; (adr r3, b64f8 <__ieee754_pow+0x570>)
   b6318:	e9d3 2300 	ldrd	r2, r3, [r3]
   b631c:	f000 fdec 	bl	b6ef8 <__adddf3>
   b6320:	4622      	mov	r2, r4
   b6322:	4680      	mov	r8, r0
   b6324:	4689      	mov	r9, r1
   b6326:	462b      	mov	r3, r5
   b6328:	4620      	mov	r0, r4
   b632a:	4629      	mov	r1, r5
   b632c:	f000 ff9a 	bl	b7264 <__aeabi_dmul>
   b6330:	4602      	mov	r2, r0
   b6332:	460b      	mov	r3, r1
   b6334:	4640      	mov	r0, r8
   b6336:	4649      	mov	r1, r9
   b6338:	f000 ff94 	bl	b7264 <__aeabi_dmul>
   b633c:	4652      	mov	r2, sl
   b633e:	4604      	mov	r4, r0
   b6340:	460d      	mov	r5, r1
   b6342:	465b      	mov	r3, fp
   b6344:	ec51 0b18 	vmov	r0, r1, d8
   b6348:	f000 fdd6 	bl	b6ef8 <__adddf3>
   b634c:	ec53 2b19 	vmov	r2, r3, d9
   b6350:	f000 ff88 	bl	b7264 <__aeabi_dmul>
   b6354:	4622      	mov	r2, r4
   b6356:	462b      	mov	r3, r5
   b6358:	f000 fdce 	bl	b6ef8 <__adddf3>
   b635c:	4652      	mov	r2, sl
   b635e:	4680      	mov	r8, r0
   b6360:	4689      	mov	r9, r1
   b6362:	465b      	mov	r3, fp
   b6364:	4650      	mov	r0, sl
   b6366:	4659      	mov	r1, fp
   b6368:	f000 ff7c 	bl	b7264 <__aeabi_dmul>
   b636c:	4602      	mov	r2, r0
   b636e:	460b      	mov	r3, r1
   b6370:	ec43 2b1a 	vmov	d10, r2, r3
   b6374:	4b6f      	ldr	r3, [pc, #444]	; (b6534 <__ieee754_pow+0x5ac>)
   b6376:	2200      	movs	r2, #0
   b6378:	f000 fdbe 	bl	b6ef8 <__adddf3>
   b637c:	4642      	mov	r2, r8
   b637e:	464b      	mov	r3, r9
   b6380:	f000 fdba 	bl	b6ef8 <__adddf3>
   b6384:	2400      	movs	r4, #0
   b6386:	460d      	mov	r5, r1
   b6388:	4622      	mov	r2, r4
   b638a:	462b      	mov	r3, r5
   b638c:	4650      	mov	r0, sl
   b638e:	4659      	mov	r1, fp
   b6390:	f000 ff68 	bl	b7264 <__aeabi_dmul>
   b6394:	4b67      	ldr	r3, [pc, #412]	; (b6534 <__ieee754_pow+0x5ac>)
   b6396:	4682      	mov	sl, r0
   b6398:	468b      	mov	fp, r1
   b639a:	2200      	movs	r2, #0
   b639c:	4620      	mov	r0, r4
   b639e:	4629      	mov	r1, r5
   b63a0:	f000 fda8 	bl	b6ef4 <__aeabi_dsub>
   b63a4:	ec53 2b1a 	vmov	r2, r3, d10
   b63a8:	f000 fda4 	bl	b6ef4 <__aeabi_dsub>
   b63ac:	4602      	mov	r2, r0
   b63ae:	460b      	mov	r3, r1
   b63b0:	4640      	mov	r0, r8
   b63b2:	4649      	mov	r1, r9
   b63b4:	f000 fd9e 	bl	b6ef4 <__aeabi_dsub>
   b63b8:	ec53 2b18 	vmov	r2, r3, d8
   b63bc:	f000 ff52 	bl	b7264 <__aeabi_dmul>
   b63c0:	4622      	mov	r2, r4
   b63c2:	462b      	mov	r3, r5
   b63c4:	4604      	mov	r4, r0
   b63c6:	460d      	mov	r5, r1
   b63c8:	ec51 0b19 	vmov	r0, r1, d9
   b63cc:	f000 ff4a 	bl	b7264 <__aeabi_dmul>
   b63d0:	4602      	mov	r2, r0
   b63d2:	460b      	mov	r3, r1
   b63d4:	4620      	mov	r0, r4
   b63d6:	4629      	mov	r1, r5
   b63d8:	f000 fd8e 	bl	b6ef8 <__adddf3>
   b63dc:	4680      	mov	r8, r0
   b63de:	4689      	mov	r9, r1
   b63e0:	4642      	mov	r2, r8
   b63e2:	464b      	mov	r3, r9
   b63e4:	4650      	mov	r0, sl
   b63e6:	4659      	mov	r1, fp
   b63e8:	f000 fd86 	bl	b6ef8 <__adddf3>
   b63ec:	a344      	add	r3, pc, #272	; (adr r3, b6500 <__ieee754_pow+0x578>)
   b63ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b63f2:	2000      	movs	r0, #0
   b63f4:	4604      	mov	r4, r0
   b63f6:	460d      	mov	r5, r1
   b63f8:	f000 ff34 	bl	b7264 <__aeabi_dmul>
   b63fc:	4652      	mov	r2, sl
   b63fe:	ec41 0b19 	vmov	d9, r0, r1
   b6402:	465b      	mov	r3, fp
   b6404:	4620      	mov	r0, r4
   b6406:	4629      	mov	r1, r5
   b6408:	f000 fd74 	bl	b6ef4 <__aeabi_dsub>
   b640c:	4602      	mov	r2, r0
   b640e:	460b      	mov	r3, r1
   b6410:	4640      	mov	r0, r8
   b6412:	4649      	mov	r1, r9
   b6414:	f000 fd6e 	bl	b6ef4 <__aeabi_dsub>
   b6418:	a33b      	add	r3, pc, #236	; (adr r3, b6508 <__ieee754_pow+0x580>)
   b641a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b641e:	f000 ff21 	bl	b7264 <__aeabi_dmul>
   b6422:	4602      	mov	r2, r0
   b6424:	460b      	mov	r3, r1
   b6426:	4620      	mov	r0, r4
   b6428:	4629      	mov	r1, r5
   b642a:	4614      	mov	r4, r2
   b642c:	461d      	mov	r5, r3
   b642e:	a338      	add	r3, pc, #224	; (adr r3, b6510 <__ieee754_pow+0x588>)
   b6430:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6434:	f000 ff16 	bl	b7264 <__aeabi_dmul>
   b6438:	4602      	mov	r2, r0
   b643a:	460b      	mov	r3, r1
   b643c:	4620      	mov	r0, r4
   b643e:	4629      	mov	r1, r5
   b6440:	f000 fd5a 	bl	b6ef8 <__adddf3>
   b6444:	ec53 2b1d 	vmov	r2, r3, d13
   b6448:	f000 fd56 	bl	b6ef8 <__adddf3>
   b644c:	4680      	mov	r8, r0
   b644e:	9805      	ldr	r0, [sp, #20]
   b6450:	4689      	mov	r9, r1
   b6452:	f000 fe9d 	bl	b7190 <__aeabi_i2d>
   b6456:	4642      	mov	r2, r8
   b6458:	4682      	mov	sl, r0
   b645a:	468b      	mov	fp, r1
   b645c:	464b      	mov	r3, r9
   b645e:	ec51 0b19 	vmov	r0, r1, d9
   b6462:	f000 fd49 	bl	b6ef8 <__adddf3>
   b6466:	ec53 2b1c 	vmov	r2, r3, d12
   b646a:	f000 fd45 	bl	b6ef8 <__adddf3>
   b646e:	4652      	mov	r2, sl
   b6470:	465b      	mov	r3, fp
   b6472:	f000 fd41 	bl	b6ef8 <__adddf3>
   b6476:	4652      	mov	r2, sl
   b6478:	465b      	mov	r3, fp
   b647a:	2000      	movs	r0, #0
   b647c:	4604      	mov	r4, r0
   b647e:	460d      	mov	r5, r1
   b6480:	f000 fd38 	bl	b6ef4 <__aeabi_dsub>
   b6484:	ec53 2b1c 	vmov	r2, r3, d12
   b6488:	f000 fd34 	bl	b6ef4 <__aeabi_dsub>
   b648c:	ec53 2b19 	vmov	r2, r3, d9
   b6490:	f000 fd30 	bl	b6ef4 <__aeabi_dsub>
   b6494:	4602      	mov	r2, r0
   b6496:	460b      	mov	r3, r1
   b6498:	4640      	mov	r0, r8
   b649a:	4649      	mov	r1, r9
   b649c:	f000 fd2a 	bl	b6ef4 <__aeabi_dsub>
   b64a0:	9b00      	ldr	r3, [sp, #0]
   b64a2:	9a04      	ldr	r2, [sp, #16]
   b64a4:	3b01      	subs	r3, #1
   b64a6:	4313      	orrs	r3, r2
   b64a8:	4682      	mov	sl, r0
   b64aa:	468b      	mov	fp, r1
   b64ac:	f040 81b6 	bne.w	b681c <__ieee754_pow+0x894>
   b64b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6518 <__ieee754_pow+0x590>
   b64b4:	eeb0 8a47 	vmov.f32	s16, s14
   b64b8:	eef0 8a67 	vmov.f32	s17, s15
   b64bc:	e03c      	b.n	b6538 <__ieee754_pow+0x5b0>
   b64be:	bf00      	nop
   b64c0:	00000000 	.word	0x00000000
   b64c4:	3ff00000 	.word	0x3ff00000
	...
   b64d0:	4a454eef 	.word	0x4a454eef
   b64d4:	3fca7e28 	.word	0x3fca7e28
   b64d8:	93c9db65 	.word	0x93c9db65
   b64dc:	3fcd864a 	.word	0x3fcd864a
   b64e0:	a91d4101 	.word	0xa91d4101
   b64e4:	3fd17460 	.word	0x3fd17460
   b64e8:	518f264d 	.word	0x518f264d
   b64ec:	3fd55555 	.word	0x3fd55555
   b64f0:	db6fabff 	.word	0xdb6fabff
   b64f4:	3fdb6db6 	.word	0x3fdb6db6
   b64f8:	33333303 	.word	0x33333303
   b64fc:	3fe33333 	.word	0x3fe33333
   b6500:	e0000000 	.word	0xe0000000
   b6504:	3feec709 	.word	0x3feec709
   b6508:	dc3a03fd 	.word	0xdc3a03fd
   b650c:	3feec709 	.word	0x3feec709
   b6510:	145b01f5 	.word	0x145b01f5
   b6514:	be3e2fe0 	.word	0xbe3e2fe0
   b6518:	00000000 	.word	0x00000000
   b651c:	bff00000 	.word	0xbff00000
   b6520:	7ff00000 	.word	0x7ff00000
   b6524:	43400000 	.word	0x43400000
   b6528:	0003988e 	.word	0x0003988e
   b652c:	000bb679 	.word	0x000bb679
   b6530:	3ff00000 	.word	0x3ff00000
   b6534:	40080000 	.word	0x40080000
   b6538:	2300      	movs	r3, #0
   b653a:	e9cd 6700 	strd	r6, r7, [sp]
   b653e:	9300      	str	r3, [sp, #0]
   b6540:	e9dd 8900 	ldrd	r8, r9, [sp]
   b6544:	4630      	mov	r0, r6
   b6546:	4642      	mov	r2, r8
   b6548:	464b      	mov	r3, r9
   b654a:	4639      	mov	r1, r7
   b654c:	f000 fcd2 	bl	b6ef4 <__aeabi_dsub>
   b6550:	4622      	mov	r2, r4
   b6552:	462b      	mov	r3, r5
   b6554:	f000 fe86 	bl	b7264 <__aeabi_dmul>
   b6558:	4632      	mov	r2, r6
   b655a:	463b      	mov	r3, r7
   b655c:	4606      	mov	r6, r0
   b655e:	460f      	mov	r7, r1
   b6560:	4650      	mov	r0, sl
   b6562:	4659      	mov	r1, fp
   b6564:	f000 fe7e 	bl	b7264 <__aeabi_dmul>
   b6568:	4602      	mov	r2, r0
   b656a:	460b      	mov	r3, r1
   b656c:	4630      	mov	r0, r6
   b656e:	4639      	mov	r1, r7
   b6570:	f000 fcc2 	bl	b6ef8 <__adddf3>
   b6574:	4642      	mov	r2, r8
   b6576:	464b      	mov	r3, r9
   b6578:	4606      	mov	r6, r0
   b657a:	460f      	mov	r7, r1
   b657c:	4620      	mov	r0, r4
   b657e:	4629      	mov	r1, r5
   b6580:	f000 fe70 	bl	b7264 <__aeabi_dmul>
   b6584:	4604      	mov	r4, r0
   b6586:	460d      	mov	r5, r1
   b6588:	462b      	mov	r3, r5
   b658a:	4630      	mov	r0, r6
   b658c:	4639      	mov	r1, r7
   b658e:	4622      	mov	r2, r4
   b6590:	f000 fcb2 	bl	b6ef8 <__adddf3>
   b6594:	4bc2      	ldr	r3, [pc, #776]	; (b68a0 <__ieee754_pow+0x918>)
   b6596:	4299      	cmp	r1, r3
   b6598:	4680      	mov	r8, r0
   b659a:	4689      	mov	r9, r1
   b659c:	468a      	mov	sl, r1
   b659e:	f340 8118 	ble.w	b67d2 <__ieee754_pow+0x84a>
   b65a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b65a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b65aa:	4303      	orrs	r3, r0
   b65ac:	f040 8207 	bne.w	b69be <__ieee754_pow+0xa36>
   b65b0:	a3a3      	add	r3, pc, #652	; (adr r3, b6840 <__ieee754_pow+0x8b8>)
   b65b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65b6:	4630      	mov	r0, r6
   b65b8:	4639      	mov	r1, r7
   b65ba:	f000 fc9d 	bl	b6ef8 <__adddf3>
   b65be:	4602      	mov	r2, r0
   b65c0:	460b      	mov	r3, r1
   b65c2:	4640      	mov	r0, r8
   b65c4:	4649      	mov	r1, r9
   b65c6:	4690      	mov	r8, r2
   b65c8:	4699      	mov	r9, r3
   b65ca:	4622      	mov	r2, r4
   b65cc:	462b      	mov	r3, r5
   b65ce:	f000 fc91 	bl	b6ef4 <__aeabi_dsub>
   b65d2:	4602      	mov	r2, r0
   b65d4:	460b      	mov	r3, r1
   b65d6:	4640      	mov	r0, r8
   b65d8:	4649      	mov	r1, r9
   b65da:	f001 f8d3 	bl	b7784 <__aeabi_dcmpgt>
   b65de:	2800      	cmp	r0, #0
   b65e0:	f040 81ed 	bne.w	b69be <__ieee754_pow+0xa36>
   b65e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b65e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b65ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b65f0:	fa42 f303 	asr.w	r3, r2, r3
   b65f4:	4453      	add	r3, sl
   b65f6:	49ab      	ldr	r1, [pc, #684]	; (b68a4 <__ieee754_pow+0x91c>)
   b65f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b65fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6600:	fa41 fc02 	asr.w	ip, r1, r2
   b6604:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b660c:	f1c2 0214 	rsb	r2, r2, #20
   b6610:	fa41 f202 	asr.w	r2, r1, r2
   b6614:	2000      	movs	r0, #0
   b6616:	ea23 010c 	bic.w	r1, r3, ip
   b661a:	f1ba 0f00 	cmp.w	sl, #0
   b661e:	9200      	str	r2, [sp, #0]
   b6620:	460b      	mov	r3, r1
   b6622:	4602      	mov	r2, r0
   b6624:	da02      	bge.n	b662c <__ieee754_pow+0x6a4>
   b6626:	9900      	ldr	r1, [sp, #0]
   b6628:	4249      	negs	r1, r1
   b662a:	9100      	str	r1, [sp, #0]
   b662c:	4620      	mov	r0, r4
   b662e:	4629      	mov	r1, r5
   b6630:	f000 fc60 	bl	b6ef4 <__aeabi_dsub>
   b6634:	9b00      	ldr	r3, [sp, #0]
   b6636:	051b      	lsls	r3, r3, #20
   b6638:	9302      	str	r3, [sp, #8]
   b663a:	4602      	mov	r2, r0
   b663c:	460b      	mov	r3, r1
   b663e:	4604      	mov	r4, r0
   b6640:	460d      	mov	r5, r1
   b6642:	4630      	mov	r0, r6
   b6644:	4639      	mov	r1, r7
   b6646:	f000 fc57 	bl	b6ef8 <__adddf3>
   b664a:	4689      	mov	r9, r1
   b664c:	f04f 0800 	mov.w	r8, #0
   b6650:	a37d      	add	r3, pc, #500	; (adr r3, b6848 <__ieee754_pow+0x8c0>)
   b6652:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6656:	4640      	mov	r0, r8
   b6658:	4649      	mov	r1, r9
   b665a:	f000 fe03 	bl	b7264 <__aeabi_dmul>
   b665e:	4622      	mov	r2, r4
   b6660:	462b      	mov	r3, r5
   b6662:	4682      	mov	sl, r0
   b6664:	468b      	mov	fp, r1
   b6666:	4640      	mov	r0, r8
   b6668:	4649      	mov	r1, r9
   b666a:	f000 fc43 	bl	b6ef4 <__aeabi_dsub>
   b666e:	4602      	mov	r2, r0
   b6670:	460b      	mov	r3, r1
   b6672:	4630      	mov	r0, r6
   b6674:	4639      	mov	r1, r7
   b6676:	f000 fc3d 	bl	b6ef4 <__aeabi_dsub>
   b667a:	a375      	add	r3, pc, #468	; (adr r3, b6850 <__ieee754_pow+0x8c8>)
   b667c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6680:	f000 fdf0 	bl	b7264 <__aeabi_dmul>
   b6684:	a374      	add	r3, pc, #464	; (adr r3, b6858 <__ieee754_pow+0x8d0>)
   b6686:	e9d3 2300 	ldrd	r2, r3, [r3]
   b668a:	4604      	mov	r4, r0
   b668c:	460d      	mov	r5, r1
   b668e:	4640      	mov	r0, r8
   b6690:	4649      	mov	r1, r9
   b6692:	f000 fde7 	bl	b7264 <__aeabi_dmul>
   b6696:	4602      	mov	r2, r0
   b6698:	460b      	mov	r3, r1
   b669a:	4620      	mov	r0, r4
   b669c:	4629      	mov	r1, r5
   b669e:	f000 fc2b 	bl	b6ef8 <__adddf3>
   b66a2:	4606      	mov	r6, r0
   b66a4:	460f      	mov	r7, r1
   b66a6:	4632      	mov	r2, r6
   b66a8:	463b      	mov	r3, r7
   b66aa:	4650      	mov	r0, sl
   b66ac:	4659      	mov	r1, fp
   b66ae:	f000 fc23 	bl	b6ef8 <__adddf3>
   b66b2:	4652      	mov	r2, sl
   b66b4:	465b      	mov	r3, fp
   b66b6:	4604      	mov	r4, r0
   b66b8:	460d      	mov	r5, r1
   b66ba:	f000 fc1b 	bl	b6ef4 <__aeabi_dsub>
   b66be:	4602      	mov	r2, r0
   b66c0:	460b      	mov	r3, r1
   b66c2:	4630      	mov	r0, r6
   b66c4:	4639      	mov	r1, r7
   b66c6:	f000 fc15 	bl	b6ef4 <__aeabi_dsub>
   b66ca:	4622      	mov	r2, r4
   b66cc:	4680      	mov	r8, r0
   b66ce:	4689      	mov	r9, r1
   b66d0:	462b      	mov	r3, r5
   b66d2:	4620      	mov	r0, r4
   b66d4:	4629      	mov	r1, r5
   b66d6:	f000 fdc5 	bl	b7264 <__aeabi_dmul>
   b66da:	a361      	add	r3, pc, #388	; (adr r3, b6860 <__ieee754_pow+0x8d8>)
   b66dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66e0:	4606      	mov	r6, r0
   b66e2:	460f      	mov	r7, r1
   b66e4:	f000 fdbe 	bl	b7264 <__aeabi_dmul>
   b66e8:	a35f      	add	r3, pc, #380	; (adr r3, b6868 <__ieee754_pow+0x8e0>)
   b66ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66ee:	f000 fc01 	bl	b6ef4 <__aeabi_dsub>
   b66f2:	4632      	mov	r2, r6
   b66f4:	463b      	mov	r3, r7
   b66f6:	f000 fdb5 	bl	b7264 <__aeabi_dmul>
   b66fa:	a35d      	add	r3, pc, #372	; (adr r3, b6870 <__ieee754_pow+0x8e8>)
   b66fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6700:	f000 fbfa 	bl	b6ef8 <__adddf3>
   b6704:	4632      	mov	r2, r6
   b6706:	463b      	mov	r3, r7
   b6708:	f000 fdac 	bl	b7264 <__aeabi_dmul>
   b670c:	a35a      	add	r3, pc, #360	; (adr r3, b6878 <__ieee754_pow+0x8f0>)
   b670e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6712:	f000 fbef 	bl	b6ef4 <__aeabi_dsub>
   b6716:	4632      	mov	r2, r6
   b6718:	463b      	mov	r3, r7
   b671a:	f000 fda3 	bl	b7264 <__aeabi_dmul>
   b671e:	a358      	add	r3, pc, #352	; (adr r3, b6880 <__ieee754_pow+0x8f8>)
   b6720:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6724:	f000 fbe8 	bl	b6ef8 <__adddf3>
   b6728:	4632      	mov	r2, r6
   b672a:	463b      	mov	r3, r7
   b672c:	f000 fd9a 	bl	b7264 <__aeabi_dmul>
   b6730:	4602      	mov	r2, r0
   b6732:	460b      	mov	r3, r1
   b6734:	4620      	mov	r0, r4
   b6736:	4629      	mov	r1, r5
   b6738:	f000 fbdc 	bl	b6ef4 <__aeabi_dsub>
   b673c:	4606      	mov	r6, r0
   b673e:	460f      	mov	r7, r1
   b6740:	4632      	mov	r2, r6
   b6742:	463b      	mov	r3, r7
   b6744:	4620      	mov	r0, r4
   b6746:	4629      	mov	r1, r5
   b6748:	f000 fd8c 	bl	b7264 <__aeabi_dmul>
   b674c:	4602      	mov	r2, r0
   b674e:	460b      	mov	r3, r1
   b6750:	4630      	mov	r0, r6
   b6752:	4639      	mov	r1, r7
   b6754:	4616      	mov	r6, r2
   b6756:	461f      	mov	r7, r3
   b6758:	2200      	movs	r2, #0
   b675a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b675e:	f000 fbc9 	bl	b6ef4 <__aeabi_dsub>
   b6762:	4602      	mov	r2, r0
   b6764:	460b      	mov	r3, r1
   b6766:	4630      	mov	r0, r6
   b6768:	4639      	mov	r1, r7
   b676a:	f000 fea5 	bl	b74b8 <__aeabi_ddiv>
   b676e:	4642      	mov	r2, r8
   b6770:	4606      	mov	r6, r0
   b6772:	460f      	mov	r7, r1
   b6774:	464b      	mov	r3, r9
   b6776:	4620      	mov	r0, r4
   b6778:	4629      	mov	r1, r5
   b677a:	f000 fd73 	bl	b7264 <__aeabi_dmul>
   b677e:	4642      	mov	r2, r8
   b6780:	464b      	mov	r3, r9
   b6782:	f000 fbb9 	bl	b6ef8 <__adddf3>
   b6786:	4602      	mov	r2, r0
   b6788:	460b      	mov	r3, r1
   b678a:	4630      	mov	r0, r6
   b678c:	4639      	mov	r1, r7
   b678e:	f000 fbb1 	bl	b6ef4 <__aeabi_dsub>
   b6792:	4622      	mov	r2, r4
   b6794:	462b      	mov	r3, r5
   b6796:	f000 fbad 	bl	b6ef4 <__aeabi_dsub>
   b679a:	4602      	mov	r2, r0
   b679c:	460b      	mov	r3, r1
   b679e:	2000      	movs	r0, #0
   b67a0:	4941      	ldr	r1, [pc, #260]	; (b68a8 <__ieee754_pow+0x920>)
   b67a2:	f000 fba7 	bl	b6ef4 <__aeabi_dsub>
   b67a6:	9a02      	ldr	r2, [sp, #8]
   b67a8:	460b      	mov	r3, r1
   b67aa:	4413      	add	r3, r2
   b67ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b67b0:	f2c0 8143 	blt.w	b6a3a <__ieee754_pow+0xab2>
   b67b4:	4619      	mov	r1, r3
   b67b6:	ec53 2b18 	vmov	r2, r3, d8
   b67ba:	f000 fd53 	bl	b7264 <__aeabi_dmul>
   b67be:	ec41 0b10 	vmov	d0, r0, r1
   b67c2:	e42d      	b.n	b6020 <__ieee754_pow+0x98>
   b67c4:	f1bb 0f00 	cmp.w	fp, #0
   b67c8:	f6ff aca0 	blt.w	b610c <__ieee754_pow+0x184>
   b67cc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b6888 <__ieee754_pow+0x900>
   b67d0:	e426      	b.n	b6020 <__ieee754_pow+0x98>
   b67d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b68b0 <__ieee754_pow+0x928>
   b67d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b67da:	4563      	cmp	r3, ip
   b67dc:	f340 80e7 	ble.w	b69ae <__ieee754_pow+0xa26>
   b67e0:	4b32      	ldr	r3, [pc, #200]	; (b68ac <__ieee754_pow+0x924>)
   b67e2:	440b      	add	r3, r1
   b67e4:	4303      	orrs	r3, r0
   b67e6:	d10a      	bne.n	b67fe <__ieee754_pow+0x876>
   b67e8:	4622      	mov	r2, r4
   b67ea:	462b      	mov	r3, r5
   b67ec:	f000 fb82 	bl	b6ef4 <__aeabi_dsub>
   b67f0:	4632      	mov	r2, r6
   b67f2:	463b      	mov	r3, r7
   b67f4:	f000 ffbc 	bl	b7770 <__aeabi_dcmpge>
   b67f8:	2800      	cmp	r0, #0
   b67fa:	f43f aef3 	beq.w	b65e4 <__ieee754_pow+0x65c>
   b67fe:	a324      	add	r3, pc, #144	; (adr r3, b6890 <__ieee754_pow+0x908>)
   b6800:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6804:	ec51 0b18 	vmov	r0, r1, d8
   b6808:	f000 fd2c 	bl	b7264 <__aeabi_dmul>
   b680c:	a320      	add	r3, pc, #128	; (adr r3, b6890 <__ieee754_pow+0x908>)
   b680e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6812:	f000 fd27 	bl	b7264 <__aeabi_dmul>
   b6816:	ec41 0b10 	vmov	d0, r0, r1
   b681a:	e401      	b.n	b6020 <__ieee754_pow+0x98>
   b681c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b6898 <__ieee754_pow+0x910>
   b6820:	eeb0 8a47 	vmov.f32	s16, s14
   b6824:	eef0 8a67 	vmov.f32	s17, s15
   b6828:	e686      	b.n	b6538 <__ieee754_pow+0x5b0>
   b682a:	f1bb 0f00 	cmp.w	fp, #0
   b682e:	dacd      	bge.n	b67cc <__ieee754_pow+0x844>
   b6830:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6834:	ee00 6a10 	vmov	s0, r6
   b6838:	ee00 3a90 	vmov	s1, r3
   b683c:	f7ff bbf0 	b.w	b6020 <__ieee754_pow+0x98>
   b6840:	652b82fe 	.word	0x652b82fe
   b6844:	3c971547 	.word	0x3c971547
   b6848:	00000000 	.word	0x00000000
   b684c:	3fe62e43 	.word	0x3fe62e43
   b6850:	fefa39ef 	.word	0xfefa39ef
   b6854:	3fe62e42 	.word	0x3fe62e42
   b6858:	0ca86c39 	.word	0x0ca86c39
   b685c:	be205c61 	.word	0xbe205c61
   b6860:	72bea4d0 	.word	0x72bea4d0
   b6864:	3e663769 	.word	0x3e663769
   b6868:	c5d26bf1 	.word	0xc5d26bf1
   b686c:	3ebbbd41 	.word	0x3ebbbd41
   b6870:	af25de2c 	.word	0xaf25de2c
   b6874:	3f11566a 	.word	0x3f11566a
   b6878:	16bebd93 	.word	0x16bebd93
   b687c:	3f66c16c 	.word	0x3f66c16c
   b6880:	5555553e 	.word	0x5555553e
   b6884:	3fc55555 	.word	0x3fc55555
	...
   b6890:	c2f8f359 	.word	0xc2f8f359
   b6894:	01a56e1f 	.word	0x01a56e1f
   b6898:	00000000 	.word	0x00000000
   b689c:	3ff00000 	.word	0x3ff00000
   b68a0:	408fffff 	.word	0x408fffff
   b68a4:	000fffff 	.word	0x000fffff
   b68a8:	3ff00000 	.word	0x3ff00000
   b68ac:	3f6f3400 	.word	0x3f6f3400
   b68b0:	4090cbff 	.word	0x4090cbff
   b68b4:	4598      	cmp	r8, r3
   b68b6:	db85      	blt.n	b67c4 <__ieee754_pow+0x83c>
   b68b8:	4b7d      	ldr	r3, [pc, #500]	; (b6ab0 <__ieee754_pow+0xb28>)
   b68ba:	4598      	cmp	r8, r3
   b68bc:	f73f ac22 	bgt.w	b6104 <__ieee754_pow+0x17c>
   b68c0:	ec51 0b10 	vmov	r0, r1, d0
   b68c4:	4b7a      	ldr	r3, [pc, #488]	; (b6ab0 <__ieee754_pow+0xb28>)
   b68c6:	2200      	movs	r2, #0
   b68c8:	f000 fb14 	bl	b6ef4 <__aeabi_dsub>
   b68cc:	a368      	add	r3, pc, #416	; (adr r3, b6a70 <__ieee754_pow+0xae8>)
   b68ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b68d2:	4604      	mov	r4, r0
   b68d4:	460d      	mov	r5, r1
   b68d6:	f000 fcc5 	bl	b7264 <__aeabi_dmul>
   b68da:	a367      	add	r3, pc, #412	; (adr r3, b6a78 <__ieee754_pow+0xaf0>)
   b68dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b68e0:	4682      	mov	sl, r0
   b68e2:	468b      	mov	fp, r1
   b68e4:	4620      	mov	r0, r4
   b68e6:	4629      	mov	r1, r5
   b68e8:	f000 fcbc 	bl	b7264 <__aeabi_dmul>
   b68ec:	4b71      	ldr	r3, [pc, #452]	; (b6ab4 <__ieee754_pow+0xb2c>)
   b68ee:	ec41 0b18 	vmov	d8, r0, r1
   b68f2:	2200      	movs	r2, #0
   b68f4:	4620      	mov	r0, r4
   b68f6:	4629      	mov	r1, r5
   b68f8:	f000 fcb4 	bl	b7264 <__aeabi_dmul>
   b68fc:	4602      	mov	r2, r0
   b68fe:	460b      	mov	r3, r1
   b6900:	a15f      	add	r1, pc, #380	; (adr r1, b6a80 <__ieee754_pow+0xaf8>)
   b6902:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6906:	f000 faf5 	bl	b6ef4 <__aeabi_dsub>
   b690a:	4622      	mov	r2, r4
   b690c:	462b      	mov	r3, r5
   b690e:	f000 fca9 	bl	b7264 <__aeabi_dmul>
   b6912:	4602      	mov	r2, r0
   b6914:	460b      	mov	r3, r1
   b6916:	2000      	movs	r0, #0
   b6918:	4967      	ldr	r1, [pc, #412]	; (b6ab8 <__ieee754_pow+0xb30>)
   b691a:	f000 faeb 	bl	b6ef4 <__aeabi_dsub>
   b691e:	4622      	mov	r2, r4
   b6920:	4680      	mov	r8, r0
   b6922:	4689      	mov	r9, r1
   b6924:	462b      	mov	r3, r5
   b6926:	4620      	mov	r0, r4
   b6928:	4629      	mov	r1, r5
   b692a:	f000 fc9b 	bl	b7264 <__aeabi_dmul>
   b692e:	4602      	mov	r2, r0
   b6930:	460b      	mov	r3, r1
   b6932:	4640      	mov	r0, r8
   b6934:	4649      	mov	r1, r9
   b6936:	f000 fc95 	bl	b7264 <__aeabi_dmul>
   b693a:	a353      	add	r3, pc, #332	; (adr r3, b6a88 <__ieee754_pow+0xb00>)
   b693c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6940:	f000 fc90 	bl	b7264 <__aeabi_dmul>
   b6944:	4602      	mov	r2, r0
   b6946:	460b      	mov	r3, r1
   b6948:	ec51 0b18 	vmov	r0, r1, d8
   b694c:	f000 fad2 	bl	b6ef4 <__aeabi_dsub>
   b6950:	4680      	mov	r8, r0
   b6952:	4689      	mov	r9, r1
   b6954:	4642      	mov	r2, r8
   b6956:	464b      	mov	r3, r9
   b6958:	4650      	mov	r0, sl
   b695a:	4659      	mov	r1, fp
   b695c:	f000 facc 	bl	b6ef8 <__adddf3>
   b6960:	2000      	movs	r0, #0
   b6962:	4652      	mov	r2, sl
   b6964:	465b      	mov	r3, fp
   b6966:	4604      	mov	r4, r0
   b6968:	460d      	mov	r5, r1
   b696a:	e591      	b.n	b6490 <__ieee754_pow+0x508>
   b696c:	4622      	mov	r2, r4
   b696e:	462b      	mov	r3, r5
   b6970:	4620      	mov	r0, r4
   b6972:	4629      	mov	r1, r5
   b6974:	f000 fc76 	bl	b7264 <__aeabi_dmul>
   b6978:	ec41 0b10 	vmov	d0, r0, r1
   b697c:	f7ff bb50 	b.w	b6020 <__ieee754_pow+0x98>
   b6980:	494b      	ldr	r1, [pc, #300]	; (b6ab0 <__ieee754_pow+0xb28>)
   b6982:	2000      	movs	r0, #0
   b6984:	4622      	mov	r2, r4
   b6986:	462b      	mov	r3, r5
   b6988:	f000 fd96 	bl	b74b8 <__aeabi_ddiv>
   b698c:	ec41 0b10 	vmov	d0, r0, r1
   b6990:	f7ff bb46 	b.w	b6020 <__ieee754_pow+0x98>
   b6994:	2b00      	cmp	r3, #0
   b6996:	d144      	bne.n	b6a22 <__ieee754_pow+0xa9a>
   b6998:	f1c1 0114 	rsb	r1, r1, #20
   b699c:	fa4a f001 	asr.w	r0, sl, r1
   b69a0:	fa00 f101 	lsl.w	r1, r0, r1
   b69a4:	4551      	cmp	r1, sl
   b69a6:	d05a      	beq.n	b6a5e <__ieee754_pow+0xad6>
   b69a8:	9300      	str	r3, [sp, #0]
   b69aa:	f7ff bb17 	b.w	b5fdc <__ieee754_pow+0x54>
   b69ae:	4a42      	ldr	r2, [pc, #264]	; (b6ab8 <__ieee754_pow+0xb30>)
   b69b0:	4293      	cmp	r3, r2
   b69b2:	dc5b      	bgt.n	b6a6c <__ieee754_pow+0xae4>
   b69b4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b69b8:	9102      	str	r1, [sp, #8]
   b69ba:	9100      	str	r1, [sp, #0]
   b69bc:	e646      	b.n	b664c <__ieee754_pow+0x6c4>
   b69be:	a334      	add	r3, pc, #208	; (adr r3, b6a90 <__ieee754_pow+0xb08>)
   b69c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69c4:	ec51 0b18 	vmov	r0, r1, d8
   b69c8:	f000 fc4c 	bl	b7264 <__aeabi_dmul>
   b69cc:	a330      	add	r3, pc, #192	; (adr r3, b6a90 <__ieee754_pow+0xb08>)
   b69ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69d2:	f000 fc47 	bl	b7264 <__aeabi_dmul>
   b69d6:	ec41 0b10 	vmov	d0, r0, r1
   b69da:	f7ff bb21 	b.w	b6020 <__ieee754_pow+0x98>
   b69de:	9b00      	ldr	r3, [sp, #0]
   b69e0:	2b01      	cmp	r3, #1
   b69e2:	f47f ab1d 	bne.w	b6020 <__ieee754_pow+0x98>
   b69e6:	ee10 1a90 	vmov	r1, s1
   b69ea:	ee10 2a10 	vmov	r2, s0
   b69ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b69f2:	ec43 2b10 	vmov	d0, r2, r3
   b69f6:	f7ff bb13 	b.w	b6020 <__ieee754_pow+0x98>
   b69fa:	ed9f 7b27 	vldr	d7, [pc, #156]	; b6a98 <__ieee754_pow+0xb10>
   b69fe:	eeb0 ca47 	vmov.f32	s24, s14
   b6a02:	eef0 ca67 	vmov.f32	s25, s15
   b6a06:	ed9f 7b26 	vldr	d7, [pc, #152]	; b6aa0 <__ieee754_pow+0xb18>
   b6a0a:	eeb0 da47 	vmov.f32	s26, s14
   b6a0e:	eef0 da67 	vmov.f32	s27, s15
   b6a12:	ed9f 7b25 	vldr	d7, [pc, #148]	; b6aa8 <__ieee754_pow+0xb20>
   b6a16:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b6a1a:	ec53 2b17 	vmov	r2, r3, d7
   b6a1e:	f7ff bbeb 	b.w	b61f8 <__ieee754_pow+0x270>
   b6a22:	ec45 4b10 	vmov	d0, r4, r5
   b6a26:	9200      	str	r2, [sp, #0]
   b6a28:	f000 f914 	bl	b6c54 <fabs>
   b6a2c:	9a00      	ldr	r2, [sp, #0]
   b6a2e:	2a00      	cmp	r2, #0
   b6a30:	f47f ab92 	bne.w	b6158 <__ieee754_pow+0x1d0>
   b6a34:	9200      	str	r2, [sp, #0]
   b6a36:	f7ff bb26 	b.w	b6086 <__ieee754_pow+0xfe>
   b6a3a:	ec41 0b10 	vmov	d0, r0, r1
   b6a3e:	9800      	ldr	r0, [sp, #0]
   b6a40:	f000 f9c2 	bl	b6dc8 <scalbn>
   b6a44:	ec51 0b10 	vmov	r0, r1, d0
   b6a48:	e6b5      	b.n	b67b6 <__ieee754_pow+0x82e>
   b6a4a:	f000 0001 	and.w	r0, r0, #1
   b6a4e:	f1c0 0102 	rsb	r1, r0, #2
   b6a52:	9100      	str	r1, [sp, #0]
   b6a54:	2b00      	cmp	r3, #0
   b6a56:	f43f aac1 	beq.w	b5fdc <__ieee754_pow+0x54>
   b6a5a:	f7ff bb0d 	b.w	b6078 <__ieee754_pow+0xf0>
   b6a5e:	f000 0001 	and.w	r0, r0, #1
   b6a62:	f1c0 0302 	rsb	r3, r0, #2
   b6a66:	9300      	str	r3, [sp, #0]
   b6a68:	f7ff bab8 	b.w	b5fdc <__ieee754_pow+0x54>
   b6a6c:	151b      	asrs	r3, r3, #20
   b6a6e:	e5bb      	b.n	b65e8 <__ieee754_pow+0x660>
   b6a70:	60000000 	.word	0x60000000
   b6a74:	3ff71547 	.word	0x3ff71547
   b6a78:	f85ddf44 	.word	0xf85ddf44
   b6a7c:	3e54ae0b 	.word	0x3e54ae0b
   b6a80:	55555555 	.word	0x55555555
   b6a84:	3fd55555 	.word	0x3fd55555
   b6a88:	652b82fe 	.word	0x652b82fe
   b6a8c:	3ff71547 	.word	0x3ff71547
   b6a90:	8800759c 	.word	0x8800759c
   b6a94:	7e37e43c 	.word	0x7e37e43c
   b6a98:	40000000 	.word	0x40000000
   b6a9c:	3fe2b803 	.word	0x3fe2b803
   b6aa0:	43cfd006 	.word	0x43cfd006
   b6aa4:	3e4cfdeb 	.word	0x3e4cfdeb
   b6aa8:	00000000 	.word	0x00000000
   b6aac:	3ff80000 	.word	0x3ff80000
   b6ab0:	3ff00000 	.word	0x3ff00000
   b6ab4:	3fd00000 	.word	0x3fd00000
   b6ab8:	3fe00000 	.word	0x3fe00000

000b6abc <__ieee754_sqrt>:
   b6abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ac0:	4a63      	ldr	r2, [pc, #396]	; (b6c50 <__ieee754_sqrt+0x194>)
   b6ac2:	ec55 4b10 	vmov	r4, r5, d0
   b6ac6:	43aa      	bics	r2, r5
   b6ac8:	f000 809f 	beq.w	b6c0a <__ieee754_sqrt+0x14e>
   b6acc:	2d00      	cmp	r5, #0
   b6ace:	ee10 ca10 	vmov	ip, s0
   b6ad2:	462b      	mov	r3, r5
   b6ad4:	dd54      	ble.n	b6b80 <__ieee754_sqrt+0xc4>
   b6ad6:	1529      	asrs	r1, r5, #20
   b6ad8:	d063      	beq.n	b6ba2 <__ieee754_sqrt+0xe6>
   b6ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6ade:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6ae2:	07c9      	lsls	r1, r1, #31
   b6ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6ae8:	d404      	bmi.n	b6af4 <__ieee754_sqrt+0x38>
   b6aea:	005b      	lsls	r3, r3, #1
   b6aec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6af0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6af4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6af8:	2600      	movs	r6, #0
   b6afa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b6afe:	107f      	asrs	r7, r7, #1
   b6b00:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6b04:	f04f 0e16 	mov.w	lr, #22
   b6b08:	4634      	mov	r4, r6
   b6b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b6b0e:	18a1      	adds	r1, r4, r2
   b6b10:	4299      	cmp	r1, r3
   b6b12:	dc02      	bgt.n	b6b1a <__ieee754_sqrt+0x5e>
   b6b14:	1a5b      	subs	r3, r3, r1
   b6b16:	188c      	adds	r4, r1, r2
   b6b18:	4416      	add	r6, r2
   b6b1a:	005b      	lsls	r3, r3, #1
   b6b1c:	f1be 0e01 	subs.w	lr, lr, #1
   b6b20:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6b24:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6b28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6b2c:	d1ef      	bne.n	b6b0e <__ieee754_sqrt+0x52>
   b6b2e:	4675      	mov	r5, lr
   b6b30:	2020      	movs	r0, #32
   b6b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b6b36:	e00a      	b.n	b6b4e <__ieee754_sqrt+0x92>
   b6b38:	d044      	beq.n	b6bc4 <__ieee754_sqrt+0x108>
   b6b3a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b6b3e:	3801      	subs	r0, #1
   b6b40:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b6b44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6b48:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6b4c:	d043      	beq.n	b6bd6 <__ieee754_sqrt+0x11a>
   b6b4e:	42a3      	cmp	r3, r4
   b6b50:	eb02 010e 	add.w	r1, r2, lr
   b6b54:	ddf0      	ble.n	b6b38 <__ieee754_sqrt+0x7c>
   b6b56:	2900      	cmp	r1, #0
   b6b58:	eb01 0e02 	add.w	lr, r1, r2
   b6b5c:	db0a      	blt.n	b6b74 <__ieee754_sqrt+0xb8>
   b6b5e:	46a0      	mov	r8, r4
   b6b60:	1b1b      	subs	r3, r3, r4
   b6b62:	4561      	cmp	r1, ip
   b6b64:	bf88      	it	hi
   b6b66:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b6b6a:	ebac 0c01 	sub.w	ip, ip, r1
   b6b6e:	4415      	add	r5, r2
   b6b70:	4644      	mov	r4, r8
   b6b72:	e7e2      	b.n	b6b3a <__ieee754_sqrt+0x7e>
   b6b74:	f1be 0f00 	cmp.w	lr, #0
   b6b78:	dbf1      	blt.n	b6b5e <__ieee754_sqrt+0xa2>
   b6b7a:	f104 0801 	add.w	r8, r4, #1
   b6b7e:	e7ef      	b.n	b6b60 <__ieee754_sqrt+0xa4>
   b6b80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b6b84:	4322      	orrs	r2, r4
   b6b86:	d038      	beq.n	b6bfa <__ieee754_sqrt+0x13e>
   b6b88:	2d00      	cmp	r5, #0
   b6b8a:	d14e      	bne.n	b6c2a <__ieee754_sqrt+0x16e>
   b6b8c:	4629      	mov	r1, r5
   b6b8e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b6b92:	3915      	subs	r1, #21
   b6b94:	4613      	mov	r3, r2
   b6b96:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b6b9a:	2a00      	cmp	r2, #0
   b6b9c:	d0f7      	beq.n	b6b8e <__ieee754_sqrt+0xd2>
   b6b9e:	02d6      	lsls	r6, r2, #11
   b6ba0:	d450      	bmi.n	b6c44 <__ieee754_sqrt+0x188>
   b6ba2:	2000      	movs	r0, #0
   b6ba4:	005b      	lsls	r3, r3, #1
   b6ba6:	02dd      	lsls	r5, r3, #11
   b6ba8:	4604      	mov	r4, r0
   b6baa:	f100 0001 	add.w	r0, r0, #1
   b6bae:	d5f9      	bpl.n	b6ba4 <__ieee754_sqrt+0xe8>
   b6bb0:	461a      	mov	r2, r3
   b6bb2:	4663      	mov	r3, ip
   b6bb4:	fa0c fc00 	lsl.w	ip, ip, r0
   b6bb8:	f1c0 0020 	rsb	r0, r0, #32
   b6bbc:	40c3      	lsrs	r3, r0
   b6bbe:	1b09      	subs	r1, r1, r4
   b6bc0:	4313      	orrs	r3, r2
   b6bc2:	e78a      	b.n	b6ada <__ieee754_sqrt+0x1e>
   b6bc4:	4561      	cmp	r1, ip
   b6bc6:	d8b8      	bhi.n	b6b3a <__ieee754_sqrt+0x7e>
   b6bc8:	2900      	cmp	r1, #0
   b6bca:	eb01 0e02 	add.w	lr, r1, r2
   b6bce:	dbd1      	blt.n	b6b74 <__ieee754_sqrt+0xb8>
   b6bd0:	4698      	mov	r8, r3
   b6bd2:	2300      	movs	r3, #0
   b6bd4:	e7c9      	b.n	b6b6a <__ieee754_sqrt+0xae>
   b6bd6:	ea53 030c 	orrs.w	r3, r3, ip
   b6bda:	d110      	bne.n	b6bfe <__ieee754_sqrt+0x142>
   b6bdc:	0868      	lsrs	r0, r5, #1
   b6bde:	1071      	asrs	r1, r6, #1
   b6be0:	07f3      	lsls	r3, r6, #31
   b6be2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b6be6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b6bea:	bf48      	it	mi
   b6bec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6bf0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b6bf4:	4602      	mov	r2, r0
   b6bf6:	ec43 2b10 	vmov	d0, r2, r3
   b6bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bfe:	1c6a      	adds	r2, r5, #1
   b6c00:	bf16      	itet	ne
   b6c02:	1c68      	addne	r0, r5, #1
   b6c04:	3601      	addeq	r6, #1
   b6c06:	0840      	lsrne	r0, r0, #1
   b6c08:	e7e9      	b.n	b6bde <__ieee754_sqrt+0x122>
   b6c0a:	ee10 2a10 	vmov	r2, s0
   b6c0e:	ee10 0a10 	vmov	r0, s0
   b6c12:	462b      	mov	r3, r5
   b6c14:	4629      	mov	r1, r5
   b6c16:	f000 fb25 	bl	b7264 <__aeabi_dmul>
   b6c1a:	4622      	mov	r2, r4
   b6c1c:	462b      	mov	r3, r5
   b6c1e:	f000 f96b 	bl	b6ef8 <__adddf3>
   b6c22:	ec41 0b10 	vmov	d0, r0, r1
   b6c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c2a:	ee10 2a10 	vmov	r2, s0
   b6c2e:	4620      	mov	r0, r4
   b6c30:	4629      	mov	r1, r5
   b6c32:	f000 f95f 	bl	b6ef4 <__aeabi_dsub>
   b6c36:	4602      	mov	r2, r0
   b6c38:	460b      	mov	r3, r1
   b6c3a:	f000 fc3d 	bl	b74b8 <__aeabi_ddiv>
   b6c3e:	ec41 0b10 	vmov	d0, r0, r1
   b6c42:	e7da      	b.n	b6bfa <__ieee754_sqrt+0x13e>
   b6c44:	4663      	mov	r3, ip
   b6c46:	2020      	movs	r0, #32
   b6c48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6c4c:	e7b6      	b.n	b6bbc <__ieee754_sqrt+0x100>
   b6c4e:	bf00      	nop
   b6c50:	7ff00000 	.word	0x7ff00000

000b6c54 <fabs>:
   b6c54:	ec51 0b10 	vmov	r0, r1, d0
   b6c58:	ee10 2a10 	vmov	r2, s0
   b6c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6c60:	ec43 2b10 	vmov	d0, r2, r3
   b6c64:	4770      	bx	lr
   b6c66:	bf00      	nop

000b6c68 <finite>:
   b6c68:	b082      	sub	sp, #8
   b6c6a:	ed8d 0b00 	vstr	d0, [sp]
   b6c6e:	9801      	ldr	r0, [sp, #4]
   b6c70:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b6c74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b6c78:	0fc0      	lsrs	r0, r0, #31
   b6c7a:	b002      	add	sp, #8
   b6c7c:	4770      	bx	lr
   b6c7e:	bf00      	nop

000b6c80 <nan>:
   b6c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; b6c88 <nan+0x8>
   b6c84:	4770      	bx	lr
   b6c86:	bf00      	nop
   b6c88:	00000000 	.word	0x00000000
   b6c8c:	7ff80000 	.word	0x7ff80000

000b6c90 <rint>:
   b6c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c92:	ec53 2b10 	vmov	r2, r3, d0
   b6c96:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b6c9a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b6c9e:	2913      	cmp	r1, #19
   b6ca0:	ee10 0a10 	vmov	r0, s0
   b6ca4:	b083      	sub	sp, #12
   b6ca6:	461c      	mov	r4, r3
   b6ca8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b6cac:	dc3a      	bgt.n	b6d24 <rint+0x94>
   b6cae:	2900      	cmp	r1, #0
   b6cb0:	db30      	blt.n	b6d14 <rint+0x84>
   b6cb2:	4d42      	ldr	r5, [pc, #264]	; (b6dbc <rint+0x12c>)
   b6cb4:	fa45 fc01 	asr.w	ip, r5, r1
   b6cb8:	ea03 050c 	and.w	r5, r3, ip
   b6cbc:	4315      	orrs	r5, r2
   b6cbe:	d02d      	beq.n	b6d1c <rint+0x8c>
   b6cc0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b6cc4:	4318      	orrs	r0, r3
   b6cc6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b6cca:	d00c      	beq.n	b6ce6 <rint+0x56>
   b6ccc:	ea24 0c0c 	bic.w	ip, r4, ip
   b6cd0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b6cd4:	2913      	cmp	r1, #19
   b6cd6:	fa44 f101 	asr.w	r1, r4, r1
   b6cda:	bf0c      	ite	eq
   b6cdc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6ce0:	2000      	movne	r0, #0
   b6ce2:	ea4c 0401 	orr.w	r4, ip, r1
   b6ce6:	4936      	ldr	r1, [pc, #216]	; (b6dc0 <rint+0x130>)
   b6ce8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b6cec:	4623      	mov	r3, r4
   b6cee:	e9de 4500 	ldrd	r4, r5, [lr]
   b6cf2:	4602      	mov	r2, r0
   b6cf4:	4629      	mov	r1, r5
   b6cf6:	4620      	mov	r0, r4
   b6cf8:	f000 f8fe 	bl	b6ef8 <__adddf3>
   b6cfc:	e9cd 0100 	strd	r0, r1, [sp]
   b6d00:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6d04:	4622      	mov	r2, r4
   b6d06:	462b      	mov	r3, r5
   b6d08:	f000 f8f4 	bl	b6ef4 <__aeabi_dsub>
   b6d0c:	ec41 0b10 	vmov	d0, r0, r1
   b6d10:	b003      	add	sp, #12
   b6d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b6d18:	4311      	orrs	r1, r2
   b6d1a:	d124      	bne.n	b6d66 <rint+0xd6>
   b6d1c:	ec43 2b10 	vmov	d0, r2, r3
   b6d20:	b003      	add	sp, #12
   b6d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d24:	2933      	cmp	r1, #51	; 0x33
   b6d26:	dd08      	ble.n	b6d3a <rint+0xaa>
   b6d28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b6d2c:	d1f6      	bne.n	b6d1c <rint+0x8c>
   b6d2e:	4619      	mov	r1, r3
   b6d30:	f000 f8e2 	bl	b6ef8 <__adddf3>
   b6d34:	ec41 0b10 	vmov	d0, r0, r1
   b6d38:	e7f2      	b.n	b6d20 <rint+0x90>
   b6d3a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b6d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b6d42:	fa21 f10c 	lsr.w	r1, r1, ip
   b6d46:	420a      	tst	r2, r1
   b6d48:	d0e8      	beq.n	b6d1c <rint+0x8c>
   b6d4a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b6d4e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b6d52:	d0c8      	beq.n	b6ce6 <rint+0x56>
   b6d54:	ea20 0303 	bic.w	r3, r0, r3
   b6d58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b6d5c:	fa40 fc0c 	asr.w	ip, r0, ip
   b6d60:	ea43 000c 	orr.w	r0, r3, ip
   b6d64:	e7bf      	b.n	b6ce6 <rint+0x56>
   b6d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6d6a:	4318      	orrs	r0, r3
   b6d6c:	4a14      	ldr	r2, [pc, #80]	; (b6dc0 <rint+0x130>)
   b6d6e:	4243      	negs	r3, r0
   b6d70:	4303      	orrs	r3, r0
   b6d72:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b6d76:	0b1b      	lsrs	r3, r3, #12
   b6d78:	0c62      	lsrs	r2, r4, #17
   b6d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b6d7e:	0452      	lsls	r2, r2, #17
   b6d80:	ea43 0702 	orr.w	r7, r3, r2
   b6d84:	463b      	mov	r3, r7
   b6d86:	e9de 6700 	ldrd	r6, r7, [lr]
   b6d8a:	ee10 2a10 	vmov	r2, s0
   b6d8e:	4630      	mov	r0, r6
   b6d90:	4639      	mov	r1, r7
   b6d92:	f000 f8b1 	bl	b6ef8 <__adddf3>
   b6d96:	e9cd 0100 	strd	r0, r1, [sp]
   b6d9a:	4632      	mov	r2, r6
   b6d9c:	463b      	mov	r3, r7
   b6d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6da2:	f000 f8a7 	bl	b6ef4 <__aeabi_dsub>
   b6da6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b6daa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6dae:	4602      	mov	r2, r0
   b6db0:	ea41 0304 	orr.w	r3, r1, r4
   b6db4:	ec43 2b10 	vmov	d0, r2, r3
   b6db8:	b003      	add	sp, #12
   b6dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6dbc:	000fffff 	.word	0x000fffff
   b6dc0:	000b8108 	.word	0x000b8108
   b6dc4:	00000000 	.word	0x00000000

000b6dc8 <scalbn>:
   b6dc8:	b538      	push	{r3, r4, r5, lr}
   b6dca:	ec53 2b10 	vmov	r2, r3, d0
   b6dce:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6dd2:	4604      	mov	r4, r0
   b6dd4:	469c      	mov	ip, r3
   b6dd6:	bb89      	cbnz	r1, b6e3c <scalbn+0x74>
   b6dd8:	ee10 1a10 	vmov	r1, s0
   b6ddc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6de0:	ea5c 0101 	orrs.w	r1, ip, r1
   b6de4:	d029      	beq.n	b6e3a <scalbn+0x72>
   b6de6:	4619      	mov	r1, r3
   b6de8:	2200      	movs	r2, #0
   b6dea:	4b3d      	ldr	r3, [pc, #244]	; (b6ee0 <scalbn+0x118>)
   b6dec:	4d3d      	ldr	r5, [pc, #244]	; (b6ee4 <scalbn+0x11c>)
   b6dee:	ee10 0a10 	vmov	r0, s0
   b6df2:	f000 fa37 	bl	b7264 <__aeabi_dmul>
   b6df6:	42ac      	cmp	r4, r5
   b6df8:	4602      	mov	r2, r0
   b6dfa:	460b      	mov	r3, r1
   b6dfc:	db16      	blt.n	b6e2c <scalbn+0x64>
   b6dfe:	468c      	mov	ip, r1
   b6e00:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b6e04:	3936      	subs	r1, #54	; 0x36
   b6e06:	4421      	add	r1, r4
   b6e08:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b6e0c:	4281      	cmp	r1, r0
   b6e0e:	dc21      	bgt.n	b6e54 <scalbn+0x8c>
   b6e10:	2900      	cmp	r1, #0
   b6e12:	dc47      	bgt.n	b6ea4 <scalbn+0xdc>
   b6e14:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6e18:	da34      	bge.n	b6e84 <scalbn+0xbc>
   b6e1a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b6e1e:	428c      	cmp	r4, r1
   b6e20:	dc18      	bgt.n	b6e54 <scalbn+0x8c>
   b6e22:	2b00      	cmp	r3, #0
   b6e24:	a126      	add	r1, pc, #152	; (adr r1, b6ec0 <scalbn+0xf8>)
   b6e26:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6e2a:	db44      	blt.n	b6eb6 <scalbn+0xee>
   b6e2c:	a324      	add	r3, pc, #144	; (adr r3, b6ec0 <scalbn+0xf8>)
   b6e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e32:	f000 fa17 	bl	b7264 <__aeabi_dmul>
   b6e36:	ec41 0b10 	vmov	d0, r0, r1
   b6e3a:	bd38      	pop	{r3, r4, r5, pc}
   b6e3c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6e40:	4281      	cmp	r1, r0
   b6e42:	d1e0      	bne.n	b6e06 <scalbn+0x3e>
   b6e44:	ee10 0a10 	vmov	r0, s0
   b6e48:	4619      	mov	r1, r3
   b6e4a:	f000 f855 	bl	b6ef8 <__adddf3>
   b6e4e:	ec41 0b10 	vmov	d0, r0, r1
   b6e52:	bd38      	pop	{r3, r4, r5, pc}
   b6e54:	2b00      	cmp	r3, #0
   b6e56:	a11c      	add	r1, pc, #112	; (adr r1, b6ec8 <scalbn+0x100>)
   b6e58:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6e5c:	db07      	blt.n	b6e6e <scalbn+0xa6>
   b6e5e:	a31a      	add	r3, pc, #104	; (adr r3, b6ec8 <scalbn+0x100>)
   b6e60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e64:	f000 f9fe 	bl	b7264 <__aeabi_dmul>
   b6e68:	ec41 0b10 	vmov	d0, r0, r1
   b6e6c:	bd38      	pop	{r3, r4, r5, pc}
   b6e6e:	a118      	add	r1, pc, #96	; (adr r1, b6ed0 <scalbn+0x108>)
   b6e70:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6e74:	a314      	add	r3, pc, #80	; (adr r3, b6ec8 <scalbn+0x100>)
   b6e76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e7a:	f000 f9f3 	bl	b7264 <__aeabi_dmul>
   b6e7e:	ec41 0b10 	vmov	d0, r0, r1
   b6e82:	e7f3      	b.n	b6e6c <scalbn+0xa4>
   b6e84:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6e88:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6e8c:	3136      	adds	r1, #54	; 0x36
   b6e8e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6e92:	4610      	mov	r0, r2
   b6e94:	4619      	mov	r1, r3
   b6e96:	2200      	movs	r2, #0
   b6e98:	4b13      	ldr	r3, [pc, #76]	; (b6ee8 <scalbn+0x120>)
   b6e9a:	f000 f9e3 	bl	b7264 <__aeabi_dmul>
   b6e9e:	ec41 0b10 	vmov	d0, r0, r1
   b6ea2:	bd38      	pop	{r3, r4, r5, pc}
   b6ea4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6ea8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6eac:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6eb0:	ec43 2b10 	vmov	d0, r2, r3
   b6eb4:	bd38      	pop	{r3, r4, r5, pc}
   b6eb6:	a108      	add	r1, pc, #32	; (adr r1, b6ed8 <scalbn+0x110>)
   b6eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6ebc:	e7b6      	b.n	b6e2c <scalbn+0x64>
   b6ebe:	bf00      	nop
   b6ec0:	c2f8f359 	.word	0xc2f8f359
   b6ec4:	01a56e1f 	.word	0x01a56e1f
   b6ec8:	8800759c 	.word	0x8800759c
   b6ecc:	7e37e43c 	.word	0x7e37e43c
   b6ed0:	8800759c 	.word	0x8800759c
   b6ed4:	fe37e43c 	.word	0xfe37e43c
   b6ed8:	c2f8f359 	.word	0xc2f8f359
   b6edc:	81a56e1f 	.word	0x81a56e1f
   b6ee0:	43500000 	.word	0x43500000
   b6ee4:	ffff3cb0 	.word	0xffff3cb0
   b6ee8:	3c900000 	.word	0x3c900000

000b6eec <__aeabi_drsub>:
   b6eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6ef0:	e002      	b.n	b6ef8 <__adddf3>
   b6ef2:	bf00      	nop

000b6ef4 <__aeabi_dsub>:
   b6ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6ef8 <__adddf3>:
   b6ef8:	b530      	push	{r4, r5, lr}
   b6efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b6efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6f02:	ea94 0f05 	teq	r4, r5
   b6f06:	bf08      	it	eq
   b6f08:	ea90 0f02 	teqeq	r0, r2
   b6f0c:	bf1f      	itttt	ne
   b6f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6f12:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6f1e:	f000 80e2 	beq.w	b70e6 <__adddf3+0x1ee>
   b6f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6f2a:	bfb8      	it	lt
   b6f2c:	426d      	neglt	r5, r5
   b6f2e:	dd0c      	ble.n	b6f4a <__adddf3+0x52>
   b6f30:	442c      	add	r4, r5
   b6f32:	ea80 0202 	eor.w	r2, r0, r2
   b6f36:	ea81 0303 	eor.w	r3, r1, r3
   b6f3a:	ea82 0000 	eor.w	r0, r2, r0
   b6f3e:	ea83 0101 	eor.w	r1, r3, r1
   b6f42:	ea80 0202 	eor.w	r2, r0, r2
   b6f46:	ea81 0303 	eor.w	r3, r1, r3
   b6f4a:	2d36      	cmp	r5, #54	; 0x36
   b6f4c:	bf88      	it	hi
   b6f4e:	bd30      	pophi	{r4, r5, pc}
   b6f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6f60:	d002      	beq.n	b6f68 <__adddf3+0x70>
   b6f62:	4240      	negs	r0, r0
   b6f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6f74:	d002      	beq.n	b6f7c <__adddf3+0x84>
   b6f76:	4252      	negs	r2, r2
   b6f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6f7c:	ea94 0f05 	teq	r4, r5
   b6f80:	f000 80a7 	beq.w	b70d2 <__adddf3+0x1da>
   b6f84:	f1a4 0401 	sub.w	r4, r4, #1
   b6f88:	f1d5 0e20 	rsbs	lr, r5, #32
   b6f8c:	db0d      	blt.n	b6faa <__adddf3+0xb2>
   b6f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6f92:	fa22 f205 	lsr.w	r2, r2, r5
   b6f96:	1880      	adds	r0, r0, r2
   b6f98:	f141 0100 	adc.w	r1, r1, #0
   b6f9c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6fa0:	1880      	adds	r0, r0, r2
   b6fa2:	fa43 f305 	asr.w	r3, r3, r5
   b6fa6:	4159      	adcs	r1, r3
   b6fa8:	e00e      	b.n	b6fc8 <__adddf3+0xd0>
   b6faa:	f1a5 0520 	sub.w	r5, r5, #32
   b6fae:	f10e 0e20 	add.w	lr, lr, #32
   b6fb2:	2a01      	cmp	r2, #1
   b6fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6fb8:	bf28      	it	cs
   b6fba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6fbe:	fa43 f305 	asr.w	r3, r3, r5
   b6fc2:	18c0      	adds	r0, r0, r3
   b6fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6fcc:	d507      	bpl.n	b6fde <__adddf3+0xe6>
   b6fce:	f04f 0e00 	mov.w	lr, #0
   b6fd2:	f1dc 0c00 	rsbs	ip, ip, #0
   b6fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6fda:	eb6e 0101 	sbc.w	r1, lr, r1
   b6fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6fe2:	d31b      	bcc.n	b701c <__adddf3+0x124>
   b6fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6fe8:	d30c      	bcc.n	b7004 <__adddf3+0x10c>
   b6fea:	0849      	lsrs	r1, r1, #1
   b6fec:	ea5f 0030 	movs.w	r0, r0, rrx
   b6ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6ff4:	f104 0401 	add.w	r4, r4, #1
   b6ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7000:	f080 809a 	bcs.w	b7138 <__adddf3+0x240>
   b7004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7008:	bf08      	it	eq
   b700a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b700e:	f150 0000 	adcs.w	r0, r0, #0
   b7012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7016:	ea41 0105 	orr.w	r1, r1, r5
   b701a:	bd30      	pop	{r4, r5, pc}
   b701c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7020:	4140      	adcs	r0, r0
   b7022:	eb41 0101 	adc.w	r1, r1, r1
   b7026:	3c01      	subs	r4, #1
   b7028:	bf28      	it	cs
   b702a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b702e:	d2e9      	bcs.n	b7004 <__adddf3+0x10c>
   b7030:	f091 0f00 	teq	r1, #0
   b7034:	bf04      	itt	eq
   b7036:	4601      	moveq	r1, r0
   b7038:	2000      	moveq	r0, #0
   b703a:	fab1 f381 	clz	r3, r1
   b703e:	bf08      	it	eq
   b7040:	3320      	addeq	r3, #32
   b7042:	f1a3 030b 	sub.w	r3, r3, #11
   b7046:	f1b3 0220 	subs.w	r2, r3, #32
   b704a:	da0c      	bge.n	b7066 <__adddf3+0x16e>
   b704c:	320c      	adds	r2, #12
   b704e:	dd08      	ble.n	b7062 <__adddf3+0x16a>
   b7050:	f102 0c14 	add.w	ip, r2, #20
   b7054:	f1c2 020c 	rsb	r2, r2, #12
   b7058:	fa01 f00c 	lsl.w	r0, r1, ip
   b705c:	fa21 f102 	lsr.w	r1, r1, r2
   b7060:	e00c      	b.n	b707c <__adddf3+0x184>
   b7062:	f102 0214 	add.w	r2, r2, #20
   b7066:	bfd8      	it	le
   b7068:	f1c2 0c20 	rsble	ip, r2, #32
   b706c:	fa01 f102 	lsl.w	r1, r1, r2
   b7070:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7074:	bfdc      	itt	le
   b7076:	ea41 010c 	orrle.w	r1, r1, ip
   b707a:	4090      	lslle	r0, r2
   b707c:	1ae4      	subs	r4, r4, r3
   b707e:	bfa2      	ittt	ge
   b7080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7084:	4329      	orrge	r1, r5
   b7086:	bd30      	popge	{r4, r5, pc}
   b7088:	ea6f 0404 	mvn.w	r4, r4
   b708c:	3c1f      	subs	r4, #31
   b708e:	da1c      	bge.n	b70ca <__adddf3+0x1d2>
   b7090:	340c      	adds	r4, #12
   b7092:	dc0e      	bgt.n	b70b2 <__adddf3+0x1ba>
   b7094:	f104 0414 	add.w	r4, r4, #20
   b7098:	f1c4 0220 	rsb	r2, r4, #32
   b709c:	fa20 f004 	lsr.w	r0, r0, r4
   b70a0:	fa01 f302 	lsl.w	r3, r1, r2
   b70a4:	ea40 0003 	orr.w	r0, r0, r3
   b70a8:	fa21 f304 	lsr.w	r3, r1, r4
   b70ac:	ea45 0103 	orr.w	r1, r5, r3
   b70b0:	bd30      	pop	{r4, r5, pc}
   b70b2:	f1c4 040c 	rsb	r4, r4, #12
   b70b6:	f1c4 0220 	rsb	r2, r4, #32
   b70ba:	fa20 f002 	lsr.w	r0, r0, r2
   b70be:	fa01 f304 	lsl.w	r3, r1, r4
   b70c2:	ea40 0003 	orr.w	r0, r0, r3
   b70c6:	4629      	mov	r1, r5
   b70c8:	bd30      	pop	{r4, r5, pc}
   b70ca:	fa21 f004 	lsr.w	r0, r1, r4
   b70ce:	4629      	mov	r1, r5
   b70d0:	bd30      	pop	{r4, r5, pc}
   b70d2:	f094 0f00 	teq	r4, #0
   b70d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b70da:	bf06      	itte	eq
   b70dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b70e0:	3401      	addeq	r4, #1
   b70e2:	3d01      	subne	r5, #1
   b70e4:	e74e      	b.n	b6f84 <__adddf3+0x8c>
   b70e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b70ea:	bf18      	it	ne
   b70ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b70f0:	d029      	beq.n	b7146 <__adddf3+0x24e>
   b70f2:	ea94 0f05 	teq	r4, r5
   b70f6:	bf08      	it	eq
   b70f8:	ea90 0f02 	teqeq	r0, r2
   b70fc:	d005      	beq.n	b710a <__adddf3+0x212>
   b70fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b7102:	bf04      	itt	eq
   b7104:	4619      	moveq	r1, r3
   b7106:	4610      	moveq	r0, r2
   b7108:	bd30      	pop	{r4, r5, pc}
   b710a:	ea91 0f03 	teq	r1, r3
   b710e:	bf1e      	ittt	ne
   b7110:	2100      	movne	r1, #0
   b7112:	2000      	movne	r0, #0
   b7114:	bd30      	popne	{r4, r5, pc}
   b7116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b711a:	d105      	bne.n	b7128 <__adddf3+0x230>
   b711c:	0040      	lsls	r0, r0, #1
   b711e:	4149      	adcs	r1, r1
   b7120:	bf28      	it	cs
   b7122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7126:	bd30      	pop	{r4, r5, pc}
   b7128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b712c:	bf3c      	itt	cc
   b712e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7132:	bd30      	popcc	{r4, r5, pc}
   b7134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b713c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7140:	f04f 0000 	mov.w	r0, #0
   b7144:	bd30      	pop	{r4, r5, pc}
   b7146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b714a:	bf1a      	itte	ne
   b714c:	4619      	movne	r1, r3
   b714e:	4610      	movne	r0, r2
   b7150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7154:	bf1c      	itt	ne
   b7156:	460b      	movne	r3, r1
   b7158:	4602      	movne	r2, r0
   b715a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b715e:	bf06      	itte	eq
   b7160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7164:	ea91 0f03 	teqeq	r1, r3
   b7168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b716c:	bd30      	pop	{r4, r5, pc}
   b716e:	bf00      	nop

000b7170 <__aeabi_ui2d>:
   b7170:	f090 0f00 	teq	r0, #0
   b7174:	bf04      	itt	eq
   b7176:	2100      	moveq	r1, #0
   b7178:	4770      	bxeq	lr
   b717a:	b530      	push	{r4, r5, lr}
   b717c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7180:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7184:	f04f 0500 	mov.w	r5, #0
   b7188:	f04f 0100 	mov.w	r1, #0
   b718c:	e750      	b.n	b7030 <__adddf3+0x138>
   b718e:	bf00      	nop

000b7190 <__aeabi_i2d>:
   b7190:	f090 0f00 	teq	r0, #0
   b7194:	bf04      	itt	eq
   b7196:	2100      	moveq	r1, #0
   b7198:	4770      	bxeq	lr
   b719a:	b530      	push	{r4, r5, lr}
   b719c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b71a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b71a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b71a8:	bf48      	it	mi
   b71aa:	4240      	negmi	r0, r0
   b71ac:	f04f 0100 	mov.w	r1, #0
   b71b0:	e73e      	b.n	b7030 <__adddf3+0x138>
   b71b2:	bf00      	nop

000b71b4 <__aeabi_f2d>:
   b71b4:	0042      	lsls	r2, r0, #1
   b71b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b71ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b71be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b71c2:	bf1f      	itttt	ne
   b71c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b71c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b71cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b71d0:	4770      	bxne	lr
   b71d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b71d6:	bf08      	it	eq
   b71d8:	4770      	bxeq	lr
   b71da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b71de:	bf04      	itt	eq
   b71e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b71e4:	4770      	bxeq	lr
   b71e6:	b530      	push	{r4, r5, lr}
   b71e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b71ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b71f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b71f4:	e71c      	b.n	b7030 <__adddf3+0x138>
   b71f6:	bf00      	nop

000b71f8 <__aeabi_ul2d>:
   b71f8:	ea50 0201 	orrs.w	r2, r0, r1
   b71fc:	bf08      	it	eq
   b71fe:	4770      	bxeq	lr
   b7200:	b530      	push	{r4, r5, lr}
   b7202:	f04f 0500 	mov.w	r5, #0
   b7206:	e00a      	b.n	b721e <__aeabi_l2d+0x16>

000b7208 <__aeabi_l2d>:
   b7208:	ea50 0201 	orrs.w	r2, r0, r1
   b720c:	bf08      	it	eq
   b720e:	4770      	bxeq	lr
   b7210:	b530      	push	{r4, r5, lr}
   b7212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7216:	d502      	bpl.n	b721e <__aeabi_l2d+0x16>
   b7218:	4240      	negs	r0, r0
   b721a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b721e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7222:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b722a:	f43f aed8 	beq.w	b6fde <__adddf3+0xe6>
   b722e:	f04f 0203 	mov.w	r2, #3
   b7232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7236:	bf18      	it	ne
   b7238:	3203      	addne	r2, #3
   b723a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b723e:	bf18      	it	ne
   b7240:	3203      	addne	r2, #3
   b7242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7246:	f1c2 0320 	rsb	r3, r2, #32
   b724a:	fa00 fc03 	lsl.w	ip, r0, r3
   b724e:	fa20 f002 	lsr.w	r0, r0, r2
   b7252:	fa01 fe03 	lsl.w	lr, r1, r3
   b7256:	ea40 000e 	orr.w	r0, r0, lr
   b725a:	fa21 f102 	lsr.w	r1, r1, r2
   b725e:	4414      	add	r4, r2
   b7260:	e6bd      	b.n	b6fde <__adddf3+0xe6>
   b7262:	bf00      	nop

000b7264 <__aeabi_dmul>:
   b7264:	b570      	push	{r4, r5, r6, lr}
   b7266:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b726a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b726e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7272:	bf1d      	ittte	ne
   b7274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7278:	ea94 0f0c 	teqne	r4, ip
   b727c:	ea95 0f0c 	teqne	r5, ip
   b7280:	f000 f8de 	bleq	b7440 <__aeabi_dmul+0x1dc>
   b7284:	442c      	add	r4, r5
   b7286:	ea81 0603 	eor.w	r6, r1, r3
   b728a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b728e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7296:	bf18      	it	ne
   b7298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b729c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b72a4:	d038      	beq.n	b7318 <__aeabi_dmul+0xb4>
   b72a6:	fba0 ce02 	umull	ip, lr, r0, r2
   b72aa:	f04f 0500 	mov.w	r5, #0
   b72ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b72b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b72b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b72ba:	f04f 0600 	mov.w	r6, #0
   b72be:	fbe1 5603 	umlal	r5, r6, r1, r3
   b72c2:	f09c 0f00 	teq	ip, #0
   b72c6:	bf18      	it	ne
   b72c8:	f04e 0e01 	orrne.w	lr, lr, #1
   b72cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b72d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b72d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b72d8:	d204      	bcs.n	b72e4 <__aeabi_dmul+0x80>
   b72da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b72de:	416d      	adcs	r5, r5
   b72e0:	eb46 0606 	adc.w	r6, r6, r6
   b72e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b72e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b72ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b72f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b72f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b72f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b72fc:	bf88      	it	hi
   b72fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7302:	d81e      	bhi.n	b7342 <__aeabi_dmul+0xde>
   b7304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7308:	bf08      	it	eq
   b730a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b730e:	f150 0000 	adcs.w	r0, r0, #0
   b7312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7316:	bd70      	pop	{r4, r5, r6, pc}
   b7318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b731c:	ea46 0101 	orr.w	r1, r6, r1
   b7320:	ea40 0002 	orr.w	r0, r0, r2
   b7324:	ea81 0103 	eor.w	r1, r1, r3
   b7328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b732c:	bfc2      	ittt	gt
   b732e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7336:	bd70      	popgt	{r4, r5, r6, pc}
   b7338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b733c:	f04f 0e00 	mov.w	lr, #0
   b7340:	3c01      	subs	r4, #1
   b7342:	f300 80ab 	bgt.w	b749c <__aeabi_dmul+0x238>
   b7346:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b734a:	bfde      	ittt	le
   b734c:	2000      	movle	r0, #0
   b734e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7352:	bd70      	pople	{r4, r5, r6, pc}
   b7354:	f1c4 0400 	rsb	r4, r4, #0
   b7358:	3c20      	subs	r4, #32
   b735a:	da35      	bge.n	b73c8 <__aeabi_dmul+0x164>
   b735c:	340c      	adds	r4, #12
   b735e:	dc1b      	bgt.n	b7398 <__aeabi_dmul+0x134>
   b7360:	f104 0414 	add.w	r4, r4, #20
   b7364:	f1c4 0520 	rsb	r5, r4, #32
   b7368:	fa00 f305 	lsl.w	r3, r0, r5
   b736c:	fa20 f004 	lsr.w	r0, r0, r4
   b7370:	fa01 f205 	lsl.w	r2, r1, r5
   b7374:	ea40 0002 	orr.w	r0, r0, r2
   b7378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b737c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7384:	fa21 f604 	lsr.w	r6, r1, r4
   b7388:	eb42 0106 	adc.w	r1, r2, r6
   b738c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7390:	bf08      	it	eq
   b7392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7396:	bd70      	pop	{r4, r5, r6, pc}
   b7398:	f1c4 040c 	rsb	r4, r4, #12
   b739c:	f1c4 0520 	rsb	r5, r4, #32
   b73a0:	fa00 f304 	lsl.w	r3, r0, r4
   b73a4:	fa20 f005 	lsr.w	r0, r0, r5
   b73a8:	fa01 f204 	lsl.w	r2, r1, r4
   b73ac:	ea40 0002 	orr.w	r0, r0, r2
   b73b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b73b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b73b8:	f141 0100 	adc.w	r1, r1, #0
   b73bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b73c0:	bf08      	it	eq
   b73c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b73c6:	bd70      	pop	{r4, r5, r6, pc}
   b73c8:	f1c4 0520 	rsb	r5, r4, #32
   b73cc:	fa00 f205 	lsl.w	r2, r0, r5
   b73d0:	ea4e 0e02 	orr.w	lr, lr, r2
   b73d4:	fa20 f304 	lsr.w	r3, r0, r4
   b73d8:	fa01 f205 	lsl.w	r2, r1, r5
   b73dc:	ea43 0302 	orr.w	r3, r3, r2
   b73e0:	fa21 f004 	lsr.w	r0, r1, r4
   b73e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b73e8:	fa21 f204 	lsr.w	r2, r1, r4
   b73ec:	ea20 0002 	bic.w	r0, r0, r2
   b73f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b73f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b73f8:	bf08      	it	eq
   b73fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b73fe:	bd70      	pop	{r4, r5, r6, pc}
   b7400:	f094 0f00 	teq	r4, #0
   b7404:	d10f      	bne.n	b7426 <__aeabi_dmul+0x1c2>
   b7406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b740a:	0040      	lsls	r0, r0, #1
   b740c:	eb41 0101 	adc.w	r1, r1, r1
   b7410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7414:	bf08      	it	eq
   b7416:	3c01      	subeq	r4, #1
   b7418:	d0f7      	beq.n	b740a <__aeabi_dmul+0x1a6>
   b741a:	ea41 0106 	orr.w	r1, r1, r6
   b741e:	f095 0f00 	teq	r5, #0
   b7422:	bf18      	it	ne
   b7424:	4770      	bxne	lr
   b7426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b742a:	0052      	lsls	r2, r2, #1
   b742c:	eb43 0303 	adc.w	r3, r3, r3
   b7430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7434:	bf08      	it	eq
   b7436:	3d01      	subeq	r5, #1
   b7438:	d0f7      	beq.n	b742a <__aeabi_dmul+0x1c6>
   b743a:	ea43 0306 	orr.w	r3, r3, r6
   b743e:	4770      	bx	lr
   b7440:	ea94 0f0c 	teq	r4, ip
   b7444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7448:	bf18      	it	ne
   b744a:	ea95 0f0c 	teqne	r5, ip
   b744e:	d00c      	beq.n	b746a <__aeabi_dmul+0x206>
   b7450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7454:	bf18      	it	ne
   b7456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b745a:	d1d1      	bne.n	b7400 <__aeabi_dmul+0x19c>
   b745c:	ea81 0103 	eor.w	r1, r1, r3
   b7460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7464:	f04f 0000 	mov.w	r0, #0
   b7468:	bd70      	pop	{r4, r5, r6, pc}
   b746a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b746e:	bf06      	itte	eq
   b7470:	4610      	moveq	r0, r2
   b7472:	4619      	moveq	r1, r3
   b7474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7478:	d019      	beq.n	b74ae <__aeabi_dmul+0x24a>
   b747a:	ea94 0f0c 	teq	r4, ip
   b747e:	d102      	bne.n	b7486 <__aeabi_dmul+0x222>
   b7480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7484:	d113      	bne.n	b74ae <__aeabi_dmul+0x24a>
   b7486:	ea95 0f0c 	teq	r5, ip
   b748a:	d105      	bne.n	b7498 <__aeabi_dmul+0x234>
   b748c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7490:	bf1c      	itt	ne
   b7492:	4610      	movne	r0, r2
   b7494:	4619      	movne	r1, r3
   b7496:	d10a      	bne.n	b74ae <__aeabi_dmul+0x24a>
   b7498:	ea81 0103 	eor.w	r1, r1, r3
   b749c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b74a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b74a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b74a8:	f04f 0000 	mov.w	r0, #0
   b74ac:	bd70      	pop	{r4, r5, r6, pc}
   b74ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b74b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b74b6:	bd70      	pop	{r4, r5, r6, pc}

000b74b8 <__aeabi_ddiv>:
   b74b8:	b570      	push	{r4, r5, r6, lr}
   b74ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b74be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b74c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b74c6:	bf1d      	ittte	ne
   b74c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b74cc:	ea94 0f0c 	teqne	r4, ip
   b74d0:	ea95 0f0c 	teqne	r5, ip
   b74d4:	f000 f8a7 	bleq	b7626 <__aeabi_ddiv+0x16e>
   b74d8:	eba4 0405 	sub.w	r4, r4, r5
   b74dc:	ea81 0e03 	eor.w	lr, r1, r3
   b74e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b74e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b74e8:	f000 8088 	beq.w	b75fc <__aeabi_ddiv+0x144>
   b74ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b74f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b74f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b74f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b74fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7508:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b750c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7510:	429d      	cmp	r5, r3
   b7512:	bf08      	it	eq
   b7514:	4296      	cmpeq	r6, r2
   b7516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b751a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b751e:	d202      	bcs.n	b7526 <__aeabi_ddiv+0x6e>
   b7520:	085b      	lsrs	r3, r3, #1
   b7522:	ea4f 0232 	mov.w	r2, r2, rrx
   b7526:	1ab6      	subs	r6, r6, r2
   b7528:	eb65 0503 	sbc.w	r5, r5, r3
   b752c:	085b      	lsrs	r3, r3, #1
   b752e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b753a:	ebb6 0e02 	subs.w	lr, r6, r2
   b753e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7542:	bf22      	ittt	cs
   b7544:	1ab6      	subcs	r6, r6, r2
   b7546:	4675      	movcs	r5, lr
   b7548:	ea40 000c 	orrcs.w	r0, r0, ip
   b754c:	085b      	lsrs	r3, r3, #1
   b754e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7552:	ebb6 0e02 	subs.w	lr, r6, r2
   b7556:	eb75 0e03 	sbcs.w	lr, r5, r3
   b755a:	bf22      	ittt	cs
   b755c:	1ab6      	subcs	r6, r6, r2
   b755e:	4675      	movcs	r5, lr
   b7560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7564:	085b      	lsrs	r3, r3, #1
   b7566:	ea4f 0232 	mov.w	r2, r2, rrx
   b756a:	ebb6 0e02 	subs.w	lr, r6, r2
   b756e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7572:	bf22      	ittt	cs
   b7574:	1ab6      	subcs	r6, r6, r2
   b7576:	4675      	movcs	r5, lr
   b7578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b757c:	085b      	lsrs	r3, r3, #1
   b757e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7582:	ebb6 0e02 	subs.w	lr, r6, r2
   b7586:	eb75 0e03 	sbcs.w	lr, r5, r3
   b758a:	bf22      	ittt	cs
   b758c:	1ab6      	subcs	r6, r6, r2
   b758e:	4675      	movcs	r5, lr
   b7590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7594:	ea55 0e06 	orrs.w	lr, r5, r6
   b7598:	d018      	beq.n	b75cc <__aeabi_ddiv+0x114>
   b759a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b759e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b75a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b75a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b75aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b75ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b75b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b75b6:	d1c0      	bne.n	b753a <__aeabi_ddiv+0x82>
   b75b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b75bc:	d10b      	bne.n	b75d6 <__aeabi_ddiv+0x11e>
   b75be:	ea41 0100 	orr.w	r1, r1, r0
   b75c2:	f04f 0000 	mov.w	r0, #0
   b75c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b75ca:	e7b6      	b.n	b753a <__aeabi_ddiv+0x82>
   b75cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b75d0:	bf04      	itt	eq
   b75d2:	4301      	orreq	r1, r0
   b75d4:	2000      	moveq	r0, #0
   b75d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b75da:	bf88      	it	hi
   b75dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b75e0:	f63f aeaf 	bhi.w	b7342 <__aeabi_dmul+0xde>
   b75e4:	ebb5 0c03 	subs.w	ip, r5, r3
   b75e8:	bf04      	itt	eq
   b75ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b75ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b75f2:	f150 0000 	adcs.w	r0, r0, #0
   b75f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b75fa:	bd70      	pop	{r4, r5, r6, pc}
   b75fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7608:	bfc2      	ittt	gt
   b760a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b760e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7612:	bd70      	popgt	{r4, r5, r6, pc}
   b7614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7618:	f04f 0e00 	mov.w	lr, #0
   b761c:	3c01      	subs	r4, #1
   b761e:	e690      	b.n	b7342 <__aeabi_dmul+0xde>
   b7620:	ea45 0e06 	orr.w	lr, r5, r6
   b7624:	e68d      	b.n	b7342 <__aeabi_dmul+0xde>
   b7626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b762a:	ea94 0f0c 	teq	r4, ip
   b762e:	bf08      	it	eq
   b7630:	ea95 0f0c 	teqeq	r5, ip
   b7634:	f43f af3b 	beq.w	b74ae <__aeabi_dmul+0x24a>
   b7638:	ea94 0f0c 	teq	r4, ip
   b763c:	d10a      	bne.n	b7654 <__aeabi_ddiv+0x19c>
   b763e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7642:	f47f af34 	bne.w	b74ae <__aeabi_dmul+0x24a>
   b7646:	ea95 0f0c 	teq	r5, ip
   b764a:	f47f af25 	bne.w	b7498 <__aeabi_dmul+0x234>
   b764e:	4610      	mov	r0, r2
   b7650:	4619      	mov	r1, r3
   b7652:	e72c      	b.n	b74ae <__aeabi_dmul+0x24a>
   b7654:	ea95 0f0c 	teq	r5, ip
   b7658:	d106      	bne.n	b7668 <__aeabi_ddiv+0x1b0>
   b765a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b765e:	f43f aefd 	beq.w	b745c <__aeabi_dmul+0x1f8>
   b7662:	4610      	mov	r0, r2
   b7664:	4619      	mov	r1, r3
   b7666:	e722      	b.n	b74ae <__aeabi_dmul+0x24a>
   b7668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b766c:	bf18      	it	ne
   b766e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7672:	f47f aec5 	bne.w	b7400 <__aeabi_dmul+0x19c>
   b7676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b767a:	f47f af0d 	bne.w	b7498 <__aeabi_dmul+0x234>
   b767e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7682:	f47f aeeb 	bne.w	b745c <__aeabi_dmul+0x1f8>
   b7686:	e712      	b.n	b74ae <__aeabi_dmul+0x24a>

000b7688 <__gedf2>:
   b7688:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b768c:	e006      	b.n	b769c <__cmpdf2+0x4>
   b768e:	bf00      	nop

000b7690 <__ledf2>:
   b7690:	f04f 0c01 	mov.w	ip, #1
   b7694:	e002      	b.n	b769c <__cmpdf2+0x4>
   b7696:	bf00      	nop

000b7698 <__cmpdf2>:
   b7698:	f04f 0c01 	mov.w	ip, #1
   b769c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b76a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b76a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b76a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b76ac:	bf18      	it	ne
   b76ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b76b2:	d01b      	beq.n	b76ec <__cmpdf2+0x54>
   b76b4:	b001      	add	sp, #4
   b76b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b76ba:	bf0c      	ite	eq
   b76bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b76c0:	ea91 0f03 	teqne	r1, r3
   b76c4:	bf02      	ittt	eq
   b76c6:	ea90 0f02 	teqeq	r0, r2
   b76ca:	2000      	moveq	r0, #0
   b76cc:	4770      	bxeq	lr
   b76ce:	f110 0f00 	cmn.w	r0, #0
   b76d2:	ea91 0f03 	teq	r1, r3
   b76d6:	bf58      	it	pl
   b76d8:	4299      	cmppl	r1, r3
   b76da:	bf08      	it	eq
   b76dc:	4290      	cmpeq	r0, r2
   b76de:	bf2c      	ite	cs
   b76e0:	17d8      	asrcs	r0, r3, #31
   b76e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b76e6:	f040 0001 	orr.w	r0, r0, #1
   b76ea:	4770      	bx	lr
   b76ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b76f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b76f4:	d102      	bne.n	b76fc <__cmpdf2+0x64>
   b76f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b76fa:	d107      	bne.n	b770c <__cmpdf2+0x74>
   b76fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7704:	d1d6      	bne.n	b76b4 <__cmpdf2+0x1c>
   b7706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b770a:	d0d3      	beq.n	b76b4 <__cmpdf2+0x1c>
   b770c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7710:	4770      	bx	lr
   b7712:	bf00      	nop

000b7714 <__aeabi_cdrcmple>:
   b7714:	4684      	mov	ip, r0
   b7716:	4610      	mov	r0, r2
   b7718:	4662      	mov	r2, ip
   b771a:	468c      	mov	ip, r1
   b771c:	4619      	mov	r1, r3
   b771e:	4663      	mov	r3, ip
   b7720:	e000      	b.n	b7724 <__aeabi_cdcmpeq>
   b7722:	bf00      	nop

000b7724 <__aeabi_cdcmpeq>:
   b7724:	b501      	push	{r0, lr}
   b7726:	f7ff ffb7 	bl	b7698 <__cmpdf2>
   b772a:	2800      	cmp	r0, #0
   b772c:	bf48      	it	mi
   b772e:	f110 0f00 	cmnmi.w	r0, #0
   b7732:	bd01      	pop	{r0, pc}

000b7734 <__aeabi_dcmpeq>:
   b7734:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7738:	f7ff fff4 	bl	b7724 <__aeabi_cdcmpeq>
   b773c:	bf0c      	ite	eq
   b773e:	2001      	moveq	r0, #1
   b7740:	2000      	movne	r0, #0
   b7742:	f85d fb08 	ldr.w	pc, [sp], #8
   b7746:	bf00      	nop

000b7748 <__aeabi_dcmplt>:
   b7748:	f84d ed08 	str.w	lr, [sp, #-8]!
   b774c:	f7ff ffea 	bl	b7724 <__aeabi_cdcmpeq>
   b7750:	bf34      	ite	cc
   b7752:	2001      	movcc	r0, #1
   b7754:	2000      	movcs	r0, #0
   b7756:	f85d fb08 	ldr.w	pc, [sp], #8
   b775a:	bf00      	nop

000b775c <__aeabi_dcmple>:
   b775c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7760:	f7ff ffe0 	bl	b7724 <__aeabi_cdcmpeq>
   b7764:	bf94      	ite	ls
   b7766:	2001      	movls	r0, #1
   b7768:	2000      	movhi	r0, #0
   b776a:	f85d fb08 	ldr.w	pc, [sp], #8
   b776e:	bf00      	nop

000b7770 <__aeabi_dcmpge>:
   b7770:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7774:	f7ff ffce 	bl	b7714 <__aeabi_cdrcmple>
   b7778:	bf94      	ite	ls
   b777a:	2001      	movls	r0, #1
   b777c:	2000      	movhi	r0, #0
   b777e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7782:	bf00      	nop

000b7784 <__aeabi_dcmpgt>:
   b7784:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7788:	f7ff ffc4 	bl	b7714 <__aeabi_cdrcmple>
   b778c:	bf34      	ite	cc
   b778e:	2001      	movcc	r0, #1
   b7790:	2000      	movcs	r0, #0
   b7792:	f85d fb08 	ldr.w	pc, [sp], #8
   b7796:	bf00      	nop

000b7798 <__aeabi_dcmpun>:
   b7798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b779c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b77a0:	d102      	bne.n	b77a8 <__aeabi_dcmpun+0x10>
   b77a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b77a6:	d10a      	bne.n	b77be <__aeabi_dcmpun+0x26>
   b77a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b77ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b77b0:	d102      	bne.n	b77b8 <__aeabi_dcmpun+0x20>
   b77b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b77b6:	d102      	bne.n	b77be <__aeabi_dcmpun+0x26>
   b77b8:	f04f 0000 	mov.w	r0, #0
   b77bc:	4770      	bx	lr
   b77be:	f04f 0001 	mov.w	r0, #1
   b77c2:	4770      	bx	lr

000b77c4 <__aeabi_d2f>:
   b77c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b77c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b77cc:	bf24      	itt	cs
   b77ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b77d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b77d6:	d90d      	bls.n	b77f4 <__aeabi_d2f+0x30>
   b77d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b77dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b77e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b77e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b77e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b77ec:	bf08      	it	eq
   b77ee:	f020 0001 	biceq.w	r0, r0, #1
   b77f2:	4770      	bx	lr
   b77f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b77f8:	d121      	bne.n	b783e <__aeabi_d2f+0x7a>
   b77fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b77fe:	bfbc      	itt	lt
   b7800:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7804:	4770      	bxlt	lr
   b7806:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b780a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b780e:	f1c2 0218 	rsb	r2, r2, #24
   b7812:	f1c2 0c20 	rsb	ip, r2, #32
   b7816:	fa10 f30c 	lsls.w	r3, r0, ip
   b781a:	fa20 f002 	lsr.w	r0, r0, r2
   b781e:	bf18      	it	ne
   b7820:	f040 0001 	orrne.w	r0, r0, #1
   b7824:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7828:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b782c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7830:	ea40 000c 	orr.w	r0, r0, ip
   b7834:	fa23 f302 	lsr.w	r3, r3, r2
   b7838:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b783c:	e7cc      	b.n	b77d8 <__aeabi_d2f+0x14>
   b783e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7842:	d107      	bne.n	b7854 <__aeabi_d2f+0x90>
   b7844:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7848:	bf1e      	ittt	ne
   b784a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b784e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7852:	4770      	bxne	lr
   b7854:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7858:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b785c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7860:	4770      	bx	lr
   b7862:	bf00      	nop

000b7864 <atexit>:
   b7864:	2300      	movs	r3, #0
   b7866:	4601      	mov	r1, r0
   b7868:	461a      	mov	r2, r3
   b786a:	4618      	mov	r0, r3
   b786c:	f000 b84c 	b.w	b7908 <__register_exitproc>

000b7870 <memcpy>:
   b7870:	440a      	add	r2, r1
   b7872:	4291      	cmp	r1, r2
   b7874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7878:	d100      	bne.n	b787c <memcpy+0xc>
   b787a:	4770      	bx	lr
   b787c:	b510      	push	{r4, lr}
   b787e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7882:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7886:	4291      	cmp	r1, r2
   b7888:	d1f9      	bne.n	b787e <memcpy+0xe>
   b788a:	bd10      	pop	{r4, pc}

000b788c <memset>:
   b788c:	4402      	add	r2, r0
   b788e:	4603      	mov	r3, r0
   b7890:	4293      	cmp	r3, r2
   b7892:	d100      	bne.n	b7896 <memset+0xa>
   b7894:	4770      	bx	lr
   b7896:	f803 1b01 	strb.w	r1, [r3], #1
   b789a:	e7f9      	b.n	b7890 <memset+0x4>

000b789c <srand>:
   b789c:	b538      	push	{r3, r4, r5, lr}
   b789e:	4b10      	ldr	r3, [pc, #64]	; (b78e0 <srand+0x44>)
   b78a0:	681d      	ldr	r5, [r3, #0]
   b78a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b78a4:	4604      	mov	r4, r0
   b78a6:	b9b3      	cbnz	r3, b78d6 <srand+0x3a>
   b78a8:	2018      	movs	r0, #24
   b78aa:	f7fd fc6b 	bl	b5184 <malloc>
   b78ae:	4602      	mov	r2, r0
   b78b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b78b2:	b920      	cbnz	r0, b78be <srand+0x22>
   b78b4:	4b0b      	ldr	r3, [pc, #44]	; (b78e4 <srand+0x48>)
   b78b6:	480c      	ldr	r0, [pc, #48]	; (b78e8 <srand+0x4c>)
   b78b8:	2142      	movs	r1, #66	; 0x42
   b78ba:	f7fd fc83 	bl	b51c4 <__assert_func>
   b78be:	490b      	ldr	r1, [pc, #44]	; (b78ec <srand+0x50>)
   b78c0:	4b0b      	ldr	r3, [pc, #44]	; (b78f0 <srand+0x54>)
   b78c2:	e9c0 1300 	strd	r1, r3, [r0]
   b78c6:	4b0b      	ldr	r3, [pc, #44]	; (b78f4 <srand+0x58>)
   b78c8:	6083      	str	r3, [r0, #8]
   b78ca:	230b      	movs	r3, #11
   b78cc:	8183      	strh	r3, [r0, #12]
   b78ce:	2100      	movs	r1, #0
   b78d0:	2001      	movs	r0, #1
   b78d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b78d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b78d8:	2200      	movs	r2, #0
   b78da:	611c      	str	r4, [r3, #16]
   b78dc:	615a      	str	r2, [r3, #20]
   b78de:	bd38      	pop	{r3, r4, r5, pc}
   b78e0:	2003e618 	.word	0x2003e618
   b78e4:	000b8118 	.word	0x000b8118
   b78e8:	000b812f 	.word	0x000b812f
   b78ec:	abcd330e 	.word	0xabcd330e
   b78f0:	e66d1234 	.word	0xe66d1234
   b78f4:	0005deec 	.word	0x0005deec

000b78f8 <strlen>:
   b78f8:	4603      	mov	r3, r0
   b78fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b78fe:	2a00      	cmp	r2, #0
   b7900:	d1fb      	bne.n	b78fa <strlen+0x2>
   b7902:	1a18      	subs	r0, r3, r0
   b7904:	3801      	subs	r0, #1
   b7906:	4770      	bx	lr

000b7908 <__register_exitproc>:
   b7908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b790c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b79c8 <__register_exitproc+0xc0>
   b7910:	4606      	mov	r6, r0
   b7912:	f8d8 0000 	ldr.w	r0, [r8]
   b7916:	461f      	mov	r7, r3
   b7918:	460d      	mov	r5, r1
   b791a:	4691      	mov	r9, r2
   b791c:	f000 f856 	bl	b79cc <__retarget_lock_acquire_recursive>
   b7920:	4b25      	ldr	r3, [pc, #148]	; (b79b8 <__register_exitproc+0xb0>)
   b7922:	681c      	ldr	r4, [r3, #0]
   b7924:	b934      	cbnz	r4, b7934 <__register_exitproc+0x2c>
   b7926:	4c25      	ldr	r4, [pc, #148]	; (b79bc <__register_exitproc+0xb4>)
   b7928:	601c      	str	r4, [r3, #0]
   b792a:	4b25      	ldr	r3, [pc, #148]	; (b79c0 <__register_exitproc+0xb8>)
   b792c:	b113      	cbz	r3, b7934 <__register_exitproc+0x2c>
   b792e:	681b      	ldr	r3, [r3, #0]
   b7930:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7934:	6863      	ldr	r3, [r4, #4]
   b7936:	2b1f      	cmp	r3, #31
   b7938:	dd07      	ble.n	b794a <__register_exitproc+0x42>
   b793a:	f8d8 0000 	ldr.w	r0, [r8]
   b793e:	f000 f847 	bl	b79d0 <__retarget_lock_release_recursive>
   b7942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b794a:	b34e      	cbz	r6, b79a0 <__register_exitproc+0x98>
   b794c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7950:	b988      	cbnz	r0, b7976 <__register_exitproc+0x6e>
   b7952:	4b1c      	ldr	r3, [pc, #112]	; (b79c4 <__register_exitproc+0xbc>)
   b7954:	b923      	cbnz	r3, b7960 <__register_exitproc+0x58>
   b7956:	f8d8 0000 	ldr.w	r0, [r8]
   b795a:	f000 f838 	bl	b79ce <__retarget_lock_release>
   b795e:	e7f0      	b.n	b7942 <__register_exitproc+0x3a>
   b7960:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7964:	f7fd fc0e 	bl	b5184 <malloc>
   b7968:	2800      	cmp	r0, #0
   b796a:	d0f4      	beq.n	b7956 <__register_exitproc+0x4e>
   b796c:	2300      	movs	r3, #0
   b796e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7972:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7976:	6863      	ldr	r3, [r4, #4]
   b7978:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b797c:	2201      	movs	r2, #1
   b797e:	409a      	lsls	r2, r3
   b7980:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7984:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7988:	4313      	orrs	r3, r2
   b798a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b798e:	2e02      	cmp	r6, #2
   b7990:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7994:	bf02      	ittt	eq
   b7996:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b799a:	4313      	orreq	r3, r2
   b799c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b79a0:	6863      	ldr	r3, [r4, #4]
   b79a2:	f8d8 0000 	ldr.w	r0, [r8]
   b79a6:	1c5a      	adds	r2, r3, #1
   b79a8:	3302      	adds	r3, #2
   b79aa:	6062      	str	r2, [r4, #4]
   b79ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b79b0:	f000 f80e 	bl	b79d0 <__retarget_lock_release_recursive>
   b79b4:	2000      	movs	r0, #0
   b79b6:	e7c6      	b.n	b7946 <__register_exitproc+0x3e>
   b79b8:	2003e7e8 	.word	0x2003e7e8
   b79bc:	2003e75c 	.word	0x2003e75c
   b79c0:	00000000 	.word	0x00000000
   b79c4:	000b5185 	.word	0x000b5185
   b79c8:	2003e67c 	.word	0x2003e67c

000b79cc <__retarget_lock_acquire_recursive>:
   b79cc:	4770      	bx	lr

000b79ce <__retarget_lock_release>:
   b79ce:	4770      	bx	lr

000b79d0 <__retarget_lock_release_recursive>:
   b79d0:	4770      	bx	lr

000b79d2 <link_code_end>:
	...

000b79d4 <dynalib_user>:
   b79d4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b79e4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b79f4:	7620 7269 7574 6c61 5300 414d 5452 4853      virtual.SMARTSH
   b7a04:	504f 5300 6f6d 656b 6420 7465 6365 6574     OP.Smoke detecte
   b7a14:	2164                                         d!.

000b7a17 <_ZL4font>:
   b7a17:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7a27:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7a37:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7a47:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7a57:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7a67:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7a77:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7a87:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7a97:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7aa7:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7ab7:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7ac7:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7ad7:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7ae7:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7af7:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7b07:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7b17:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7b27:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7b37:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7b47:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7b57:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7b67:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7b77:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7b87:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7b97:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7ba7:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7bb7:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7bc7:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7bd7:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7be7:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7bf7:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7c07:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7c17:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7c27:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7c37:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7c47:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7c57:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7c67:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7c77:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7c87:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7c97:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7ca7:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b7cb7:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7cc7:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7cd7:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b7ce7:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7cf7:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b7d07:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b7d17:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b7d27:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7d37:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7d47:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7d57:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7d67:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7d77:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7d87:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b7d97:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b7da7:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b7db7:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b7dc7:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b7dd7:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b7de7:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b7df7:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b7e07:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b7e17:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b7e27:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b7e37:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b7e47:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7e57:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b7e67:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b7e77:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b7e87:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b7e97:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b7ea7:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b7eb7:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7ec7:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7ed7:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7ee7:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b7ef7:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b7f07:	0012 3c3c 3c3c 0000 0000 0000                ..<<<<.......

000b7f14 <_ZTV12Adafruit_GFX>:
	...
   b7f24:	45d1 000b 5599 000b 40a1 000b 42e9 000b     .E...U...@...B..
   b7f34:	440f 000b 442b 000b 43a7 000b 4445 000b     .D..+D...C..ED..
   b7f44:	447b 000b 4497 000b                         {D...D..

000b7f4c <_ZTV16Adafruit_SSD1306>:
	...
   b7f54:	4941 000b 49d1 000b 45d1 000b 5599 000b     AI...I...E...U..
   b7f64:	4945 000b 42e9 000b 47cd 000b 465d 000b     EI...B...G..]F..
   b7f74:	43a7 000b 4445 000b 447b 000b 4497 000b     .C..ED..{D...D..

000b7f84 <_ZTVN5spark13EthernetClassE>:
	...
   b7f8c:	525b 000b 5251 000b 5247 000b 523d 000b     [R..QR..GR..=R..
   b7f9c:	5231 000b 5225 000b 5475 000b 547d 000b     1R..%R..uT..}T..
   b7fac:	5219 000b 5211 000b 5207 000b 51fd 000b     .R...R...R...Q..
   b7fbc:	54ad 000b                                   .T..

000b7fc0 <_ZTV7TwoWire>:
	...
   b7fc8:	5279 000b 52c3 000b 529b 000b 527b 000b     yR...R...R..{R..
   b7fd8:	52a3 000b 52ab 000b 52b3 000b 52bb 000b     .R...R...R...R..

000b7fe8 <_ZTV9IPAddress>:
	...
   b7ff0:	5345 000b 5335 000b 5337 000b 7061 0070     ES..5S..7S..app.

000b8000 <_ZTVN5spark12NetworkClassE>:
	...
   b8008:	5435 000b 543f 000b 5449 000b 5453 000b     5T..?T..IT..ST..
   b8018:	545d 000b 5469 000b 5475 000b 547d 000b     ]T..iT..uT..}T..
   b8028:	5485 000b 5491 000b 5499 000b 54a3 000b     .T...T...T...T..
   b8038:	54ad 000b                                   .T..

000b803c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b803c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b804c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b805c:	6d69 0065                                   ime.

000b8060 <_ZTV11USARTSerial>:
	...
   b8068:	5869 000b 58d5 000b 58ad 000b 5599 000b     iX...X...X...U..
   b8078:	587d 000b 5899 000b 588b 000b 58a7 000b     }X...X...X...X..
   b8088:	586b 000b 586f 000b                         kX..oX..

000b8090 <_ZTV9USBSerial>:
	...
   b8098:	5913 000b 597b 000b 5951 000b 5599 000b     .Y..{Y..QY...U..
   b80a8:	5943 000b 5915 000b 5925 000b 5975 000b     CY...Y..%Y..uY..
   b80b8:	5935 000b 590d 000b                         5Y...Y..

000b80c0 <_ZTVN5spark9WiFiClassE>:
	...
   b80c8:	5a6b 000b 5a61 000b 5a57 000b 5a0d 000b     kZ..aZ..WZ...Z..
   b80d8:	5a4b 000b 5a3f 000b 5475 000b 547d 000b     KZ..?Z..uT..}T..
   b80e8:	5a33 000b 5a2b 000b 5a21 000b 5a17 000b     3Z..+Z..!Z...Z..
   b80f8:	54ad 000b                                   .T..

000b80fc <_ZSt7nothrow>:
	...

000b8108 <TWO52>:
   b8108:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8118:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8128:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8138:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b8148:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b8158:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b8168:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b8178:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b8188 <link_const_variable_data_end>:
   b8188:	000b42dd 	.word	0x000b42dd
   b818c:	000b51ed 	.word	0x000b51ed
   b8190:	000b5265 	.word	0x000b5265
   b8194:	000b5425 	.word	0x000b5425
   b8198:	000b5585 	.word	0x000b5585
   b819c:	000b56a5 	.word	0x000b56a5
   b81a0:	000b5831 	.word	0x000b5831
   b81a4:	000b5855 	.word	0x000b5855
   b81a8:	000b5a75 	.word	0x000b5a75

000b81ac <link_constructors_end>:
   b81ac:	00000000 	.word	0x00000000
