
/Users/jamesblack/Documents/IoT/smartshop/SmartShop_GroveDustSensor/target/4.0.2/argon/SmartShop_GroveDustSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003000  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7020  000b7020  00007020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7044  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e620  000b7048  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000158  2003e698  2003e698  0002e698  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b70c0  000b70c0  000270c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b70e8  000b70e8  000270e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e9860  00000000  00000000  000270ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ed55  00000000  00000000  0011094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000300e3  00000000  00000000  0011f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002560  00000000  00000000  0014f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008ee8  00000000  00000000  00151ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033145  00000000  00000000  0015abcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032227  00000000  00000000  0018dd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012d808  00000000  00000000  001bff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006b24  00000000  00000000  002ed740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fe1d 	bl	b6c70 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fe25 	bl	b6c8c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e620 	.word	0x2003e620
   b404c:	000b7048 	.word	0x000b7048
   b4050:	2003e698 	.word	0x2003e698
   b4054:	2003e698 	.word	0x2003e698
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 ff71 	bl	b4f48 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6ff8 	.word	0x000b6ff8
   b4080:	000b701c 	.word	0x000b701c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f829 	bl	b40e0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bf11 	b.w	b4eb8 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 ba77 	b.w	b4588 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 ba7d 	b.w	b4598 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
unsigned long lowpulseoccupancy = 0;
float ratio = 0;
float concentration = 0;
SYSTEM_MODE (SEMI_AUTOMATIC);
void setup() 
{
   b40b0:	b508      	push	{r3, lr}
    Serial.begin(9600);
   b40b2:	f000 fe7b 	bl	b4dac <_Z16_fetch_usbserialv>
   b40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ba:	f000 fe6b 	bl	b4d94 <_ZN9USBSerial5beginEl>
    pinMode(pin,INPUT);
   b40be:	4b05      	ldr	r3, [pc, #20]	; (b40d4 <setup+0x24>)
   b40c0:	2100      	movs	r1, #0
   b40c2:	8818      	ldrh	r0, [r3, #0]
   b40c4:	f000 ffb0 	bl	b5028 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40c8:	f000 f8ea 	bl	b42a0 <HAL_Timer_Get_Milli_Seconds>
    starttime = millis();//get the current time;
   b40cc:	4b02      	ldr	r3, [pc, #8]	; (b40d8 <setup+0x28>)
   b40ce:	6018      	str	r0, [r3, #0]
}
   b40d0:	bd08      	pop	{r3, pc}
   b40d2:	bf00      	nop
   b40d4:	2003e620 	.word	0x2003e620
   b40d8:	2003e6b4 	.word	0x2003e6b4
   b40dc:	00000000 	.word	0x00000000

000b40e0 <loop>:

void loop() 
{
   b40e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b40e4:	ed2d 8b02 	vpush	{d8}
    duration = pulseIn(pin, LOW);
   b40e8:	4b55      	ldr	r3, [pc, #340]	; (b4240 <loop+0x160>)
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b40ea:	4c56      	ldr	r4, [pc, #344]	; (b4244 <loop+0x164>)
    duration = pulseIn(pin, LOW);
   b40ec:	8818      	ldrh	r0, [r3, #0]

    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   b40ee:	f8df b170 	ldr.w	fp, [pc, #368]	; b4260 <loop+0x180>
    duration = pulseIn(pin, LOW);
   b40f2:	2100      	movs	r1, #0
   b40f4:	f000 ffa9 	bl	b504a <pulseIn>
   b40f8:	4b53      	ldr	r3, [pc, #332]	; (b4248 <loop+0x168>)
   b40fa:	6018      	str	r0, [r3, #0]
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b40fc:	6823      	ldr	r3, [r4, #0]
   b40fe:	4418      	add	r0, r3
   b4100:	6020      	str	r0, [r4, #0]
   b4102:	f000 f8cd 	bl	b42a0 <HAL_Timer_Get_Milli_Seconds>
    if ((millis()-starttime) > sampletime_ms)//if the sampel time == 30s
   b4106:	4b51      	ldr	r3, [pc, #324]	; (b424c <loop+0x16c>)
   b4108:	681d      	ldr	r5, [r3, #0]
   b410a:	f8db 3000 	ldr.w	r3, [fp]
   b410e:	1ac0      	subs	r0, r0, r3
   b4110:	42a8      	cmp	r0, r5
   b4112:	f240 8081 	bls.w	b4218 <loop+0x138>
    {
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   b4116:	6820      	ldr	r0, [r4, #0]
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   b4118:	f8df a148 	ldr.w	sl, [pc, #328]	; b4264 <loop+0x184>
        ratio = lowpulseoccupancy/(sampletime_ms*10.0);  // Integer percentage 0=>100
   b411c:	f002 f9e0 	bl	b64e0 <__aeabi_ui2d>
   b4120:	4606      	mov	r6, r0
   b4122:	4628      	mov	r0, r5
   b4124:	460f      	mov	r7, r1
   b4126:	f002 f9db 	bl	b64e0 <__aeabi_ui2d>
   b412a:	4b49      	ldr	r3, [pc, #292]	; (b4250 <loop+0x170>)
   b412c:	4d49      	ldr	r5, [pc, #292]	; (b4254 <loop+0x174>)
   b412e:	2200      	movs	r2, #0
   b4130:	f002 fa50 	bl	b65d4 <__aeabi_dmul>
   b4134:	4602      	mov	r2, r0
   b4136:	460b      	mov	r3, r1
   b4138:	4630      	mov	r0, r6
   b413a:	4639      	mov	r1, r7
   b413c:	f002 fb74 	bl	b6828 <__aeabi_ddiv>
   b4140:	f002 fd40 	bl	b6bc4 <__aeabi_d2f>
   b4144:	6028      	str	r0, [r5, #0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4146:	f002 f9ed 	bl	b6524 <__aeabi_f2d>
   b414a:	ed9f 1b35 	vldr	d1, [pc, #212]	; b4220 <loop+0x140>
   b414e:	ec41 0b10 	vmov	d0, r0, r1
   b4152:	f000 fffd 	bl	b5150 <pow>
        concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve
   b4156:	ed95 8a00 	vldr	s16, [r5]
   b415a:	ee18 0a10 	vmov	r0, s16
   b415e:	ec57 6b10 	vmov	r6, r7, d0
   b4162:	f002 f9df 	bl	b6524 <__aeabi_f2d>
   b4166:	a330      	add	r3, pc, #192	; (adr r3, b4228 <loop+0x148>)
   b4168:	e9d3 2300 	ldrd	r2, r3, [r3]
   b416c:	4680      	mov	r8, r0
   b416e:	4689      	mov	r9, r1
   b4170:	4630      	mov	r0, r6
   b4172:	4639      	mov	r1, r7
   b4174:	f002 fa2e 	bl	b65d4 <__aeabi_dmul>
   b4178:	4642      	mov	r2, r8
   b417a:	4606      	mov	r6, r0
   b417c:	460f      	mov	r7, r1
   b417e:	464b      	mov	r3, r9
   b4180:	4640      	mov	r0, r8
   b4182:	4649      	mov	r1, r9
   b4184:	f002 fa26 	bl	b65d4 <__aeabi_dmul>
   b4188:	a329      	add	r3, pc, #164	; (adr r3, b4230 <loop+0x150>)
   b418a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b418e:	f002 fa21 	bl	b65d4 <__aeabi_dmul>
   b4192:	4602      	mov	r2, r0
   b4194:	460b      	mov	r3, r1
   b4196:	4630      	mov	r0, r6
   b4198:	4639      	mov	r1, r7
   b419a:	f002 f863 	bl	b6264 <__aeabi_dsub>
   b419e:	eddf 7a2e 	vldr	s15, [pc, #184]	; b4258 <loop+0x178>
   b41a2:	ee68 7a27 	vmul.f32	s15, s16, s15
   b41a6:	4606      	mov	r6, r0
   b41a8:	ee17 0a90 	vmov	r0, s15
   b41ac:	460f      	mov	r7, r1
   b41ae:	f002 f9b9 	bl	b6524 <__aeabi_f2d>
   b41b2:	4602      	mov	r2, r0
   b41b4:	460b      	mov	r3, r1
   b41b6:	4630      	mov	r0, r6
   b41b8:	4639      	mov	r1, r7
   b41ba:	f002 f855 	bl	b6268 <__adddf3>
   b41be:	a31e      	add	r3, pc, #120	; (adr r3, b4238 <loop+0x158>)
   b41c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41c4:	f002 f850 	bl	b6268 <__adddf3>
   b41c8:	f002 fcfc 	bl	b6bc4 <__aeabi_d2f>
   b41cc:	f8ca 0000 	str.w	r0, [sl]
        Serial.print(lowpulseoccupancy);
   b41d0:	f000 fdec 	bl	b4dac <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41d4:	220a      	movs	r2, #10
   b41d6:	6821      	ldr	r1, [r4, #0]
   b41d8:	f000 fbfb 	bl	b49d2 <_ZN5Print11printNumberEmh>
        Serial.print(",");
   b41dc:	f000 fde6 	bl	b4dac <_Z16_fetch_usbserialv>
   b41e0:	491e      	ldr	r1, [pc, #120]	; (b425c <loop+0x17c>)
   b41e2:	f000 fbe3 	bl	b49ac <_ZN5Print5printEPKc>
        Serial.print(ratio);
   b41e6:	f000 fde1 	bl	b4dac <_Z16_fetch_usbserialv>
   b41ea:	ed95 0a00 	vldr	s0, [r5]
   b41ee:	2102      	movs	r1, #2
   b41f0:	f000 fcd6 	bl	b4ba0 <_ZN5Print5printEfi>
        Serial.print(",");
   b41f4:	f000 fdda 	bl	b4dac <_Z16_fetch_usbserialv>
   b41f8:	4918      	ldr	r1, [pc, #96]	; (b425c <loop+0x17c>)
   b41fa:	f000 fbd7 	bl	b49ac <_ZN5Print5printEPKc>
        Serial.println(concentration);
   b41fe:	f000 fdd5 	bl	b4dac <_Z16_fetch_usbserialv>
   b4202:	ed9a 0a00 	vldr	s0, [sl]
   b4206:	2102      	movs	r1, #2
   b4208:	f000 fce4 	bl	b4bd4 <_ZN5Print7printlnEfi>
        lowpulseoccupancy = 0;
   b420c:	2300      	movs	r3, #0
   b420e:	6023      	str	r3, [r4, #0]
   b4210:	f000 f846 	bl	b42a0 <HAL_Timer_Get_Milli_Seconds>
        starttime = millis();
   b4214:	f8cb 0000 	str.w	r0, [fp]
    }
}
   b4218:	ecbd 8b02 	vpop	{d8}
   b421c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4220:	00000000 	.word	0x00000000
   b4224:	40080000 	.word	0x40080000
   b4228:	9999999a 	.word	0x9999999a
   b422c:	3ff19999 	.word	0x3ff19999
   b4230:	66666666 	.word	0x66666666
   b4234:	400e6666 	.word	0x400e6666
   b4238:	3d70a3d7 	.word	0x3d70a3d7
   b423c:	3fe3d70a 	.word	0x3fe3d70a
   b4240:	2003e620 	.word	0x2003e620
   b4244:	2003e6ac 	.word	0x2003e6ac
   b4248:	2003e6a8 	.word	0x2003e6a8
   b424c:	2003e624 	.word	0x2003e624
   b4250:	40240000 	.word	0x40240000
   b4254:	2003e6b0 	.word	0x2003e6b0
   b4258:	44020000 	.word	0x44020000
   b425c:	000b6de8 	.word	0x000b6de8
   b4260:	2003e6b4 	.word	0x2003e6b4
   b4264:	2003e6a4 	.word	0x2003e6a4

000b4268 <_GLOBAL__sub_I_pin>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4268:	4b04      	ldr	r3, [pc, #16]	; (b427c <_GLOBAL__sub_I_pin+0x14>)
   b426a:	2200      	movs	r2, #0
   b426c:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4270:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4274:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4276:	2002      	movs	r0, #2
   b4278:	f000 b902 	b.w	b4480 <set_system_mode>
   b427c:	2003e698 	.word	0x2003e698

000b4280 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4280:	b508      	push	{r3, lr}
   b4282:	4b02      	ldr	r3, [pc, #8]	; (b428c <os_mutex_recursive_create+0xc>)
   b4284:	681b      	ldr	r3, [r3, #0]
   b4286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4288:	9301      	str	r3, [sp, #4]
   b428a:	bd08      	pop	{r3, pc}
   b428c:	00030248 	.word	0x00030248

000b4290 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4290:	b508      	push	{r3, lr}
   b4292:	4b02      	ldr	r3, [pc, #8]	; (b429c <HAL_RNG_GetRandomNumber+0xc>)
   b4294:	681b      	ldr	r3, [r3, #0]
   b4296:	685b      	ldr	r3, [r3, #4]
   b4298:	9301      	str	r3, [sp, #4]
   b429a:	bd08      	pop	{r3, pc}
   b429c:	00030218 	.word	0x00030218

000b42a0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b42a0:	b508      	push	{r3, lr}
   b42a2:	4b02      	ldr	r3, [pc, #8]	; (b42ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b42a4:	681b      	ldr	r3, [r3, #0]
   b42a6:	695b      	ldr	r3, [r3, #20]
   b42a8:	9301      	str	r3, [sp, #4]
   b42aa:	bd08      	pop	{r3, pc}
   b42ac:	00030218 	.word	0x00030218

000b42b0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b42b0:	b508      	push	{r3, lr}
   b42b2:	4b02      	ldr	r3, [pc, #8]	; (b42bc <HAL_Pin_Mode+0xc>)
   b42b4:	681b      	ldr	r3, [r3, #0]
   b42b6:	689b      	ldr	r3, [r3, #8]
   b42b8:	9301      	str	r3, [sp, #4]
   b42ba:	bd08      	pop	{r3, pc}
   b42bc:	0003022c 	.word	0x0003022c

000b42c0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b42c0:	b508      	push	{r3, lr}
   b42c2:	4b02      	ldr	r3, [pc, #8]	; (b42cc <HAL_Pulse_In+0xc>)
   b42c4:	681b      	ldr	r3, [r3, #0]
   b42c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b42c8:	9301      	str	r3, [sp, #4]
   b42ca:	bd08      	pop	{r3, pc}
   b42cc:	0003022c 	.word	0x0003022c

000b42d0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b42d0:	b508      	push	{r3, lr}
   b42d2:	4b02      	ldr	r3, [pc, #8]	; (b42dc <hal_i2c_write+0xc>)
   b42d4:	681b      	ldr	r3, [r3, #0]
   b42d6:	6a1b      	ldr	r3, [r3, #32]
   b42d8:	9301      	str	r3, [sp, #4]
   b42da:	bd08      	pop	{r3, pc}
   b42dc:	00030228 	.word	0x00030228

000b42e0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b42e0:	b508      	push	{r3, lr}
   b42e2:	4b02      	ldr	r3, [pc, #8]	; (b42ec <hal_i2c_available+0xc>)
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b42e8:	9301      	str	r3, [sp, #4]
   b42ea:	bd08      	pop	{r3, pc}
   b42ec:	00030228 	.word	0x00030228

000b42f0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <hal_i2c_read+0xc>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42f8:	9301      	str	r3, [sp, #4]
   b42fa:	bd08      	pop	{r3, pc}
   b42fc:	00030228 	.word	0x00030228

000b4300 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <hal_i2c_peek+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	00030228 	.word	0x00030228

000b4310 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <hal_i2c_flush+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	00030228 	.word	0x00030228

000b4320 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <hal_i2c_is_enabled+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	00030228 	.word	0x00030228

000b4330 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <hal_i2c_init+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	00030228 	.word	0x00030228

000b4340 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <inet_inet_ntop+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	695b      	ldr	r3, [r3, #20]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	00030264 	.word	0x00030264

000b4350 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <netdb_freeaddrinfo+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	689b      	ldr	r3, [r3, #8]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	00030268 	.word	0x00030268

000b4360 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <netdb_getaddrinfo+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	68db      	ldr	r3, [r3, #12]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	00030268 	.word	0x00030268

000b4370 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <hal_spi_init+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	69db      	ldr	r3, [r3, #28]
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030230 	.word	0x00030230

000b4380 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <hal_spi_is_enabled+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	6a1b      	ldr	r3, [r3, #32]
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030230 	.word	0x00030230

000b4390 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <hal_usart_write+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	68db      	ldr	r3, [r3, #12]
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	0003023c 	.word	0x0003023c

000b43a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <hal_usart_available+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	691b      	ldr	r3, [r3, #16]
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	0003023c 	.word	0x0003023c

000b43b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <hal_usart_read+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	695b      	ldr	r3, [r3, #20]
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	0003023c 	.word	0x0003023c

000b43c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <hal_usart_peek+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	699b      	ldr	r3, [r3, #24]
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	0003023c 	.word	0x0003023c

000b43d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <hal_usart_flush+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	69db      	ldr	r3, [r3, #28]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	0003023c 	.word	0x0003023c

000b43e0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <hal_usart_is_enabled+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	6a1b      	ldr	r3, [r3, #32]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	0003023c 	.word	0x0003023c

000b43f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <hal_usart_available_data_for_write+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	0003023c 	.word	0x0003023c

000b4400 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <hal_usart_init_ex+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	0003023c 	.word	0x0003023c

000b4410 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <HAL_USB_USART_Init+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	681b      	ldr	r3, [r3, #0]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	0003024c 	.word	0x0003024c

000b4420 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <HAL_USB_USART_Begin+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	685b      	ldr	r3, [r3, #4]
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	0003024c 	.word	0x0003024c

000b4430 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <HAL_USB_USART_Available_Data+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	691b      	ldr	r3, [r3, #16]
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003024c 	.word	0x0003024c

000b4440 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	695b      	ldr	r3, [r3, #20]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003024c 	.word	0x0003024c

000b4450 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <HAL_USB_USART_Receive_Data+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	699b      	ldr	r3, [r3, #24]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003024c 	.word	0x0003024c

000b4460 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <HAL_USB_USART_Send_Data+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	69db      	ldr	r3, [r3, #28]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003024c 	.word	0x0003024c

000b4470 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <HAL_USB_USART_Flush_Data+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	6a1b      	ldr	r3, [r3, #32]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003024c 	.word	0x0003024c

000b4480 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <set_system_mode+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	685b      	ldr	r3, [r3, #4]
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	00030220 	.word	0x00030220

000b4490 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b03      	ldr	r3, [pc, #12]	; (b44a0 <system_ctrl_set_app_request_handler+0x10>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b449a:	9301      	str	r3, [sp, #4]
   b449c:	bd08      	pop	{r3, pc}
   b449e:	0000      	.short	0x0000
   b44a0:	00030220 	.word	0x00030220

000b44a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b03      	ldr	r3, [pc, #12]	; (b44b4 <system_ctrl_set_result+0x10>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b44ae:	9301      	str	r3, [sp, #4]
   b44b0:	bd08      	pop	{r3, pc}
   b44b2:	0000      	.short	0x0000
   b44b4:	00030220 	.word	0x00030220

000b44b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	00030244 	.word	0x00030244

000b44c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <network_connect+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	685b      	ldr	r3, [r3, #4]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	00030240 	.word	0x00030240

000b44d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <network_connecting+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	689b      	ldr	r3, [r3, #8]
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	00030240 	.word	0x00030240

000b44e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <network_disconnect+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	68db      	ldr	r3, [r3, #12]
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	00030240 	.word	0x00030240

000b44f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b02      	ldr	r3, [pc, #8]	; (b4504 <network_ready+0xc>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	691b      	ldr	r3, [r3, #16]
   b4500:	9301      	str	r3, [sp, #4]
   b4502:	bd08      	pop	{r3, pc}
   b4504:	00030240 	.word	0x00030240

000b4508 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4508:	b508      	push	{r3, lr}
   b450a:	4b02      	ldr	r3, [pc, #8]	; (b4514 <network_on+0xc>)
   b450c:	681b      	ldr	r3, [r3, #0]
   b450e:	695b      	ldr	r3, [r3, #20]
   b4510:	9301      	str	r3, [sp, #4]
   b4512:	bd08      	pop	{r3, pc}
   b4514:	00030240 	.word	0x00030240

000b4518 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <network_off+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	699b      	ldr	r3, [r3, #24]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030240 	.word	0x00030240

000b4528 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <network_listen+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	69db      	ldr	r3, [r3, #28]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030240 	.word	0x00030240

000b4538 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <network_listening+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	6a1b      	ldr	r3, [r3, #32]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030240 	.word	0x00030240

000b4548 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <network_set_listen_timeout+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	00030240 	.word	0x00030240

000b4558 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <network_get_listen_timeout+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	00030240 	.word	0x00030240

000b4568 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <network_is_on+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030240 	.word	0x00030240

000b4578 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <network_is_off+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030240 	.word	0x00030240

000b4588 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <malloc+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	681b      	ldr	r3, [r3, #0]
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	0003021c 	.word	0x0003021c

000b4598 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <free+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	685b      	ldr	r3, [r3, #4]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	0003021c 	.word	0x0003021c

000b45a8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <__errno+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003021c 	.word	0x0003021c

000b45b8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <__assert_func+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	0003021c 	.word	0x0003021c

000b45c8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <newlib_impure_ptr_callback+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	0003021c 	.word	0x0003021c

000b45d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b45d8:	4802      	ldr	r0, [pc, #8]	; (b45e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b45da:	2300      	movs	r3, #0
   b45dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b45de:	f7ff be4f 	b.w	b4280 <os_mutex_recursive_create>
   b45e2:	bf00      	nop
   b45e4:	2003e6b8 	.word	0x2003e6b8

000b45e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b45e8:	2200      	movs	r2, #0
   b45ea:	6840      	ldr	r0, [r0, #4]
   b45ec:	4611      	mov	r1, r2
   b45ee:	f7ff bfa3 	b.w	b4538 <network_listening>

000b45f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b45f2:	2200      	movs	r2, #0
   b45f4:	6840      	ldr	r0, [r0, #4]
   b45f6:	4611      	mov	r1, r2
   b45f8:	f7ff bfae 	b.w	b4558 <network_get_listen_timeout>

000b45fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b45fc:	6840      	ldr	r0, [r0, #4]
   b45fe:	2200      	movs	r2, #0
   b4600:	f7ff bfa2 	b.w	b4548 <network_set_listen_timeout>

000b4604 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4604:	6840      	ldr	r0, [r0, #4]
   b4606:	2200      	movs	r2, #0
   b4608:	f081 0101 	eor.w	r1, r1, #1
   b460c:	f7ff bf8c 	b.w	b4528 <network_listen>

000b4610 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4610:	2300      	movs	r3, #0
   b4612:	6840      	ldr	r0, [r0, #4]
   b4614:	461a      	mov	r2, r3
   b4616:	4619      	mov	r1, r3
   b4618:	f7ff bf7e 	b.w	b4518 <network_off>

000b461c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b461c:	2300      	movs	r3, #0
   b461e:	6840      	ldr	r0, [r0, #4]
   b4620:	461a      	mov	r2, r3
   b4622:	4619      	mov	r1, r3
   b4624:	f7ff bf70 	b.w	b4508 <network_on>

000b4628 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4628:	2200      	movs	r2, #0
   b462a:	6840      	ldr	r0, [r0, #4]
   b462c:	4611      	mov	r1, r2
   b462e:	f7ff bf63 	b.w	b44f8 <network_ready>

000b4632 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4632:	2200      	movs	r2, #0
   b4634:	6840      	ldr	r0, [r0, #4]
   b4636:	4611      	mov	r1, r2
   b4638:	f7ff bf4e 	b.w	b44d8 <network_connecting>

000b463c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b463c:	6840      	ldr	r0, [r0, #4]
   b463e:	2200      	movs	r2, #0
   b4640:	2102      	movs	r1, #2
   b4642:	f7ff bf51 	b.w	b44e8 <network_disconnect>

000b4646 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4646:	2300      	movs	r3, #0
   b4648:	6840      	ldr	r0, [r0, #4]
   b464a:	461a      	mov	r2, r3
   b464c:	f7ff bf3c 	b.w	b44c8 <network_connect>

000b4650 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4650:	4b02      	ldr	r3, [pc, #8]	; (b465c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4652:	2203      	movs	r2, #3
   b4654:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4656:	4a02      	ldr	r2, [pc, #8]	; (b4660 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4658:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b465a:	4770      	bx	lr
   b465c:	2003e6bc 	.word	0x2003e6bc
   b4660:	000b6df4 	.word	0x000b6df4

000b4664 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4664:	4770      	bx	lr

000b4666 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4668:	4606      	mov	r6, r0
   b466a:	4615      	mov	r5, r2
   b466c:	460c      	mov	r4, r1
   b466e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4670:	42bc      	cmp	r4, r7
   b4672:	d006      	beq.n	b4682 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4674:	6833      	ldr	r3, [r6, #0]
   b4676:	f814 1b01 	ldrb.w	r1, [r4], #1
   b467a:	689b      	ldr	r3, [r3, #8]
   b467c:	4630      	mov	r0, r6
   b467e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4680:	e7f6      	b.n	b4670 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4682:	4628      	mov	r0, r5
   b4684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4686 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4686:	7c00      	ldrb	r0, [r0, #16]
   b4688:	2200      	movs	r2, #0
   b468a:	f7ff be21 	b.w	b42d0 <hal_i2c_write>

000b468e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b468e:	7c00      	ldrb	r0, [r0, #16]
   b4690:	2100      	movs	r1, #0
   b4692:	f7ff be25 	b.w	b42e0 <hal_i2c_available>

000b4696 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4696:	7c00      	ldrb	r0, [r0, #16]
   b4698:	2100      	movs	r1, #0
   b469a:	f7ff be29 	b.w	b42f0 <hal_i2c_read>

000b469e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b469e:	7c00      	ldrb	r0, [r0, #16]
   b46a0:	2100      	movs	r1, #0
   b46a2:	f7ff be2d 	b.w	b4300 <hal_i2c_peek>

000b46a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b46a6:	7c00      	ldrb	r0, [r0, #16]
   b46a8:	2100      	movs	r1, #0
   b46aa:	f7ff be31 	b.w	b4310 <hal_i2c_flush>

000b46ae <_ZN7TwoWireD0Ev>:
   b46ae:	b510      	push	{r4, lr}
   b46b0:	2114      	movs	r1, #20
   b46b2:	4604      	mov	r4, r0
   b46b4:	f7ff fcf1 	bl	b409a <_ZdlPvj>
   b46b8:	4620      	mov	r0, r4
   b46ba:	bd10      	pop	{r4, pc}

000b46bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b46bc:	b538      	push	{r3, r4, r5, lr}
   b46be:	4604      	mov	r4, r0
   b46c0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b46c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b46c6:	2200      	movs	r2, #0
   b46c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b46cc:	4b09      	ldr	r3, [pc, #36]	; (b46f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b46ce:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b46d0:	4608      	mov	r0, r1
   b46d2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b46d4:	4629      	mov	r1, r5
   b46d6:	f7ff fe2b 	bl	b4330 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b46da:	30bf      	adds	r0, #191	; 0xbf
   b46dc:	d108      	bne.n	b46f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b46de:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b46e0:	07db      	lsls	r3, r3, #31
   b46e2:	d505      	bpl.n	b46f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b46e4:	6868      	ldr	r0, [r5, #4]
   b46e6:	f7ff ff57 	bl	b4598 <free>
    free(conf.tx_buffer);
   b46ea:	68e8      	ldr	r0, [r5, #12]
   b46ec:	f7ff ff54 	bl	b4598 <free>
}
   b46f0:	4620      	mov	r0, r4
   b46f2:	bd38      	pop	{r3, r4, r5, pc}
   b46f4:	000b6e30 	.word	0x000b6e30

000b46f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b46f8:	4770      	bx	lr

000b46fa <_ZN9IPAddressD0Ev>:
   b46fa:	b510      	push	{r4, lr}
   b46fc:	2118      	movs	r1, #24
   b46fe:	4604      	mov	r4, r0
   b4700:	f7ff fccb 	bl	b409a <_ZdlPvj>
   b4704:	4620      	mov	r0, r4
   b4706:	bd10      	pop	{r4, pc}

000b4708 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4708:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b470a:	7d03      	ldrb	r3, [r0, #20]
   b470c:	2b06      	cmp	r3, #6
{
   b470e:	b08d      	sub	sp, #52	; 0x34
   b4710:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4712:	f100 0704 	add.w	r7, r0, #4
   b4716:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b471a:	d012      	beq.n	b4742 <_ZNK9IPAddress7printToER5Print+0x3a>
   b471c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4720:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4724:	220a      	movs	r2, #10
   b4726:	4630      	mov	r0, r6
   b4728:	f000 f953 	bl	b49d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b472c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b472e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4730:	d019      	beq.n	b4766 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4732:	2c00      	cmp	r4, #0
   b4734:	d0f4      	beq.n	b4720 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4736:	212e      	movs	r1, #46	; 0x2e
   b4738:	4630      	mov	r0, r6
   b473a:	f000 f93b 	bl	b49b4 <_ZN5Print5printEc>
   b473e:	4404      	add	r4, r0
   b4740:	e7ee      	b.n	b4720 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4742:	232f      	movs	r3, #47	; 0x2f
   b4744:	466a      	mov	r2, sp
   b4746:	4639      	mov	r1, r7
   b4748:	200a      	movs	r0, #10
		buf[0] = 0;
   b474a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b474e:	f7ff fdf7 	bl	b4340 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4752:	4668      	mov	r0, sp
   b4754:	f002 fad0 	bl	b6cf8 <strlen>
   b4758:	6833      	ldr	r3, [r6, #0]
   b475a:	4602      	mov	r2, r0
   b475c:	68db      	ldr	r3, [r3, #12]
   b475e:	4669      	mov	r1, sp
   b4760:	4630      	mov	r0, r6
   b4762:	4798      	blx	r3
   b4764:	4604      	mov	r4, r0
    }
    return n;
}
   b4766:	4620      	mov	r0, r4
   b4768:	b00d      	add	sp, #52	; 0x34
   b476a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b476c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b476c:	b510      	push	{r4, lr}
   b476e:	4b05      	ldr	r3, [pc, #20]	; (b4784 <_ZN9IPAddressC1Ev+0x18>)
   b4770:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4772:	2211      	movs	r2, #17
   b4774:	f840 3b04 	str.w	r3, [r0], #4
   b4778:	2100      	movs	r1, #0
   b477a:	f002 fa87 	bl	b6c8c <memset>
}
   b477e:	4620      	mov	r0, r4
   b4780:	bd10      	pop	{r4, pc}
   b4782:	bf00      	nop
   b4784:	000b6e58 	.word	0x000b6e58

000b4788 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4788:	4603      	mov	r3, r0
   b478a:	4a07      	ldr	r2, [pc, #28]	; (b47a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b478c:	b510      	push	{r4, lr}
   b478e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4792:	f101 0210 	add.w	r2, r1, #16
   b4796:	f851 4b04 	ldr.w	r4, [r1], #4
   b479a:	f843 4b04 	str.w	r4, [r3], #4
   b479e:	4291      	cmp	r1, r2
   b47a0:	d1f9      	bne.n	b4796 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b47a2:	780a      	ldrb	r2, [r1, #0]
   b47a4:	701a      	strb	r2, [r3, #0]
}
   b47a6:	bd10      	pop	{r4, pc}
   b47a8:	000b6e58 	.word	0x000b6e58

000b47ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b47ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b47ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b47b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b47b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b47ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b47be:	2304      	movs	r3, #4
   b47c0:	6041      	str	r1, [r0, #4]
   b47c2:	7503      	strb	r3, [r0, #20]
}
   b47c4:	bd10      	pop	{r4, pc}
	...

000b47c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b47c8:	b507      	push	{r0, r1, r2, lr}
   b47ca:	4b06      	ldr	r3, [pc, #24]	; (b47e4 <_ZN9IPAddressC1EPKh+0x1c>)
   b47cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b47ce:	78cb      	ldrb	r3, [r1, #3]
   b47d0:	9300      	str	r3, [sp, #0]
   b47d2:	788b      	ldrb	r3, [r1, #2]
   b47d4:	784a      	ldrb	r2, [r1, #1]
   b47d6:	7809      	ldrb	r1, [r1, #0]
   b47d8:	f7ff ffe8 	bl	b47ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b47dc:	b003      	add	sp, #12
   b47de:	f85d fb04 	ldr.w	pc, [sp], #4
   b47e2:	bf00      	nop
   b47e4:	000b6e58 	.word	0x000b6e58

000b47e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b47e8:	4b01      	ldr	r3, [pc, #4]	; (b47f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b47ea:	4a02      	ldr	r2, [pc, #8]	; (b47f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b47ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b47ee:	4770      	bx	lr
   b47f0:	2003e6c4 	.word	0x2003e6c4
   b47f4:	000b6e64 	.word	0x000b6e64

000b47f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b47f8:	2300      	movs	r3, #0
   b47fa:	6840      	ldr	r0, [r0, #4]
   b47fc:	461a      	mov	r2, r3
   b47fe:	f7ff be63 	b.w	b44c8 <network_connect>

000b4802 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4802:	6840      	ldr	r0, [r0, #4]
   b4804:	2200      	movs	r2, #0
   b4806:	2102      	movs	r1, #2
   b4808:	f7ff be6e 	b.w	b44e8 <network_disconnect>

000b480c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b480c:	2200      	movs	r2, #0
   b480e:	6840      	ldr	r0, [r0, #4]
   b4810:	4611      	mov	r1, r2
   b4812:	f7ff be61 	b.w	b44d8 <network_connecting>

000b4816 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4816:	2200      	movs	r2, #0
   b4818:	6840      	ldr	r0, [r0, #4]
   b481a:	4611      	mov	r1, r2
   b481c:	f7ff be6c 	b.w	b44f8 <network_ready>

000b4820 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4820:	2300      	movs	r3, #0
   b4822:	6840      	ldr	r0, [r0, #4]
   b4824:	461a      	mov	r2, r3
   b4826:	4619      	mov	r1, r3
   b4828:	f7ff be6e 	b.w	b4508 <network_on>

000b482c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b482c:	2300      	movs	r3, #0
   b482e:	6840      	ldr	r0, [r0, #4]
   b4830:	461a      	mov	r2, r3
   b4832:	4619      	mov	r1, r3
   b4834:	f7ff be70 	b.w	b4518 <network_off>

000b4838 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4838:	6840      	ldr	r0, [r0, #4]
   b483a:	2100      	movs	r1, #0
   b483c:	f7ff be94 	b.w	b4568 <network_is_on>

000b4840 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4840:	6840      	ldr	r0, [r0, #4]
   b4842:	2100      	movs	r1, #0
   b4844:	f7ff be98 	b.w	b4578 <network_is_off>

000b4848 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4848:	6840      	ldr	r0, [r0, #4]
   b484a:	2200      	movs	r2, #0
   b484c:	f081 0101 	eor.w	r1, r1, #1
   b4850:	f7ff be6a 	b.w	b4528 <network_listen>

000b4854 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4854:	6840      	ldr	r0, [r0, #4]
   b4856:	2200      	movs	r2, #0
   b4858:	f7ff be76 	b.w	b4548 <network_set_listen_timeout>

000b485c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b485c:	2200      	movs	r2, #0
   b485e:	6840      	ldr	r0, [r0, #4]
   b4860:	4611      	mov	r1, r2
   b4862:	f7ff be79 	b.w	b4558 <network_get_listen_timeout>

000b4866 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4866:	2200      	movs	r2, #0
   b4868:	6840      	ldr	r0, [r0, #4]
   b486a:	4611      	mov	r1, r2
   b486c:	f7ff be64 	b.w	b4538 <network_listening>

000b4870 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4874:	b095      	sub	sp, #84	; 0x54
   b4876:	4614      	mov	r4, r2
   b4878:	460d      	mov	r5, r1
   b487a:	4607      	mov	r7, r0
    IPAddress addr;
   b487c:	f7ff ff76 	bl	b476c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4880:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4882:	221c      	movs	r2, #28
   b4884:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4886:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4888:	f002 fa00 	bl	b6c8c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b488c:	2340      	movs	r3, #64	; 0x40
   b488e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4890:	4620      	mov	r0, r4
   b4892:	466b      	mov	r3, sp
   b4894:	aa0c      	add	r2, sp, #48	; 0x30
   b4896:	2100      	movs	r1, #0
   b4898:	f7ff fd62 	bl	b4360 <netdb_getaddrinfo>
    if (!r) {
   b489c:	4604      	mov	r4, r0
   b489e:	2800      	cmp	r0, #0
   b48a0:	d14b      	bne.n	b493a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48a2:	4602      	mov	r2, r0
   b48a4:	2101      	movs	r1, #1
   b48a6:	6868      	ldr	r0, [r5, #4]
   b48a8:	f7ff fe26 	bl	b44f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48b0:	4622      	mov	r2, r4
   b48b2:	6868      	ldr	r0, [r5, #4]
   b48b4:	f7ff fe20 	bl	b44f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48ba:	4681      	mov	r9, r0
        bool ok = false;
   b48bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48be:	2e00      	cmp	r6, #0
   b48c0:	d03b      	beq.n	b493a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b48c2:	2900      	cmp	r1, #0
   b48c4:	d139      	bne.n	b493a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b48c6:	6873      	ldr	r3, [r6, #4]
   b48c8:	2b02      	cmp	r3, #2
   b48ca:	d003      	beq.n	b48d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b48cc:	2b0a      	cmp	r3, #10
   b48ce:	d011      	beq.n	b48f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48d0:	69f6      	ldr	r6, [r6, #28]
   b48d2:	e7f4      	b.n	b48be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b48d4:	f1b8 0f00 	cmp.w	r8, #0
   b48d8:	d0fa      	beq.n	b48d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b48da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b48dc:	a806      	add	r0, sp, #24
   b48de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b48e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b48e2:	f7ff ff71 	bl	b47c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b48e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48e8:	1d3c      	adds	r4, r7, #4
   b48ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b48ec:	682b      	ldr	r3, [r5, #0]
   b48ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b48f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b48f2:	e7ed      	b.n	b48d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b48f4:	f1b9 0f00 	cmp.w	r9, #0
   b48f8:	d0ea      	beq.n	b48d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b48fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b48fc:	2210      	movs	r2, #16
   b48fe:	a801      	add	r0, sp, #4
   b4900:	f002 f9c4 	bl	b6c8c <memset>
                    a.v = 6;
   b4904:	2306      	movs	r3, #6
   b4906:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b490a:	ad01      	add	r5, sp, #4
   b490c:	f104 0308 	add.w	r3, r4, #8
   b4910:	3418      	adds	r4, #24
   b4912:	6818      	ldr	r0, [r3, #0]
   b4914:	6859      	ldr	r1, [r3, #4]
   b4916:	462a      	mov	r2, r5
   b4918:	c203      	stmia	r2!, {r0, r1}
   b491a:	3308      	adds	r3, #8
   b491c:	42a3      	cmp	r3, r4
   b491e:	4615      	mov	r5, r2
   b4920:	d1f7      	bne.n	b4912 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4922:	a901      	add	r1, sp, #4
   b4924:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4926:	ad07      	add	r5, sp, #28
   b4928:	f7ff ff2e 	bl	b4788 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b492c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b492e:	1d3c      	adds	r4, r7, #4
   b4930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4932:	682b      	ldr	r3, [r5, #0]
   b4934:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4936:	4649      	mov	r1, r9
   b4938:	e7ca      	b.n	b48d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b493a:	9800      	ldr	r0, [sp, #0]
   b493c:	f7ff fd08 	bl	b4350 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4940:	4638      	mov	r0, r7
   b4942:	b015      	add	sp, #84	; 0x54
   b4944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4948 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4948:	4b02      	ldr	r3, [pc, #8]	; (b4954 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b494a:	4a03      	ldr	r2, [pc, #12]	; (b4958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b494c:	601a      	str	r2, [r3, #0]
   b494e:	2200      	movs	r2, #0
   b4950:	605a      	str	r2, [r3, #4]

} // spark
   b4952:	4770      	bx	lr
   b4954:	2003e6c8 	.word	0x2003e6c8
   b4958:	000b6e70 	.word	0x000b6e70

000b495c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b495e:	4606      	mov	r6, r0
   b4960:	460d      	mov	r5, r1
  size_t n = 0;
   b4962:	188f      	adds	r7, r1, r2
   b4964:	2400      	movs	r4, #0
  while (size--) {
   b4966:	42bd      	cmp	r5, r7
   b4968:	d00c      	beq.n	b4984 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b496a:	6833      	ldr	r3, [r6, #0]
   b496c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4970:	689b      	ldr	r3, [r3, #8]
   b4972:	4630      	mov	r0, r6
   b4974:	4798      	blx	r3
     if (chunk>=0)
   b4976:	1e03      	subs	r3, r0, #0
   b4978:	db01      	blt.n	b497e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b497a:	441c      	add	r4, r3
  while (size--) {
   b497c:	e7f3      	b.n	b4966 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b497e:	2c00      	cmp	r4, #0
   b4980:	bf08      	it	eq
   b4982:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4984:	4620      	mov	r0, r4
   b4986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4988 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4988:	b513      	push	{r0, r1, r4, lr}
   b498a:	4604      	mov	r4, r0
    }
   b498c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b498e:	b159      	cbz	r1, b49a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4990:	9101      	str	r1, [sp, #4]
   b4992:	f002 f9b1 	bl	b6cf8 <strlen>
   b4996:	6823      	ldr	r3, [r4, #0]
   b4998:	9901      	ldr	r1, [sp, #4]
   b499a:	68db      	ldr	r3, [r3, #12]
   b499c:	4602      	mov	r2, r0
   b499e:	4620      	mov	r0, r4
    }
   b49a0:	b002      	add	sp, #8
   b49a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b49a6:	4718      	bx	r3
    }
   b49a8:	b002      	add	sp, #8
   b49aa:	bd10      	pop	{r4, pc}

000b49ac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b49ac:	b508      	push	{r3, lr}
  return write(str);
   b49ae:	f7ff ffeb 	bl	b4988 <_ZN5Print5writeEPKc>
}
   b49b2:	bd08      	pop	{r3, pc}

000b49b4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b49b4:	6803      	ldr	r3, [r0, #0]
   b49b6:	689b      	ldr	r3, [r3, #8]
   b49b8:	4718      	bx	r3

000b49ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b49ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b49bc:	210d      	movs	r1, #13
{
   b49be:	4605      	mov	r5, r0
  size_t n = print('\r');
   b49c0:	f7ff fff8 	bl	b49b4 <_ZN5Print5printEc>
  n += print('\n');
   b49c4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b49c6:	4604      	mov	r4, r0
  n += print('\n');
   b49c8:	4628      	mov	r0, r5
   b49ca:	f7ff fff3 	bl	b49b4 <_ZN5Print5printEc>
  return n;
}
   b49ce:	4420      	add	r0, r4
   b49d0:	bd38      	pop	{r3, r4, r5, pc}

000b49d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b49d2:	b530      	push	{r4, r5, lr}
   b49d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b49d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b49d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b49da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b49de:	bf98      	it	ls
   b49e0:	220a      	movls	r2, #10
   b49e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b49e4:	460d      	mov	r5, r1
   b49e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b49ea:	fb01 5312 	mls	r3, r1, r2, r5
   b49ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b49f2:	2b09      	cmp	r3, #9
   b49f4:	bf94      	ite	ls
   b49f6:	3330      	addls	r3, #48	; 0x30
   b49f8:	3337      	addhi	r3, #55	; 0x37
   b49fa:	b2db      	uxtb	r3, r3
  } while(n);
   b49fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b49fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a02:	d9ef      	bls.n	b49e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a04:	4621      	mov	r1, r4
   b4a06:	f7ff ffbf 	bl	b4988 <_ZN5Print5writeEPKc>
}
   b4a0a:	b00b      	add	sp, #44	; 0x2c
   b4a0c:	bd30      	pop	{r4, r5, pc}
	...

000b4a10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b4a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a14:	ec55 4b10 	vmov	r4, r5, d0
   b4a18:	4606      	mov	r6, r0
   b4a1a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b4a1c:	ee10 2a10 	vmov	r2, s0
   b4a20:	ee10 0a10 	vmov	r0, s0
   b4a24:	462b      	mov	r3, r5
   b4a26:	4629      	mov	r1, r5
   b4a28:	f002 f86e 	bl	b6b08 <__aeabi_dcmpun>
   b4a2c:	b140      	cbz	r0, b4a40 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b4a2e:	4953      	ldr	r1, [pc, #332]	; (b4b7c <_ZN5Print10printFloatEdh+0x16c>)
   b4a30:	4630      	mov	r0, r6
   b4a32:	f7ff ffa9 	bl	b4988 <_ZN5Print5writeEPKc>
   b4a36:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b4a38:	4650      	mov	r0, sl
   b4a3a:	b003      	add	sp, #12
   b4a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b4a40:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b4a44:	4b4e      	ldr	r3, [pc, #312]	; (b4b80 <_ZN5Print10printFloatEdh+0x170>)
   b4a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4a4a:	4620      	mov	r0, r4
   b4a4c:	4649      	mov	r1, r9
   b4a4e:	f002 f85b 	bl	b6b08 <__aeabi_dcmpun>
   b4a52:	b948      	cbnz	r0, b4a68 <_ZN5Print10printFloatEdh+0x58>
   b4a54:	4b4a      	ldr	r3, [pc, #296]	; (b4b80 <_ZN5Print10printFloatEdh+0x170>)
   b4a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	4649      	mov	r1, r9
   b4a5e:	f002 f835 	bl	b6acc <__aeabi_dcmple>
   b4a62:	b908      	cbnz	r0, b4a68 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b4a64:	4947      	ldr	r1, [pc, #284]	; (b4b84 <_ZN5Print10printFloatEdh+0x174>)
   b4a66:	e7e3      	b.n	b4a30 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b4a68:	4b47      	ldr	r3, [pc, #284]	; (b4b88 <_ZN5Print10printFloatEdh+0x178>)
   b4a6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4a6e:	4620      	mov	r0, r4
   b4a70:	4629      	mov	r1, r5
   b4a72:	f002 f83f 	bl	b6af4 <__aeabi_dcmpgt>
   b4a76:	b108      	cbz	r0, b4a7c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b4a78:	4944      	ldr	r1, [pc, #272]	; (b4b8c <_ZN5Print10printFloatEdh+0x17c>)
   b4a7a:	e7d9      	b.n	b4a30 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b4a7c:	4b44      	ldr	r3, [pc, #272]	; (b4b90 <_ZN5Print10printFloatEdh+0x180>)
   b4a7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b4a82:	4620      	mov	r0, r4
   b4a84:	4629      	mov	r1, r5
   b4a86:	f002 f817 	bl	b6ab8 <__aeabi_dcmplt>
   b4a8a:	2800      	cmp	r0, #0
   b4a8c:	d1f4      	bne.n	b4a78 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b4a8e:	2200      	movs	r2, #0
   b4a90:	2300      	movs	r3, #0
   b4a92:	4620      	mov	r0, r4
   b4a94:	4629      	mov	r1, r5
   b4a96:	f002 f80f 	bl	b6ab8 <__aeabi_dcmplt>
   b4a9a:	b1d0      	cbz	r0, b4ad2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b4a9c:	212d      	movs	r1, #45	; 0x2d
   b4a9e:	4630      	mov	r0, r6
   b4aa0:	f7ff ff88 	bl	b49b4 <_ZN5Print5printEc>
     number = -number;
   b4aa4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b4aa8:	4682      	mov	sl, r0
     number = -number;
   b4aaa:	461d      	mov	r5, r3
  double rounding = 0.5;
   b4aac:	4939      	ldr	r1, [pc, #228]	; (b4b94 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b4aae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4b9c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b4ab2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b4ab6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b4ab8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b4abc:	fa5f f38b 	uxtb.w	r3, fp
   b4ac0:	429f      	cmp	r7, r3
   b4ac2:	d908      	bls.n	b4ad6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b4ac4:	4642      	mov	r2, r8
   b4ac6:	464b      	mov	r3, r9
   b4ac8:	f001 feae 	bl	b6828 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b4acc:	f10b 0b01 	add.w	fp, fp, #1
   b4ad0:	e7f4      	b.n	b4abc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b4ad2:	4682      	mov	sl, r0
   b4ad4:	e7ea      	b.n	b4aac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b4ad6:	4622      	mov	r2, r4
   b4ad8:	462b      	mov	r3, r5
   b4ada:	f001 fbc5 	bl	b6268 <__adddf3>
   b4ade:	460d      	mov	r5, r1
   b4ae0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b4ae2:	f002 f84f 	bl	b6b84 <__aeabi_d2uiz>
   b4ae6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b4ae8:	f001 fcfa 	bl	b64e0 <__aeabi_ui2d>
   b4aec:	4602      	mov	r2, r0
   b4aee:	460b      	mov	r3, r1
   b4af0:	4620      	mov	r0, r4
   b4af2:	4629      	mov	r1, r5
   b4af4:	f001 fbb6 	bl	b6264 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b4af8:	220a      	movs	r2, #10
   b4afa:	4604      	mov	r4, r0
   b4afc:	460d      	mov	r5, r1
   b4afe:	4630      	mov	r0, r6
   b4b00:	4641      	mov	r1, r8
   b4b02:	f7ff ff66 	bl	b49d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b4b06:	4482      	add	sl, r0
  if (digits > 0) {
   b4b08:	2f00      	cmp	r7, #0
   b4b0a:	d095      	beq.n	b4a38 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b4b0c:	4922      	ldr	r1, [pc, #136]	; (b4b98 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b4b0e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b4b9c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b4b12:	4630      	mov	r0, r6
   b4b14:	f7ff ff38 	bl	b4988 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b4b18:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b4b1c:	4482      	add	sl, r0
  while (digits-- > 0)
   b4b1e:	2f00      	cmp	r7, #0
   b4b20:	d08a      	beq.n	b4a38 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b4b22:	4642      	mov	r2, r8
   b4b24:	464b      	mov	r3, r9
   b4b26:	4620      	mov	r0, r4
   b4b28:	4629      	mov	r1, r5
   b4b2a:	f001 fd53 	bl	b65d4 <__aeabi_dmul>
   b4b2e:	4604      	mov	r4, r0
   b4b30:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b4b32:	f001 ffff 	bl	b6b34 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b4b36:	f1b0 0b00 	subs.w	fp, r0, #0
   b4b3a:	da1c      	bge.n	b4b76 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b4b3c:	212d      	movs	r1, #45	; 0x2d
   b4b3e:	4630      	mov	r0, r6
   b4b40:	f7ff ff38 	bl	b49b4 <_ZN5Print5printEc>
            val = -n;
   b4b44:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b4b48:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b4b4a:	220a      	movs	r2, #10
   b4b4c:	4630      	mov	r0, r6
   b4b4e:	9301      	str	r3, [sp, #4]
   b4b50:	f7ff ff3f 	bl	b49d2 <_ZN5Print11printNumberEmh>
   b4b54:	9b01      	ldr	r3, [sp, #4]
   b4b56:	4418      	add	r0, r3
    n += print(toPrint);
   b4b58:	4482      	add	sl, r0
    remainder -= toPrint;
   b4b5a:	4658      	mov	r0, fp
   b4b5c:	f001 fcd0 	bl	b6500 <__aeabi_i2d>
   b4b60:	4602      	mov	r2, r0
   b4b62:	460b      	mov	r3, r1
   b4b64:	4620      	mov	r0, r4
   b4b66:	4629      	mov	r1, r5
   b4b68:	f001 fb7c 	bl	b6264 <__aeabi_dsub>
   b4b6c:	3f01      	subs	r7, #1
   b4b6e:	4604      	mov	r4, r0
   b4b70:	460d      	mov	r5, r1
   b4b72:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b4b74:	e7d3      	b.n	b4b1e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b4b76:	4659      	mov	r1, fp
        size_t t = 0;
   b4b78:	2300      	movs	r3, #0
   b4b7a:	e7e6      	b.n	b4b4a <_ZN5Print10printFloatEdh+0x13a>
   b4b7c:	000b6ea4 	.word	0x000b6ea4
   b4b80:	7fefffff 	.word	0x7fefffff
   b4b84:	000b6ea8 	.word	0x000b6ea8
   b4b88:	41efffff 	.word	0x41efffff
   b4b8c:	000b6eac 	.word	0x000b6eac
   b4b90:	c1efffff 	.word	0xc1efffff
   b4b94:	3fe00000 	.word	0x3fe00000
   b4b98:	000b6eb0 	.word	0x000b6eb0
   b4b9c:	40240000 	.word	0x40240000

000b4ba0 <_ZN5Print5printEfi>:
{
   b4ba0:	b538      	push	{r3, r4, r5, lr}
   b4ba2:	4604      	mov	r4, r0
   b4ba4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b4ba8:	b2cd      	uxtb	r5, r1
   b4baa:	f001 fcbb 	bl	b6524 <__aeabi_f2d>
   b4bae:	ec41 0b10 	vmov	d0, r0, r1
   b4bb2:	4629      	mov	r1, r5
   b4bb4:	4620      	mov	r0, r4
}
   b4bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b4bba:	f7ff bf29 	b.w	b4a10 <_ZN5Print10printFloatEdh>

000b4bbe <_ZN5Print7printlnEdi>:
{
   b4bbe:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b4bc0:	b2c9      	uxtb	r1, r1
{
   b4bc2:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b4bc4:	f7ff ff24 	bl	b4a10 <_ZN5Print10printFloatEdh>
   b4bc8:	4604      	mov	r4, r0
  n += println();
   b4bca:	4628      	mov	r0, r5
   b4bcc:	f7ff fef5 	bl	b49ba <_ZN5Print7printlnEv>
}
   b4bd0:	4420      	add	r0, r4
   b4bd2:	bd38      	pop	{r3, r4, r5, pc}

000b4bd4 <_ZN5Print7printlnEfi>:
{
   b4bd4:	b538      	push	{r3, r4, r5, lr}
   b4bd6:	4604      	mov	r4, r0
   b4bd8:	ee10 0a10 	vmov	r0, s0
   b4bdc:	460d      	mov	r5, r1
    return println((double)num, digits);
   b4bde:	f001 fca1 	bl	b6524 <__aeabi_f2d>
   b4be2:	ec41 0b10 	vmov	d0, r0, r1
   b4be6:	4629      	mov	r1, r5
   b4be8:	4620      	mov	r0, r4
}
   b4bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b4bee:	f7ff bfe6 	b.w	b4bbe <_ZN5Print7printlnEdi>
	...

000b4bf4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4bf4:	4b01      	ldr	r3, [pc, #4]	; (b4bfc <_GLOBAL__sub_I_RGB+0x8>)
   b4bf6:	2200      	movs	r2, #0
   b4bf8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4bfa:	4770      	bx	lr
   b4bfc:	2003e6d0 	.word	0x2003e6d0

000b4c00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4c00:	b510      	push	{r4, lr}
   b4c02:	4604      	mov	r4, r0
   b4c04:	4608      	mov	r0, r1
{
    _spi = spi;
   b4c06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4c08:	f7ff fbb2 	bl	b4370 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	6063      	str	r3, [r4, #4]
}
   b4c10:	4620      	mov	r0, r4
   b4c12:	bd10      	pop	{r4, pc}

000b4c14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4c14:	4b05      	ldr	r3, [pc, #20]	; (b4c2c <_GLOBAL__sub_I_System+0x18>)
   b4c16:	2202      	movs	r2, #2
   b4c18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4c1a:	4b05      	ldr	r3, [pc, #20]	; (b4c30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4c1c:	4a05      	ldr	r2, [pc, #20]	; (b4c34 <_GLOBAL__sub_I_System+0x20>)
   b4c1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4c20:	2000      	movs	r0, #0
   b4c22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4c26:	f7ff bc2b 	b.w	b4480 <set_system_mode>
   b4c2a:	bf00      	nop
   b4c2c:	2003e6ec 	.word	0x2003e6ec
   b4c30:	2003e6e0 	.word	0x2003e6e0
   b4c34:	ffff0000 	.word	0xffff0000

000b4c38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c38:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c3a:	681a      	ldr	r2, [r3, #0]
   b4c3c:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c40:	4770      	bx	lr
   b4c42:	bf00      	nop
   b4c44:	2003e628 	.word	0x2003e628
   b4c48:	2003e6f0 	.word	0x2003e6f0

000b4c4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4c4c:	4770      	bx	lr

000b4c4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c4e:	7441      	strb	r1, [r0, #17]
}
   b4c50:	4770      	bx	lr

000b4c52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4c52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4c54:	7c00      	ldrb	r0, [r0, #16]
   b4c56:	f7ff fbcb 	bl	b43f0 <hal_usart_available_data_for_write>
}
   b4c5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c5e:	bd08      	pop	{r3, pc}

000b4c60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4c60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4c62:	7c00      	ldrb	r0, [r0, #16]
   b4c64:	f7ff fb9c 	bl	b43a0 <hal_usart_available>
}
   b4c68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c6c:	bd08      	pop	{r3, pc}

000b4c6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4c6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4c70:	7c00      	ldrb	r0, [r0, #16]
   b4c72:	f7ff fba5 	bl	b43c0 <hal_usart_peek>
}
   b4c76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c7a:	bd08      	pop	{r3, pc}

000b4c7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4c7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4c7e:	7c00      	ldrb	r0, [r0, #16]
   b4c80:	f7ff fb96 	bl	b43b0 <hal_usart_read>
}
   b4c84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c88:	bd08      	pop	{r3, pc}

000b4c8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c8a:	7c00      	ldrb	r0, [r0, #16]
   b4c8c:	f7ff bba0 	b.w	b43d0 <hal_usart_flush>

000b4c90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c92:	7c45      	ldrb	r5, [r0, #17]
{
   b4c94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c96:	b12d      	cbz	r5, b4ca4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c9a:	b003      	add	sp, #12
   b4c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4ca0:	f7ff bb76 	b.w	b4390 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ca4:	7c00      	ldrb	r0, [r0, #16]
   b4ca6:	9101      	str	r1, [sp, #4]
   b4ca8:	f7ff fba2 	bl	b43f0 <hal_usart_available_data_for_write>
   b4cac:	2800      	cmp	r0, #0
   b4cae:	9901      	ldr	r1, [sp, #4]
   b4cb0:	dcf2      	bgt.n	b4c98 <_ZN11USARTSerial5writeEh+0x8>
}
   b4cb2:	4628      	mov	r0, r5
   b4cb4:	b003      	add	sp, #12
   b4cb6:	bd30      	pop	{r4, r5, pc}

000b4cb8 <_ZN11USARTSerialD0Ev>:
   b4cb8:	b510      	push	{r4, lr}
   b4cba:	2114      	movs	r1, #20
   b4cbc:	4604      	mov	r4, r0
   b4cbe:	f7ff f9ec 	bl	b409a <_ZdlPvj>
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	bd10      	pop	{r4, pc}
	...

000b4cc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4cc8:	b510      	push	{r4, lr}
   b4cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cce:	4604      	mov	r4, r0
   b4cd0:	4608      	mov	r0, r1
   b4cd2:	4611      	mov	r1, r2
   b4cd4:	2200      	movs	r2, #0
   b4cd6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4cda:	4b04      	ldr	r3, [pc, #16]	; (b4cec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4cdc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4cde:	2301      	movs	r3, #1
  _serial = serial;
   b4ce0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ce2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4ce4:	f7ff fb8c 	bl	b4400 <hal_usart_init_ex>
}
   b4ce8:	4620      	mov	r0, r4
   b4cea:	bd10      	pop	{r4, pc}
   b4cec:	000b6ed8 	.word	0x000b6ed8

000b4cf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4cf0:	7441      	strb	r1, [r0, #17]
}
   b4cf2:	4770      	bx	lr

000b4cf4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4cf4:	4770      	bx	lr

000b4cf6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4cf6:	4770      	bx	lr

000b4cf8 <_ZN9USBSerial4readEv>:
{
   b4cf8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4cfa:	2100      	movs	r1, #0
   b4cfc:	7c00      	ldrb	r0, [r0, #16]
   b4cfe:	f7ff fba7 	bl	b4450 <HAL_USB_USART_Receive_Data>
}
   b4d02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d06:	bd08      	pop	{r3, pc}

000b4d08 <_ZN9USBSerial4peekEv>:
{
   b4d08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4d0a:	2101      	movs	r1, #1
   b4d0c:	7c00      	ldrb	r0, [r0, #16]
   b4d0e:	f7ff fb9f 	bl	b4450 <HAL_USB_USART_Receive_Data>
}
   b4d12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4d16:	bd08      	pop	{r3, pc}

000b4d18 <_ZN9USBSerial17availableForWriteEv>:
{
   b4d18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4d1a:	7c00      	ldrb	r0, [r0, #16]
   b4d1c:	f7ff fb90 	bl	b4440 <HAL_USB_USART_Available_Data_For_Write>
}
   b4d20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d24:	bd08      	pop	{r3, pc}

000b4d26 <_ZN9USBSerial9availableEv>:
{
   b4d26:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4d28:	7c00      	ldrb	r0, [r0, #16]
   b4d2a:	f7ff fb81 	bl	b4430 <HAL_USB_USART_Available_Data>
}
   b4d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4d32:	bd08      	pop	{r3, pc}

000b4d34 <_ZN9USBSerial5writeEh>:
{
   b4d34:	b513      	push	{r0, r1, r4, lr}
   b4d36:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4d38:	7c00      	ldrb	r0, [r0, #16]
{
   b4d3a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4d3c:	f7ff fb80 	bl	b4440 <HAL_USB_USART_Available_Data_For_Write>
   b4d40:	2800      	cmp	r0, #0
   b4d42:	9901      	ldr	r1, [sp, #4]
   b4d44:	dc01      	bgt.n	b4d4a <_ZN9USBSerial5writeEh+0x16>
   b4d46:	7c60      	ldrb	r0, [r4, #17]
   b4d48:	b120      	cbz	r0, b4d54 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4d4a:	7c20      	ldrb	r0, [r4, #16]
   b4d4c:	f7ff fb88 	bl	b4460 <HAL_USB_USART_Send_Data>
   b4d50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4d54:	b002      	add	sp, #8
   b4d56:	bd10      	pop	{r4, pc}

000b4d58 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4d58:	7c00      	ldrb	r0, [r0, #16]
   b4d5a:	f7ff bb89 	b.w	b4470 <HAL_USB_USART_Flush_Data>

000b4d5e <_ZN9USBSerialD0Ev>:
   b4d5e:	b510      	push	{r4, lr}
   b4d60:	2114      	movs	r1, #20
   b4d62:	4604      	mov	r4, r0
   b4d64:	f7ff f999 	bl	b409a <_ZdlPvj>
   b4d68:	4620      	mov	r0, r4
   b4d6a:	bd10      	pop	{r4, pc}

000b4d6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4d6c:	b510      	push	{r4, lr}
   b4d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d72:	4604      	mov	r4, r0
   b4d74:	4608      	mov	r0, r1
   b4d76:	2100      	movs	r1, #0
   b4d78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d7c:	4b04      	ldr	r3, [pc, #16]	; (b4d90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4d7e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d80:	2301      	movs	r3, #1
  _serial = serial;
   b4d82:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d84:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4d86:	4611      	mov	r1, r2
   b4d88:	f7ff fb42 	bl	b4410 <HAL_USB_USART_Init>
}
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	bd10      	pop	{r4, pc}
   b4d90:	000b6f08 	.word	0x000b6f08

000b4d94 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4d94:	7c00      	ldrb	r0, [r0, #16]
   b4d96:	2200      	movs	r2, #0
   b4d98:	f7ff bb42 	b.w	b4420 <HAL_USB_USART_Begin>

000b4d9c <_Z19acquireSerialBufferv>:
{
   b4d9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4d9e:	2214      	movs	r2, #20
{
   b4da0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4da2:	2100      	movs	r1, #0
   b4da4:	f001 ff72 	bl	b6c8c <memset>
}
   b4da8:	4620      	mov	r0, r4
   b4daa:	bd10      	pop	{r4, pc}

000b4dac <_Z16_fetch_usbserialv>:
{
   b4dac:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4dae:	4c0f      	ldr	r4, [pc, #60]	; (b4dec <_Z16_fetch_usbserialv+0x40>)
{
   b4db0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4db2:	a803      	add	r0, sp, #12
   b4db4:	f7ff fff2 	bl	b4d9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4db8:	7821      	ldrb	r1, [r4, #0]
   b4dba:	f3bf 8f5b 	dmb	ish
   b4dbe:	f011 0101 	ands.w	r1, r1, #1
   b4dc2:	d10f      	bne.n	b4de4 <_Z16_fetch_usbserialv+0x38>
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	9101      	str	r1, [sp, #4]
   b4dc8:	f7ff f969 	bl	b409e <__cxa_guard_acquire>
   b4dcc:	9901      	ldr	r1, [sp, #4]
   b4dce:	b148      	cbz	r0, b4de4 <_Z16_fetch_usbserialv+0x38>
   b4dd0:	aa03      	add	r2, sp, #12
   b4dd2:	4807      	ldr	r0, [pc, #28]	; (b4df0 <_Z16_fetch_usbserialv+0x44>)
   b4dd4:	f7ff ffca 	bl	b4d6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4dd8:	4620      	mov	r0, r4
   b4dda:	f7ff f965 	bl	b40a8 <__cxa_guard_release>
   b4dde:	4805      	ldr	r0, [pc, #20]	; (b4df4 <_Z16_fetch_usbserialv+0x48>)
   b4de0:	f001 ff40 	bl	b6c64 <atexit>
	return _usbserial;
}
   b4de4:	4802      	ldr	r0, [pc, #8]	; (b4df0 <_Z16_fetch_usbserialv+0x44>)
   b4de6:	b008      	add	sp, #32
   b4de8:	bd10      	pop	{r4, pc}
   b4dea:	bf00      	nop
   b4dec:	2003e6f4 	.word	0x2003e6f4
   b4df0:	2003e6f8 	.word	0x2003e6f8
   b4df4:	000b4cf5 	.word	0x000b4cf5

000b4df8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4df8:	2200      	movs	r2, #0
   b4dfa:	6840      	ldr	r0, [r0, #4]
   b4dfc:	4611      	mov	r1, r2
   b4dfe:	f7ff bb7b 	b.w	b44f8 <network_ready>

000b4e02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e02:	2200      	movs	r2, #0
   b4e04:	6840      	ldr	r0, [r0, #4]
   b4e06:	4611      	mov	r1, r2
   b4e08:	f7ff bb96 	b.w	b4538 <network_listening>

000b4e0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e0c:	2200      	movs	r2, #0
   b4e0e:	6840      	ldr	r0, [r0, #4]
   b4e10:	4611      	mov	r1, r2
   b4e12:	f7ff bba1 	b.w	b4558 <network_get_listen_timeout>

000b4e16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e16:	6840      	ldr	r0, [r0, #4]
   b4e18:	2200      	movs	r2, #0
   b4e1a:	f7ff bb95 	b.w	b4548 <network_set_listen_timeout>

000b4e1e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e1e:	6840      	ldr	r0, [r0, #4]
   b4e20:	2200      	movs	r2, #0
   b4e22:	f081 0101 	eor.w	r1, r1, #1
   b4e26:	f7ff bb7f 	b.w	b4528 <network_listen>

000b4e2a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4e2a:	2300      	movs	r3, #0
   b4e2c:	6840      	ldr	r0, [r0, #4]
   b4e2e:	461a      	mov	r2, r3
   b4e30:	4619      	mov	r1, r3
   b4e32:	f7ff bb71 	b.w	b4518 <network_off>

000b4e36 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4e36:	2300      	movs	r3, #0
   b4e38:	6840      	ldr	r0, [r0, #4]
   b4e3a:	461a      	mov	r2, r3
   b4e3c:	4619      	mov	r1, r3
   b4e3e:	f7ff bb63 	b.w	b4508 <network_on>

000b4e42 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4e42:	2200      	movs	r2, #0
   b4e44:	6840      	ldr	r0, [r0, #4]
   b4e46:	4611      	mov	r1, r2
   b4e48:	f7ff bb46 	b.w	b44d8 <network_connecting>

000b4e4c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4e4c:	6840      	ldr	r0, [r0, #4]
   b4e4e:	2200      	movs	r2, #0
   b4e50:	2102      	movs	r1, #2
   b4e52:	f7ff bb49 	b.w	b44e8 <network_disconnect>

000b4e56 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4e56:	2300      	movs	r3, #0
   b4e58:	6840      	ldr	r0, [r0, #4]
   b4e5a:	461a      	mov	r2, r3
   b4e5c:	f7ff bb34 	b.w	b44c8 <network_connect>

000b4e60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4e60:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4e62:	2204      	movs	r2, #4
   b4e64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4e66:	4a02      	ldr	r2, [pc, #8]	; (b4e70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4e68:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4e6a:	4770      	bx	lr
   b4e6c:	2003e70c 	.word	0x2003e70c
   b4e70:	000b6f38 	.word	0x000b6f38

000b4e74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4e74:	4b01      	ldr	r3, [pc, #4]	; (b4e7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4e76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4e78:	4770      	bx	lr
   b4e7a:	bf00      	nop
   b4e7c:	2003e630 	.word	0x2003e630

000b4e80 <serialEventRun>:
{
   b4e80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4e82:	4b0b      	ldr	r3, [pc, #44]	; (b4eb0 <serialEventRun+0x30>)
   b4e84:	b143      	cbz	r3, b4e98 <serialEventRun+0x18>
   b4e86:	f7ff ff91 	bl	b4dac <_Z16_fetch_usbserialv>
   b4e8a:	6803      	ldr	r3, [r0, #0]
   b4e8c:	691b      	ldr	r3, [r3, #16]
   b4e8e:	4798      	blx	r3
   b4e90:	2800      	cmp	r0, #0
   b4e92:	dd01      	ble.n	b4e98 <serialEventRun+0x18>
        serialEvent();
   b4e94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4e98:	4b06      	ldr	r3, [pc, #24]	; (b4eb4 <serialEventRun+0x34>)
   b4e9a:	b143      	cbz	r3, b4eae <serialEventRun+0x2e>
   b4e9c:	f000 f932 	bl	b5104 <_Z22__fetch_global_Serial1v>
   b4ea0:	6803      	ldr	r3, [r0, #0]
   b4ea2:	691b      	ldr	r3, [r3, #16]
   b4ea4:	4798      	blx	r3
   b4ea6:	2800      	cmp	r0, #0
   b4ea8:	dd01      	ble.n	b4eae <serialEventRun+0x2e>
        serialEvent1();
   b4eaa:	f3af 8000 	nop.w
}
   b4eae:	bd08      	pop	{r3, pc}
	...

000b4eb8 <_post_loop>:
{
   b4eb8:	b508      	push	{r3, lr}
	serialEventRun();
   b4eba:	f7ff ffe1 	bl	b4e80 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4ebe:	f7ff f9ef 	bl	b42a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4ec2:	4b01      	ldr	r3, [pc, #4]	; (b4ec8 <_post_loop+0x10>)
   b4ec4:	6018      	str	r0, [r3, #0]
}
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	2003e728 	.word	0x2003e728

000b4ecc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ecc:	4805      	ldr	r0, [pc, #20]	; (b4ee4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4ece:	4a06      	ldr	r2, [pc, #24]	; (b4ee8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4ed0:	4906      	ldr	r1, [pc, #24]	; (b4eec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4ed2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ed4:	1a12      	subs	r2, r2, r0
   b4ed6:	f001 fecb 	bl	b6c70 <memcpy>
    __backup_sram_signature = signature;
   b4eda:	4b05      	ldr	r3, [pc, #20]	; (b4ef0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4edc:	4a05      	ldr	r2, [pc, #20]	; (b4ef4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4ede:	601a      	str	r2, [r3, #0]
}
   b4ee0:	bd08      	pop	{r3, pc}
   b4ee2:	bf00      	nop
   b4ee4:	2003f400 	.word	0x2003f400
   b4ee8:	2003f404 	.word	0x2003f404
   b4eec:	000b7044 	.word	0x000b7044
   b4ef0:	2003f400 	.word	0x2003f400
   b4ef4:	9a271c1e 	.word	0x9a271c1e

000b4ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4ef8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4efa:	2300      	movs	r3, #0
   b4efc:	9300      	str	r3, [sp, #0]
   b4efe:	461a      	mov	r2, r3
   b4f00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f04:	f7ff face 	bl	b44a4 <system_ctrl_set_result>
}
   b4f08:	b003      	add	sp, #12
   b4f0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f12:	8843      	ldrh	r3, [r0, #2]
   b4f14:	2b0a      	cmp	r3, #10
   b4f16:	d008      	beq.n	b4f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f18:	2b50      	cmp	r3, #80	; 0x50
   b4f1a:	d10b      	bne.n	b4f34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f1c:	4b09      	ldr	r3, [pc, #36]	; (b4f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f1e:	681b      	ldr	r3, [r3, #0]
   b4f20:	b14b      	cbz	r3, b4f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f22:	b003      	add	sp, #12
   b4f24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4f28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4f2a:	f7ff ffe5 	bl	b4ef8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4f2e:	b003      	add	sp, #12
   b4f30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f34:	2300      	movs	r3, #0
   b4f36:	9300      	str	r3, [sp, #0]
   b4f38:	461a      	mov	r2, r3
   b4f3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f3e:	f7ff fab1 	bl	b44a4 <system_ctrl_set_result>
}
   b4f42:	e7f4      	b.n	b4f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4f44:	2003e718 	.word	0x2003e718

000b4f48 <module_user_init_hook>:
{
   b4f48:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4f4a:	4812      	ldr	r0, [pc, #72]	; (b4f94 <module_user_init_hook+0x4c>)
   b4f4c:	2100      	movs	r1, #0
   b4f4e:	f7ff fb3b 	bl	b45c8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4f52:	4b11      	ldr	r3, [pc, #68]	; (b4f98 <module_user_init_hook+0x50>)
   b4f54:	681a      	ldr	r2, [r3, #0]
   b4f56:	4b11      	ldr	r3, [pc, #68]	; (b4f9c <module_user_init_hook+0x54>)
   b4f58:	429a      	cmp	r2, r3
   b4f5a:	4b11      	ldr	r3, [pc, #68]	; (b4fa0 <module_user_init_hook+0x58>)
   b4f5c:	bf0c      	ite	eq
   b4f5e:	2201      	moveq	r2, #1
   b4f60:	2200      	movne	r2, #0
   b4f62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4f64:	d001      	beq.n	b4f6a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4f66:	f7ff ffb1 	bl	b4ecc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4f6a:	f7ff f991 	bl	b4290 <HAL_RNG_GetRandomNumber>
   b4f6e:	4604      	mov	r4, r0
    srand(seed);
   b4f70:	f001 fe94 	bl	b6c9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4f74:	4b0b      	ldr	r3, [pc, #44]	; (b4fa4 <module_user_init_hook+0x5c>)
   b4f76:	b113      	cbz	r3, b4f7e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4f78:	4620      	mov	r0, r4
   b4f7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4f7e:	2100      	movs	r1, #0
   b4f80:	4808      	ldr	r0, [pc, #32]	; (b4fa4 <module_user_init_hook+0x5c>)
   b4f82:	f7ff fa99 	bl	b44b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4f8a:	4807      	ldr	r0, [pc, #28]	; (b4fa8 <module_user_init_hook+0x60>)
   b4f8c:	2100      	movs	r1, #0
   b4f8e:	f7ff ba7f 	b.w	b4490 <system_ctrl_set_app_request_handler>
   b4f92:	bf00      	nop
   b4f94:	000b4e75 	.word	0x000b4e75
   b4f98:	2003f400 	.word	0x2003f400
   b4f9c:	9a271c1e 	.word	0x9a271c1e
   b4fa0:	2003e714 	.word	0x2003e714
   b4fa4:	00000000 	.word	0x00000000
   b4fa8:	000b4f11 	.word	0x000b4f11

000b4fac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4fac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4fae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4fb0:	d902      	bls.n	b4fb8 <pinAvailable+0xc>
    return false;
   b4fb2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4fb4:	b002      	add	sp, #8
   b4fb6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4fb8:	f1a0 030b 	sub.w	r3, r0, #11
   b4fbc:	2b02      	cmp	r3, #2
   b4fbe:	d81a      	bhi.n	b4ff6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4fc0:	4c17      	ldr	r4, [pc, #92]	; (b5020 <pinAvailable+0x74>)
   b4fc2:	7821      	ldrb	r1, [r4, #0]
   b4fc4:	f3bf 8f5b 	dmb	ish
   b4fc8:	f011 0101 	ands.w	r1, r1, #1
   b4fcc:	d10b      	bne.n	b4fe6 <pinAvailable+0x3a>
   b4fce:	4620      	mov	r0, r4
   b4fd0:	9101      	str	r1, [sp, #4]
   b4fd2:	f7ff f864 	bl	b409e <__cxa_guard_acquire>
   b4fd6:	9901      	ldr	r1, [sp, #4]
   b4fd8:	b128      	cbz	r0, b4fe6 <pinAvailable+0x3a>
   b4fda:	4812      	ldr	r0, [pc, #72]	; (b5024 <pinAvailable+0x78>)
   b4fdc:	f7ff fe10 	bl	b4c00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4fe0:	4620      	mov	r0, r4
   b4fe2:	f7ff f861 	bl	b40a8 <__cxa_guard_release>
   b4fe6:	4b0f      	ldr	r3, [pc, #60]	; (b5024 <pinAvailable+0x78>)
   b4fe8:	7818      	ldrb	r0, [r3, #0]
   b4fea:	f7ff f9c9 	bl	b4380 <hal_spi_is_enabled>
   b4fee:	2800      	cmp	r0, #0
   b4ff0:	d1df      	bne.n	b4fb2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b4ff2:	2001      	movs	r0, #1
   b4ff4:	e7de      	b.n	b4fb4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4ff6:	2801      	cmp	r0, #1
   b4ff8:	d809      	bhi.n	b500e <pinAvailable+0x62>
   b4ffa:	f000 f843 	bl	b5084 <_Z19__fetch_global_Wirev>
   b4ffe:	2100      	movs	r1, #0
   b5000:	7c00      	ldrb	r0, [r0, #16]
   b5002:	f7ff f98d 	bl	b4320 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5006:	f080 0001 	eor.w	r0, r0, #1
   b500a:	b2c0      	uxtb	r0, r0
   b500c:	e7d2      	b.n	b4fb4 <pinAvailable+0x8>
   b500e:	3809      	subs	r0, #9
   b5010:	2801      	cmp	r0, #1
   b5012:	d8ee      	bhi.n	b4ff2 <pinAvailable+0x46>
   b5014:	f000 f876 	bl	b5104 <_Z22__fetch_global_Serial1v>
   b5018:	7c00      	ldrb	r0, [r0, #16]
   b501a:	f7ff f9e1 	bl	b43e0 <hal_usart_is_enabled>
   b501e:	e7f2      	b.n	b5006 <pinAvailable+0x5a>
   b5020:	2003e71c 	.word	0x2003e71c
   b5024:	2003e720 	.word	0x2003e720

000b5028 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5028:	2823      	cmp	r0, #35	; 0x23
{
   b502a:	b538      	push	{r3, r4, r5, lr}
   b502c:	4604      	mov	r4, r0
   b502e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5030:	d80a      	bhi.n	b5048 <pinMode+0x20>
   b5032:	29ff      	cmp	r1, #255	; 0xff
   b5034:	d008      	beq.n	b5048 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5036:	f7ff ffb9 	bl	b4fac <pinAvailable>
   b503a:	b128      	cbz	r0, b5048 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b503c:	4629      	mov	r1, r5
   b503e:	4620      	mov	r0, r4
}
   b5040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5044:	f7ff b934 	b.w	b42b0 <HAL_Pin_Mode>
}
   b5048:	bd38      	pop	{r3, r4, r5, pc}

000b504a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b504a:	f7ff b939 	b.w	b42c0 <HAL_Pulse_In>

000b504e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b504e:	4770      	bx	lr

000b5050 <_Z17acquireWireBufferv>:
{
   b5050:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5052:	4b0a      	ldr	r3, [pc, #40]	; (b507c <_Z17acquireWireBufferv+0x2c>)
   b5054:	6003      	str	r3, [r0, #0]
   b5056:	2301      	movs	r3, #1
{
   b5058:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b505a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b505c:	4908      	ldr	r1, [pc, #32]	; (b5080 <_Z17acquireWireBufferv+0x30>)
   b505e:	2020      	movs	r0, #32
   b5060:	f000 f874 	bl	b514c <_ZnajRKSt9nothrow_t>
	};
   b5064:	2520      	movs	r5, #32
   b5066:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5068:	4905      	ldr	r1, [pc, #20]	; (b5080 <_Z17acquireWireBufferv+0x30>)
	};
   b506a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b506c:	4628      	mov	r0, r5
   b506e:	f000 f86d 	bl	b514c <_ZnajRKSt9nothrow_t>
	};
   b5072:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5076:	4620      	mov	r0, r4
   b5078:	bd38      	pop	{r3, r4, r5, pc}
   b507a:	bf00      	nop
   b507c:	00010018 	.word	0x00010018
   b5080:	000b6f6c 	.word	0x000b6f6c

000b5084 <_Z19__fetch_global_Wirev>:
{
   b5084:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5086:	4d0e      	ldr	r5, [pc, #56]	; (b50c0 <_Z19__fetch_global_Wirev+0x3c>)
   b5088:	7829      	ldrb	r1, [r5, #0]
   b508a:	f3bf 8f5b 	dmb	ish
   b508e:	f011 0401 	ands.w	r4, r1, #1
{
   b5092:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5094:	d111      	bne.n	b50ba <_Z19__fetch_global_Wirev+0x36>
   b5096:	4628      	mov	r0, r5
   b5098:	f7ff f801 	bl	b409e <__cxa_guard_acquire>
   b509c:	b168      	cbz	r0, b50ba <_Z19__fetch_global_Wirev+0x36>
   b509e:	4668      	mov	r0, sp
   b50a0:	f7ff ffd6 	bl	b5050 <_Z17acquireWireBufferv>
   b50a4:	466a      	mov	r2, sp
   b50a6:	4621      	mov	r1, r4
   b50a8:	4806      	ldr	r0, [pc, #24]	; (b50c4 <_Z19__fetch_global_Wirev+0x40>)
   b50aa:	f7ff fb07 	bl	b46bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b50ae:	4628      	mov	r0, r5
   b50b0:	f7fe fffa 	bl	b40a8 <__cxa_guard_release>
   b50b4:	4804      	ldr	r0, [pc, #16]	; (b50c8 <_Z19__fetch_global_Wirev+0x44>)
   b50b6:	f001 fdd5 	bl	b6c64 <atexit>
	return wire;
}
   b50ba:	4802      	ldr	r0, [pc, #8]	; (b50c4 <_Z19__fetch_global_Wirev+0x40>)
   b50bc:	b007      	add	sp, #28
   b50be:	bd30      	pop	{r4, r5, pc}
   b50c0:	2003e72c 	.word	0x2003e72c
   b50c4:	2003e730 	.word	0x2003e730
   b50c8:	000b504f 	.word	0x000b504f

000b50cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50cc:	4770      	bx	lr
	...

000b50d0 <_Z20acquireSerial1Bufferv>:
{
   b50d0:	b538      	push	{r3, r4, r5, lr}
   b50d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b50d4:	2514      	movs	r5, #20
   b50d6:	462a      	mov	r2, r5
   b50d8:	2100      	movs	r1, #0
   b50da:	f001 fdd7 	bl	b6c8c <memset>
   b50de:	8025      	strh	r5, [r4, #0]
   b50e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50e2:	4907      	ldr	r1, [pc, #28]	; (b5100 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b50e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b50e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ea:	f000 f82f 	bl	b514c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ee:	4904      	ldr	r1, [pc, #16]	; (b5100 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b50f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50f2:	4628      	mov	r0, r5
   b50f4:	f000 f82a 	bl	b514c <_ZnajRKSt9nothrow_t>
    };
   b50f8:	60e0      	str	r0, [r4, #12]
}
   b50fa:	4620      	mov	r0, r4
   b50fc:	bd38      	pop	{r3, r4, r5, pc}
   b50fe:	bf00      	nop
   b5100:	000b6f6c 	.word	0x000b6f6c

000b5104 <_Z22__fetch_global_Serial1v>:
{
   b5104:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5106:	4d0e      	ldr	r5, [pc, #56]	; (b5140 <_Z22__fetch_global_Serial1v+0x3c>)
   b5108:	7829      	ldrb	r1, [r5, #0]
   b510a:	f3bf 8f5b 	dmb	ish
   b510e:	f011 0401 	ands.w	r4, r1, #1
{
   b5112:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5114:	d111      	bne.n	b513a <_Z22__fetch_global_Serial1v+0x36>
   b5116:	4628      	mov	r0, r5
   b5118:	f7fe ffc1 	bl	b409e <__cxa_guard_acquire>
   b511c:	b168      	cbz	r0, b513a <_Z22__fetch_global_Serial1v+0x36>
   b511e:	a801      	add	r0, sp, #4
   b5120:	f7ff ffd6 	bl	b50d0 <_Z20acquireSerial1Bufferv>
   b5124:	aa01      	add	r2, sp, #4
   b5126:	4621      	mov	r1, r4
   b5128:	4806      	ldr	r0, [pc, #24]	; (b5144 <_Z22__fetch_global_Serial1v+0x40>)
   b512a:	f7ff fdcd 	bl	b4cc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b512e:	4628      	mov	r0, r5
   b5130:	f7fe ffba 	bl	b40a8 <__cxa_guard_release>
   b5134:	4804      	ldr	r0, [pc, #16]	; (b5148 <_Z22__fetch_global_Serial1v+0x44>)
   b5136:	f001 fd95 	bl	b6c64 <atexit>
    return serial1;
}
   b513a:	4802      	ldr	r0, [pc, #8]	; (b5144 <_Z22__fetch_global_Serial1v+0x40>)
   b513c:	b007      	add	sp, #28
   b513e:	bd30      	pop	{r4, r5, pc}
   b5140:	2003e744 	.word	0x2003e744
   b5144:	2003e748 	.word	0x2003e748
   b5148:	000b50cd 	.word	0x000b50cd

000b514c <_ZnajRKSt9nothrow_t>:
   b514c:	f7fe bfa3 	b.w	b4096 <_Znaj>

000b5150 <pow>:
   b5150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5152:	ed2d 8b02 	vpush	{d8}
   b5156:	ec57 6b10 	vmov	r6, r7, d0
   b515a:	ec55 4b11 	vmov	r4, r5, d1
   b515e:	f000 f8cb 	bl	b52f8 <__ieee754_pow>
   b5162:	4b63      	ldr	r3, [pc, #396]	; (b52f0 <pow+0x1a0>)
   b5164:	eeb0 8a40 	vmov.f32	s16, s0
   b5168:	eef0 8a60 	vmov.f32	s17, s1
   b516c:	f993 3000 	ldrsb.w	r3, [r3]
   b5170:	3301      	adds	r3, #1
   b5172:	d02a      	beq.n	b51ca <pow+0x7a>
   b5174:	4622      	mov	r2, r4
   b5176:	462b      	mov	r3, r5
   b5178:	4620      	mov	r0, r4
   b517a:	4629      	mov	r1, r5
   b517c:	f001 fcc4 	bl	b6b08 <__aeabi_dcmpun>
   b5180:	bb18      	cbnz	r0, b51ca <pow+0x7a>
   b5182:	4632      	mov	r2, r6
   b5184:	463b      	mov	r3, r7
   b5186:	4630      	mov	r0, r6
   b5188:	4639      	mov	r1, r7
   b518a:	f001 fcbd 	bl	b6b08 <__aeabi_dcmpun>
   b518e:	2800      	cmp	r0, #0
   b5190:	d144      	bne.n	b521c <pow+0xcc>
   b5192:	2200      	movs	r2, #0
   b5194:	2300      	movs	r3, #0
   b5196:	4630      	mov	r0, r6
   b5198:	4639      	mov	r1, r7
   b519a:	f001 fc83 	bl	b6aa4 <__aeabi_dcmpeq>
   b519e:	b1d8      	cbz	r0, b51d8 <pow+0x88>
   b51a0:	2200      	movs	r2, #0
   b51a2:	2300      	movs	r3, #0
   b51a4:	4620      	mov	r0, r4
   b51a6:	4629      	mov	r1, r5
   b51a8:	f001 fc7c 	bl	b6aa4 <__aeabi_dcmpeq>
   b51ac:	2800      	cmp	r0, #0
   b51ae:	d13d      	bne.n	b522c <pow+0xdc>
   b51b0:	ec45 4b10 	vmov	d0, r4, r5
   b51b4:	f000 ff10 	bl	b5fd8 <finite>
   b51b8:	b138      	cbz	r0, b51ca <pow+0x7a>
   b51ba:	4620      	mov	r0, r4
   b51bc:	4629      	mov	r1, r5
   b51be:	2200      	movs	r2, #0
   b51c0:	2300      	movs	r3, #0
   b51c2:	f001 fc79 	bl	b6ab8 <__aeabi_dcmplt>
   b51c6:	2800      	cmp	r0, #0
   b51c8:	d15c      	bne.n	b5284 <pow+0x134>
   b51ca:	eeb0 0a48 	vmov.f32	s0, s16
   b51ce:	eef0 0a68 	vmov.f32	s1, s17
   b51d2:	ecbd 8b02 	vpop	{d8}
   b51d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b51d8:	eeb0 0a48 	vmov.f32	s0, s16
   b51dc:	eef0 0a68 	vmov.f32	s1, s17
   b51e0:	f000 fefa 	bl	b5fd8 <finite>
   b51e4:	b358      	cbz	r0, b523e <pow+0xee>
   b51e6:	ec51 0b18 	vmov	r0, r1, d8
   b51ea:	2200      	movs	r2, #0
   b51ec:	2300      	movs	r3, #0
   b51ee:	f001 fc59 	bl	b6aa4 <__aeabi_dcmpeq>
   b51f2:	2800      	cmp	r0, #0
   b51f4:	d0e9      	beq.n	b51ca <pow+0x7a>
   b51f6:	ec47 6b10 	vmov	d0, r6, r7
   b51fa:	f000 feed 	bl	b5fd8 <finite>
   b51fe:	2800      	cmp	r0, #0
   b5200:	d0e3      	beq.n	b51ca <pow+0x7a>
   b5202:	ec45 4b10 	vmov	d0, r4, r5
   b5206:	f000 fee7 	bl	b5fd8 <finite>
   b520a:	2800      	cmp	r0, #0
   b520c:	d0dd      	beq.n	b51ca <pow+0x7a>
   b520e:	f7ff f9cb 	bl	b45a8 <__errno>
   b5212:	2322      	movs	r3, #34	; 0x22
   b5214:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b52d0 <pow+0x180>
   b5218:	6003      	str	r3, [r0, #0]
   b521a:	e7d6      	b.n	b51ca <pow+0x7a>
   b521c:	4620      	mov	r0, r4
   b521e:	4629      	mov	r1, r5
   b5220:	2200      	movs	r2, #0
   b5222:	2300      	movs	r3, #0
   b5224:	f001 fc3e 	bl	b6aa4 <__aeabi_dcmpeq>
   b5228:	2800      	cmp	r0, #0
   b522a:	d0ce      	beq.n	b51ca <pow+0x7a>
   b522c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b52d8 <pow+0x188>
   b5230:	eeb0 0a48 	vmov.f32	s0, s16
   b5234:	eef0 0a68 	vmov.f32	s1, s17
   b5238:	ecbd 8b02 	vpop	{d8}
   b523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b523e:	ec47 6b10 	vmov	d0, r6, r7
   b5242:	f000 fec9 	bl	b5fd8 <finite>
   b5246:	2800      	cmp	r0, #0
   b5248:	d0cd      	beq.n	b51e6 <pow+0x96>
   b524a:	ec45 4b10 	vmov	d0, r4, r5
   b524e:	f000 fec3 	bl	b5fd8 <finite>
   b5252:	2800      	cmp	r0, #0
   b5254:	d0c7      	beq.n	b51e6 <pow+0x96>
   b5256:	ec53 2b18 	vmov	r2, r3, d8
   b525a:	ee18 0a10 	vmov	r0, s16
   b525e:	4619      	mov	r1, r3
   b5260:	f001 fc52 	bl	b6b08 <__aeabi_dcmpun>
   b5264:	bb20      	cbnz	r0, b52b0 <pow+0x160>
   b5266:	f7ff f99f 	bl	b45a8 <__errno>
   b526a:	4603      	mov	r3, r0
   b526c:	2222      	movs	r2, #34	; 0x22
   b526e:	601a      	str	r2, [r3, #0]
   b5270:	4630      	mov	r0, r6
   b5272:	4639      	mov	r1, r7
   b5274:	2200      	movs	r2, #0
   b5276:	2300      	movs	r3, #0
   b5278:	f001 fc1e 	bl	b6ab8 <__aeabi_dcmplt>
   b527c:	b948      	cbnz	r0, b5292 <pow+0x142>
   b527e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b52e0 <pow+0x190>
   b5282:	e7a2      	b.n	b51ca <pow+0x7a>
   b5284:	f7ff f990 	bl	b45a8 <__errno>
   b5288:	2321      	movs	r3, #33	; 0x21
   b528a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b52e8 <pow+0x198>
   b528e:	6003      	str	r3, [r0, #0]
   b5290:	e79b      	b.n	b51ca <pow+0x7a>
   b5292:	ec45 4b10 	vmov	d0, r4, r5
   b5296:	f000 feb3 	bl	b6000 <rint>
   b529a:	4622      	mov	r2, r4
   b529c:	ec51 0b10 	vmov	r0, r1, d0
   b52a0:	462b      	mov	r3, r5
   b52a2:	f001 fbff 	bl	b6aa4 <__aeabi_dcmpeq>
   b52a6:	2800      	cmp	r0, #0
   b52a8:	d1e9      	bne.n	b527e <pow+0x12e>
   b52aa:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b52e8 <pow+0x198>
   b52ae:	e78c      	b.n	b51ca <pow+0x7a>
   b52b0:	f7ff f97a 	bl	b45a8 <__errno>
   b52b4:	2200      	movs	r2, #0
   b52b6:	2300      	movs	r3, #0
   b52b8:	2121      	movs	r1, #33	; 0x21
   b52ba:	6001      	str	r1, [r0, #0]
   b52bc:	4610      	mov	r0, r2
   b52be:	4619      	mov	r1, r3
   b52c0:	f001 fab2 	bl	b6828 <__aeabi_ddiv>
   b52c4:	ec41 0b18 	vmov	d8, r0, r1
   b52c8:	e77f      	b.n	b51ca <pow+0x7a>
   b52ca:	bf00      	nop
   b52cc:	f3af 8000 	nop.w
	...
   b52dc:	3ff00000 	.word	0x3ff00000
   b52e0:	00000000 	.word	0x00000000
   b52e4:	7ff00000 	.word	0x7ff00000
   b52e8:	00000000 	.word	0x00000000
   b52ec:	fff00000 	.word	0xfff00000
   b52f0:	2003e62c 	.word	0x2003e62c
   b52f4:	00000000 	.word	0x00000000

000b52f8 <__ieee754_pow>:
   b52f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52fc:	ec57 6b11 	vmov	r6, r7, d1
   b5300:	ed2d 8b0c 	vpush	{d8-d13}
   b5304:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b5308:	ea5a 0206 	orrs.w	r2, sl, r6
   b530c:	b087      	sub	sp, #28
   b530e:	d03d      	beq.n	b538c <__ieee754_pow+0x94>
   b5310:	ec55 4b10 	vmov	r4, r5, d0
   b5314:	4972      	ldr	r1, [pc, #456]	; (b54e0 <__ieee754_pow+0x1e8>)
   b5316:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b531a:	4588      	cmp	r8, r1
   b531c:	ee10 2a10 	vmov	r2, s0
   b5320:	46a9      	mov	r9, r5
   b5322:	dc2c      	bgt.n	b537e <__ieee754_pow+0x86>
   b5324:	ee11 3a10 	vmov	r3, s2
   b5328:	46bb      	mov	fp, r7
   b532a:	d036      	beq.n	b539a <__ieee754_pow+0xa2>
   b532c:	458a      	cmp	sl, r1
   b532e:	dc26      	bgt.n	b537e <__ieee754_pow+0x86>
   b5330:	496b      	ldr	r1, [pc, #428]	; (b54e0 <__ieee754_pow+0x1e8>)
   b5332:	458a      	cmp	sl, r1
   b5334:	d021      	beq.n	b537a <__ieee754_pow+0x82>
   b5336:	f1b9 0f00 	cmp.w	r9, #0
   b533a:	db39      	blt.n	b53b0 <__ieee754_pow+0xb8>
   b533c:	2100      	movs	r1, #0
   b533e:	9100      	str	r1, [sp, #0]
   b5340:	2b00      	cmp	r3, #0
   b5342:	d151      	bne.n	b53e8 <__ieee754_pow+0xf0>
   b5344:	4b66      	ldr	r3, [pc, #408]	; (b54e0 <__ieee754_pow+0x1e8>)
   b5346:	459a      	cmp	sl, r3
   b5348:	f000 80a2 	beq.w	b5490 <__ieee754_pow+0x198>
   b534c:	4b65      	ldr	r3, [pc, #404]	; (b54e4 <__ieee754_pow+0x1ec>)
   b534e:	459a      	cmp	sl, r3
   b5350:	f000 80b0 	beq.w	b54b4 <__ieee754_pow+0x1bc>
   b5354:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b5358:	f000 84c0 	beq.w	b5cdc <__ieee754_pow+0x9e4>
   b535c:	4b62      	ldr	r3, [pc, #392]	; (b54e8 <__ieee754_pow+0x1f0>)
   b535e:	459b      	cmp	fp, r3
   b5360:	d142      	bne.n	b53e8 <__ieee754_pow+0xf0>
   b5362:	f1b9 0f00 	cmp.w	r9, #0
   b5366:	db3f      	blt.n	b53e8 <__ieee754_pow+0xf0>
   b5368:	ec45 4b10 	vmov	d0, r4, r5
   b536c:	b007      	add	sp, #28
   b536e:	ecbd 8b0c 	vpop	{d8-d13}
   b5372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5376:	f000 bd59 	b.w	b5e2c <__ieee754_sqrt>
   b537a:	2b00      	cmp	r3, #0
   b537c:	d0db      	beq.n	b5336 <__ieee754_pow+0x3e>
   b537e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5382:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b5386:	ea58 0302 	orrs.w	r3, r8, r2
   b538a:	d109      	bne.n	b53a0 <__ieee754_pow+0xa8>
   b538c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b54d0 <__ieee754_pow+0x1d8>
   b5390:	b007      	add	sp, #28
   b5392:	ecbd 8b0c 	vpop	{d8-d13}
   b5396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b539a:	b90c      	cbnz	r4, b53a0 <__ieee754_pow+0xa8>
   b539c:	45c2      	cmp	sl, r8
   b539e:	ddc7      	ble.n	b5330 <__ieee754_pow+0x38>
   b53a0:	4852      	ldr	r0, [pc, #328]	; (b54ec <__ieee754_pow+0x1f4>)
   b53a2:	b007      	add	sp, #28
   b53a4:	ecbd 8b0c 	vpop	{d8-d13}
   b53a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53ac:	f000 be20 	b.w	b5ff0 <nan>
   b53b0:	494f      	ldr	r1, [pc, #316]	; (b54f0 <__ieee754_pow+0x1f8>)
   b53b2:	458a      	cmp	sl, r1
   b53b4:	f300 8085 	bgt.w	b54c2 <__ieee754_pow+0x1ca>
   b53b8:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b53bc:	458a      	cmp	sl, r1
   b53be:	dd0f      	ble.n	b53e0 <__ieee754_pow+0xe8>
   b53c0:	ea4f 512a 	mov.w	r1, sl, asr #20
   b53c4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b53c8:	2914      	cmp	r1, #20
   b53ca:	f340 849b 	ble.w	b5d04 <__ieee754_pow+0xa0c>
   b53ce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b53d2:	fa23 f001 	lsr.w	r0, r3, r1
   b53d6:	fa00 f101 	lsl.w	r1, r0, r1
   b53da:	4299      	cmp	r1, r3
   b53dc:	f000 84ed 	beq.w	b5dba <__ieee754_pow+0xac2>
   b53e0:	2100      	movs	r1, #0
   b53e2:	9100      	str	r1, [sp, #0]
   b53e4:	2b00      	cmp	r3, #0
   b53e6:	d0b1      	beq.n	b534c <__ieee754_pow+0x54>
   b53e8:	ec45 4b10 	vmov	d0, r4, r5
   b53ec:	9202      	str	r2, [sp, #8]
   b53ee:	f000 fde9 	bl	b5fc4 <fabs>
   b53f2:	9a02      	ldr	r2, [sp, #8]
   b53f4:	bb5a      	cbnz	r2, b544e <__ieee754_pow+0x156>
   b53f6:	f1b8 0f00 	cmp.w	r8, #0
   b53fa:	d004      	beq.n	b5406 <__ieee754_pow+0x10e>
   b53fc:	4b39      	ldr	r3, [pc, #228]	; (b54e4 <__ieee754_pow+0x1ec>)
   b53fe:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b5402:	429a      	cmp	r2, r3
   b5404:	d123      	bne.n	b544e <__ieee754_pow+0x156>
   b5406:	f1bb 0f00 	cmp.w	fp, #0
   b540a:	da07      	bge.n	b541c <__ieee754_pow+0x124>
   b540c:	ec53 2b10 	vmov	r2, r3, d0
   b5410:	4934      	ldr	r1, [pc, #208]	; (b54e4 <__ieee754_pow+0x1ec>)
   b5412:	2000      	movs	r0, #0
   b5414:	f001 fa08 	bl	b6828 <__aeabi_ddiv>
   b5418:	ec41 0b10 	vmov	d0, r0, r1
   b541c:	f1b9 0f00 	cmp.w	r9, #0
   b5420:	dab6      	bge.n	b5390 <__ieee754_pow+0x98>
   b5422:	9b00      	ldr	r3, [sp, #0]
   b5424:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b5428:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b542c:	ea58 0303 	orrs.w	r3, r8, r3
   b5430:	f040 848d 	bne.w	b5d4e <__ieee754_pow+0xa56>
   b5434:	ec53 2b10 	vmov	r2, r3, d0
   b5438:	4610      	mov	r0, r2
   b543a:	4619      	mov	r1, r3
   b543c:	f000 ff12 	bl	b6264 <__aeabi_dsub>
   b5440:	4602      	mov	r2, r0
   b5442:	460b      	mov	r3, r1
   b5444:	f001 f9f0 	bl	b6828 <__aeabi_ddiv>
   b5448:	ec41 0b10 	vmov	d0, r0, r1
   b544c:	e7a0      	b.n	b5390 <__ieee754_pow+0x98>
   b544e:	9a00      	ldr	r2, [sp, #0]
   b5450:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b5454:	3b01      	subs	r3, #1
   b5456:	9304      	str	r3, [sp, #16]
   b5458:	4313      	orrs	r3, r2
   b545a:	d035      	beq.n	b54c8 <__ieee754_pow+0x1d0>
   b545c:	4b25      	ldr	r3, [pc, #148]	; (b54f4 <__ieee754_pow+0x1fc>)
   b545e:	459a      	cmp	sl, r3
   b5460:	dd4c      	ble.n	b54fc <__ieee754_pow+0x204>
   b5462:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b5466:	459a      	cmp	sl, r3
   b5468:	4b23      	ldr	r3, [pc, #140]	; (b54f8 <__ieee754_pow+0x200>)
   b546a:	f340 83db 	ble.w	b5c24 <__ieee754_pow+0x92c>
   b546e:	4598      	cmp	r8, r3
   b5470:	f340 8360 	ble.w	b5b34 <__ieee754_pow+0x83c>
   b5474:	f1bb 0f00 	cmp.w	fp, #0
   b5478:	f340 8360 	ble.w	b5b3c <__ieee754_pow+0x844>
   b547c:	a316      	add	r3, pc, #88	; (adr r3, b54d8 <__ieee754_pow+0x1e0>)
   b547e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5482:	4610      	mov	r0, r2
   b5484:	4619      	mov	r1, r3
   b5486:	f001 f8a5 	bl	b65d4 <__aeabi_dmul>
   b548a:	ec41 0b10 	vmov	d0, r0, r1
   b548e:	e77f      	b.n	b5390 <__ieee754_pow+0x98>
   b5490:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b5494:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b5498:	4313      	orrs	r3, r2
   b549a:	f43f af77 	beq.w	b538c <__ieee754_pow+0x94>
   b549e:	4b16      	ldr	r3, [pc, #88]	; (b54f8 <__ieee754_pow+0x200>)
   b54a0:	4598      	cmp	r8, r3
   b54a2:	f340 837a 	ble.w	b5b9a <__ieee754_pow+0x8a2>
   b54a6:	f1bb 0f00 	cmp.w	fp, #0
   b54aa:	f2c0 8347 	blt.w	b5b3c <__ieee754_pow+0x844>
   b54ae:	ec47 6b10 	vmov	d0, r6, r7
   b54b2:	e76d      	b.n	b5390 <__ieee754_pow+0x98>
   b54b4:	f1bb 0f00 	cmp.w	fp, #0
   b54b8:	f2c0 841a 	blt.w	b5cf0 <__ieee754_pow+0x9f8>
   b54bc:	ec45 4b10 	vmov	d0, r4, r5
   b54c0:	e766      	b.n	b5390 <__ieee754_pow+0x98>
   b54c2:	2102      	movs	r1, #2
   b54c4:	9100      	str	r1, [sp, #0]
   b54c6:	e73b      	b.n	b5340 <__ieee754_pow+0x48>
   b54c8:	4622      	mov	r2, r4
   b54ca:	462b      	mov	r3, r5
   b54cc:	e7b4      	b.n	b5438 <__ieee754_pow+0x140>
   b54ce:	bf00      	nop
   b54d0:	00000000 	.word	0x00000000
   b54d4:	3ff00000 	.word	0x3ff00000
   b54d8:	8800759c 	.word	0x8800759c
   b54dc:	7e37e43c 	.word	0x7e37e43c
   b54e0:	7ff00000 	.word	0x7ff00000
   b54e4:	3ff00000 	.word	0x3ff00000
   b54e8:	3fe00000 	.word	0x3fe00000
   b54ec:	000b6f70 	.word	0x000b6f70
   b54f0:	433fffff 	.word	0x433fffff
   b54f4:	41e00000 	.word	0x41e00000
   b54f8:	3fefffff 	.word	0x3fefffff
   b54fc:	4be4      	ldr	r3, [pc, #912]	; (b5890 <__ieee754_pow+0x598>)
   b54fe:	ea09 0303 	and.w	r3, r9, r3
   b5502:	2200      	movs	r2, #0
   b5504:	b953      	cbnz	r3, b551c <__ieee754_pow+0x224>
   b5506:	ec51 0b10 	vmov	r0, r1, d0
   b550a:	4be2      	ldr	r3, [pc, #904]	; (b5894 <__ieee754_pow+0x59c>)
   b550c:	f001 f862 	bl	b65d4 <__aeabi_dmul>
   b5510:	ec41 0b10 	vmov	d0, r0, r1
   b5514:	ee10 8a90 	vmov	r8, s1
   b5518:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b551c:	ea4f 5328 	mov.w	r3, r8, asr #20
   b5520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b5524:	189a      	adds	r2, r3, r2
   b5526:	4bdc      	ldr	r3, [pc, #880]	; (b5898 <__ieee754_pow+0x5a0>)
   b5528:	9205      	str	r2, [sp, #20]
   b552a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b552e:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b5532:	4598      	cmp	r8, r3
   b5534:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b5538:	dd07      	ble.n	b554a <__ieee754_pow+0x252>
   b553a:	4bd8      	ldr	r3, [pc, #864]	; (b589c <__ieee754_pow+0x5a4>)
   b553c:	4598      	cmp	r8, r3
   b553e:	f340 8414 	ble.w	b5d6a <__ieee754_pow+0xa72>
   b5542:	3201      	adds	r2, #1
   b5544:	9205      	str	r2, [sp, #20]
   b5546:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b554a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b5830 <__ieee754_pow+0x538>
   b554e:	ed9f 7bba 	vldr	d7, [pc, #744]	; b5838 <__ieee754_pow+0x540>
   b5552:	ec53 2b16 	vmov	r2, r3, d6
   b5556:	eeb0 ca47 	vmov.f32	s24, s14
   b555a:	eef0 ca67 	vmov.f32	s25, s15
   b555e:	2500      	movs	r5, #0
   b5560:	eeb0 da47 	vmov.f32	s26, s14
   b5564:	eef0 da67 	vmov.f32	s27, s15
   b5568:	ec5b ab10 	vmov	sl, fp, d0
   b556c:	46a3      	mov	fp, r4
   b556e:	4650      	mov	r0, sl
   b5570:	4659      	mov	r1, fp
   b5572:	ec43 2b1a 	vmov	d10, r2, r3
   b5576:	f000 fe75 	bl	b6264 <__aeabi_dsub>
   b557a:	ec53 2b1a 	vmov	r2, r3, d10
   b557e:	4680      	mov	r8, r0
   b5580:	4689      	mov	r9, r1
   b5582:	4650      	mov	r0, sl
   b5584:	4659      	mov	r1, fp
   b5586:	f000 fe6f 	bl	b6268 <__adddf3>
   b558a:	4602      	mov	r2, r0
   b558c:	460b      	mov	r3, r1
   b558e:	2000      	movs	r0, #0
   b5590:	49c3      	ldr	r1, [pc, #780]	; (b58a0 <__ieee754_pow+0x5a8>)
   b5592:	f001 f949 	bl	b6828 <__aeabi_ddiv>
   b5596:	ec41 0b1b 	vmov	d11, r0, r1
   b559a:	4640      	mov	r0, r8
   b559c:	ec53 2b1b 	vmov	r2, r3, d11
   b55a0:	4649      	mov	r1, r9
   b55a2:	f001 f817 	bl	b65d4 <__aeabi_dmul>
   b55a6:	ec41 0b18 	vmov	d8, r0, r1
   b55aa:	460a      	mov	r2, r1
   b55ac:	4601      	mov	r1, r0
   b55ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b55b2:	2100      	movs	r1, #0
   b55b4:	9102      	str	r1, [sp, #8]
   b55b6:	1064      	asrs	r4, r4, #1
   b55b8:	ec4b ab19 	vmov	d9, sl, fp
   b55bc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b55c0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b55c4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b55c8:	2000      	movs	r0, #0
   b55ca:	1959      	adds	r1, r3, r5
   b55cc:	4604      	mov	r4, r0
   b55ce:	460d      	mov	r5, r1
   b55d0:	4602      	mov	r2, r0
   b55d2:	460b      	mov	r3, r1
   b55d4:	4650      	mov	r0, sl
   b55d6:	4659      	mov	r1, fp
   b55d8:	f000 fffc 	bl	b65d4 <__aeabi_dmul>
   b55dc:	4602      	mov	r2, r0
   b55de:	460b      	mov	r3, r1
   b55e0:	4640      	mov	r0, r8
   b55e2:	4649      	mov	r1, r9
   b55e4:	f000 fe3e 	bl	b6264 <__aeabi_dsub>
   b55e8:	ec53 2b1a 	vmov	r2, r3, d10
   b55ec:	4680      	mov	r8, r0
   b55ee:	4689      	mov	r9, r1
   b55f0:	4620      	mov	r0, r4
   b55f2:	4629      	mov	r1, r5
   b55f4:	f000 fe36 	bl	b6264 <__aeabi_dsub>
   b55f8:	4602      	mov	r2, r0
   b55fa:	460b      	mov	r3, r1
   b55fc:	ec51 0b19 	vmov	r0, r1, d9
   b5600:	f000 fe30 	bl	b6264 <__aeabi_dsub>
   b5604:	4652      	mov	r2, sl
   b5606:	465b      	mov	r3, fp
   b5608:	f000 ffe4 	bl	b65d4 <__aeabi_dmul>
   b560c:	4602      	mov	r2, r0
   b560e:	460b      	mov	r3, r1
   b5610:	4640      	mov	r0, r8
   b5612:	4649      	mov	r1, r9
   b5614:	f000 fe26 	bl	b6264 <__aeabi_dsub>
   b5618:	ec53 2b1b 	vmov	r2, r3, d11
   b561c:	f000 ffda 	bl	b65d4 <__aeabi_dmul>
   b5620:	ec53 2b18 	vmov	r2, r3, d8
   b5624:	ec41 0b19 	vmov	d9, r0, r1
   b5628:	ec51 0b18 	vmov	r0, r1, d8
   b562c:	f000 ffd2 	bl	b65d4 <__aeabi_dmul>
   b5630:	a383      	add	r3, pc, #524	; (adr r3, b5840 <__ieee754_pow+0x548>)
   b5632:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5636:	4604      	mov	r4, r0
   b5638:	460d      	mov	r5, r1
   b563a:	f000 ffcb 	bl	b65d4 <__aeabi_dmul>
   b563e:	a382      	add	r3, pc, #520	; (adr r3, b5848 <__ieee754_pow+0x550>)
   b5640:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5644:	f000 fe10 	bl	b6268 <__adddf3>
   b5648:	4622      	mov	r2, r4
   b564a:	462b      	mov	r3, r5
   b564c:	f000 ffc2 	bl	b65d4 <__aeabi_dmul>
   b5650:	a37f      	add	r3, pc, #508	; (adr r3, b5850 <__ieee754_pow+0x558>)
   b5652:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5656:	f000 fe07 	bl	b6268 <__adddf3>
   b565a:	4622      	mov	r2, r4
   b565c:	462b      	mov	r3, r5
   b565e:	f000 ffb9 	bl	b65d4 <__aeabi_dmul>
   b5662:	a37d      	add	r3, pc, #500	; (adr r3, b5858 <__ieee754_pow+0x560>)
   b5664:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5668:	f000 fdfe 	bl	b6268 <__adddf3>
   b566c:	4622      	mov	r2, r4
   b566e:	462b      	mov	r3, r5
   b5670:	f000 ffb0 	bl	b65d4 <__aeabi_dmul>
   b5674:	a37a      	add	r3, pc, #488	; (adr r3, b5860 <__ieee754_pow+0x568>)
   b5676:	e9d3 2300 	ldrd	r2, r3, [r3]
   b567a:	f000 fdf5 	bl	b6268 <__adddf3>
   b567e:	4622      	mov	r2, r4
   b5680:	462b      	mov	r3, r5
   b5682:	f000 ffa7 	bl	b65d4 <__aeabi_dmul>
   b5686:	a378      	add	r3, pc, #480	; (adr r3, b5868 <__ieee754_pow+0x570>)
   b5688:	e9d3 2300 	ldrd	r2, r3, [r3]
   b568c:	f000 fdec 	bl	b6268 <__adddf3>
   b5690:	4622      	mov	r2, r4
   b5692:	4680      	mov	r8, r0
   b5694:	4689      	mov	r9, r1
   b5696:	462b      	mov	r3, r5
   b5698:	4620      	mov	r0, r4
   b569a:	4629      	mov	r1, r5
   b569c:	f000 ff9a 	bl	b65d4 <__aeabi_dmul>
   b56a0:	4602      	mov	r2, r0
   b56a2:	460b      	mov	r3, r1
   b56a4:	4640      	mov	r0, r8
   b56a6:	4649      	mov	r1, r9
   b56a8:	f000 ff94 	bl	b65d4 <__aeabi_dmul>
   b56ac:	4652      	mov	r2, sl
   b56ae:	4604      	mov	r4, r0
   b56b0:	460d      	mov	r5, r1
   b56b2:	465b      	mov	r3, fp
   b56b4:	ec51 0b18 	vmov	r0, r1, d8
   b56b8:	f000 fdd6 	bl	b6268 <__adddf3>
   b56bc:	ec53 2b19 	vmov	r2, r3, d9
   b56c0:	f000 ff88 	bl	b65d4 <__aeabi_dmul>
   b56c4:	4622      	mov	r2, r4
   b56c6:	462b      	mov	r3, r5
   b56c8:	f000 fdce 	bl	b6268 <__adddf3>
   b56cc:	4652      	mov	r2, sl
   b56ce:	4680      	mov	r8, r0
   b56d0:	4689      	mov	r9, r1
   b56d2:	465b      	mov	r3, fp
   b56d4:	4650      	mov	r0, sl
   b56d6:	4659      	mov	r1, fp
   b56d8:	f000 ff7c 	bl	b65d4 <__aeabi_dmul>
   b56dc:	4602      	mov	r2, r0
   b56de:	460b      	mov	r3, r1
   b56e0:	ec43 2b1a 	vmov	d10, r2, r3
   b56e4:	4b6f      	ldr	r3, [pc, #444]	; (b58a4 <__ieee754_pow+0x5ac>)
   b56e6:	2200      	movs	r2, #0
   b56e8:	f000 fdbe 	bl	b6268 <__adddf3>
   b56ec:	4642      	mov	r2, r8
   b56ee:	464b      	mov	r3, r9
   b56f0:	f000 fdba 	bl	b6268 <__adddf3>
   b56f4:	2400      	movs	r4, #0
   b56f6:	460d      	mov	r5, r1
   b56f8:	4622      	mov	r2, r4
   b56fa:	462b      	mov	r3, r5
   b56fc:	4650      	mov	r0, sl
   b56fe:	4659      	mov	r1, fp
   b5700:	f000 ff68 	bl	b65d4 <__aeabi_dmul>
   b5704:	4b67      	ldr	r3, [pc, #412]	; (b58a4 <__ieee754_pow+0x5ac>)
   b5706:	4682      	mov	sl, r0
   b5708:	468b      	mov	fp, r1
   b570a:	2200      	movs	r2, #0
   b570c:	4620      	mov	r0, r4
   b570e:	4629      	mov	r1, r5
   b5710:	f000 fda8 	bl	b6264 <__aeabi_dsub>
   b5714:	ec53 2b1a 	vmov	r2, r3, d10
   b5718:	f000 fda4 	bl	b6264 <__aeabi_dsub>
   b571c:	4602      	mov	r2, r0
   b571e:	460b      	mov	r3, r1
   b5720:	4640      	mov	r0, r8
   b5722:	4649      	mov	r1, r9
   b5724:	f000 fd9e 	bl	b6264 <__aeabi_dsub>
   b5728:	ec53 2b18 	vmov	r2, r3, d8
   b572c:	f000 ff52 	bl	b65d4 <__aeabi_dmul>
   b5730:	4622      	mov	r2, r4
   b5732:	462b      	mov	r3, r5
   b5734:	4604      	mov	r4, r0
   b5736:	460d      	mov	r5, r1
   b5738:	ec51 0b19 	vmov	r0, r1, d9
   b573c:	f000 ff4a 	bl	b65d4 <__aeabi_dmul>
   b5740:	4602      	mov	r2, r0
   b5742:	460b      	mov	r3, r1
   b5744:	4620      	mov	r0, r4
   b5746:	4629      	mov	r1, r5
   b5748:	f000 fd8e 	bl	b6268 <__adddf3>
   b574c:	4680      	mov	r8, r0
   b574e:	4689      	mov	r9, r1
   b5750:	4642      	mov	r2, r8
   b5752:	464b      	mov	r3, r9
   b5754:	4650      	mov	r0, sl
   b5756:	4659      	mov	r1, fp
   b5758:	f000 fd86 	bl	b6268 <__adddf3>
   b575c:	a344      	add	r3, pc, #272	; (adr r3, b5870 <__ieee754_pow+0x578>)
   b575e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5762:	2000      	movs	r0, #0
   b5764:	4604      	mov	r4, r0
   b5766:	460d      	mov	r5, r1
   b5768:	f000 ff34 	bl	b65d4 <__aeabi_dmul>
   b576c:	4652      	mov	r2, sl
   b576e:	ec41 0b19 	vmov	d9, r0, r1
   b5772:	465b      	mov	r3, fp
   b5774:	4620      	mov	r0, r4
   b5776:	4629      	mov	r1, r5
   b5778:	f000 fd74 	bl	b6264 <__aeabi_dsub>
   b577c:	4602      	mov	r2, r0
   b577e:	460b      	mov	r3, r1
   b5780:	4640      	mov	r0, r8
   b5782:	4649      	mov	r1, r9
   b5784:	f000 fd6e 	bl	b6264 <__aeabi_dsub>
   b5788:	a33b      	add	r3, pc, #236	; (adr r3, b5878 <__ieee754_pow+0x580>)
   b578a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b578e:	f000 ff21 	bl	b65d4 <__aeabi_dmul>
   b5792:	4602      	mov	r2, r0
   b5794:	460b      	mov	r3, r1
   b5796:	4620      	mov	r0, r4
   b5798:	4629      	mov	r1, r5
   b579a:	4614      	mov	r4, r2
   b579c:	461d      	mov	r5, r3
   b579e:	a338      	add	r3, pc, #224	; (adr r3, b5880 <__ieee754_pow+0x588>)
   b57a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57a4:	f000 ff16 	bl	b65d4 <__aeabi_dmul>
   b57a8:	4602      	mov	r2, r0
   b57aa:	460b      	mov	r3, r1
   b57ac:	4620      	mov	r0, r4
   b57ae:	4629      	mov	r1, r5
   b57b0:	f000 fd5a 	bl	b6268 <__adddf3>
   b57b4:	ec53 2b1d 	vmov	r2, r3, d13
   b57b8:	f000 fd56 	bl	b6268 <__adddf3>
   b57bc:	4680      	mov	r8, r0
   b57be:	9805      	ldr	r0, [sp, #20]
   b57c0:	4689      	mov	r9, r1
   b57c2:	f000 fe9d 	bl	b6500 <__aeabi_i2d>
   b57c6:	4642      	mov	r2, r8
   b57c8:	4682      	mov	sl, r0
   b57ca:	468b      	mov	fp, r1
   b57cc:	464b      	mov	r3, r9
   b57ce:	ec51 0b19 	vmov	r0, r1, d9
   b57d2:	f000 fd49 	bl	b6268 <__adddf3>
   b57d6:	ec53 2b1c 	vmov	r2, r3, d12
   b57da:	f000 fd45 	bl	b6268 <__adddf3>
   b57de:	4652      	mov	r2, sl
   b57e0:	465b      	mov	r3, fp
   b57e2:	f000 fd41 	bl	b6268 <__adddf3>
   b57e6:	4652      	mov	r2, sl
   b57e8:	465b      	mov	r3, fp
   b57ea:	2000      	movs	r0, #0
   b57ec:	4604      	mov	r4, r0
   b57ee:	460d      	mov	r5, r1
   b57f0:	f000 fd38 	bl	b6264 <__aeabi_dsub>
   b57f4:	ec53 2b1c 	vmov	r2, r3, d12
   b57f8:	f000 fd34 	bl	b6264 <__aeabi_dsub>
   b57fc:	ec53 2b19 	vmov	r2, r3, d9
   b5800:	f000 fd30 	bl	b6264 <__aeabi_dsub>
   b5804:	4602      	mov	r2, r0
   b5806:	460b      	mov	r3, r1
   b5808:	4640      	mov	r0, r8
   b580a:	4649      	mov	r1, r9
   b580c:	f000 fd2a 	bl	b6264 <__aeabi_dsub>
   b5810:	9b00      	ldr	r3, [sp, #0]
   b5812:	9a04      	ldr	r2, [sp, #16]
   b5814:	3b01      	subs	r3, #1
   b5816:	4313      	orrs	r3, r2
   b5818:	4682      	mov	sl, r0
   b581a:	468b      	mov	fp, r1
   b581c:	f040 81b6 	bne.w	b5b8c <__ieee754_pow+0x894>
   b5820:	ed9f 7b19 	vldr	d7, [pc, #100]	; b5888 <__ieee754_pow+0x590>
   b5824:	eeb0 8a47 	vmov.f32	s16, s14
   b5828:	eef0 8a67 	vmov.f32	s17, s15
   b582c:	e03c      	b.n	b58a8 <__ieee754_pow+0x5b0>
   b582e:	bf00      	nop
   b5830:	00000000 	.word	0x00000000
   b5834:	3ff00000 	.word	0x3ff00000
	...
   b5840:	4a454eef 	.word	0x4a454eef
   b5844:	3fca7e28 	.word	0x3fca7e28
   b5848:	93c9db65 	.word	0x93c9db65
   b584c:	3fcd864a 	.word	0x3fcd864a
   b5850:	a91d4101 	.word	0xa91d4101
   b5854:	3fd17460 	.word	0x3fd17460
   b5858:	518f264d 	.word	0x518f264d
   b585c:	3fd55555 	.word	0x3fd55555
   b5860:	db6fabff 	.word	0xdb6fabff
   b5864:	3fdb6db6 	.word	0x3fdb6db6
   b5868:	33333303 	.word	0x33333303
   b586c:	3fe33333 	.word	0x3fe33333
   b5870:	e0000000 	.word	0xe0000000
   b5874:	3feec709 	.word	0x3feec709
   b5878:	dc3a03fd 	.word	0xdc3a03fd
   b587c:	3feec709 	.word	0x3feec709
   b5880:	145b01f5 	.word	0x145b01f5
   b5884:	be3e2fe0 	.word	0xbe3e2fe0
   b5888:	00000000 	.word	0x00000000
   b588c:	bff00000 	.word	0xbff00000
   b5890:	7ff00000 	.word	0x7ff00000
   b5894:	43400000 	.word	0x43400000
   b5898:	0003988e 	.word	0x0003988e
   b589c:	000bb679 	.word	0x000bb679
   b58a0:	3ff00000 	.word	0x3ff00000
   b58a4:	40080000 	.word	0x40080000
   b58a8:	2300      	movs	r3, #0
   b58aa:	e9cd 6700 	strd	r6, r7, [sp]
   b58ae:	9300      	str	r3, [sp, #0]
   b58b0:	e9dd 8900 	ldrd	r8, r9, [sp]
   b58b4:	4630      	mov	r0, r6
   b58b6:	4642      	mov	r2, r8
   b58b8:	464b      	mov	r3, r9
   b58ba:	4639      	mov	r1, r7
   b58bc:	f000 fcd2 	bl	b6264 <__aeabi_dsub>
   b58c0:	4622      	mov	r2, r4
   b58c2:	462b      	mov	r3, r5
   b58c4:	f000 fe86 	bl	b65d4 <__aeabi_dmul>
   b58c8:	4632      	mov	r2, r6
   b58ca:	463b      	mov	r3, r7
   b58cc:	4606      	mov	r6, r0
   b58ce:	460f      	mov	r7, r1
   b58d0:	4650      	mov	r0, sl
   b58d2:	4659      	mov	r1, fp
   b58d4:	f000 fe7e 	bl	b65d4 <__aeabi_dmul>
   b58d8:	4602      	mov	r2, r0
   b58da:	460b      	mov	r3, r1
   b58dc:	4630      	mov	r0, r6
   b58de:	4639      	mov	r1, r7
   b58e0:	f000 fcc2 	bl	b6268 <__adddf3>
   b58e4:	4642      	mov	r2, r8
   b58e6:	464b      	mov	r3, r9
   b58e8:	4606      	mov	r6, r0
   b58ea:	460f      	mov	r7, r1
   b58ec:	4620      	mov	r0, r4
   b58ee:	4629      	mov	r1, r5
   b58f0:	f000 fe70 	bl	b65d4 <__aeabi_dmul>
   b58f4:	4604      	mov	r4, r0
   b58f6:	460d      	mov	r5, r1
   b58f8:	462b      	mov	r3, r5
   b58fa:	4630      	mov	r0, r6
   b58fc:	4639      	mov	r1, r7
   b58fe:	4622      	mov	r2, r4
   b5900:	f000 fcb2 	bl	b6268 <__adddf3>
   b5904:	4bc2      	ldr	r3, [pc, #776]	; (b5c10 <__ieee754_pow+0x918>)
   b5906:	4299      	cmp	r1, r3
   b5908:	4680      	mov	r8, r0
   b590a:	4689      	mov	r9, r1
   b590c:	468a      	mov	sl, r1
   b590e:	f340 8118 	ble.w	b5b42 <__ieee754_pow+0x84a>
   b5912:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b5916:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b591a:	4303      	orrs	r3, r0
   b591c:	f040 8207 	bne.w	b5d2e <__ieee754_pow+0xa36>
   b5920:	a3a3      	add	r3, pc, #652	; (adr r3, b5bb0 <__ieee754_pow+0x8b8>)
   b5922:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5926:	4630      	mov	r0, r6
   b5928:	4639      	mov	r1, r7
   b592a:	f000 fc9d 	bl	b6268 <__adddf3>
   b592e:	4602      	mov	r2, r0
   b5930:	460b      	mov	r3, r1
   b5932:	4640      	mov	r0, r8
   b5934:	4649      	mov	r1, r9
   b5936:	4690      	mov	r8, r2
   b5938:	4699      	mov	r9, r3
   b593a:	4622      	mov	r2, r4
   b593c:	462b      	mov	r3, r5
   b593e:	f000 fc91 	bl	b6264 <__aeabi_dsub>
   b5942:	4602      	mov	r2, r0
   b5944:	460b      	mov	r3, r1
   b5946:	4640      	mov	r0, r8
   b5948:	4649      	mov	r1, r9
   b594a:	f001 f8d3 	bl	b6af4 <__aeabi_dcmpgt>
   b594e:	2800      	cmp	r0, #0
   b5950:	f040 81ed 	bne.w	b5d2e <__ieee754_pow+0xa36>
   b5954:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b5958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b595c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b5960:	fa42 f303 	asr.w	r3, r2, r3
   b5964:	4453      	add	r3, sl
   b5966:	49ab      	ldr	r1, [pc, #684]	; (b5c14 <__ieee754_pow+0x91c>)
   b5968:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b596c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b5970:	fa41 fc02 	asr.w	ip, r1, r2
   b5974:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b5978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b597c:	f1c2 0214 	rsb	r2, r2, #20
   b5980:	fa41 f202 	asr.w	r2, r1, r2
   b5984:	2000      	movs	r0, #0
   b5986:	ea23 010c 	bic.w	r1, r3, ip
   b598a:	f1ba 0f00 	cmp.w	sl, #0
   b598e:	9200      	str	r2, [sp, #0]
   b5990:	460b      	mov	r3, r1
   b5992:	4602      	mov	r2, r0
   b5994:	da02      	bge.n	b599c <__ieee754_pow+0x6a4>
   b5996:	9900      	ldr	r1, [sp, #0]
   b5998:	4249      	negs	r1, r1
   b599a:	9100      	str	r1, [sp, #0]
   b599c:	4620      	mov	r0, r4
   b599e:	4629      	mov	r1, r5
   b59a0:	f000 fc60 	bl	b6264 <__aeabi_dsub>
   b59a4:	9b00      	ldr	r3, [sp, #0]
   b59a6:	051b      	lsls	r3, r3, #20
   b59a8:	9302      	str	r3, [sp, #8]
   b59aa:	4602      	mov	r2, r0
   b59ac:	460b      	mov	r3, r1
   b59ae:	4604      	mov	r4, r0
   b59b0:	460d      	mov	r5, r1
   b59b2:	4630      	mov	r0, r6
   b59b4:	4639      	mov	r1, r7
   b59b6:	f000 fc57 	bl	b6268 <__adddf3>
   b59ba:	4689      	mov	r9, r1
   b59bc:	f04f 0800 	mov.w	r8, #0
   b59c0:	a37d      	add	r3, pc, #500	; (adr r3, b5bb8 <__ieee754_pow+0x8c0>)
   b59c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59c6:	4640      	mov	r0, r8
   b59c8:	4649      	mov	r1, r9
   b59ca:	f000 fe03 	bl	b65d4 <__aeabi_dmul>
   b59ce:	4622      	mov	r2, r4
   b59d0:	462b      	mov	r3, r5
   b59d2:	4682      	mov	sl, r0
   b59d4:	468b      	mov	fp, r1
   b59d6:	4640      	mov	r0, r8
   b59d8:	4649      	mov	r1, r9
   b59da:	f000 fc43 	bl	b6264 <__aeabi_dsub>
   b59de:	4602      	mov	r2, r0
   b59e0:	460b      	mov	r3, r1
   b59e2:	4630      	mov	r0, r6
   b59e4:	4639      	mov	r1, r7
   b59e6:	f000 fc3d 	bl	b6264 <__aeabi_dsub>
   b59ea:	a375      	add	r3, pc, #468	; (adr r3, b5bc0 <__ieee754_pow+0x8c8>)
   b59ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59f0:	f000 fdf0 	bl	b65d4 <__aeabi_dmul>
   b59f4:	a374      	add	r3, pc, #464	; (adr r3, b5bc8 <__ieee754_pow+0x8d0>)
   b59f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59fa:	4604      	mov	r4, r0
   b59fc:	460d      	mov	r5, r1
   b59fe:	4640      	mov	r0, r8
   b5a00:	4649      	mov	r1, r9
   b5a02:	f000 fde7 	bl	b65d4 <__aeabi_dmul>
   b5a06:	4602      	mov	r2, r0
   b5a08:	460b      	mov	r3, r1
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	4629      	mov	r1, r5
   b5a0e:	f000 fc2b 	bl	b6268 <__adddf3>
   b5a12:	4606      	mov	r6, r0
   b5a14:	460f      	mov	r7, r1
   b5a16:	4632      	mov	r2, r6
   b5a18:	463b      	mov	r3, r7
   b5a1a:	4650      	mov	r0, sl
   b5a1c:	4659      	mov	r1, fp
   b5a1e:	f000 fc23 	bl	b6268 <__adddf3>
   b5a22:	4652      	mov	r2, sl
   b5a24:	465b      	mov	r3, fp
   b5a26:	4604      	mov	r4, r0
   b5a28:	460d      	mov	r5, r1
   b5a2a:	f000 fc1b 	bl	b6264 <__aeabi_dsub>
   b5a2e:	4602      	mov	r2, r0
   b5a30:	460b      	mov	r3, r1
   b5a32:	4630      	mov	r0, r6
   b5a34:	4639      	mov	r1, r7
   b5a36:	f000 fc15 	bl	b6264 <__aeabi_dsub>
   b5a3a:	4622      	mov	r2, r4
   b5a3c:	4680      	mov	r8, r0
   b5a3e:	4689      	mov	r9, r1
   b5a40:	462b      	mov	r3, r5
   b5a42:	4620      	mov	r0, r4
   b5a44:	4629      	mov	r1, r5
   b5a46:	f000 fdc5 	bl	b65d4 <__aeabi_dmul>
   b5a4a:	a361      	add	r3, pc, #388	; (adr r3, b5bd0 <__ieee754_pow+0x8d8>)
   b5a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a50:	4606      	mov	r6, r0
   b5a52:	460f      	mov	r7, r1
   b5a54:	f000 fdbe 	bl	b65d4 <__aeabi_dmul>
   b5a58:	a35f      	add	r3, pc, #380	; (adr r3, b5bd8 <__ieee754_pow+0x8e0>)
   b5a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a5e:	f000 fc01 	bl	b6264 <__aeabi_dsub>
   b5a62:	4632      	mov	r2, r6
   b5a64:	463b      	mov	r3, r7
   b5a66:	f000 fdb5 	bl	b65d4 <__aeabi_dmul>
   b5a6a:	a35d      	add	r3, pc, #372	; (adr r3, b5be0 <__ieee754_pow+0x8e8>)
   b5a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a70:	f000 fbfa 	bl	b6268 <__adddf3>
   b5a74:	4632      	mov	r2, r6
   b5a76:	463b      	mov	r3, r7
   b5a78:	f000 fdac 	bl	b65d4 <__aeabi_dmul>
   b5a7c:	a35a      	add	r3, pc, #360	; (adr r3, b5be8 <__ieee754_pow+0x8f0>)
   b5a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a82:	f000 fbef 	bl	b6264 <__aeabi_dsub>
   b5a86:	4632      	mov	r2, r6
   b5a88:	463b      	mov	r3, r7
   b5a8a:	f000 fda3 	bl	b65d4 <__aeabi_dmul>
   b5a8e:	a358      	add	r3, pc, #352	; (adr r3, b5bf0 <__ieee754_pow+0x8f8>)
   b5a90:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5a94:	f000 fbe8 	bl	b6268 <__adddf3>
   b5a98:	4632      	mov	r2, r6
   b5a9a:	463b      	mov	r3, r7
   b5a9c:	f000 fd9a 	bl	b65d4 <__aeabi_dmul>
   b5aa0:	4602      	mov	r2, r0
   b5aa2:	460b      	mov	r3, r1
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	4629      	mov	r1, r5
   b5aa8:	f000 fbdc 	bl	b6264 <__aeabi_dsub>
   b5aac:	4606      	mov	r6, r0
   b5aae:	460f      	mov	r7, r1
   b5ab0:	4632      	mov	r2, r6
   b5ab2:	463b      	mov	r3, r7
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	4629      	mov	r1, r5
   b5ab8:	f000 fd8c 	bl	b65d4 <__aeabi_dmul>
   b5abc:	4602      	mov	r2, r0
   b5abe:	460b      	mov	r3, r1
   b5ac0:	4630      	mov	r0, r6
   b5ac2:	4639      	mov	r1, r7
   b5ac4:	4616      	mov	r6, r2
   b5ac6:	461f      	mov	r7, r3
   b5ac8:	2200      	movs	r2, #0
   b5aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b5ace:	f000 fbc9 	bl	b6264 <__aeabi_dsub>
   b5ad2:	4602      	mov	r2, r0
   b5ad4:	460b      	mov	r3, r1
   b5ad6:	4630      	mov	r0, r6
   b5ad8:	4639      	mov	r1, r7
   b5ada:	f000 fea5 	bl	b6828 <__aeabi_ddiv>
   b5ade:	4642      	mov	r2, r8
   b5ae0:	4606      	mov	r6, r0
   b5ae2:	460f      	mov	r7, r1
   b5ae4:	464b      	mov	r3, r9
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	4629      	mov	r1, r5
   b5aea:	f000 fd73 	bl	b65d4 <__aeabi_dmul>
   b5aee:	4642      	mov	r2, r8
   b5af0:	464b      	mov	r3, r9
   b5af2:	f000 fbb9 	bl	b6268 <__adddf3>
   b5af6:	4602      	mov	r2, r0
   b5af8:	460b      	mov	r3, r1
   b5afa:	4630      	mov	r0, r6
   b5afc:	4639      	mov	r1, r7
   b5afe:	f000 fbb1 	bl	b6264 <__aeabi_dsub>
   b5b02:	4622      	mov	r2, r4
   b5b04:	462b      	mov	r3, r5
   b5b06:	f000 fbad 	bl	b6264 <__aeabi_dsub>
   b5b0a:	4602      	mov	r2, r0
   b5b0c:	460b      	mov	r3, r1
   b5b0e:	2000      	movs	r0, #0
   b5b10:	4941      	ldr	r1, [pc, #260]	; (b5c18 <__ieee754_pow+0x920>)
   b5b12:	f000 fba7 	bl	b6264 <__aeabi_dsub>
   b5b16:	9a02      	ldr	r2, [sp, #8]
   b5b18:	460b      	mov	r3, r1
   b5b1a:	4413      	add	r3, r2
   b5b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b5b20:	f2c0 8143 	blt.w	b5daa <__ieee754_pow+0xab2>
   b5b24:	4619      	mov	r1, r3
   b5b26:	ec53 2b18 	vmov	r2, r3, d8
   b5b2a:	f000 fd53 	bl	b65d4 <__aeabi_dmul>
   b5b2e:	ec41 0b10 	vmov	d0, r0, r1
   b5b32:	e42d      	b.n	b5390 <__ieee754_pow+0x98>
   b5b34:	f1bb 0f00 	cmp.w	fp, #0
   b5b38:	f6ff aca0 	blt.w	b547c <__ieee754_pow+0x184>
   b5b3c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b5bf8 <__ieee754_pow+0x900>
   b5b40:	e426      	b.n	b5390 <__ieee754_pow+0x98>
   b5b42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5c20 <__ieee754_pow+0x928>
   b5b46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5b4a:	4563      	cmp	r3, ip
   b5b4c:	f340 80e7 	ble.w	b5d1e <__ieee754_pow+0xa26>
   b5b50:	4b32      	ldr	r3, [pc, #200]	; (b5c1c <__ieee754_pow+0x924>)
   b5b52:	440b      	add	r3, r1
   b5b54:	4303      	orrs	r3, r0
   b5b56:	d10a      	bne.n	b5b6e <__ieee754_pow+0x876>
   b5b58:	4622      	mov	r2, r4
   b5b5a:	462b      	mov	r3, r5
   b5b5c:	f000 fb82 	bl	b6264 <__aeabi_dsub>
   b5b60:	4632      	mov	r2, r6
   b5b62:	463b      	mov	r3, r7
   b5b64:	f000 ffbc 	bl	b6ae0 <__aeabi_dcmpge>
   b5b68:	2800      	cmp	r0, #0
   b5b6a:	f43f aef3 	beq.w	b5954 <__ieee754_pow+0x65c>
   b5b6e:	a324      	add	r3, pc, #144	; (adr r3, b5c00 <__ieee754_pow+0x908>)
   b5b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b74:	ec51 0b18 	vmov	r0, r1, d8
   b5b78:	f000 fd2c 	bl	b65d4 <__aeabi_dmul>
   b5b7c:	a320      	add	r3, pc, #128	; (adr r3, b5c00 <__ieee754_pow+0x908>)
   b5b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5b82:	f000 fd27 	bl	b65d4 <__aeabi_dmul>
   b5b86:	ec41 0b10 	vmov	d0, r0, r1
   b5b8a:	e401      	b.n	b5390 <__ieee754_pow+0x98>
   b5b8c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b5c08 <__ieee754_pow+0x910>
   b5b90:	eeb0 8a47 	vmov.f32	s16, s14
   b5b94:	eef0 8a67 	vmov.f32	s17, s15
   b5b98:	e686      	b.n	b58a8 <__ieee754_pow+0x5b0>
   b5b9a:	f1bb 0f00 	cmp.w	fp, #0
   b5b9e:	dacd      	bge.n	b5b3c <__ieee754_pow+0x844>
   b5ba0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5ba4:	ee00 6a10 	vmov	s0, r6
   b5ba8:	ee00 3a90 	vmov	s1, r3
   b5bac:	f7ff bbf0 	b.w	b5390 <__ieee754_pow+0x98>
   b5bb0:	652b82fe 	.word	0x652b82fe
   b5bb4:	3c971547 	.word	0x3c971547
   b5bb8:	00000000 	.word	0x00000000
   b5bbc:	3fe62e43 	.word	0x3fe62e43
   b5bc0:	fefa39ef 	.word	0xfefa39ef
   b5bc4:	3fe62e42 	.word	0x3fe62e42
   b5bc8:	0ca86c39 	.word	0x0ca86c39
   b5bcc:	be205c61 	.word	0xbe205c61
   b5bd0:	72bea4d0 	.word	0x72bea4d0
   b5bd4:	3e663769 	.word	0x3e663769
   b5bd8:	c5d26bf1 	.word	0xc5d26bf1
   b5bdc:	3ebbbd41 	.word	0x3ebbbd41
   b5be0:	af25de2c 	.word	0xaf25de2c
   b5be4:	3f11566a 	.word	0x3f11566a
   b5be8:	16bebd93 	.word	0x16bebd93
   b5bec:	3f66c16c 	.word	0x3f66c16c
   b5bf0:	5555553e 	.word	0x5555553e
   b5bf4:	3fc55555 	.word	0x3fc55555
	...
   b5c00:	c2f8f359 	.word	0xc2f8f359
   b5c04:	01a56e1f 	.word	0x01a56e1f
   b5c08:	00000000 	.word	0x00000000
   b5c0c:	3ff00000 	.word	0x3ff00000
   b5c10:	408fffff 	.word	0x408fffff
   b5c14:	000fffff 	.word	0x000fffff
   b5c18:	3ff00000 	.word	0x3ff00000
   b5c1c:	3f6f3400 	.word	0x3f6f3400
   b5c20:	4090cbff 	.word	0x4090cbff
   b5c24:	4598      	cmp	r8, r3
   b5c26:	db85      	blt.n	b5b34 <__ieee754_pow+0x83c>
   b5c28:	4b7d      	ldr	r3, [pc, #500]	; (b5e20 <__ieee754_pow+0xb28>)
   b5c2a:	4598      	cmp	r8, r3
   b5c2c:	f73f ac22 	bgt.w	b5474 <__ieee754_pow+0x17c>
   b5c30:	ec51 0b10 	vmov	r0, r1, d0
   b5c34:	4b7a      	ldr	r3, [pc, #488]	; (b5e20 <__ieee754_pow+0xb28>)
   b5c36:	2200      	movs	r2, #0
   b5c38:	f000 fb14 	bl	b6264 <__aeabi_dsub>
   b5c3c:	a368      	add	r3, pc, #416	; (adr r3, b5de0 <__ieee754_pow+0xae8>)
   b5c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c42:	4604      	mov	r4, r0
   b5c44:	460d      	mov	r5, r1
   b5c46:	f000 fcc5 	bl	b65d4 <__aeabi_dmul>
   b5c4a:	a367      	add	r3, pc, #412	; (adr r3, b5de8 <__ieee754_pow+0xaf0>)
   b5c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5c50:	4682      	mov	sl, r0
   b5c52:	468b      	mov	fp, r1
   b5c54:	4620      	mov	r0, r4
   b5c56:	4629      	mov	r1, r5
   b5c58:	f000 fcbc 	bl	b65d4 <__aeabi_dmul>
   b5c5c:	4b71      	ldr	r3, [pc, #452]	; (b5e24 <__ieee754_pow+0xb2c>)
   b5c5e:	ec41 0b18 	vmov	d8, r0, r1
   b5c62:	2200      	movs	r2, #0
   b5c64:	4620      	mov	r0, r4
   b5c66:	4629      	mov	r1, r5
   b5c68:	f000 fcb4 	bl	b65d4 <__aeabi_dmul>
   b5c6c:	4602      	mov	r2, r0
   b5c6e:	460b      	mov	r3, r1
   b5c70:	a15f      	add	r1, pc, #380	; (adr r1, b5df0 <__ieee754_pow+0xaf8>)
   b5c72:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5c76:	f000 faf5 	bl	b6264 <__aeabi_dsub>
   b5c7a:	4622      	mov	r2, r4
   b5c7c:	462b      	mov	r3, r5
   b5c7e:	f000 fca9 	bl	b65d4 <__aeabi_dmul>
   b5c82:	4602      	mov	r2, r0
   b5c84:	460b      	mov	r3, r1
   b5c86:	2000      	movs	r0, #0
   b5c88:	4967      	ldr	r1, [pc, #412]	; (b5e28 <__ieee754_pow+0xb30>)
   b5c8a:	f000 faeb 	bl	b6264 <__aeabi_dsub>
   b5c8e:	4622      	mov	r2, r4
   b5c90:	4680      	mov	r8, r0
   b5c92:	4689      	mov	r9, r1
   b5c94:	462b      	mov	r3, r5
   b5c96:	4620      	mov	r0, r4
   b5c98:	4629      	mov	r1, r5
   b5c9a:	f000 fc9b 	bl	b65d4 <__aeabi_dmul>
   b5c9e:	4602      	mov	r2, r0
   b5ca0:	460b      	mov	r3, r1
   b5ca2:	4640      	mov	r0, r8
   b5ca4:	4649      	mov	r1, r9
   b5ca6:	f000 fc95 	bl	b65d4 <__aeabi_dmul>
   b5caa:	a353      	add	r3, pc, #332	; (adr r3, b5df8 <__ieee754_pow+0xb00>)
   b5cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5cb0:	f000 fc90 	bl	b65d4 <__aeabi_dmul>
   b5cb4:	4602      	mov	r2, r0
   b5cb6:	460b      	mov	r3, r1
   b5cb8:	ec51 0b18 	vmov	r0, r1, d8
   b5cbc:	f000 fad2 	bl	b6264 <__aeabi_dsub>
   b5cc0:	4680      	mov	r8, r0
   b5cc2:	4689      	mov	r9, r1
   b5cc4:	4642      	mov	r2, r8
   b5cc6:	464b      	mov	r3, r9
   b5cc8:	4650      	mov	r0, sl
   b5cca:	4659      	mov	r1, fp
   b5ccc:	f000 facc 	bl	b6268 <__adddf3>
   b5cd0:	2000      	movs	r0, #0
   b5cd2:	4652      	mov	r2, sl
   b5cd4:	465b      	mov	r3, fp
   b5cd6:	4604      	mov	r4, r0
   b5cd8:	460d      	mov	r5, r1
   b5cda:	e591      	b.n	b5800 <__ieee754_pow+0x508>
   b5cdc:	4622      	mov	r2, r4
   b5cde:	462b      	mov	r3, r5
   b5ce0:	4620      	mov	r0, r4
   b5ce2:	4629      	mov	r1, r5
   b5ce4:	f000 fc76 	bl	b65d4 <__aeabi_dmul>
   b5ce8:	ec41 0b10 	vmov	d0, r0, r1
   b5cec:	f7ff bb50 	b.w	b5390 <__ieee754_pow+0x98>
   b5cf0:	494b      	ldr	r1, [pc, #300]	; (b5e20 <__ieee754_pow+0xb28>)
   b5cf2:	2000      	movs	r0, #0
   b5cf4:	4622      	mov	r2, r4
   b5cf6:	462b      	mov	r3, r5
   b5cf8:	f000 fd96 	bl	b6828 <__aeabi_ddiv>
   b5cfc:	ec41 0b10 	vmov	d0, r0, r1
   b5d00:	f7ff bb46 	b.w	b5390 <__ieee754_pow+0x98>
   b5d04:	2b00      	cmp	r3, #0
   b5d06:	d144      	bne.n	b5d92 <__ieee754_pow+0xa9a>
   b5d08:	f1c1 0114 	rsb	r1, r1, #20
   b5d0c:	fa4a f001 	asr.w	r0, sl, r1
   b5d10:	fa00 f101 	lsl.w	r1, r0, r1
   b5d14:	4551      	cmp	r1, sl
   b5d16:	d05a      	beq.n	b5dce <__ieee754_pow+0xad6>
   b5d18:	9300      	str	r3, [sp, #0]
   b5d1a:	f7ff bb17 	b.w	b534c <__ieee754_pow+0x54>
   b5d1e:	4a42      	ldr	r2, [pc, #264]	; (b5e28 <__ieee754_pow+0xb30>)
   b5d20:	4293      	cmp	r3, r2
   b5d22:	dc5b      	bgt.n	b5ddc <__ieee754_pow+0xae4>
   b5d24:	e9dd 1200 	ldrd	r1, r2, [sp]
   b5d28:	9102      	str	r1, [sp, #8]
   b5d2a:	9100      	str	r1, [sp, #0]
   b5d2c:	e646      	b.n	b59bc <__ieee754_pow+0x6c4>
   b5d2e:	a334      	add	r3, pc, #208	; (adr r3, b5e00 <__ieee754_pow+0xb08>)
   b5d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d34:	ec51 0b18 	vmov	r0, r1, d8
   b5d38:	f000 fc4c 	bl	b65d4 <__aeabi_dmul>
   b5d3c:	a330      	add	r3, pc, #192	; (adr r3, b5e00 <__ieee754_pow+0xb08>)
   b5d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d42:	f000 fc47 	bl	b65d4 <__aeabi_dmul>
   b5d46:	ec41 0b10 	vmov	d0, r0, r1
   b5d4a:	f7ff bb21 	b.w	b5390 <__ieee754_pow+0x98>
   b5d4e:	9b00      	ldr	r3, [sp, #0]
   b5d50:	2b01      	cmp	r3, #1
   b5d52:	f47f ab1d 	bne.w	b5390 <__ieee754_pow+0x98>
   b5d56:	ee10 1a90 	vmov	r1, s1
   b5d5a:	ee10 2a10 	vmov	r2, s0
   b5d5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5d62:	ec43 2b10 	vmov	d0, r2, r3
   b5d66:	f7ff bb13 	b.w	b5390 <__ieee754_pow+0x98>
   b5d6a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b5e08 <__ieee754_pow+0xb10>
   b5d6e:	eeb0 ca47 	vmov.f32	s24, s14
   b5d72:	eef0 ca67 	vmov.f32	s25, s15
   b5d76:	ed9f 7b26 	vldr	d7, [pc, #152]	; b5e10 <__ieee754_pow+0xb18>
   b5d7a:	eeb0 da47 	vmov.f32	s26, s14
   b5d7e:	eef0 da67 	vmov.f32	s27, s15
   b5d82:	ed9f 7b25 	vldr	d7, [pc, #148]	; b5e18 <__ieee754_pow+0xb20>
   b5d86:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b5d8a:	ec53 2b17 	vmov	r2, r3, d7
   b5d8e:	f7ff bbeb 	b.w	b5568 <__ieee754_pow+0x270>
   b5d92:	ec45 4b10 	vmov	d0, r4, r5
   b5d96:	9200      	str	r2, [sp, #0]
   b5d98:	f000 f914 	bl	b5fc4 <fabs>
   b5d9c:	9a00      	ldr	r2, [sp, #0]
   b5d9e:	2a00      	cmp	r2, #0
   b5da0:	f47f ab92 	bne.w	b54c8 <__ieee754_pow+0x1d0>
   b5da4:	9200      	str	r2, [sp, #0]
   b5da6:	f7ff bb26 	b.w	b53f6 <__ieee754_pow+0xfe>
   b5daa:	ec41 0b10 	vmov	d0, r0, r1
   b5dae:	9800      	ldr	r0, [sp, #0]
   b5db0:	f000 f9c2 	bl	b6138 <scalbn>
   b5db4:	ec51 0b10 	vmov	r0, r1, d0
   b5db8:	e6b5      	b.n	b5b26 <__ieee754_pow+0x82e>
   b5dba:	f000 0001 	and.w	r0, r0, #1
   b5dbe:	f1c0 0102 	rsb	r1, r0, #2
   b5dc2:	9100      	str	r1, [sp, #0]
   b5dc4:	2b00      	cmp	r3, #0
   b5dc6:	f43f aac1 	beq.w	b534c <__ieee754_pow+0x54>
   b5dca:	f7ff bb0d 	b.w	b53e8 <__ieee754_pow+0xf0>
   b5dce:	f000 0001 	and.w	r0, r0, #1
   b5dd2:	f1c0 0302 	rsb	r3, r0, #2
   b5dd6:	9300      	str	r3, [sp, #0]
   b5dd8:	f7ff bab8 	b.w	b534c <__ieee754_pow+0x54>
   b5ddc:	151b      	asrs	r3, r3, #20
   b5dde:	e5bb      	b.n	b5958 <__ieee754_pow+0x660>
   b5de0:	60000000 	.word	0x60000000
   b5de4:	3ff71547 	.word	0x3ff71547
   b5de8:	f85ddf44 	.word	0xf85ddf44
   b5dec:	3e54ae0b 	.word	0x3e54ae0b
   b5df0:	55555555 	.word	0x55555555
   b5df4:	3fd55555 	.word	0x3fd55555
   b5df8:	652b82fe 	.word	0x652b82fe
   b5dfc:	3ff71547 	.word	0x3ff71547
   b5e00:	8800759c 	.word	0x8800759c
   b5e04:	7e37e43c 	.word	0x7e37e43c
   b5e08:	40000000 	.word	0x40000000
   b5e0c:	3fe2b803 	.word	0x3fe2b803
   b5e10:	43cfd006 	.word	0x43cfd006
   b5e14:	3e4cfdeb 	.word	0x3e4cfdeb
   b5e18:	00000000 	.word	0x00000000
   b5e1c:	3ff80000 	.word	0x3ff80000
   b5e20:	3ff00000 	.word	0x3ff00000
   b5e24:	3fd00000 	.word	0x3fd00000
   b5e28:	3fe00000 	.word	0x3fe00000

000b5e2c <__ieee754_sqrt>:
   b5e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e30:	4a63      	ldr	r2, [pc, #396]	; (b5fc0 <__ieee754_sqrt+0x194>)
   b5e32:	ec55 4b10 	vmov	r4, r5, d0
   b5e36:	43aa      	bics	r2, r5
   b5e38:	f000 809f 	beq.w	b5f7a <__ieee754_sqrt+0x14e>
   b5e3c:	2d00      	cmp	r5, #0
   b5e3e:	ee10 ca10 	vmov	ip, s0
   b5e42:	462b      	mov	r3, r5
   b5e44:	dd54      	ble.n	b5ef0 <__ieee754_sqrt+0xc4>
   b5e46:	1529      	asrs	r1, r5, #20
   b5e48:	d063      	beq.n	b5f12 <__ieee754_sqrt+0xe6>
   b5e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b5e4e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b5e52:	07c9      	lsls	r1, r1, #31
   b5e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5e58:	d404      	bmi.n	b5e64 <__ieee754_sqrt+0x38>
   b5e5a:	005b      	lsls	r3, r3, #1
   b5e5c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b5e60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5e64:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b5e68:	2600      	movs	r6, #0
   b5e6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b5e6e:	107f      	asrs	r7, r7, #1
   b5e70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5e74:	f04f 0e16 	mov.w	lr, #22
   b5e78:	4634      	mov	r4, r6
   b5e7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b5e7e:	18a1      	adds	r1, r4, r2
   b5e80:	4299      	cmp	r1, r3
   b5e82:	dc02      	bgt.n	b5e8a <__ieee754_sqrt+0x5e>
   b5e84:	1a5b      	subs	r3, r3, r1
   b5e86:	188c      	adds	r4, r1, r2
   b5e88:	4416      	add	r6, r2
   b5e8a:	005b      	lsls	r3, r3, #1
   b5e8c:	f1be 0e01 	subs.w	lr, lr, #1
   b5e90:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b5e94:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b5e98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5e9c:	d1ef      	bne.n	b5e7e <__ieee754_sqrt+0x52>
   b5e9e:	4675      	mov	r5, lr
   b5ea0:	2020      	movs	r0, #32
   b5ea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b5ea6:	e00a      	b.n	b5ebe <__ieee754_sqrt+0x92>
   b5ea8:	d044      	beq.n	b5f34 <__ieee754_sqrt+0x108>
   b5eaa:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b5eae:	3801      	subs	r0, #1
   b5eb0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b5eb4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b5eb8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b5ebc:	d043      	beq.n	b5f46 <__ieee754_sqrt+0x11a>
   b5ebe:	42a3      	cmp	r3, r4
   b5ec0:	eb02 010e 	add.w	r1, r2, lr
   b5ec4:	ddf0      	ble.n	b5ea8 <__ieee754_sqrt+0x7c>
   b5ec6:	2900      	cmp	r1, #0
   b5ec8:	eb01 0e02 	add.w	lr, r1, r2
   b5ecc:	db0a      	blt.n	b5ee4 <__ieee754_sqrt+0xb8>
   b5ece:	46a0      	mov	r8, r4
   b5ed0:	1b1b      	subs	r3, r3, r4
   b5ed2:	4561      	cmp	r1, ip
   b5ed4:	bf88      	it	hi
   b5ed6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b5eda:	ebac 0c01 	sub.w	ip, ip, r1
   b5ede:	4415      	add	r5, r2
   b5ee0:	4644      	mov	r4, r8
   b5ee2:	e7e2      	b.n	b5eaa <__ieee754_sqrt+0x7e>
   b5ee4:	f1be 0f00 	cmp.w	lr, #0
   b5ee8:	dbf1      	blt.n	b5ece <__ieee754_sqrt+0xa2>
   b5eea:	f104 0801 	add.w	r8, r4, #1
   b5eee:	e7ef      	b.n	b5ed0 <__ieee754_sqrt+0xa4>
   b5ef0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b5ef4:	4322      	orrs	r2, r4
   b5ef6:	d038      	beq.n	b5f6a <__ieee754_sqrt+0x13e>
   b5ef8:	2d00      	cmp	r5, #0
   b5efa:	d14e      	bne.n	b5f9a <__ieee754_sqrt+0x16e>
   b5efc:	4629      	mov	r1, r5
   b5efe:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b5f02:	3915      	subs	r1, #21
   b5f04:	4613      	mov	r3, r2
   b5f06:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b5f0a:	2a00      	cmp	r2, #0
   b5f0c:	d0f7      	beq.n	b5efe <__ieee754_sqrt+0xd2>
   b5f0e:	02d6      	lsls	r6, r2, #11
   b5f10:	d450      	bmi.n	b5fb4 <__ieee754_sqrt+0x188>
   b5f12:	2000      	movs	r0, #0
   b5f14:	005b      	lsls	r3, r3, #1
   b5f16:	02dd      	lsls	r5, r3, #11
   b5f18:	4604      	mov	r4, r0
   b5f1a:	f100 0001 	add.w	r0, r0, #1
   b5f1e:	d5f9      	bpl.n	b5f14 <__ieee754_sqrt+0xe8>
   b5f20:	461a      	mov	r2, r3
   b5f22:	4663      	mov	r3, ip
   b5f24:	fa0c fc00 	lsl.w	ip, ip, r0
   b5f28:	f1c0 0020 	rsb	r0, r0, #32
   b5f2c:	40c3      	lsrs	r3, r0
   b5f2e:	1b09      	subs	r1, r1, r4
   b5f30:	4313      	orrs	r3, r2
   b5f32:	e78a      	b.n	b5e4a <__ieee754_sqrt+0x1e>
   b5f34:	4561      	cmp	r1, ip
   b5f36:	d8b8      	bhi.n	b5eaa <__ieee754_sqrt+0x7e>
   b5f38:	2900      	cmp	r1, #0
   b5f3a:	eb01 0e02 	add.w	lr, r1, r2
   b5f3e:	dbd1      	blt.n	b5ee4 <__ieee754_sqrt+0xb8>
   b5f40:	4698      	mov	r8, r3
   b5f42:	2300      	movs	r3, #0
   b5f44:	e7c9      	b.n	b5eda <__ieee754_sqrt+0xae>
   b5f46:	ea53 030c 	orrs.w	r3, r3, ip
   b5f4a:	d110      	bne.n	b5f6e <__ieee754_sqrt+0x142>
   b5f4c:	0868      	lsrs	r0, r5, #1
   b5f4e:	1071      	asrs	r1, r6, #1
   b5f50:	07f3      	lsls	r3, r6, #31
   b5f52:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b5f56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b5f5a:	bf48      	it	mi
   b5f5c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b5f60:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b5f64:	4602      	mov	r2, r0
   b5f66:	ec43 2b10 	vmov	d0, r2, r3
   b5f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f6e:	1c6a      	adds	r2, r5, #1
   b5f70:	bf16      	itet	ne
   b5f72:	1c68      	addne	r0, r5, #1
   b5f74:	3601      	addeq	r6, #1
   b5f76:	0840      	lsrne	r0, r0, #1
   b5f78:	e7e9      	b.n	b5f4e <__ieee754_sqrt+0x122>
   b5f7a:	ee10 2a10 	vmov	r2, s0
   b5f7e:	ee10 0a10 	vmov	r0, s0
   b5f82:	462b      	mov	r3, r5
   b5f84:	4629      	mov	r1, r5
   b5f86:	f000 fb25 	bl	b65d4 <__aeabi_dmul>
   b5f8a:	4622      	mov	r2, r4
   b5f8c:	462b      	mov	r3, r5
   b5f8e:	f000 f96b 	bl	b6268 <__adddf3>
   b5f92:	ec41 0b10 	vmov	d0, r0, r1
   b5f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f9a:	ee10 2a10 	vmov	r2, s0
   b5f9e:	4620      	mov	r0, r4
   b5fa0:	4629      	mov	r1, r5
   b5fa2:	f000 f95f 	bl	b6264 <__aeabi_dsub>
   b5fa6:	4602      	mov	r2, r0
   b5fa8:	460b      	mov	r3, r1
   b5faa:	f000 fc3d 	bl	b6828 <__aeabi_ddiv>
   b5fae:	ec41 0b10 	vmov	d0, r0, r1
   b5fb2:	e7da      	b.n	b5f6a <__ieee754_sqrt+0x13e>
   b5fb4:	4663      	mov	r3, ip
   b5fb6:	2020      	movs	r0, #32
   b5fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5fbc:	e7b6      	b.n	b5f2c <__ieee754_sqrt+0x100>
   b5fbe:	bf00      	nop
   b5fc0:	7ff00000 	.word	0x7ff00000

000b5fc4 <fabs>:
   b5fc4:	ec51 0b10 	vmov	r0, r1, d0
   b5fc8:	ee10 2a10 	vmov	r2, s0
   b5fcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5fd0:	ec43 2b10 	vmov	d0, r2, r3
   b5fd4:	4770      	bx	lr
   b5fd6:	bf00      	nop

000b5fd8 <finite>:
   b5fd8:	b082      	sub	sp, #8
   b5fda:	ed8d 0b00 	vstr	d0, [sp]
   b5fde:	9801      	ldr	r0, [sp, #4]
   b5fe0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b5fe4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b5fe8:	0fc0      	lsrs	r0, r0, #31
   b5fea:	b002      	add	sp, #8
   b5fec:	4770      	bx	lr
   b5fee:	bf00      	nop

000b5ff0 <nan>:
   b5ff0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b5ff8 <nan+0x8>
   b5ff4:	4770      	bx	lr
   b5ff6:	bf00      	nop
   b5ff8:	00000000 	.word	0x00000000
   b5ffc:	7ff80000 	.word	0x7ff80000

000b6000 <rint>:
   b6000:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6002:	ec53 2b10 	vmov	r2, r3, d0
   b6006:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b600a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b600e:	2913      	cmp	r1, #19
   b6010:	ee10 0a10 	vmov	r0, s0
   b6014:	b083      	sub	sp, #12
   b6016:	461c      	mov	r4, r3
   b6018:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b601c:	dc3a      	bgt.n	b6094 <rint+0x94>
   b601e:	2900      	cmp	r1, #0
   b6020:	db30      	blt.n	b6084 <rint+0x84>
   b6022:	4d42      	ldr	r5, [pc, #264]	; (b612c <rint+0x12c>)
   b6024:	fa45 fc01 	asr.w	ip, r5, r1
   b6028:	ea03 050c 	and.w	r5, r3, ip
   b602c:	4315      	orrs	r5, r2
   b602e:	d02d      	beq.n	b608c <rint+0x8c>
   b6030:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b6034:	4318      	orrs	r0, r3
   b6036:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b603a:	d00c      	beq.n	b6056 <rint+0x56>
   b603c:	ea24 0c0c 	bic.w	ip, r4, ip
   b6040:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b6044:	2913      	cmp	r1, #19
   b6046:	fa44 f101 	asr.w	r1, r4, r1
   b604a:	bf0c      	ite	eq
   b604c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6050:	2000      	movne	r0, #0
   b6052:	ea4c 0401 	orr.w	r4, ip, r1
   b6056:	4936      	ldr	r1, [pc, #216]	; (b6130 <rint+0x130>)
   b6058:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b605c:	4623      	mov	r3, r4
   b605e:	e9de 4500 	ldrd	r4, r5, [lr]
   b6062:	4602      	mov	r2, r0
   b6064:	4629      	mov	r1, r5
   b6066:	4620      	mov	r0, r4
   b6068:	f000 f8fe 	bl	b6268 <__adddf3>
   b606c:	e9cd 0100 	strd	r0, r1, [sp]
   b6070:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6074:	4622      	mov	r2, r4
   b6076:	462b      	mov	r3, r5
   b6078:	f000 f8f4 	bl	b6264 <__aeabi_dsub>
   b607c:	ec41 0b10 	vmov	d0, r0, r1
   b6080:	b003      	add	sp, #12
   b6082:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b6088:	4311      	orrs	r1, r2
   b608a:	d124      	bne.n	b60d6 <rint+0xd6>
   b608c:	ec43 2b10 	vmov	d0, r2, r3
   b6090:	b003      	add	sp, #12
   b6092:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6094:	2933      	cmp	r1, #51	; 0x33
   b6096:	dd08      	ble.n	b60aa <rint+0xaa>
   b6098:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b609c:	d1f6      	bne.n	b608c <rint+0x8c>
   b609e:	4619      	mov	r1, r3
   b60a0:	f000 f8e2 	bl	b6268 <__adddf3>
   b60a4:	ec41 0b10 	vmov	d0, r0, r1
   b60a8:	e7f2      	b.n	b6090 <rint+0x90>
   b60aa:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b60ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b60b2:	fa21 f10c 	lsr.w	r1, r1, ip
   b60b6:	420a      	tst	r2, r1
   b60b8:	d0e8      	beq.n	b608c <rint+0x8c>
   b60ba:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b60be:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b60c2:	d0c8      	beq.n	b6056 <rint+0x56>
   b60c4:	ea20 0303 	bic.w	r3, r0, r3
   b60c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b60cc:	fa40 fc0c 	asr.w	ip, r0, ip
   b60d0:	ea43 000c 	orr.w	r0, r3, ip
   b60d4:	e7bf      	b.n	b6056 <rint+0x56>
   b60d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b60da:	4318      	orrs	r0, r3
   b60dc:	4a14      	ldr	r2, [pc, #80]	; (b6130 <rint+0x130>)
   b60de:	4243      	negs	r3, r0
   b60e0:	4303      	orrs	r3, r0
   b60e2:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b60e6:	0b1b      	lsrs	r3, r3, #12
   b60e8:	0c62      	lsrs	r2, r4, #17
   b60ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b60ee:	0452      	lsls	r2, r2, #17
   b60f0:	ea43 0702 	orr.w	r7, r3, r2
   b60f4:	463b      	mov	r3, r7
   b60f6:	e9de 6700 	ldrd	r6, r7, [lr]
   b60fa:	ee10 2a10 	vmov	r2, s0
   b60fe:	4630      	mov	r0, r6
   b6100:	4639      	mov	r1, r7
   b6102:	f000 f8b1 	bl	b6268 <__adddf3>
   b6106:	e9cd 0100 	strd	r0, r1, [sp]
   b610a:	4632      	mov	r2, r6
   b610c:	463b      	mov	r3, r7
   b610e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6112:	f000 f8a7 	bl	b6264 <__aeabi_dsub>
   b6116:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b611a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b611e:	4602      	mov	r2, r0
   b6120:	ea41 0304 	orr.w	r3, r1, r4
   b6124:	ec43 2b10 	vmov	d0, r2, r3
   b6128:	b003      	add	sp, #12
   b612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b612c:	000fffff 	.word	0x000fffff
   b6130:	000b6f78 	.word	0x000b6f78
   b6134:	00000000 	.word	0x00000000

000b6138 <scalbn>:
   b6138:	b538      	push	{r3, r4, r5, lr}
   b613a:	ec53 2b10 	vmov	r2, r3, d0
   b613e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b6142:	4604      	mov	r4, r0
   b6144:	469c      	mov	ip, r3
   b6146:	bb89      	cbnz	r1, b61ac <scalbn+0x74>
   b6148:	ee10 1a10 	vmov	r1, s0
   b614c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b6150:	ea5c 0101 	orrs.w	r1, ip, r1
   b6154:	d029      	beq.n	b61aa <scalbn+0x72>
   b6156:	4619      	mov	r1, r3
   b6158:	2200      	movs	r2, #0
   b615a:	4b3d      	ldr	r3, [pc, #244]	; (b6250 <scalbn+0x118>)
   b615c:	4d3d      	ldr	r5, [pc, #244]	; (b6254 <scalbn+0x11c>)
   b615e:	ee10 0a10 	vmov	r0, s0
   b6162:	f000 fa37 	bl	b65d4 <__aeabi_dmul>
   b6166:	42ac      	cmp	r4, r5
   b6168:	4602      	mov	r2, r0
   b616a:	460b      	mov	r3, r1
   b616c:	db16      	blt.n	b619c <scalbn+0x64>
   b616e:	468c      	mov	ip, r1
   b6170:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b6174:	3936      	subs	r1, #54	; 0x36
   b6176:	4421      	add	r1, r4
   b6178:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b617c:	4281      	cmp	r1, r0
   b617e:	dc21      	bgt.n	b61c4 <scalbn+0x8c>
   b6180:	2900      	cmp	r1, #0
   b6182:	dc47      	bgt.n	b6214 <scalbn+0xdc>
   b6184:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b6188:	da34      	bge.n	b61f4 <scalbn+0xbc>
   b618a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b618e:	428c      	cmp	r4, r1
   b6190:	dc18      	bgt.n	b61c4 <scalbn+0x8c>
   b6192:	2b00      	cmp	r3, #0
   b6194:	a126      	add	r1, pc, #152	; (adr r1, b6230 <scalbn+0xf8>)
   b6196:	e9d1 0100 	ldrd	r0, r1, [r1]
   b619a:	db44      	blt.n	b6226 <scalbn+0xee>
   b619c:	a324      	add	r3, pc, #144	; (adr r3, b6230 <scalbn+0xf8>)
   b619e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61a2:	f000 fa17 	bl	b65d4 <__aeabi_dmul>
   b61a6:	ec41 0b10 	vmov	d0, r0, r1
   b61aa:	bd38      	pop	{r3, r4, r5, pc}
   b61ac:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b61b0:	4281      	cmp	r1, r0
   b61b2:	d1e0      	bne.n	b6176 <scalbn+0x3e>
   b61b4:	ee10 0a10 	vmov	r0, s0
   b61b8:	4619      	mov	r1, r3
   b61ba:	f000 f855 	bl	b6268 <__adddf3>
   b61be:	ec41 0b10 	vmov	d0, r0, r1
   b61c2:	bd38      	pop	{r3, r4, r5, pc}
   b61c4:	2b00      	cmp	r3, #0
   b61c6:	a11c      	add	r1, pc, #112	; (adr r1, b6238 <scalbn+0x100>)
   b61c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b61cc:	db07      	blt.n	b61de <scalbn+0xa6>
   b61ce:	a31a      	add	r3, pc, #104	; (adr r3, b6238 <scalbn+0x100>)
   b61d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61d4:	f000 f9fe 	bl	b65d4 <__aeabi_dmul>
   b61d8:	ec41 0b10 	vmov	d0, r0, r1
   b61dc:	bd38      	pop	{r3, r4, r5, pc}
   b61de:	a118      	add	r1, pc, #96	; (adr r1, b6240 <scalbn+0x108>)
   b61e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b61e4:	a314      	add	r3, pc, #80	; (adr r3, b6238 <scalbn+0x100>)
   b61e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61ea:	f000 f9f3 	bl	b65d4 <__aeabi_dmul>
   b61ee:	ec41 0b10 	vmov	d0, r0, r1
   b61f2:	e7f3      	b.n	b61dc <scalbn+0xa4>
   b61f4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b61f8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b61fc:	3136      	adds	r1, #54	; 0x36
   b61fe:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6202:	4610      	mov	r0, r2
   b6204:	4619      	mov	r1, r3
   b6206:	2200      	movs	r2, #0
   b6208:	4b13      	ldr	r3, [pc, #76]	; (b6258 <scalbn+0x120>)
   b620a:	f000 f9e3 	bl	b65d4 <__aeabi_dmul>
   b620e:	ec41 0b10 	vmov	d0, r0, r1
   b6212:	bd38      	pop	{r3, r4, r5, pc}
   b6214:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6218:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b621c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6220:	ec43 2b10 	vmov	d0, r2, r3
   b6224:	bd38      	pop	{r3, r4, r5, pc}
   b6226:	a108      	add	r1, pc, #32	; (adr r1, b6248 <scalbn+0x110>)
   b6228:	e9d1 0100 	ldrd	r0, r1, [r1]
   b622c:	e7b6      	b.n	b619c <scalbn+0x64>
   b622e:	bf00      	nop
   b6230:	c2f8f359 	.word	0xc2f8f359
   b6234:	01a56e1f 	.word	0x01a56e1f
   b6238:	8800759c 	.word	0x8800759c
   b623c:	7e37e43c 	.word	0x7e37e43c
   b6240:	8800759c 	.word	0x8800759c
   b6244:	fe37e43c 	.word	0xfe37e43c
   b6248:	c2f8f359 	.word	0xc2f8f359
   b624c:	81a56e1f 	.word	0x81a56e1f
   b6250:	43500000 	.word	0x43500000
   b6254:	ffff3cb0 	.word	0xffff3cb0
   b6258:	3c900000 	.word	0x3c900000

000b625c <__aeabi_drsub>:
   b625c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6260:	e002      	b.n	b6268 <__adddf3>
   b6262:	bf00      	nop

000b6264 <__aeabi_dsub>:
   b6264:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6268 <__adddf3>:
   b6268:	b530      	push	{r4, r5, lr}
   b626a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b626e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6272:	ea94 0f05 	teq	r4, r5
   b6276:	bf08      	it	eq
   b6278:	ea90 0f02 	teqeq	r0, r2
   b627c:	bf1f      	itttt	ne
   b627e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6282:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6286:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b628a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b628e:	f000 80e2 	beq.w	b6456 <__adddf3+0x1ee>
   b6292:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6296:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b629a:	bfb8      	it	lt
   b629c:	426d      	neglt	r5, r5
   b629e:	dd0c      	ble.n	b62ba <__adddf3+0x52>
   b62a0:	442c      	add	r4, r5
   b62a2:	ea80 0202 	eor.w	r2, r0, r2
   b62a6:	ea81 0303 	eor.w	r3, r1, r3
   b62aa:	ea82 0000 	eor.w	r0, r2, r0
   b62ae:	ea83 0101 	eor.w	r1, r3, r1
   b62b2:	ea80 0202 	eor.w	r2, r0, r2
   b62b6:	ea81 0303 	eor.w	r3, r1, r3
   b62ba:	2d36      	cmp	r5, #54	; 0x36
   b62bc:	bf88      	it	hi
   b62be:	bd30      	pophi	{r4, r5, pc}
   b62c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b62c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b62c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b62cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b62d0:	d002      	beq.n	b62d8 <__adddf3+0x70>
   b62d2:	4240      	negs	r0, r0
   b62d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b62d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b62dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b62e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b62e4:	d002      	beq.n	b62ec <__adddf3+0x84>
   b62e6:	4252      	negs	r2, r2
   b62e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b62ec:	ea94 0f05 	teq	r4, r5
   b62f0:	f000 80a7 	beq.w	b6442 <__adddf3+0x1da>
   b62f4:	f1a4 0401 	sub.w	r4, r4, #1
   b62f8:	f1d5 0e20 	rsbs	lr, r5, #32
   b62fc:	db0d      	blt.n	b631a <__adddf3+0xb2>
   b62fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   b6302:	fa22 f205 	lsr.w	r2, r2, r5
   b6306:	1880      	adds	r0, r0, r2
   b6308:	f141 0100 	adc.w	r1, r1, #0
   b630c:	fa03 f20e 	lsl.w	r2, r3, lr
   b6310:	1880      	adds	r0, r0, r2
   b6312:	fa43 f305 	asr.w	r3, r3, r5
   b6316:	4159      	adcs	r1, r3
   b6318:	e00e      	b.n	b6338 <__adddf3+0xd0>
   b631a:	f1a5 0520 	sub.w	r5, r5, #32
   b631e:	f10e 0e20 	add.w	lr, lr, #32
   b6322:	2a01      	cmp	r2, #1
   b6324:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6328:	bf28      	it	cs
   b632a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b632e:	fa43 f305 	asr.w	r3, r3, r5
   b6332:	18c0      	adds	r0, r0, r3
   b6334:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b633c:	d507      	bpl.n	b634e <__adddf3+0xe6>
   b633e:	f04f 0e00 	mov.w	lr, #0
   b6342:	f1dc 0c00 	rsbs	ip, ip, #0
   b6346:	eb7e 0000 	sbcs.w	r0, lr, r0
   b634a:	eb6e 0101 	sbc.w	r1, lr, r1
   b634e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6352:	d31b      	bcc.n	b638c <__adddf3+0x124>
   b6354:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6358:	d30c      	bcc.n	b6374 <__adddf3+0x10c>
   b635a:	0849      	lsrs	r1, r1, #1
   b635c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6360:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6364:	f104 0401 	add.w	r4, r4, #1
   b6368:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b636c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6370:	f080 809a 	bcs.w	b64a8 <__adddf3+0x240>
   b6374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6378:	bf08      	it	eq
   b637a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b637e:	f150 0000 	adcs.w	r0, r0, #0
   b6382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6386:	ea41 0105 	orr.w	r1, r1, r5
   b638a:	bd30      	pop	{r4, r5, pc}
   b638c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6390:	4140      	adcs	r0, r0
   b6392:	eb41 0101 	adc.w	r1, r1, r1
   b6396:	3c01      	subs	r4, #1
   b6398:	bf28      	it	cs
   b639a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b639e:	d2e9      	bcs.n	b6374 <__adddf3+0x10c>
   b63a0:	f091 0f00 	teq	r1, #0
   b63a4:	bf04      	itt	eq
   b63a6:	4601      	moveq	r1, r0
   b63a8:	2000      	moveq	r0, #0
   b63aa:	fab1 f381 	clz	r3, r1
   b63ae:	bf08      	it	eq
   b63b0:	3320      	addeq	r3, #32
   b63b2:	f1a3 030b 	sub.w	r3, r3, #11
   b63b6:	f1b3 0220 	subs.w	r2, r3, #32
   b63ba:	da0c      	bge.n	b63d6 <__adddf3+0x16e>
   b63bc:	320c      	adds	r2, #12
   b63be:	dd08      	ble.n	b63d2 <__adddf3+0x16a>
   b63c0:	f102 0c14 	add.w	ip, r2, #20
   b63c4:	f1c2 020c 	rsb	r2, r2, #12
   b63c8:	fa01 f00c 	lsl.w	r0, r1, ip
   b63cc:	fa21 f102 	lsr.w	r1, r1, r2
   b63d0:	e00c      	b.n	b63ec <__adddf3+0x184>
   b63d2:	f102 0214 	add.w	r2, r2, #20
   b63d6:	bfd8      	it	le
   b63d8:	f1c2 0c20 	rsble	ip, r2, #32
   b63dc:	fa01 f102 	lsl.w	r1, r1, r2
   b63e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b63e4:	bfdc      	itt	le
   b63e6:	ea41 010c 	orrle.w	r1, r1, ip
   b63ea:	4090      	lslle	r0, r2
   b63ec:	1ae4      	subs	r4, r4, r3
   b63ee:	bfa2      	ittt	ge
   b63f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b63f4:	4329      	orrge	r1, r5
   b63f6:	bd30      	popge	{r4, r5, pc}
   b63f8:	ea6f 0404 	mvn.w	r4, r4
   b63fc:	3c1f      	subs	r4, #31
   b63fe:	da1c      	bge.n	b643a <__adddf3+0x1d2>
   b6400:	340c      	adds	r4, #12
   b6402:	dc0e      	bgt.n	b6422 <__adddf3+0x1ba>
   b6404:	f104 0414 	add.w	r4, r4, #20
   b6408:	f1c4 0220 	rsb	r2, r4, #32
   b640c:	fa20 f004 	lsr.w	r0, r0, r4
   b6410:	fa01 f302 	lsl.w	r3, r1, r2
   b6414:	ea40 0003 	orr.w	r0, r0, r3
   b6418:	fa21 f304 	lsr.w	r3, r1, r4
   b641c:	ea45 0103 	orr.w	r1, r5, r3
   b6420:	bd30      	pop	{r4, r5, pc}
   b6422:	f1c4 040c 	rsb	r4, r4, #12
   b6426:	f1c4 0220 	rsb	r2, r4, #32
   b642a:	fa20 f002 	lsr.w	r0, r0, r2
   b642e:	fa01 f304 	lsl.w	r3, r1, r4
   b6432:	ea40 0003 	orr.w	r0, r0, r3
   b6436:	4629      	mov	r1, r5
   b6438:	bd30      	pop	{r4, r5, pc}
   b643a:	fa21 f004 	lsr.w	r0, r1, r4
   b643e:	4629      	mov	r1, r5
   b6440:	bd30      	pop	{r4, r5, pc}
   b6442:	f094 0f00 	teq	r4, #0
   b6446:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b644a:	bf06      	itte	eq
   b644c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6450:	3401      	addeq	r4, #1
   b6452:	3d01      	subne	r5, #1
   b6454:	e74e      	b.n	b62f4 <__adddf3+0x8c>
   b6456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b645a:	bf18      	it	ne
   b645c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6460:	d029      	beq.n	b64b6 <__adddf3+0x24e>
   b6462:	ea94 0f05 	teq	r4, r5
   b6466:	bf08      	it	eq
   b6468:	ea90 0f02 	teqeq	r0, r2
   b646c:	d005      	beq.n	b647a <__adddf3+0x212>
   b646e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6472:	bf04      	itt	eq
   b6474:	4619      	moveq	r1, r3
   b6476:	4610      	moveq	r0, r2
   b6478:	bd30      	pop	{r4, r5, pc}
   b647a:	ea91 0f03 	teq	r1, r3
   b647e:	bf1e      	ittt	ne
   b6480:	2100      	movne	r1, #0
   b6482:	2000      	movne	r0, #0
   b6484:	bd30      	popne	{r4, r5, pc}
   b6486:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b648a:	d105      	bne.n	b6498 <__adddf3+0x230>
   b648c:	0040      	lsls	r0, r0, #1
   b648e:	4149      	adcs	r1, r1
   b6490:	bf28      	it	cs
   b6492:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6496:	bd30      	pop	{r4, r5, pc}
   b6498:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b649c:	bf3c      	itt	cc
   b649e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b64a2:	bd30      	popcc	{r4, r5, pc}
   b64a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b64ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b64b0:	f04f 0000 	mov.w	r0, #0
   b64b4:	bd30      	pop	{r4, r5, pc}
   b64b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b64ba:	bf1a      	itte	ne
   b64bc:	4619      	movne	r1, r3
   b64be:	4610      	movne	r0, r2
   b64c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b64c4:	bf1c      	itt	ne
   b64c6:	460b      	movne	r3, r1
   b64c8:	4602      	movne	r2, r0
   b64ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b64ce:	bf06      	itte	eq
   b64d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b64d4:	ea91 0f03 	teqeq	r1, r3
   b64d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b64dc:	bd30      	pop	{r4, r5, pc}
   b64de:	bf00      	nop

000b64e0 <__aeabi_ui2d>:
   b64e0:	f090 0f00 	teq	r0, #0
   b64e4:	bf04      	itt	eq
   b64e6:	2100      	moveq	r1, #0
   b64e8:	4770      	bxeq	lr
   b64ea:	b530      	push	{r4, r5, lr}
   b64ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b64f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b64f4:	f04f 0500 	mov.w	r5, #0
   b64f8:	f04f 0100 	mov.w	r1, #0
   b64fc:	e750      	b.n	b63a0 <__adddf3+0x138>
   b64fe:	bf00      	nop

000b6500 <__aeabi_i2d>:
   b6500:	f090 0f00 	teq	r0, #0
   b6504:	bf04      	itt	eq
   b6506:	2100      	moveq	r1, #0
   b6508:	4770      	bxeq	lr
   b650a:	b530      	push	{r4, r5, lr}
   b650c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6510:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6514:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6518:	bf48      	it	mi
   b651a:	4240      	negmi	r0, r0
   b651c:	f04f 0100 	mov.w	r1, #0
   b6520:	e73e      	b.n	b63a0 <__adddf3+0x138>
   b6522:	bf00      	nop

000b6524 <__aeabi_f2d>:
   b6524:	0042      	lsls	r2, r0, #1
   b6526:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b652a:	ea4f 0131 	mov.w	r1, r1, rrx
   b652e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6532:	bf1f      	itttt	ne
   b6534:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6538:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b653c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6540:	4770      	bxne	lr
   b6542:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6546:	bf08      	it	eq
   b6548:	4770      	bxeq	lr
   b654a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b654e:	bf04      	itt	eq
   b6550:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6554:	4770      	bxeq	lr
   b6556:	b530      	push	{r4, r5, lr}
   b6558:	f44f 7460 	mov.w	r4, #896	; 0x380
   b655c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6564:	e71c      	b.n	b63a0 <__adddf3+0x138>
   b6566:	bf00      	nop

000b6568 <__aeabi_ul2d>:
   b6568:	ea50 0201 	orrs.w	r2, r0, r1
   b656c:	bf08      	it	eq
   b656e:	4770      	bxeq	lr
   b6570:	b530      	push	{r4, r5, lr}
   b6572:	f04f 0500 	mov.w	r5, #0
   b6576:	e00a      	b.n	b658e <__aeabi_l2d+0x16>

000b6578 <__aeabi_l2d>:
   b6578:	ea50 0201 	orrs.w	r2, r0, r1
   b657c:	bf08      	it	eq
   b657e:	4770      	bxeq	lr
   b6580:	b530      	push	{r4, r5, lr}
   b6582:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6586:	d502      	bpl.n	b658e <__aeabi_l2d+0x16>
   b6588:	4240      	negs	r0, r0
   b658a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b658e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6592:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6596:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b659a:	f43f aed8 	beq.w	b634e <__adddf3+0xe6>
   b659e:	f04f 0203 	mov.w	r2, #3
   b65a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b65a6:	bf18      	it	ne
   b65a8:	3203      	addne	r2, #3
   b65aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b65ae:	bf18      	it	ne
   b65b0:	3203      	addne	r2, #3
   b65b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b65b6:	f1c2 0320 	rsb	r3, r2, #32
   b65ba:	fa00 fc03 	lsl.w	ip, r0, r3
   b65be:	fa20 f002 	lsr.w	r0, r0, r2
   b65c2:	fa01 fe03 	lsl.w	lr, r1, r3
   b65c6:	ea40 000e 	orr.w	r0, r0, lr
   b65ca:	fa21 f102 	lsr.w	r1, r1, r2
   b65ce:	4414      	add	r4, r2
   b65d0:	e6bd      	b.n	b634e <__adddf3+0xe6>
   b65d2:	bf00      	nop

000b65d4 <__aeabi_dmul>:
   b65d4:	b570      	push	{r4, r5, r6, lr}
   b65d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b65da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b65de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b65e2:	bf1d      	ittte	ne
   b65e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b65e8:	ea94 0f0c 	teqne	r4, ip
   b65ec:	ea95 0f0c 	teqne	r5, ip
   b65f0:	f000 f8de 	bleq	b67b0 <__aeabi_dmul+0x1dc>
   b65f4:	442c      	add	r4, r5
   b65f6:	ea81 0603 	eor.w	r6, r1, r3
   b65fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b65fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6602:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6606:	bf18      	it	ne
   b6608:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b660c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6614:	d038      	beq.n	b6688 <__aeabi_dmul+0xb4>
   b6616:	fba0 ce02 	umull	ip, lr, r0, r2
   b661a:	f04f 0500 	mov.w	r5, #0
   b661e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6622:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6626:	fbe0 e503 	umlal	lr, r5, r0, r3
   b662a:	f04f 0600 	mov.w	r6, #0
   b662e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6632:	f09c 0f00 	teq	ip, #0
   b6636:	bf18      	it	ne
   b6638:	f04e 0e01 	orrne.w	lr, lr, #1
   b663c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6640:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6644:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6648:	d204      	bcs.n	b6654 <__aeabi_dmul+0x80>
   b664a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b664e:	416d      	adcs	r5, r5
   b6650:	eb46 0606 	adc.w	r6, r6, r6
   b6654:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6658:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b665c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6660:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6664:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6668:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b666c:	bf88      	it	hi
   b666e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6672:	d81e      	bhi.n	b66b2 <__aeabi_dmul+0xde>
   b6674:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6678:	bf08      	it	eq
   b667a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b667e:	f150 0000 	adcs.w	r0, r0, #0
   b6682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6686:	bd70      	pop	{r4, r5, r6, pc}
   b6688:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b668c:	ea46 0101 	orr.w	r1, r6, r1
   b6690:	ea40 0002 	orr.w	r0, r0, r2
   b6694:	ea81 0103 	eor.w	r1, r1, r3
   b6698:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b669c:	bfc2      	ittt	gt
   b669e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b66a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b66a6:	bd70      	popgt	{r4, r5, r6, pc}
   b66a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b66ac:	f04f 0e00 	mov.w	lr, #0
   b66b0:	3c01      	subs	r4, #1
   b66b2:	f300 80ab 	bgt.w	b680c <__aeabi_dmul+0x238>
   b66b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b66ba:	bfde      	ittt	le
   b66bc:	2000      	movle	r0, #0
   b66be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b66c2:	bd70      	pople	{r4, r5, r6, pc}
   b66c4:	f1c4 0400 	rsb	r4, r4, #0
   b66c8:	3c20      	subs	r4, #32
   b66ca:	da35      	bge.n	b6738 <__aeabi_dmul+0x164>
   b66cc:	340c      	adds	r4, #12
   b66ce:	dc1b      	bgt.n	b6708 <__aeabi_dmul+0x134>
   b66d0:	f104 0414 	add.w	r4, r4, #20
   b66d4:	f1c4 0520 	rsb	r5, r4, #32
   b66d8:	fa00 f305 	lsl.w	r3, r0, r5
   b66dc:	fa20 f004 	lsr.w	r0, r0, r4
   b66e0:	fa01 f205 	lsl.w	r2, r1, r5
   b66e4:	ea40 0002 	orr.w	r0, r0, r2
   b66e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b66ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b66f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b66f4:	fa21 f604 	lsr.w	r6, r1, r4
   b66f8:	eb42 0106 	adc.w	r1, r2, r6
   b66fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6700:	bf08      	it	eq
   b6702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6706:	bd70      	pop	{r4, r5, r6, pc}
   b6708:	f1c4 040c 	rsb	r4, r4, #12
   b670c:	f1c4 0520 	rsb	r5, r4, #32
   b6710:	fa00 f304 	lsl.w	r3, r0, r4
   b6714:	fa20 f005 	lsr.w	r0, r0, r5
   b6718:	fa01 f204 	lsl.w	r2, r1, r4
   b671c:	ea40 0002 	orr.w	r0, r0, r2
   b6720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6728:	f141 0100 	adc.w	r1, r1, #0
   b672c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6730:	bf08      	it	eq
   b6732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6736:	bd70      	pop	{r4, r5, r6, pc}
   b6738:	f1c4 0520 	rsb	r5, r4, #32
   b673c:	fa00 f205 	lsl.w	r2, r0, r5
   b6740:	ea4e 0e02 	orr.w	lr, lr, r2
   b6744:	fa20 f304 	lsr.w	r3, r0, r4
   b6748:	fa01 f205 	lsl.w	r2, r1, r5
   b674c:	ea43 0302 	orr.w	r3, r3, r2
   b6750:	fa21 f004 	lsr.w	r0, r1, r4
   b6754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6758:	fa21 f204 	lsr.w	r2, r1, r4
   b675c:	ea20 0002 	bic.w	r0, r0, r2
   b6760:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6768:	bf08      	it	eq
   b676a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b676e:	bd70      	pop	{r4, r5, r6, pc}
   b6770:	f094 0f00 	teq	r4, #0
   b6774:	d10f      	bne.n	b6796 <__aeabi_dmul+0x1c2>
   b6776:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b677a:	0040      	lsls	r0, r0, #1
   b677c:	eb41 0101 	adc.w	r1, r1, r1
   b6780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6784:	bf08      	it	eq
   b6786:	3c01      	subeq	r4, #1
   b6788:	d0f7      	beq.n	b677a <__aeabi_dmul+0x1a6>
   b678a:	ea41 0106 	orr.w	r1, r1, r6
   b678e:	f095 0f00 	teq	r5, #0
   b6792:	bf18      	it	ne
   b6794:	4770      	bxne	lr
   b6796:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b679a:	0052      	lsls	r2, r2, #1
   b679c:	eb43 0303 	adc.w	r3, r3, r3
   b67a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b67a4:	bf08      	it	eq
   b67a6:	3d01      	subeq	r5, #1
   b67a8:	d0f7      	beq.n	b679a <__aeabi_dmul+0x1c6>
   b67aa:	ea43 0306 	orr.w	r3, r3, r6
   b67ae:	4770      	bx	lr
   b67b0:	ea94 0f0c 	teq	r4, ip
   b67b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b67b8:	bf18      	it	ne
   b67ba:	ea95 0f0c 	teqne	r5, ip
   b67be:	d00c      	beq.n	b67da <__aeabi_dmul+0x206>
   b67c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b67c4:	bf18      	it	ne
   b67c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b67ca:	d1d1      	bne.n	b6770 <__aeabi_dmul+0x19c>
   b67cc:	ea81 0103 	eor.w	r1, r1, r3
   b67d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b67d4:	f04f 0000 	mov.w	r0, #0
   b67d8:	bd70      	pop	{r4, r5, r6, pc}
   b67da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b67de:	bf06      	itte	eq
   b67e0:	4610      	moveq	r0, r2
   b67e2:	4619      	moveq	r1, r3
   b67e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b67e8:	d019      	beq.n	b681e <__aeabi_dmul+0x24a>
   b67ea:	ea94 0f0c 	teq	r4, ip
   b67ee:	d102      	bne.n	b67f6 <__aeabi_dmul+0x222>
   b67f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b67f4:	d113      	bne.n	b681e <__aeabi_dmul+0x24a>
   b67f6:	ea95 0f0c 	teq	r5, ip
   b67fa:	d105      	bne.n	b6808 <__aeabi_dmul+0x234>
   b67fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6800:	bf1c      	itt	ne
   b6802:	4610      	movne	r0, r2
   b6804:	4619      	movne	r1, r3
   b6806:	d10a      	bne.n	b681e <__aeabi_dmul+0x24a>
   b6808:	ea81 0103 	eor.w	r1, r1, r3
   b680c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6810:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6818:	f04f 0000 	mov.w	r0, #0
   b681c:	bd70      	pop	{r4, r5, r6, pc}
   b681e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6822:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6826:	bd70      	pop	{r4, r5, r6, pc}

000b6828 <__aeabi_ddiv>:
   b6828:	b570      	push	{r4, r5, r6, lr}
   b682a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b682e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6832:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6836:	bf1d      	ittte	ne
   b6838:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b683c:	ea94 0f0c 	teqne	r4, ip
   b6840:	ea95 0f0c 	teqne	r5, ip
   b6844:	f000 f8a7 	bleq	b6996 <__aeabi_ddiv+0x16e>
   b6848:	eba4 0405 	sub.w	r4, r4, r5
   b684c:	ea81 0e03 	eor.w	lr, r1, r3
   b6850:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6854:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6858:	f000 8088 	beq.w	b696c <__aeabi_ddiv+0x144>
   b685c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6860:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6864:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6868:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b686c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6870:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6874:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6878:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b687c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6880:	429d      	cmp	r5, r3
   b6882:	bf08      	it	eq
   b6884:	4296      	cmpeq	r6, r2
   b6886:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b688a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b688e:	d202      	bcs.n	b6896 <__aeabi_ddiv+0x6e>
   b6890:	085b      	lsrs	r3, r3, #1
   b6892:	ea4f 0232 	mov.w	r2, r2, rrx
   b6896:	1ab6      	subs	r6, r6, r2
   b6898:	eb65 0503 	sbc.w	r5, r5, r3
   b689c:	085b      	lsrs	r3, r3, #1
   b689e:	ea4f 0232 	mov.w	r2, r2, rrx
   b68a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b68a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b68aa:	ebb6 0e02 	subs.w	lr, r6, r2
   b68ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   b68b2:	bf22      	ittt	cs
   b68b4:	1ab6      	subcs	r6, r6, r2
   b68b6:	4675      	movcs	r5, lr
   b68b8:	ea40 000c 	orrcs.w	r0, r0, ip
   b68bc:	085b      	lsrs	r3, r3, #1
   b68be:	ea4f 0232 	mov.w	r2, r2, rrx
   b68c2:	ebb6 0e02 	subs.w	lr, r6, r2
   b68c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b68ca:	bf22      	ittt	cs
   b68cc:	1ab6      	subcs	r6, r6, r2
   b68ce:	4675      	movcs	r5, lr
   b68d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b68d4:	085b      	lsrs	r3, r3, #1
   b68d6:	ea4f 0232 	mov.w	r2, r2, rrx
   b68da:	ebb6 0e02 	subs.w	lr, r6, r2
   b68de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b68e2:	bf22      	ittt	cs
   b68e4:	1ab6      	subcs	r6, r6, r2
   b68e6:	4675      	movcs	r5, lr
   b68e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b68ec:	085b      	lsrs	r3, r3, #1
   b68ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b68f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b68f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b68fa:	bf22      	ittt	cs
   b68fc:	1ab6      	subcs	r6, r6, r2
   b68fe:	4675      	movcs	r5, lr
   b6900:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6904:	ea55 0e06 	orrs.w	lr, r5, r6
   b6908:	d018      	beq.n	b693c <__aeabi_ddiv+0x114>
   b690a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b690e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6912:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6916:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b691a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b691e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6922:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6926:	d1c0      	bne.n	b68aa <__aeabi_ddiv+0x82>
   b6928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b692c:	d10b      	bne.n	b6946 <__aeabi_ddiv+0x11e>
   b692e:	ea41 0100 	orr.w	r1, r1, r0
   b6932:	f04f 0000 	mov.w	r0, #0
   b6936:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b693a:	e7b6      	b.n	b68aa <__aeabi_ddiv+0x82>
   b693c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6940:	bf04      	itt	eq
   b6942:	4301      	orreq	r1, r0
   b6944:	2000      	moveq	r0, #0
   b6946:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b694a:	bf88      	it	hi
   b694c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6950:	f63f aeaf 	bhi.w	b66b2 <__aeabi_dmul+0xde>
   b6954:	ebb5 0c03 	subs.w	ip, r5, r3
   b6958:	bf04      	itt	eq
   b695a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b695e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6962:	f150 0000 	adcs.w	r0, r0, #0
   b6966:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b696a:	bd70      	pop	{r4, r5, r6, pc}
   b696c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6970:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6974:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6978:	bfc2      	ittt	gt
   b697a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b697e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6982:	bd70      	popgt	{r4, r5, r6, pc}
   b6984:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6988:	f04f 0e00 	mov.w	lr, #0
   b698c:	3c01      	subs	r4, #1
   b698e:	e690      	b.n	b66b2 <__aeabi_dmul+0xde>
   b6990:	ea45 0e06 	orr.w	lr, r5, r6
   b6994:	e68d      	b.n	b66b2 <__aeabi_dmul+0xde>
   b6996:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b699a:	ea94 0f0c 	teq	r4, ip
   b699e:	bf08      	it	eq
   b69a0:	ea95 0f0c 	teqeq	r5, ip
   b69a4:	f43f af3b 	beq.w	b681e <__aeabi_dmul+0x24a>
   b69a8:	ea94 0f0c 	teq	r4, ip
   b69ac:	d10a      	bne.n	b69c4 <__aeabi_ddiv+0x19c>
   b69ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b69b2:	f47f af34 	bne.w	b681e <__aeabi_dmul+0x24a>
   b69b6:	ea95 0f0c 	teq	r5, ip
   b69ba:	f47f af25 	bne.w	b6808 <__aeabi_dmul+0x234>
   b69be:	4610      	mov	r0, r2
   b69c0:	4619      	mov	r1, r3
   b69c2:	e72c      	b.n	b681e <__aeabi_dmul+0x24a>
   b69c4:	ea95 0f0c 	teq	r5, ip
   b69c8:	d106      	bne.n	b69d8 <__aeabi_ddiv+0x1b0>
   b69ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b69ce:	f43f aefd 	beq.w	b67cc <__aeabi_dmul+0x1f8>
   b69d2:	4610      	mov	r0, r2
   b69d4:	4619      	mov	r1, r3
   b69d6:	e722      	b.n	b681e <__aeabi_dmul+0x24a>
   b69d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b69dc:	bf18      	it	ne
   b69de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b69e2:	f47f aec5 	bne.w	b6770 <__aeabi_dmul+0x19c>
   b69e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b69ea:	f47f af0d 	bne.w	b6808 <__aeabi_dmul+0x234>
   b69ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b69f2:	f47f aeeb 	bne.w	b67cc <__aeabi_dmul+0x1f8>
   b69f6:	e712      	b.n	b681e <__aeabi_dmul+0x24a>

000b69f8 <__gedf2>:
   b69f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b69fc:	e006      	b.n	b6a0c <__cmpdf2+0x4>
   b69fe:	bf00      	nop

000b6a00 <__ledf2>:
   b6a00:	f04f 0c01 	mov.w	ip, #1
   b6a04:	e002      	b.n	b6a0c <__cmpdf2+0x4>
   b6a06:	bf00      	nop

000b6a08 <__cmpdf2>:
   b6a08:	f04f 0c01 	mov.w	ip, #1
   b6a0c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6a1c:	bf18      	it	ne
   b6a1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6a22:	d01b      	beq.n	b6a5c <__cmpdf2+0x54>
   b6a24:	b001      	add	sp, #4
   b6a26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6a2a:	bf0c      	ite	eq
   b6a2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6a30:	ea91 0f03 	teqne	r1, r3
   b6a34:	bf02      	ittt	eq
   b6a36:	ea90 0f02 	teqeq	r0, r2
   b6a3a:	2000      	moveq	r0, #0
   b6a3c:	4770      	bxeq	lr
   b6a3e:	f110 0f00 	cmn.w	r0, #0
   b6a42:	ea91 0f03 	teq	r1, r3
   b6a46:	bf58      	it	pl
   b6a48:	4299      	cmppl	r1, r3
   b6a4a:	bf08      	it	eq
   b6a4c:	4290      	cmpeq	r0, r2
   b6a4e:	bf2c      	ite	cs
   b6a50:	17d8      	asrcs	r0, r3, #31
   b6a52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6a56:	f040 0001 	orr.w	r0, r0, #1
   b6a5a:	4770      	bx	lr
   b6a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6a64:	d102      	bne.n	b6a6c <__cmpdf2+0x64>
   b6a66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6a6a:	d107      	bne.n	b6a7c <__cmpdf2+0x74>
   b6a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6a74:	d1d6      	bne.n	b6a24 <__cmpdf2+0x1c>
   b6a76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6a7a:	d0d3      	beq.n	b6a24 <__cmpdf2+0x1c>
   b6a7c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6a80:	4770      	bx	lr
   b6a82:	bf00      	nop

000b6a84 <__aeabi_cdrcmple>:
   b6a84:	4684      	mov	ip, r0
   b6a86:	4610      	mov	r0, r2
   b6a88:	4662      	mov	r2, ip
   b6a8a:	468c      	mov	ip, r1
   b6a8c:	4619      	mov	r1, r3
   b6a8e:	4663      	mov	r3, ip
   b6a90:	e000      	b.n	b6a94 <__aeabi_cdcmpeq>
   b6a92:	bf00      	nop

000b6a94 <__aeabi_cdcmpeq>:
   b6a94:	b501      	push	{r0, lr}
   b6a96:	f7ff ffb7 	bl	b6a08 <__cmpdf2>
   b6a9a:	2800      	cmp	r0, #0
   b6a9c:	bf48      	it	mi
   b6a9e:	f110 0f00 	cmnmi.w	r0, #0
   b6aa2:	bd01      	pop	{r0, pc}

000b6aa4 <__aeabi_dcmpeq>:
   b6aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6aa8:	f7ff fff4 	bl	b6a94 <__aeabi_cdcmpeq>
   b6aac:	bf0c      	ite	eq
   b6aae:	2001      	moveq	r0, #1
   b6ab0:	2000      	movne	r0, #0
   b6ab2:	f85d fb08 	ldr.w	pc, [sp], #8
   b6ab6:	bf00      	nop

000b6ab8 <__aeabi_dcmplt>:
   b6ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6abc:	f7ff ffea 	bl	b6a94 <__aeabi_cdcmpeq>
   b6ac0:	bf34      	ite	cc
   b6ac2:	2001      	movcc	r0, #1
   b6ac4:	2000      	movcs	r0, #0
   b6ac6:	f85d fb08 	ldr.w	pc, [sp], #8
   b6aca:	bf00      	nop

000b6acc <__aeabi_dcmple>:
   b6acc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ad0:	f7ff ffe0 	bl	b6a94 <__aeabi_cdcmpeq>
   b6ad4:	bf94      	ite	ls
   b6ad6:	2001      	movls	r0, #1
   b6ad8:	2000      	movhi	r0, #0
   b6ada:	f85d fb08 	ldr.w	pc, [sp], #8
   b6ade:	bf00      	nop

000b6ae0 <__aeabi_dcmpge>:
   b6ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6ae4:	f7ff ffce 	bl	b6a84 <__aeabi_cdrcmple>
   b6ae8:	bf94      	ite	ls
   b6aea:	2001      	movls	r0, #1
   b6aec:	2000      	movhi	r0, #0
   b6aee:	f85d fb08 	ldr.w	pc, [sp], #8
   b6af2:	bf00      	nop

000b6af4 <__aeabi_dcmpgt>:
   b6af4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6af8:	f7ff ffc4 	bl	b6a84 <__aeabi_cdrcmple>
   b6afc:	bf34      	ite	cc
   b6afe:	2001      	movcc	r0, #1
   b6b00:	2000      	movcs	r0, #0
   b6b02:	f85d fb08 	ldr.w	pc, [sp], #8
   b6b06:	bf00      	nop

000b6b08 <__aeabi_dcmpun>:
   b6b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6b10:	d102      	bne.n	b6b18 <__aeabi_dcmpun+0x10>
   b6b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6b16:	d10a      	bne.n	b6b2e <__aeabi_dcmpun+0x26>
   b6b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6b20:	d102      	bne.n	b6b28 <__aeabi_dcmpun+0x20>
   b6b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6b26:	d102      	bne.n	b6b2e <__aeabi_dcmpun+0x26>
   b6b28:	f04f 0000 	mov.w	r0, #0
   b6b2c:	4770      	bx	lr
   b6b2e:	f04f 0001 	mov.w	r0, #1
   b6b32:	4770      	bx	lr

000b6b34 <__aeabi_d2iz>:
   b6b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6b3c:	d215      	bcs.n	b6b6a <__aeabi_d2iz+0x36>
   b6b3e:	d511      	bpl.n	b6b64 <__aeabi_d2iz+0x30>
   b6b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6b48:	d912      	bls.n	b6b70 <__aeabi_d2iz+0x3c>
   b6b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6b5a:	fa23 f002 	lsr.w	r0, r3, r2
   b6b5e:	bf18      	it	ne
   b6b60:	4240      	negne	r0, r0
   b6b62:	4770      	bx	lr
   b6b64:	f04f 0000 	mov.w	r0, #0
   b6b68:	4770      	bx	lr
   b6b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6b6e:	d105      	bne.n	b6b7c <__aeabi_d2iz+0x48>
   b6b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6b74:	bf08      	it	eq
   b6b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6b7a:	4770      	bx	lr
   b6b7c:	f04f 0000 	mov.w	r0, #0
   b6b80:	4770      	bx	lr
   b6b82:	bf00      	nop

000b6b84 <__aeabi_d2uiz>:
   b6b84:	004a      	lsls	r2, r1, #1
   b6b86:	d211      	bcs.n	b6bac <__aeabi_d2uiz+0x28>
   b6b88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6b8c:	d211      	bcs.n	b6bb2 <__aeabi_d2uiz+0x2e>
   b6b8e:	d50d      	bpl.n	b6bac <__aeabi_d2uiz+0x28>
   b6b90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6b98:	d40e      	bmi.n	b6bb8 <__aeabi_d2uiz+0x34>
   b6b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6ba6:	fa23 f002 	lsr.w	r0, r3, r2
   b6baa:	4770      	bx	lr
   b6bac:	f04f 0000 	mov.w	r0, #0
   b6bb0:	4770      	bx	lr
   b6bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6bb6:	d102      	bne.n	b6bbe <__aeabi_d2uiz+0x3a>
   b6bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6bbc:	4770      	bx	lr
   b6bbe:	f04f 0000 	mov.w	r0, #0
   b6bc2:	4770      	bx	lr

000b6bc4 <__aeabi_d2f>:
   b6bc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6bc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6bcc:	bf24      	itt	cs
   b6bce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6bd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6bd6:	d90d      	bls.n	b6bf4 <__aeabi_d2f+0x30>
   b6bd8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6bdc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6be0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6be4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6be8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6bec:	bf08      	it	eq
   b6bee:	f020 0001 	biceq.w	r0, r0, #1
   b6bf2:	4770      	bx	lr
   b6bf4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6bf8:	d121      	bne.n	b6c3e <__aeabi_d2f+0x7a>
   b6bfa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6bfe:	bfbc      	itt	lt
   b6c00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6c04:	4770      	bxlt	lr
   b6c06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6c0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6c0e:	f1c2 0218 	rsb	r2, r2, #24
   b6c12:	f1c2 0c20 	rsb	ip, r2, #32
   b6c16:	fa10 f30c 	lsls.w	r3, r0, ip
   b6c1a:	fa20 f002 	lsr.w	r0, r0, r2
   b6c1e:	bf18      	it	ne
   b6c20:	f040 0001 	orrne.w	r0, r0, #1
   b6c24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6c28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6c2c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6c30:	ea40 000c 	orr.w	r0, r0, ip
   b6c34:	fa23 f302 	lsr.w	r3, r3, r2
   b6c38:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6c3c:	e7cc      	b.n	b6bd8 <__aeabi_d2f+0x14>
   b6c3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6c42:	d107      	bne.n	b6c54 <__aeabi_d2f+0x90>
   b6c44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6c48:	bf1e      	ittt	ne
   b6c4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6c4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6c52:	4770      	bxne	lr
   b6c54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6c58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6c5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6c60:	4770      	bx	lr
   b6c62:	bf00      	nop

000b6c64 <atexit>:
   b6c64:	2300      	movs	r3, #0
   b6c66:	4601      	mov	r1, r0
   b6c68:	461a      	mov	r2, r3
   b6c6a:	4618      	mov	r0, r3
   b6c6c:	f000 b84c 	b.w	b6d08 <__register_exitproc>

000b6c70 <memcpy>:
   b6c70:	440a      	add	r2, r1
   b6c72:	4291      	cmp	r1, r2
   b6c74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6c78:	d100      	bne.n	b6c7c <memcpy+0xc>
   b6c7a:	4770      	bx	lr
   b6c7c:	b510      	push	{r4, lr}
   b6c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c82:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6c86:	4291      	cmp	r1, r2
   b6c88:	d1f9      	bne.n	b6c7e <memcpy+0xe>
   b6c8a:	bd10      	pop	{r4, pc}

000b6c8c <memset>:
   b6c8c:	4402      	add	r2, r0
   b6c8e:	4603      	mov	r3, r0
   b6c90:	4293      	cmp	r3, r2
   b6c92:	d100      	bne.n	b6c96 <memset+0xa>
   b6c94:	4770      	bx	lr
   b6c96:	f803 1b01 	strb.w	r1, [r3], #1
   b6c9a:	e7f9      	b.n	b6c90 <memset+0x4>

000b6c9c <srand>:
   b6c9c:	b538      	push	{r3, r4, r5, lr}
   b6c9e:	4b10      	ldr	r3, [pc, #64]	; (b6ce0 <srand+0x44>)
   b6ca0:	681d      	ldr	r5, [r3, #0]
   b6ca2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ca4:	4604      	mov	r4, r0
   b6ca6:	b9b3      	cbnz	r3, b6cd6 <srand+0x3a>
   b6ca8:	2018      	movs	r0, #24
   b6caa:	f7fd fc6d 	bl	b4588 <malloc>
   b6cae:	4602      	mov	r2, r0
   b6cb0:	63a8      	str	r0, [r5, #56]	; 0x38
   b6cb2:	b920      	cbnz	r0, b6cbe <srand+0x22>
   b6cb4:	4b0b      	ldr	r3, [pc, #44]	; (b6ce4 <srand+0x48>)
   b6cb6:	480c      	ldr	r0, [pc, #48]	; (b6ce8 <srand+0x4c>)
   b6cb8:	2142      	movs	r1, #66	; 0x42
   b6cba:	f7fd fc7d 	bl	b45b8 <__assert_func>
   b6cbe:	490b      	ldr	r1, [pc, #44]	; (b6cec <srand+0x50>)
   b6cc0:	4b0b      	ldr	r3, [pc, #44]	; (b6cf0 <srand+0x54>)
   b6cc2:	e9c0 1300 	strd	r1, r3, [r0]
   b6cc6:	4b0b      	ldr	r3, [pc, #44]	; (b6cf4 <srand+0x58>)
   b6cc8:	6083      	str	r3, [r0, #8]
   b6cca:	230b      	movs	r3, #11
   b6ccc:	8183      	strh	r3, [r0, #12]
   b6cce:	2100      	movs	r1, #0
   b6cd0:	2001      	movs	r0, #1
   b6cd2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6cd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6cd8:	2200      	movs	r2, #0
   b6cda:	611c      	str	r4, [r3, #16]
   b6cdc:	615a      	str	r2, [r3, #20]
   b6cde:	bd38      	pop	{r3, r4, r5, pc}
   b6ce0:	2003e630 	.word	0x2003e630
   b6ce4:	000b6f88 	.word	0x000b6f88
   b6ce8:	000b6f9f 	.word	0x000b6f9f
   b6cec:	abcd330e 	.word	0xabcd330e
   b6cf0:	e66d1234 	.word	0xe66d1234
   b6cf4:	0005deec 	.word	0x0005deec

000b6cf8 <strlen>:
   b6cf8:	4603      	mov	r3, r0
   b6cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6cfe:	2a00      	cmp	r2, #0
   b6d00:	d1fb      	bne.n	b6cfa <strlen+0x2>
   b6d02:	1a18      	subs	r0, r3, r0
   b6d04:	3801      	subs	r0, #1
   b6d06:	4770      	bx	lr

000b6d08 <__register_exitproc>:
   b6d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6dc8 <__register_exitproc+0xc0>
   b6d10:	4606      	mov	r6, r0
   b6d12:	f8d8 0000 	ldr.w	r0, [r8]
   b6d16:	461f      	mov	r7, r3
   b6d18:	460d      	mov	r5, r1
   b6d1a:	4691      	mov	r9, r2
   b6d1c:	f000 f856 	bl	b6dcc <__retarget_lock_acquire_recursive>
   b6d20:	4b25      	ldr	r3, [pc, #148]	; (b6db8 <__register_exitproc+0xb0>)
   b6d22:	681c      	ldr	r4, [r3, #0]
   b6d24:	b934      	cbnz	r4, b6d34 <__register_exitproc+0x2c>
   b6d26:	4c25      	ldr	r4, [pc, #148]	; (b6dbc <__register_exitproc+0xb4>)
   b6d28:	601c      	str	r4, [r3, #0]
   b6d2a:	4b25      	ldr	r3, [pc, #148]	; (b6dc0 <__register_exitproc+0xb8>)
   b6d2c:	b113      	cbz	r3, b6d34 <__register_exitproc+0x2c>
   b6d2e:	681b      	ldr	r3, [r3, #0]
   b6d30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6d34:	6863      	ldr	r3, [r4, #4]
   b6d36:	2b1f      	cmp	r3, #31
   b6d38:	dd07      	ble.n	b6d4a <__register_exitproc+0x42>
   b6d3a:	f8d8 0000 	ldr.w	r0, [r8]
   b6d3e:	f000 f847 	bl	b6dd0 <__retarget_lock_release_recursive>
   b6d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6d4a:	b34e      	cbz	r6, b6da0 <__register_exitproc+0x98>
   b6d4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6d50:	b988      	cbnz	r0, b6d76 <__register_exitproc+0x6e>
   b6d52:	4b1c      	ldr	r3, [pc, #112]	; (b6dc4 <__register_exitproc+0xbc>)
   b6d54:	b923      	cbnz	r3, b6d60 <__register_exitproc+0x58>
   b6d56:	f8d8 0000 	ldr.w	r0, [r8]
   b6d5a:	f000 f838 	bl	b6dce <__retarget_lock_release>
   b6d5e:	e7f0      	b.n	b6d42 <__register_exitproc+0x3a>
   b6d60:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6d64:	f7fd fc10 	bl	b4588 <malloc>
   b6d68:	2800      	cmp	r0, #0
   b6d6a:	d0f4      	beq.n	b6d56 <__register_exitproc+0x4e>
   b6d6c:	2300      	movs	r3, #0
   b6d6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6d72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6d76:	6863      	ldr	r3, [r4, #4]
   b6d78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6d7c:	2201      	movs	r2, #1
   b6d7e:	409a      	lsls	r2, r3
   b6d80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6d84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6d88:	4313      	orrs	r3, r2
   b6d8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6d8e:	2e02      	cmp	r6, #2
   b6d90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6d94:	bf02      	ittt	eq
   b6d96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6d9a:	4313      	orreq	r3, r2
   b6d9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6da0:	6863      	ldr	r3, [r4, #4]
   b6da2:	f8d8 0000 	ldr.w	r0, [r8]
   b6da6:	1c5a      	adds	r2, r3, #1
   b6da8:	3302      	adds	r3, #2
   b6daa:	6062      	str	r2, [r4, #4]
   b6dac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6db0:	f000 f80e 	bl	b6dd0 <__retarget_lock_release_recursive>
   b6db4:	2000      	movs	r0, #0
   b6db6:	e7c6      	b.n	b6d46 <__register_exitproc+0x3e>
   b6db8:	2003e7e8 	.word	0x2003e7e8
   b6dbc:	2003e75c 	.word	0x2003e75c
   b6dc0:	00000000 	.word	0x00000000
   b6dc4:	000b4589 	.word	0x000b4589
   b6dc8:	2003e694 	.word	0x2003e694

000b6dcc <__retarget_lock_acquire_recursive>:
   b6dcc:	4770      	bx	lr

000b6dce <__retarget_lock_release>:
   b6dce:	4770      	bx	lr

000b6dd0 <__retarget_lock_release_recursive>:
   b6dd0:	4770      	bx	lr

000b6dd2 <link_code_end>:
	...

000b6dd4 <dynalib_user>:
   b6dd4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6de4:	0000 0000 002c 0000                         ....,...

000b6dec <_ZTVN5spark13EthernetClassE>:
	...
   b6df4:	4647 000b 463d 000b 4633 000b 4629 000b     GF..=F..3F..)F..
   b6e04:	461d 000b 4611 000b 4839 000b 4841 000b     .F...F..9H..AH..
   b6e14:	4605 000b 45fd 000b 45f3 000b 45e9 000b     .F...E...E...E..
   b6e24:	4871 000b                                   qH..

000b6e28 <_ZTV7TwoWire>:
	...
   b6e30:	4665 000b 46af 000b 4687 000b 4667 000b     eF...F...F..gF..
   b6e40:	468f 000b 4697 000b 469f 000b 46a7 000b     .F...F...F...F..

000b6e50 <_ZTV9IPAddress>:
	...
   b6e58:	4709 000b 46f9 000b 46fb 000b 7061 0070     .G...F...F..app.

000b6e68 <_ZTVN5spark12NetworkClassE>:
	...
   b6e70:	47f9 000b 4803 000b 480d 000b 4817 000b     .G...H...H...H..
   b6e80:	4821 000b 482d 000b 4839 000b 4841 000b     !H..-H..9H..AH..
   b6e90:	4849 000b 4855 000b 485d 000b 4867 000b     IH..UH..]H..gH..
   b6ea0:	4871 000b 616e 006e 6e69 0066 766f 0066     qH..nan.inf.ovf.
   b6eb0:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b6ec0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b6ed0 <_ZTV11USARTSerial>:
	...
   b6ed8:	4c4d 000b 4cb9 000b 4c91 000b 495d 000b     ML...L...L..]I..
   b6ee8:	4c61 000b 4c7d 000b 4c6f 000b 4c8b 000b     aL..}L..oL...L..
   b6ef8:	4c4f 000b 4c53 000b                         OL..SL..

000b6f00 <_ZTV9USBSerial>:
	...
   b6f08:	4cf7 000b 4d5f 000b 4d35 000b 495d 000b     .L.._M..5M..]I..
   b6f18:	4d27 000b 4cf9 000b 4d09 000b 4d59 000b     'M...L...M..YM..
   b6f28:	4d19 000b 4cf1 000b                         .M...L..

000b6f30 <_ZTVN5spark9WiFiClassE>:
	...
   b6f38:	4e57 000b 4e4d 000b 4e43 000b 4df9 000b     WN..MN..CN...M..
   b6f48:	4e37 000b 4e2b 000b 4839 000b 4841 000b     7N..+N..9H..AH..
   b6f58:	4e1f 000b 4e17 000b 4e0d 000b 4e03 000b     .N...N...N...N..
   b6f68:	4871 000b                                   qH..

000b6f6c <_ZSt7nothrow>:
	...

000b6f78 <TWO52>:
   b6f78:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b6f88:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b6f98:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b6fa8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b6fb8:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b6fc8:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b6fd8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b6fe8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b6ff8 <link_const_variable_data_end>:
   b6ff8:	000b4269 	.word	0x000b4269
   b6ffc:	000b45d9 	.word	0x000b45d9
   b7000:	000b4651 	.word	0x000b4651
   b7004:	000b47e9 	.word	0x000b47e9
   b7008:	000b4949 	.word	0x000b4949
   b700c:	000b4bf5 	.word	0x000b4bf5
   b7010:	000b4c15 	.word	0x000b4c15
   b7014:	000b4c39 	.word	0x000b4c39
   b7018:	000b4e61 	.word	0x000b4e61

000b701c <link_constructors_end>:
   b701c:	00000000 	.word	0x00000000
