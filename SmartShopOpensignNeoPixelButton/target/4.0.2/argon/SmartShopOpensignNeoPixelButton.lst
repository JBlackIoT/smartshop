
/Users/jamesblack/Documents/IoT/smartshop/SmartShopOpensignNeoPixelButton/target/4.0.2/argon/SmartShopOpensignNeoPixelButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002464  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6480  000b6480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b64a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  2003e5a0  000b64a8  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  2003e624  2003e624  0002e624  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b652c  000b652c  0002652c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6554  000b6554  00026554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010543a  00000000  00000000  00026558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000116e9  00000000  00000000  0012b992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038c72  00000000  00000000  0013d07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002dd0  00000000  00000000  00175ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a470  00000000  00000000  00178abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f28  00000000  00000000  00182f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003abb3  00000000  00000000  001b8e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133566  00000000  00000000  001f3a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008028  00000000  00000000  00326f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 ff23 	bl	b5e78 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 ff2b 	bl	b5e94 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5a0 	.word	0x2003e5a0
   b4048:	000b64a8 	.word	0x000b64a8
   b404c:	2003e624 	.word	0x2003e624
   b4050:	2003e624 	.word	0x2003e624
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fcc5 	bl	b59ec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6450 	.word	0x000b6450
   b407c:	000b6478 	.word	0x000b6478

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b83a 	b.w	b40f8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f861 	bl	b414c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bc65 	b.w	b595c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bd8f 	b.w	b4bb4 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bd8d 	b.w	b4bb4 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bd93 	b.w	b4bc4 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40b0:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40b2:	6984      	ldr	r4, [r0, #24]
   b40b4:	4b0a      	ldr	r3, [pc, #40]	; (b40e0 <_ZN9TCPClientD1Ev+0x30>)
   b40b6:	6003      	str	r3, [r0, #0]
   b40b8:	4605      	mov	r5, r0
   b40ba:	b17c      	cbz	r4, b40dc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40bc:	6863      	ldr	r3, [r4, #4]
   b40be:	3b01      	subs	r3, #1
   b40c0:	6063      	str	r3, [r4, #4]
   b40c2:	b95b      	cbnz	r3, b40dc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b40c4:	6823      	ldr	r3, [r4, #0]
   b40c6:	4620      	mov	r0, r4
   b40c8:	689b      	ldr	r3, [r3, #8]
   b40ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40cc:	68a3      	ldr	r3, [r4, #8]
   b40ce:	3b01      	subs	r3, #1
   b40d0:	60a3      	str	r3, [r4, #8]
   b40d2:	b91b      	cbnz	r3, b40dc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b40d4:	6823      	ldr	r3, [r4, #0]
   b40d6:	4620      	mov	r0, r4
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4798      	blx	r3
   b40dc:	4628      	mov	r0, r5
   b40de:	bd38      	pop	{r3, r4, r5, pc}
   b40e0:	000b61ec 	.word	0x000b61ec

000b40e4 <_ZN9TCPClientD0Ev>:
   b40e4:	b510      	push	{r4, lr}
   b40e6:	4604      	mov	r4, r0
   b40e8:	f7ff ffe2 	bl	b40b0 <_ZN9TCPClientD1Ev>
   b40ec:	4620      	mov	r0, r4
   b40ee:	211c      	movs	r1, #28
   b40f0:	f7ff ffd3 	bl	b409a <_ZdlPvj>
   b40f4:	4620      	mov	r0, r4
   b40f6:	bd10      	pop	{r4, pc}

000b40f8 <setup>:
SYSTEM_MODE(SEMI_AUTOMATIC); // not online
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B); // exact pixel used

void pixelFill(int startPixel, int endPixel, int hexColor); // Command creating a function called pixelFill (integer for where it starts, and where it ends on track, integer for hex color)

void setup() {   // function that does not return a value during "set up" called initialize the variables, pins, libraries the program needs to use
   b40f8:	b508      	push	{r3, lr}
  pinMode(BUTTONPIN,INPUT_PULLDOWN);
   b40fa:	2103      	movs	r1, #3
   b40fc:	2004      	movs	r0, #4
   b40fe:	f001 fce5 	bl	b5acc <pinMode>
  pixel.begin();      
   b4102:	4806      	ldr	r0, [pc, #24]	; (b411c <setup+0x24>)
   b4104:	f000 f8b9 	bl	b427a <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   b4108:	4804      	ldr	r0, [pc, #16]	; (b411c <setup+0x24>)
   b410a:	f000 f8ef 	bl	b42ec <_ZN17Adafruit_NeoPixel4showEv>
  pixel.setBrightness(30); // sets brightness on scale 1-255
}
   b410e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pixel.setBrightness(30); // sets brightness on scale 1-255
   b4112:	4802      	ldr	r0, [pc, #8]	; (b411c <setup+0x24>)
   b4114:	211e      	movs	r1, #30
   b4116:	f000 bb25 	b.w	b4764 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
   b411a:	bf00      	nop
   b411c:	2003e69c 	.word	0x2003e69c

000b4120 <_Z9pixelFilliii>:
      pixel.show();
    }
  }
}

void pixelFill(int startPixel, int endPixel, int hexColor) {    // command and integer that sets up equation to be calculated by CPU
   b4120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = startPixel; i <= endPixel; i++) {   // the equation is if i = startPixel then i is less than total or end of track including all pixels, the direction is up i guess that's what ++ is? 
    pixel.setPixelColor(i, hexColor);       // command to set the pixel color then (we have established that pixel = i so this is pointing back to above where we said pink)
   b4122:	4e09      	ldr	r6, [pc, #36]	; (b4148 <_Z9pixelFilliii+0x28>)
void pixelFill(int startPixel, int endPixel, int hexColor) {    // command and integer that sets up equation to be calculated by CPU
   b4124:	4604      	mov	r4, r0
   b4126:	460d      	mov	r5, r1
   b4128:	4617      	mov	r7, r2
  for (int i = startPixel; i <= endPixel; i++) {   // the equation is if i = startPixel then i is less than total or end of track including all pixels, the direction is up i guess that's what ++ is? 
   b412a:	42ac      	cmp	r4, r5
   b412c:	dc06      	bgt.n	b413c <_Z9pixelFilliii+0x1c>
    pixel.setPixelColor(i, hexColor);       // command to set the pixel color then (we have established that pixel = i so this is pointing back to above where we said pink)
   b412e:	b2a1      	uxth	r1, r4
   b4130:	463a      	mov	r2, r7
   b4132:	4630      	mov	r0, r6
   b4134:	f000 fa86 	bl	b4644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  for (int i = startPixel; i <= endPixel; i++) {   // the equation is if i = startPixel then i is less than total or end of track including all pixels, the direction is up i guess that's what ++ is? 
   b4138:	3401      	adds	r4, #1
   b413a:	e7f6      	b.n	b412a <_Z9pixelFilliii+0xa>
  }
  pixel.show();      // command to show pixels
  
   b413c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pixel.show();      // command to show pixels
   b4140:	4801      	ldr	r0, [pc, #4]	; (b4148 <_Z9pixelFilliii+0x28>)
   b4142:	f000 b8d3 	b.w	b42ec <_ZN17Adafruit_NeoPixel4showEv>
   b4146:	bf00      	nop
   b4148:	2003e69c 	.word	0x2003e69c

000b414c <loop>:
void loop() {  // command that begins the "function" loop is called for repeatedly AFTER set up has executed, main code goes here
   b414c:	b538      	push	{r3, r4, r5, lr}
  previousButtonState = buttonState;
   b414e:	4d11      	ldr	r5, [pc, #68]	; (b4194 <loop+0x48>)
   b4150:	4c11      	ldr	r4, [pc, #68]	; (b4198 <loop+0x4c>)
   b4152:	782b      	ldrb	r3, [r5, #0]
   b4154:	7023      	strb	r3, [r4, #0]
  buttonState = digitalRead(BUTTONPIN);
   b4156:	2004      	movs	r0, #4
   b4158:	f001 fce2 	bl	b5b20 <digitalRead>
   b415c:	2800      	cmp	r0, #0
   b415e:	bf14      	ite	ne
   b4160:	2301      	movne	r3, #1
   b4162:	2300      	moveq	r3, #0
   b4164:	702b      	strb	r3, [r5, #0]
  if (buttonState && !previousButtonState) {  // check if button has just been pressed
   b4166:	d014      	beq.n	b4192 <loop+0x46>
   b4168:	7821      	ldrb	r1, [r4, #0]
   b416a:	b991      	cbnz	r1, b4192 <loop+0x46>
    if (pixel.getPixelColor(0) == 0) {  // check if pixels are currently off
   b416c:	480b      	ldr	r0, [pc, #44]	; (b419c <loop+0x50>)
   b416e:	f000 faac 	bl	b46ca <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
   b4172:	b930      	cbnz	r0, b4182 <loop+0x36>
}
   b4174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      pixelFill(0, 46,0x008000);  // selecting what pixels on track will be filled , selecting the color
   b4178:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b417c:	212e      	movs	r1, #46	; 0x2e
   b417e:	f7ff bfcf 	b.w	b4120 <_Z9pixelFilliii>
      pixel.clear(); // turn off pixels
   b4182:	4806      	ldr	r0, [pc, #24]	; (b419c <loop+0x50>)
   b4184:	f000 fb15 	bl	b47b2 <_ZN17Adafruit_NeoPixel5clearEv>
}
   b4188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      pixel.show();
   b418c:	4803      	ldr	r0, [pc, #12]	; (b419c <loop+0x50>)
   b418e:	f000 b8ad 	b.w	b42ec <_ZN17Adafruit_NeoPixel4showEv>
}
   b4192:	bd38      	pop	{r3, r4, r5, pc}
   b4194:	2003e688 	.word	0x2003e688
   b4198:	2003e6b0 	.word	0x2003e6b0
   b419c:	2003e69c 	.word	0x2003e69c

000b41a0 <_GLOBAL__sub_I_hueOn>:
   b41a0:	b510      	push	{r4, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b41a2:	4919      	ldr	r1, [pc, #100]	; (b4208 <_GLOBAL__sub_I_hueOn+0x68>)
   b41a4:	4819      	ldr	r0, [pc, #100]	; (b420c <_GLOBAL__sub_I_hueOn+0x6c>)
   b41a6:	f000 ffab 	bl	b5100 <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b41aa:	4a19      	ldr	r2, [pc, #100]	; (b4210 <_GLOBAL__sub_I_hueOn+0x70>)
   b41ac:	4b19      	ldr	r3, [pc, #100]	; (b4214 <_GLOBAL__sub_I_hueOn+0x74>)
   b41ae:	6812      	ldr	r2, [r2, #0]
   b41b0:	601a      	str	r2, [r3, #0]
   b41b2:	4a19      	ldr	r2, [pc, #100]	; (b4218 <_GLOBAL__sub_I_hueOn+0x78>)

TCPClient HueClient;
   b41b4:	4819      	ldr	r0, [pc, #100]	; (b421c <_GLOBAL__sub_I_hueOn+0x7c>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b41b6:	6812      	ldr	r2, [r2, #0]
   b41b8:	605a      	str	r2, [r3, #4]
   b41ba:	4a19      	ldr	r2, [pc, #100]	; (b4220 <_GLOBAL__sub_I_hueOn+0x80>)
   b41bc:	6812      	ldr	r2, [r2, #0]
   b41be:	609a      	str	r2, [r3, #8]
   b41c0:	4a18      	ldr	r2, [pc, #96]	; (b4224 <_GLOBAL__sub_I_hueOn+0x84>)
   b41c2:	6812      	ldr	r2, [r2, #0]
   b41c4:	60da      	str	r2, [r3, #12]
   b41c6:	4a18      	ldr	r2, [pc, #96]	; (b4228 <_GLOBAL__sub_I_hueOn+0x88>)
   b41c8:	6812      	ldr	r2, [r2, #0]
   b41ca:	611a      	str	r2, [r3, #16]
   b41cc:	4a17      	ldr	r2, [pc, #92]	; (b422c <_GLOBAL__sub_I_hueOn+0x8c>)
   b41ce:	6812      	ldr	r2, [r2, #0]
   b41d0:	615a      	str	r2, [r3, #20]
   b41d2:	4a17      	ldr	r2, [pc, #92]	; (b4230 <_GLOBAL__sub_I_hueOn+0x90>)
   b41d4:	6812      	ldr	r2, [r2, #0]
   b41d6:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b41d8:	f001 fa70 	bl	b56bc <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b41dc:	4815      	ldr	r0, [pc, #84]	; (b4234 <_GLOBAL__sub_I_hueOn+0x94>)
   b41de:	f001 fa6d 	bl	b56bc <_ZN9TCPClientC1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b41e2:	4b15      	ldr	r3, [pc, #84]	; (b4238 <_GLOBAL__sub_I_hueOn+0x98>)
   b41e4:	2200      	movs	r2, #0
   b41e6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b41ea:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b41ee:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b41f0:	2002      	movs	r0, #2
   b41f2:	f000 fc5b 	bl	b4aac <set_system_mode>
   b41f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B); // exact pixel used
   b41fa:	4810      	ldr	r0, [pc, #64]	; (b423c <_GLOBAL__sub_I_hueOn+0x9c>)
   b41fc:	2302      	movs	r3, #2
   b41fe:	2203      	movs	r2, #3
   b4200:	212e      	movs	r1, #46	; 0x2e
   b4202:	f000 b861 	b.w	b42c8 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4206:	bf00      	nop
   b4208:	000b601f 	.word	0x000b601f
   b420c:	2003e68c 	.word	0x2003e68c
   b4210:	2003e65c 	.word	0x2003e65c
   b4214:	2003e640 	.word	0x2003e640
   b4218:	2003e5ac 	.word	0x2003e5ac
   b421c:	2003e624 	.word	0x2003e624
   b4220:	2003e5b4 	.word	0x2003e5b4
   b4224:	2003e5a4 	.word	0x2003e5a4
   b4228:	2003e5a0 	.word	0x2003e5a0
   b422c:	2003e5a8 	.word	0x2003e5a8
   b4230:	2003e5b0 	.word	0x2003e5b0
   b4234:	2003e66c 	.word	0x2003e66c
   b4238:	2003e660 	.word	0x2003e660
   b423c:	2003e69c 	.word	0x2003e69c

000b4240 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4240:	b538      	push	{r3, r4, r5, lr}
   b4242:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4244:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4246:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4248:	b108      	cbz	r0, b424e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b424a:	f000 fcbb 	bl	b4bc4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b424e:	79a3      	ldrb	r3, [r4, #6]
   b4250:	2b06      	cmp	r3, #6
   b4252:	bf0c      	ite	eq
   b4254:	2004      	moveq	r0, #4
   b4256:	2003      	movne	r0, #3
   b4258:	fb10 f005 	smulbb	r0, r0, r5
   b425c:	b280      	uxth	r0, r0
   b425e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4260:	f000 fca8 	bl	b4bb4 <malloc>
   b4264:	60e0      	str	r0, [r4, #12]
   b4266:	b128      	cbz	r0, b4274 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4268:	88a2      	ldrh	r2, [r4, #4]
   b426a:	2100      	movs	r1, #0
   b426c:	f001 fe12 	bl	b5e94 <memset>
    numLEDs = n;
   b4270:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4272:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4274:	80a0      	strh	r0, [r4, #4]
   b4276:	8060      	strh	r0, [r4, #2]
}
   b4278:	e7fb      	b.n	b4272 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b427a <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b427a:	b510      	push	{r4, lr}
   b427c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b427e:	2101      	movs	r1, #1
   b4280:	79c0      	ldrb	r0, [r0, #7]
   b4282:	f001 fc23 	bl	b5acc <pinMode>
  digitalWrite(pin, LOW);
   b4286:	79e0      	ldrb	r0, [r4, #7]
   b4288:	2100      	movs	r1, #0
   b428a:	f001 fc30 	bl	b5aee <digitalWrite>
  begun = true;
   b428e:	2301      	movs	r3, #1
   b4290:	7023      	strb	r3, [r4, #0]
}
   b4292:	bd10      	pop	{r4, pc}

000b4294 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4296:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4298:	4605      	mov	r5, r0
   b429a:	460c      	mov	r4, r1
    if (begun) {
   b429c:	b11b      	cbz	r3, b42a6 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b429e:	79c0      	ldrb	r0, [r0, #7]
   b42a0:	2100      	movs	r1, #0
   b42a2:	f001 fc13 	bl	b5acc <pinMode>
    }
    pin = p;
    if (begun) {
   b42a6:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b42a8:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b42aa:	b15b      	cbz	r3, b42c4 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b42ac:	b2a0      	uxth	r0, r4
   b42ae:	2101      	movs	r1, #1
   b42b0:	9001      	str	r0, [sp, #4]
   b42b2:	f001 fc0b 	bl	b5acc <pinMode>
        digitalWrite(p, LOW);
   b42b6:	9801      	ldr	r0, [sp, #4]
   b42b8:	2100      	movs	r1, #0
    }
}
   b42ba:	b003      	add	sp, #12
   b42bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b42c0:	f001 bc15 	b.w	b5aee <digitalWrite>
}
   b42c4:	b003      	add	sp, #12
   b42c6:	bd30      	pop	{r4, r5, pc}

000b42c8 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b42c8:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b42ca:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b42cc:	4604      	mov	r4, r0
   b42ce:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b42d0:	7183      	strb	r3, [r0, #6]
   b42d2:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b42d6:	7005      	strb	r5, [r0, #0]
   b42d8:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b42da:	f7ff ffb1 	bl	b4240 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b42de:	4620      	mov	r0, r4
   b42e0:	4631      	mov	r1, r6
   b42e2:	f7ff ffd7 	bl	b4294 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b42e6:	4620      	mov	r0, r4
   b42e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b42ec <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b42ec:	68c3      	ldr	r3, [r0, #12]
   b42ee:	2b00      	cmp	r3, #0
   b42f0:	f000 81a4 	beq.w	b463c <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b42f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f8:	7983      	ldrb	r3, [r0, #6]
   b42fa:	3b02      	subs	r3, #2
   b42fc:	b2db      	uxtb	r3, r3
   b42fe:	2b04      	cmp	r3, #4
   b4300:	bf9c      	itt	ls
   b4302:	4abf      	ldrls	r2, [pc, #764]	; (b4600 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4304:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4308:	b085      	sub	sp, #20
   b430a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b430c:	bf88      	it	hi
   b430e:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4310:	f000 fa74 	bl	b47fc <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4314:	692b      	ldr	r3, [r5, #16]
   b4316:	1ac0      	subs	r0, r0, r3
   b4318:	42a0      	cmp	r0, r4
   b431a:	d3f9      	bcc.n	b4310 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b431c:	4cb9      	ldr	r4, [pc, #740]	; (b4604 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b431e:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4320:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4324:	b91b      	cbnz	r3, b432e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4326:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b432a:	2b00      	cmp	r3, #0
   b432c:	db7e      	blt.n	b442c <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b432e:	4cb6      	ldr	r4, [pc, #728]	; (b4608 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4330:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4334:	b923      	cbnz	r3, b4340 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4336:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b433a:	2b00      	cmp	r3, #0
   b433c:	f2c0 816e 	blt.w	b461c <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4340:	4cb2      	ldr	r4, [pc, #712]	; (b460c <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4342:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4346:	2b00      	cmp	r3, #0
   b4348:	f000 8144 	beq.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b434c:	79eb      	ldrb	r3, [r5, #7]
   b434e:	4ab0      	ldr	r2, [pc, #704]	; (b4610 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4350:	4cb0      	ldr	r4, [pc, #704]	; (b4614 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4352:	6812      	ldr	r2, [r2, #0]
   b4354:	0119      	lsls	r1, r3, #4
   b4356:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b435a:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b435c:	49ae      	ldr	r1, [pc, #696]	; (b4618 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b435e:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4360:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4364:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4368:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b436c:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b436e:	f003 031f 	and.w	r3, r3, #31
   b4372:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4376:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4378:	433a      	orrs	r2, r7
   b437a:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b437c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b437e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4382:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4386:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4388:	2900      	cmp	r1, #0
   b438a:	d044      	beq.n	b4416 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b438c:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4390:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4392:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4396:	f818 cb01 	ldrb.w	ip, [r8], #1
   b439a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b439c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b439e:	6863      	ldr	r3, [r4, #4]
   b43a0:	1a9b      	subs	r3, r3, r2
   b43a2:	2b46      	cmp	r3, #70	; 0x46
   b43a4:	d9fb      	bls.n	b439e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b43a6:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b43a8:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b43ac:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b43b0:	ea43 0307 	orr.w	r3, r3, r7
   b43b4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b43b8:	d02f      	beq.n	b441a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b43ba:	6863      	ldr	r3, [r4, #4]
   b43bc:	1a9b      	subs	r3, r3, r2
   b43be:	2b28      	cmp	r3, #40	; 0x28
   b43c0:	d9fb      	bls.n	b43ba <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b43c2:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b43c6:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b43c8:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b43cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b43d0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b43d4:	d1e3      	bne.n	b439e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b43d6:	88ab      	ldrh	r3, [r5, #4]
   b43d8:	f10e 0e01 	add.w	lr, lr, #1
   b43dc:	fa1f fe8e 	uxth.w	lr, lr
   b43e0:	4573      	cmp	r3, lr
   b43e2:	d8d8      	bhi.n	b4396 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b43e4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b43e8:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b43ec:	6863      	ldr	r3, [r4, #4]
   b43ee:	1a9b      	subs	r3, r3, r2
   b43f0:	2b46      	cmp	r3, #70	; 0x46
   b43f2:	d9fb      	bls.n	b43ec <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b43f4:	6863      	ldr	r3, [r4, #4]
   b43f6:	eba3 0909 	sub.w	r9, r3, r9
   b43fa:	4589      	cmp	r9, r1
   b43fc:	f0c0 80e4 	bcc.w	b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4400:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4404:	f000 f9f2 	bl	b47ec <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4408:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b440a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b440e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4412:	2900      	cmp	r1, #0
   b4414:	d1ba      	bne.n	b438c <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4416:	460a      	mov	r2, r1
   b4418:	e7e8      	b.n	b43ec <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b441a:	6863      	ldr	r3, [r4, #4]
   b441c:	1a9b      	subs	r3, r3, r2
   b441e:	2b11      	cmp	r3, #17
   b4420:	d8cf      	bhi.n	b43c2 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4422:	6863      	ldr	r3, [r4, #4]
   b4424:	1a9b      	subs	r3, r3, r2
   b4426:	2b11      	cmp	r3, #17
   b4428:	d9f7      	bls.n	b441a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b442a:	e7ca      	b.n	b43c2 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b442c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4430:	2b00      	cmp	r3, #0
   b4432:	f6bf af7c 	bge.w	b432e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4436:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b443a:	2b00      	cmp	r3, #0
   b443c:	f6bf af77 	bge.w	b432e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4440:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4444:	2b00      	cmp	r3, #0
   b4446:	f6bf af72 	bge.w	b432e <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b444a:	0136      	lsls	r6, r6, #4
   b444c:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b444e:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4450:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4452:	f000 fbaf 	bl	b4bb4 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4456:	2800      	cmp	r0, #0
   b4458:	f43f af78 	beq.w	b434c <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b445c:	88ab      	ldrh	r3, [r5, #4]
   b445e:	2b00      	cmp	r3, #0
   b4460:	f000 80ed 	beq.w	b463e <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4464:	68ea      	ldr	r2, [r5, #12]
   b4466:	3b01      	subs	r3, #1
   b4468:	fa12 f783 	uxtah	r7, r2, r3
   b446c:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4470:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4472:	f248 0206 	movw	r2, #32774	; 0x8006
   b4476:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b447a:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b447e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4482:	bf0c      	ite	eq
   b4484:	4693      	moveq	fp, r2
   b4486:	468b      	movne	fp, r1
   b4488:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b448c:	bf0c      	ite	eq
   b448e:	4616      	moveq	r6, r2
   b4490:	460e      	movne	r6, r1
   b4492:	f01c 0f20 	tst.w	ip, #32
   b4496:	bf0c      	ite	eq
   b4498:	4690      	moveq	r8, r2
   b449a:	4688      	movne	r8, r1
        pos++;
   b449c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44a0:	f8cd 8008 	str.w	r8, [sp, #8]
   b44a4:	9601      	str	r6, [sp, #4]
        pos++;
   b44a6:	f103 0802 	add.w	r8, r3, #2
   b44aa:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44ae:	9e01      	ldr	r6, [sp, #4]
   b44b0:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b44b4:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44b8:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b44bc:	9e02      	ldr	r6, [sp, #8]
   b44be:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b44c2:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44c6:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b44ca:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44ce:	bf0c      	ite	eq
   b44d0:	4693      	moveq	fp, r2
   b44d2:	468b      	movne	fp, r1
   b44d4:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b44d8:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44dc:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b44e0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44e4:	bf0c      	ite	eq
   b44e6:	4693      	moveq	fp, r2
   b44e8:	468b      	movne	fp, r1
   b44ea:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b44ee:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44f2:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b44f6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44fa:	bf0c      	ite	eq
   b44fc:	4693      	moveq	fp, r2
   b44fe:	468b      	movne	fp, r1
   b4500:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4504:	f103 0a08 	add.w	sl, r3, #8
   b4508:	f103 0806 	add.w	r8, r3, #6
   b450c:	3307      	adds	r3, #7
   b450e:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4510:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4514:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4518:	bf0c      	ite	eq
   b451a:	4693      	moveq	fp, r2
   b451c:	468b      	movne	fp, r1
        pos++;
   b451e:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4522:	f01c 0f01 	tst.w	ip, #1
   b4526:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b452a:	bf15      	itete	ne
   b452c:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4530:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4534:	fa1f f38a 	uxthne.w	r3, sl
   b4538:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b453c:	4577      	cmp	r7, lr
   b453e:	d19c      	bne.n	b447a <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4540:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4542:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4544:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4546:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4548:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b454a:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b454c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4550:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4552:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4554:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4556:	4b2e      	ldr	r3, [pc, #184]	; (b4610 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4558:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b455a:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b455c:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b455e:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4560:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4564:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4568:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b456c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4570:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4574:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4578:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b457c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4580:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4584:	79eb      	ldrb	r3, [r5, #7]
   b4586:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b458a:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b458c:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b458e:	5cfe      	ldrb	r6, [r7, r3]
   b4590:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4594:	f003 031f 	and.w	r3, r3, #31
   b4598:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b459c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b45a0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b45a4:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b45a8:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b45aa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b45ae:	2b00      	cmp	r3, #0
   b45b0:	d0fb      	beq.n	b45aa <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b45b2:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b45b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b45b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b45bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b45c0:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b45c4:	f000 fafe 	bl	b4bc4 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b45c8:	f000 f918 	bl	b47fc <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b45cc:	6128      	str	r0, [r5, #16]
}
   b45ce:	b005      	add	sp, #20
   b45d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45d4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b45d8:	2b00      	cmp	r3, #0
   b45da:	f6bf aeb7 	bge.w	b434c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45de:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45e2:	2b00      	cmp	r3, #0
   b45e4:	f6bf aeb2 	bge.w	b434c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45e8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ec:	2b00      	cmp	r3, #0
   b45ee:	f6bf aead 	bge.w	b434c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b45f2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45f6:	2b00      	cmp	r3, #0
   b45f8:	f6bf aea8 	bge.w	b434c <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b45fc:	e725      	b.n	b444a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b45fe:	bf00      	nop
   b4600:	000b60dc 	.word	0x000b60dc
   b4604:	4001c000 	.word	0x4001c000
   b4608:	40021000 	.word	0x40021000
   b460c:	40022000 	.word	0x40022000
   b4610:	2003e6b4 	.word	0x2003e6b4
   b4614:	e0001000 	.word	0xe0001000
   b4618:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b461c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4620:	2b00      	cmp	r3, #0
   b4622:	f6bf ae8d 	bge.w	b4340 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4626:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b462a:	2b00      	cmp	r3, #0
   b462c:	f6bf ae88 	bge.w	b4340 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4630:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4634:	2b00      	cmp	r3, #0
   b4636:	f6bf ae83 	bge.w	b4340 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b463a:	e706      	b.n	b444a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b463c:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b463e:	2304      	movs	r3, #4
   b4640:	2102      	movs	r1, #2
   b4642:	e783      	b.n	b454c <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4644 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4644:	8843      	ldrh	r3, [r0, #2]
   b4646:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4648:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b464a:	d92d      	bls.n	b46a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b464c:	7a06      	ldrb	r6, [r0, #8]
   b464e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4652:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4656:	b2d5      	uxtb	r5, r2
   b4658:	b13e      	cbz	r6, b466a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b465a:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b465c:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b465e:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4660:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4664:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4668:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b466a:	f890 c006 	ldrb.w	ip, [r0, #6]
   b466e:	68c7      	ldr	r7, [r0, #12]
   b4670:	f1bc 0f06 	cmp.w	ip, #6
   b4674:	bf0c      	ite	eq
   b4676:	2604      	moveq	r6, #4
   b4678:	2603      	movne	r6, #3
   b467a:	434e      	muls	r6, r1
   b467c:	f1ac 0c02 	sub.w	ip, ip, #2
   b4680:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4682:	f1bc 0f06 	cmp.w	ip, #6
   b4686:	d81d      	bhi.n	b46c4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4688:	e8df f00c 	tbb	[pc, ip]
   b468c:	04081c04 	.word	0x04081c04
   b4690:	040f      	.short	0x040f
   b4692:	04          	.byte	0x04
   b4693:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4694:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4696:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4698:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b469a:	e005      	b.n	b46a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b469c:	2bfe      	cmp	r3, #254	; 0xfe
   b469e:	bf28      	it	cs
   b46a0:	23fe      	movcs	r3, #254	; 0xfe
   b46a2:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b46a4:	704d      	strb	r5, [r1, #1]
          *p = g;
   b46a6:	708c      	strb	r4, [r1, #2]
}
   b46a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b46aa:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b46ac:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b46ae:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b46b0:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b46b2:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b46b4:	b913      	cbnz	r3, b46bc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b46b6:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b46b8:	70ca      	strb	r2, [r1, #3]
        } break;
   b46ba:	e7f5      	b.n	b46a8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b46bc:	435a      	muls	r2, r3
   b46be:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b46c2:	e7f9      	b.n	b46b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b46c4:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b46c6:	704c      	strb	r4, [r1, #1]
   b46c8:	e7e6      	b.n	b4698 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b46ca <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
   b46ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(n >= numLEDs) {
   b46cc:	8843      	ldrh	r3, [r0, #2]
   b46ce:	428b      	cmp	r3, r1
   b46d0:	d946      	bls.n	b4760 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x96>
    // Out of bounds, return no color.
    return 0;
  }

  uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b46d2:	7984      	ldrb	r4, [r0, #6]
   b46d4:	68c6      	ldr	r6, [r0, #12]
   b46d6:	2c06      	cmp	r4, #6
   b46d8:	bf0c      	ite	eq
   b46da:	2504      	moveq	r5, #4
   b46dc:	2503      	movne	r5, #3
   b46de:	434d      	muls	r5, r1
   b46e0:	1972      	adds	r2, r6, r5
  uint32_t c;

  switch(type) {
   b46e2:	1ea7      	subs	r7, r4, #2
    case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
    case WS2812B_FAST:
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
   b46e4:	7853      	ldrb	r3, [r2, #1]
   b46e6:	5d71      	ldrb	r1, [r6, r5]
   b46e8:	7892      	ldrb	r2, [r2, #2]
   b46ea:	2f06      	cmp	r7, #6
   b46ec:	d834      	bhi.n	b4758 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8e>
   b46ee:	e8df f007 	tbb	[pc, r7]
   b46f2:	3304      	.short	0x3304
   b46f4:	040d0409 	.word	0x040d0409
   b46f8:	04          	.byte	0x04
   b46f9:	00          	.byte	0x00
   b46fa:	0209      	lsls	r1, r1, #8
   b46fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
      } break;
    case WS2811: // WS2811 is RGB order
    case TM1803: // TM1803 is RGB order
    default: {   // default is RGB order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4700:	4313      	orrs	r3, r2
   b4702:	e005      	b.n	b4710 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x46>
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
   b4704:	0212      	lsls	r2, r2, #8
   b4706:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   b470a:	e7f9      	b.n	b4700 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
   b470c:	5973      	ldr	r3, [r6, r5]
   b470e:	ba1b      	rev	r3, r3
      } break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
   b4710:	7a02      	ldrb	r2, [r0, #8]
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4712:	9301      	str	r3, [sp, #4]
  if(brightness) { // See notes in setBrightness()
   b4714:	b1ea      	cbz	r2, b4752 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x88>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    if (type == SK6812RGBW) {
   b4716:	2c06      	cmp	r4, #6
      c_ptr[3] = (c_ptr[3] << 8)/brightness;
   b4718:	bf01      	itttt	eq
   b471a:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
   b471e:	021b      	lsleq	r3, r3, #8
   b4720:	fbb3 f3f2 	udiveq	r3, r3, r2
   b4724:	f88d 3007 	strbeq.w	r3, [sp, #7]
    }
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
   b4728:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b472c:	021b      	lsls	r3, r3, #8
   b472e:	fbb3 f3f2 	udiv	r3, r3, r2
   b4732:	f88d 3004 	strb.w	r3, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
   b4736:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b473a:	021b      	lsls	r3, r3, #8
   b473c:	fbb3 f3f2 	udiv	r3, r3, r2
   b4740:	f88d 3005 	strb.w	r3, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
   b4744:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4748:	021b      	lsls	r3, r3, #8
   b474a:	fbb3 f3f2 	udiv	r3, r3, r2
   b474e:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
   b4752:	9801      	ldr	r0, [sp, #4]
}
   b4754:	b003      	add	sp, #12
   b4756:	bdf0      	pop	{r4, r5, r6, r7, pc}
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4758:	021b      	lsls	r3, r3, #8
   b475a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   b475e:	e7cf      	b.n	b4700 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
    return 0;
   b4760:	2000      	movs	r0, #0
   b4762:	e7f7      	b.n	b4754 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8a>

000b4764 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4764:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4766:	1c4a      	adds	r2, r1, #1
   b4768:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b476a:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b476c:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b476e:	d01f      	beq.n	b47b0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4770:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4772:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4776:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4778:	d00c      	beq.n	b4794 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b477a:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b477c:	bf1f      	itttt	ne
   b477e:	0211      	lslne	r1, r2, #8
   b4780:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b4784:	fbb1 f3f3 	udivne	r3, r1, r3
   b4788:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b478a:	bf04      	itt	eq
   b478c:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4790:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4794:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4796:	8886      	ldrh	r6, [r0, #4]
   b4798:	1b29      	subs	r1, r5, r4
   b479a:	b289      	uxth	r1, r1
   b479c:	428e      	cmp	r6, r1
   b479e:	d906      	bls.n	b47ae <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b47a0:	7829      	ldrb	r1, [r5, #0]
   b47a2:	4359      	muls	r1, r3
   b47a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b47a8:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b47ac:	e7f3      	b.n	b4796 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b47ae:	7202      	strb	r2, [r0, #8]
  }
}
   b47b0:	bd70      	pop	{r4, r5, r6, pc}

000b47b2 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b47b2:	8882      	ldrh	r2, [r0, #4]
   b47b4:	68c0      	ldr	r0, [r0, #12]
   b47b6:	2100      	movs	r1, #0
   b47b8:	f001 bb6c 	b.w	b5e94 <memset>

000b47bc <_GLOBAL__sub_I_PIN_MAP2>:
}
   b47bc:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b47be:	f000 f82d 	bl	b481c <HAL_Pin_Map>
   b47c2:	4b01      	ldr	r3, [pc, #4]	; (b47c8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b47c4:	6018      	str	r0, [r3, #0]
}
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	2003e6b4 	.word	0x2003e6b4

000b47cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <os_mutex_recursive_create+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	00030248 	.word	0x00030248

000b47dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <HAL_RNG_GetRandomNumber+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	685b      	ldr	r3, [r3, #4]
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	00030218 	.word	0x00030218

000b47ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <HAL_Delay_Microseconds+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	68db      	ldr	r3, [r3, #12]
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	00030218 	.word	0x00030218

000b47fc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	691b      	ldr	r3, [r3, #16]
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	00030218 	.word	0x00030218

000b480c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	695b      	ldr	r3, [r3, #20]
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	00030218 	.word	0x00030218

000b481c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <HAL_Pin_Map+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	681b      	ldr	r3, [r3, #0]
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	0003022c 	.word	0x0003022c

000b482c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <HAL_Pin_Mode+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	689b      	ldr	r3, [r3, #8]
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	0003022c 	.word	0x0003022c

000b483c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <HAL_Get_Pin_Mode+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	68db      	ldr	r3, [r3, #12]
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	0003022c 	.word	0x0003022c

000b484c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <HAL_GPIO_Write+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	691b      	ldr	r3, [r3, #16]
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	0003022c 	.word	0x0003022c

000b485c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <HAL_GPIO_Read+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	695b      	ldr	r3, [r3, #20]
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	0003022c 	.word	0x0003022c

000b486c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <hal_i2c_write+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	6a1b      	ldr	r3, [r3, #32]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	00030228 	.word	0x00030228

000b487c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <hal_i2c_available+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	00030228 	.word	0x00030228

000b488c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <hal_i2c_read+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	00030228 	.word	0x00030228

000b489c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <hal_i2c_peek+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	00030228 	.word	0x00030228

000b48ac <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <hal_i2c_flush+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	00030228 	.word	0x00030228

000b48bc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <hal_i2c_is_enabled+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	00030228 	.word	0x00030228

000b48cc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <hal_i2c_init+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	00030228 	.word	0x00030228

000b48dc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <if_index_to_name+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	695b      	ldr	r3, [r3, #20]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	0003026c 	.word	0x0003026c

000b48ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <inet_inet_ntop+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	695b      	ldr	r3, [r3, #20]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	00030264 	.word	0x00030264

000b48fc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <inet_htonl+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	6a1b      	ldr	r3, [r3, #32]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	00030264 	.word	0x00030264

000b490c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <inet_htons+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	00030264 	.word	0x00030264

000b491c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <netdb_freeaddrinfo+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	689b      	ldr	r3, [r3, #8]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030268 	.word	0x00030268

000b492c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <netdb_getaddrinfo+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	68db      	ldr	r3, [r3, #12]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030268 	.word	0x00030268

000b493c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <sock_setsockopt+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	699b      	ldr	r3, [r3, #24]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030238 	.word	0x00030238

000b494c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <sock_close+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	69db      	ldr	r3, [r3, #28]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030238 	.word	0x00030238

000b495c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <sock_connect+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6a1b      	ldr	r3, [r3, #32]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030238 	.word	0x00030238

000b496c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <sock_recv+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030238 	.word	0x00030238

000b497c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <sock_send+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030238 	.word	0x00030238

000b498c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <sock_socket+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030238 	.word	0x00030238

000b499c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <hal_spi_init+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	69db      	ldr	r3, [r3, #28]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030230 	.word	0x00030230

000b49ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <hal_spi_is_enabled+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	6a1b      	ldr	r3, [r3, #32]
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030230 	.word	0x00030230

000b49bc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <hal_usart_write+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	68db      	ldr	r3, [r3, #12]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	0003023c 	.word	0x0003023c

000b49cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <hal_usart_available+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	691b      	ldr	r3, [r3, #16]
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	0003023c 	.word	0x0003023c

000b49dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <hal_usart_read+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	695b      	ldr	r3, [r3, #20]
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	0003023c 	.word	0x0003023c

000b49ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <hal_usart_peek+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	699b      	ldr	r3, [r3, #24]
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	0003023c 	.word	0x0003023c

000b49fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <hal_usart_flush+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	69db      	ldr	r3, [r3, #28]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	0003023c 	.word	0x0003023c

000b4a0c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <hal_usart_is_enabled+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	6a1b      	ldr	r3, [r3, #32]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	0003023c 	.word	0x0003023c

000b4a1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <hal_usart_available_data_for_write+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	0003023c 	.word	0x0003023c

000b4a2c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <hal_usart_init_ex+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003023c 	.word	0x0003023c

000b4a3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <HAL_USB_USART_Init+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	681b      	ldr	r3, [r3, #0]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	0003024c 	.word	0x0003024c

000b4a4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <HAL_USB_USART_Available_Data+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	691b      	ldr	r3, [r3, #16]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003024c 	.word	0x0003024c

000b4a5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	695b      	ldr	r3, [r3, #20]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003024c 	.word	0x0003024c

000b4a6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <HAL_USB_USART_Receive_Data+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	699b      	ldr	r3, [r3, #24]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003024c 	.word	0x0003024c

000b4a7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <HAL_USB_USART_Send_Data+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	69db      	ldr	r3, [r3, #28]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003024c 	.word	0x0003024c

000b4a8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <HAL_USB_USART_Flush_Data+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	6a1b      	ldr	r3, [r3, #32]
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003024c 	.word	0x0003024c

000b4a9c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <log_message+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	00030260 	.word	0x00030260

000b4aac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <set_system_mode+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	685b      	ldr	r3, [r3, #4]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	00030220 	.word	0x00030220

000b4abc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b03      	ldr	r3, [pc, #12]	; (b4acc <system_ctrl_set_app_request_handler+0x10>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ac6:	9301      	str	r3, [sp, #4]
   b4ac8:	bd08      	pop	{r3, pc}
   b4aca:	0000      	.short	0x0000
   b4acc:	00030220 	.word	0x00030220

000b4ad0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b03      	ldr	r3, [pc, #12]	; (b4ae0 <system_ctrl_set_result+0x10>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ada:	9301      	str	r3, [sp, #4]
   b4adc:	bd08      	pop	{r3, pc}
   b4ade:	0000      	.short	0x0000
   b4ae0:	00030220 	.word	0x00030220

000b4ae4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	00030244 	.word	0x00030244

000b4af4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <network_connect+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	685b      	ldr	r3, [r3, #4]
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	00030240 	.word	0x00030240

000b4b04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <network_connecting+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	689b      	ldr	r3, [r3, #8]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030240 	.word	0x00030240

000b4b14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <network_disconnect+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	68db      	ldr	r3, [r3, #12]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030240 	.word	0x00030240

000b4b24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <network_ready+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	691b      	ldr	r3, [r3, #16]
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	00030240 	.word	0x00030240

000b4b34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <network_on+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	695b      	ldr	r3, [r3, #20]
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	00030240 	.word	0x00030240

000b4b44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <network_off+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	699b      	ldr	r3, [r3, #24]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	00030240 	.word	0x00030240

000b4b54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <network_listen+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	69db      	ldr	r3, [r3, #28]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030240 	.word	0x00030240

000b4b64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <network_listening+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	6a1b      	ldr	r3, [r3, #32]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	00030240 	.word	0x00030240

000b4b74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <network_set_listen_timeout+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030240 	.word	0x00030240

000b4b84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <network_get_listen_timeout+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030240 	.word	0x00030240

000b4b94 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <network_is_on+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030240 	.word	0x00030240

000b4ba4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <network_is_off+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030240 	.word	0x00030240

000b4bb4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <malloc+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	681b      	ldr	r3, [r3, #0]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	0003021c 	.word	0x0003021c

000b4bc4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <free+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	685b      	ldr	r3, [r3, #4]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	0003021c 	.word	0x0003021c

000b4bd4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <realloc+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	689b      	ldr	r3, [r3, #8]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	0003021c 	.word	0x0003021c

000b4be4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <__errno+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	0003021c 	.word	0x0003021c

000b4bf4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <__assert_func+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	0003021c 	.word	0x0003021c

000b4c04 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <newlib_impure_ptr_callback+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	0003021c 	.word	0x0003021c

000b4c14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4c14:	4802      	ldr	r0, [pc, #8]	; (b4c20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4c16:	2300      	movs	r3, #0
   b4c18:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4c1a:	f7ff bdd7 	b.w	b47cc <os_mutex_recursive_create>
   b4c1e:	bf00      	nop
   b4c20:	2003e6b8 	.word	0x2003e6b8

000b4c24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c24:	2200      	movs	r2, #0
   b4c26:	6840      	ldr	r0, [r0, #4]
   b4c28:	4611      	mov	r1, r2
   b4c2a:	f7ff bf9b 	b.w	b4b64 <network_listening>

000b4c2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c2e:	2200      	movs	r2, #0
   b4c30:	6840      	ldr	r0, [r0, #4]
   b4c32:	4611      	mov	r1, r2
   b4c34:	f7ff bfa6 	b.w	b4b84 <network_get_listen_timeout>

000b4c38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c38:	6840      	ldr	r0, [r0, #4]
   b4c3a:	2200      	movs	r2, #0
   b4c3c:	f7ff bf9a 	b.w	b4b74 <network_set_listen_timeout>

000b4c40 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c40:	6840      	ldr	r0, [r0, #4]
   b4c42:	2200      	movs	r2, #0
   b4c44:	f081 0101 	eor.w	r1, r1, #1
   b4c48:	f7ff bf84 	b.w	b4b54 <network_listen>

000b4c4c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c4c:	2300      	movs	r3, #0
   b4c4e:	6840      	ldr	r0, [r0, #4]
   b4c50:	461a      	mov	r2, r3
   b4c52:	4619      	mov	r1, r3
   b4c54:	f7ff bf76 	b.w	b4b44 <network_off>

000b4c58 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c58:	2300      	movs	r3, #0
   b4c5a:	6840      	ldr	r0, [r0, #4]
   b4c5c:	461a      	mov	r2, r3
   b4c5e:	4619      	mov	r1, r3
   b4c60:	f7ff bf68 	b.w	b4b34 <network_on>

000b4c64 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4c64:	2200      	movs	r2, #0
   b4c66:	6840      	ldr	r0, [r0, #4]
   b4c68:	4611      	mov	r1, r2
   b4c6a:	f7ff bf5b 	b.w	b4b24 <network_ready>

000b4c6e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4c6e:	2200      	movs	r2, #0
   b4c70:	6840      	ldr	r0, [r0, #4]
   b4c72:	4611      	mov	r1, r2
   b4c74:	f7ff bf46 	b.w	b4b04 <network_connecting>

000b4c78 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4c78:	6840      	ldr	r0, [r0, #4]
   b4c7a:	2200      	movs	r2, #0
   b4c7c:	2102      	movs	r1, #2
   b4c7e:	f7ff bf49 	b.w	b4b14 <network_disconnect>

000b4c82 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4c82:	2300      	movs	r3, #0
   b4c84:	6840      	ldr	r0, [r0, #4]
   b4c86:	461a      	mov	r2, r3
   b4c88:	f7ff bf34 	b.w	b4af4 <network_connect>

000b4c8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4c8c:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4c8e:	2203      	movs	r2, #3
   b4c90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4c92:	4a02      	ldr	r2, [pc, #8]	; (b4c9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4c94:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4c96:	4770      	bx	lr
   b4c98:	2003e6bc 	.word	0x2003e6bc
   b4c9c:	000b6100 	.word	0x000b6100

000b4ca0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4ca0:	4770      	bx	lr

000b4ca2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ca4:	4606      	mov	r6, r0
   b4ca6:	4615      	mov	r5, r2
   b4ca8:	460c      	mov	r4, r1
   b4caa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4cac:	42bc      	cmp	r4, r7
   b4cae:	d006      	beq.n	b4cbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4cb0:	6833      	ldr	r3, [r6, #0]
   b4cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4cb6:	689b      	ldr	r3, [r3, #8]
   b4cb8:	4630      	mov	r0, r6
   b4cba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4cbc:	e7f6      	b.n	b4cac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4cbe:	4628      	mov	r0, r5
   b4cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4cc2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4cc2:	7c00      	ldrb	r0, [r0, #16]
   b4cc4:	2200      	movs	r2, #0
   b4cc6:	f7ff bdd1 	b.w	b486c <hal_i2c_write>

000b4cca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4cca:	7c00      	ldrb	r0, [r0, #16]
   b4ccc:	2100      	movs	r1, #0
   b4cce:	f7ff bdd5 	b.w	b487c <hal_i2c_available>

000b4cd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4cd2:	7c00      	ldrb	r0, [r0, #16]
   b4cd4:	2100      	movs	r1, #0
   b4cd6:	f7ff bdd9 	b.w	b488c <hal_i2c_read>

000b4cda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4cda:	7c00      	ldrb	r0, [r0, #16]
   b4cdc:	2100      	movs	r1, #0
   b4cde:	f7ff bddd 	b.w	b489c <hal_i2c_peek>

000b4ce2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4ce2:	7c00      	ldrb	r0, [r0, #16]
   b4ce4:	2100      	movs	r1, #0
   b4ce6:	f7ff bde1 	b.w	b48ac <hal_i2c_flush>

000b4cea <_ZN7TwoWireD0Ev>:
   b4cea:	b510      	push	{r4, lr}
   b4cec:	2114      	movs	r1, #20
   b4cee:	4604      	mov	r4, r0
   b4cf0:	f7ff f9d3 	bl	b409a <_ZdlPvj>
   b4cf4:	4620      	mov	r0, r4
   b4cf6:	bd10      	pop	{r4, pc}

000b4cf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4cf8:	b538      	push	{r3, r4, r5, lr}
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d02:	2200      	movs	r2, #0
   b4d04:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d08:	4b09      	ldr	r3, [pc, #36]	; (b4d30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4d0a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d0c:	4608      	mov	r0, r1
   b4d0e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4d10:	4629      	mov	r1, r5
   b4d12:	f7ff fddb 	bl	b48cc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d16:	30bf      	adds	r0, #191	; 0xbf
   b4d18:	d108      	bne.n	b4d2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4d1a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d1c:	07db      	lsls	r3, r3, #31
   b4d1e:	d505      	bpl.n	b4d2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4d20:	6868      	ldr	r0, [r5, #4]
   b4d22:	f7ff ff4f 	bl	b4bc4 <free>
    free(conf.tx_buffer);
   b4d26:	68e8      	ldr	r0, [r5, #12]
   b4d28:	f7ff ff4c 	bl	b4bc4 <free>
}
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	bd38      	pop	{r3, r4, r5, pc}
   b4d30:	000b613c 	.word	0x000b613c

000b4d34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4d34:	4770      	bx	lr

000b4d36 <_ZN9IPAddressD0Ev>:
   b4d36:	b510      	push	{r4, lr}
   b4d38:	2118      	movs	r1, #24
   b4d3a:	4604      	mov	r4, r0
   b4d3c:	f7ff f9ad 	bl	b409a <_ZdlPvj>
   b4d40:	4620      	mov	r0, r4
   b4d42:	bd10      	pop	{r4, pc}

000b4d44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4d44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4d46:	7d03      	ldrb	r3, [r0, #20]
   b4d48:	2b06      	cmp	r3, #6
{
   b4d4a:	b08d      	sub	sp, #52	; 0x34
   b4d4c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d4e:	f100 0704 	add.w	r7, r0, #4
   b4d52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4d56:	d012      	beq.n	b4d7e <_ZNK9IPAddress7printToER5Print+0x3a>
   b4d58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4d60:	220a      	movs	r2, #10
   b4d62:	4630      	mov	r0, r6
   b4d64:	f000 f959 	bl	b501a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4d68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4d6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4d6c:	d019      	beq.n	b4da2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4d6e:	2c00      	cmp	r4, #0
   b4d70:	d0f4      	beq.n	b4d5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4d72:	212e      	movs	r1, #46	; 0x2e
   b4d74:	4630      	mov	r0, r6
   b4d76:	f000 f94d 	bl	b5014 <_ZN5Print5printEc>
   b4d7a:	4404      	add	r4, r0
   b4d7c:	e7ee      	b.n	b4d5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d7e:	232f      	movs	r3, #47	; 0x2f
   b4d80:	466a      	mov	r2, sp
   b4d82:	4639      	mov	r1, r7
   b4d84:	200a      	movs	r0, #10
		buf[0] = 0;
   b4d86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d8a:	f7ff fdaf 	bl	b48ec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4d8e:	4668      	mov	r0, sp
   b4d90:	f001 f8c0 	bl	b5f14 <strlen>
   b4d94:	6833      	ldr	r3, [r6, #0]
   b4d96:	4602      	mov	r2, r0
   b4d98:	68db      	ldr	r3, [r3, #12]
   b4d9a:	4669      	mov	r1, sp
   b4d9c:	4630      	mov	r0, r6
   b4d9e:	4798      	blx	r3
   b4da0:	4604      	mov	r4, r0
    }
    return n;
}
   b4da2:	4620      	mov	r0, r4
   b4da4:	b00d      	add	sp, #52	; 0x34
   b4da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4da8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4da8:	b510      	push	{r4, lr}
   b4daa:	4b05      	ldr	r3, [pc, #20]	; (b4dc0 <_ZN9IPAddressC1Ev+0x18>)
   b4dac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4dae:	2211      	movs	r2, #17
   b4db0:	f840 3b04 	str.w	r3, [r0], #4
   b4db4:	2100      	movs	r1, #0
   b4db6:	f001 f86d 	bl	b5e94 <memset>
}
   b4dba:	4620      	mov	r0, r4
   b4dbc:	bd10      	pop	{r4, pc}
   b4dbe:	bf00      	nop
   b4dc0:	000b6164 	.word	0x000b6164

000b4dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4dc4:	4603      	mov	r3, r0
   b4dc6:	4a07      	ldr	r2, [pc, #28]	; (b4de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4dc8:	b510      	push	{r4, lr}
   b4dca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4dce:	f101 0210 	add.w	r2, r1, #16
   b4dd2:	f851 4b04 	ldr.w	r4, [r1], #4
   b4dd6:	f843 4b04 	str.w	r4, [r3], #4
   b4dda:	4291      	cmp	r1, r2
   b4ddc:	d1f9      	bne.n	b4dd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4dde:	780a      	ldrb	r2, [r1, #0]
   b4de0:	701a      	strb	r2, [r3, #0]
}
   b4de2:	bd10      	pop	{r4, pc}
   b4de4:	000b6164 	.word	0x000b6164

000b4de8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4de8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4dea:	2b04      	cmp	r3, #4
   b4dec:	d104      	bne.n	b4df8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4dee:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4df0:	3800      	subs	r0, #0
   b4df2:	bf18      	it	ne
   b4df4:	2001      	movne	r0, #1
   b4df6:	4770      	bx	lr
    } else if (version() == 6) {
   b4df8:	2b06      	cmp	r3, #6
   b4dfa:	d107      	bne.n	b4e0c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4dfc:	6843      	ldr	r3, [r0, #4]
   b4dfe:	b93b      	cbnz	r3, b4e10 <_ZNK9IPAddresscvbEv+0x28>
   b4e00:	6883      	ldr	r3, [r0, #8]
   b4e02:	b92b      	cbnz	r3, b4e10 <_ZNK9IPAddresscvbEv+0x28>
   b4e04:	68c3      	ldr	r3, [r0, #12]
   b4e06:	b91b      	cbnz	r3, b4e10 <_ZNK9IPAddresscvbEv+0x28>
   b4e08:	6900      	ldr	r0, [r0, #16]
   b4e0a:	e7f1      	b.n	b4df0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4e0c:	2000      	movs	r0, #0
   b4e0e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4e10:	2001      	movs	r0, #1
}
   b4e12:	4770      	bx	lr

000b4e14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4e14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4e16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4e1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4e1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4e22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4e26:	2304      	movs	r3, #4
   b4e28:	6041      	str	r1, [r0, #4]
   b4e2a:	7503      	strb	r3, [r0, #20]
}
   b4e2c:	bd10      	pop	{r4, pc}
	...

000b4e30 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4e30:	b507      	push	{r0, r1, r2, lr}
   b4e32:	4b06      	ldr	r3, [pc, #24]	; (b4e4c <_ZN9IPAddressC1EPKh+0x1c>)
   b4e34:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4e36:	78cb      	ldrb	r3, [r1, #3]
   b4e38:	9300      	str	r3, [sp, #0]
   b4e3a:	788b      	ldrb	r3, [r1, #2]
   b4e3c:	784a      	ldrb	r2, [r1, #1]
   b4e3e:	7809      	ldrb	r1, [r1, #0]
   b4e40:	f7ff ffe8 	bl	b4e14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4e44:	b003      	add	sp, #12
   b4e46:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e4a:	bf00      	nop
   b4e4c:	000b6164 	.word	0x000b6164

000b4e50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e50:	4b01      	ldr	r3, [pc, #4]	; (b4e58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e52:	4a02      	ldr	r2, [pc, #8]	; (b4e5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e56:	4770      	bx	lr
   b4e58:	2003e6c4 	.word	0x2003e6c4
   b4e5c:	000b6170 	.word	0x000b6170

000b4e60 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4e60:	2300      	movs	r3, #0
   b4e62:	6840      	ldr	r0, [r0, #4]
   b4e64:	461a      	mov	r2, r3
   b4e66:	f7ff be45 	b.w	b4af4 <network_connect>

000b4e6a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4e6a:	6840      	ldr	r0, [r0, #4]
   b4e6c:	2200      	movs	r2, #0
   b4e6e:	2102      	movs	r1, #2
   b4e70:	f7ff be50 	b.w	b4b14 <network_disconnect>

000b4e74 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4e74:	2200      	movs	r2, #0
   b4e76:	6840      	ldr	r0, [r0, #4]
   b4e78:	4611      	mov	r1, r2
   b4e7a:	f7ff be43 	b.w	b4b04 <network_connecting>

000b4e7e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4e7e:	2200      	movs	r2, #0
   b4e80:	6840      	ldr	r0, [r0, #4]
   b4e82:	4611      	mov	r1, r2
   b4e84:	f7ff be4e 	b.w	b4b24 <network_ready>

000b4e88 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4e88:	2300      	movs	r3, #0
   b4e8a:	6840      	ldr	r0, [r0, #4]
   b4e8c:	461a      	mov	r2, r3
   b4e8e:	4619      	mov	r1, r3
   b4e90:	f7ff be50 	b.w	b4b34 <network_on>

000b4e94 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4e94:	2300      	movs	r3, #0
   b4e96:	6840      	ldr	r0, [r0, #4]
   b4e98:	461a      	mov	r2, r3
   b4e9a:	4619      	mov	r1, r3
   b4e9c:	f7ff be52 	b.w	b4b44 <network_off>

000b4ea0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4ea0:	6840      	ldr	r0, [r0, #4]
   b4ea2:	2100      	movs	r1, #0
   b4ea4:	f7ff be76 	b.w	b4b94 <network_is_on>

000b4ea8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4ea8:	6840      	ldr	r0, [r0, #4]
   b4eaa:	2100      	movs	r1, #0
   b4eac:	f7ff be7a 	b.w	b4ba4 <network_is_off>

000b4eb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4eb0:	6840      	ldr	r0, [r0, #4]
   b4eb2:	2200      	movs	r2, #0
   b4eb4:	f081 0101 	eor.w	r1, r1, #1
   b4eb8:	f7ff be4c 	b.w	b4b54 <network_listen>

000b4ebc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4ebc:	6840      	ldr	r0, [r0, #4]
   b4ebe:	2200      	movs	r2, #0
   b4ec0:	f7ff be58 	b.w	b4b74 <network_set_listen_timeout>

000b4ec4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4ec4:	2200      	movs	r2, #0
   b4ec6:	6840      	ldr	r0, [r0, #4]
   b4ec8:	4611      	mov	r1, r2
   b4eca:	f7ff be5b 	b.w	b4b84 <network_get_listen_timeout>

000b4ece <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4ece:	2200      	movs	r2, #0
   b4ed0:	6840      	ldr	r0, [r0, #4]
   b4ed2:	4611      	mov	r1, r2
   b4ed4:	f7ff be46 	b.w	b4b64 <network_listening>

000b4ed8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4edc:	b095      	sub	sp, #84	; 0x54
   b4ede:	4614      	mov	r4, r2
   b4ee0:	460d      	mov	r5, r1
   b4ee2:	4607      	mov	r7, r0
    IPAddress addr;
   b4ee4:	f7ff ff60 	bl	b4da8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4ee8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4eea:	221c      	movs	r2, #28
   b4eec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4eee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4ef0:	f000 ffd0 	bl	b5e94 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4ef4:	2340      	movs	r3, #64	; 0x40
   b4ef6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4ef8:	4620      	mov	r0, r4
   b4efa:	466b      	mov	r3, sp
   b4efc:	aa0c      	add	r2, sp, #48	; 0x30
   b4efe:	2100      	movs	r1, #0
   b4f00:	f7ff fd14 	bl	b492c <netdb_getaddrinfo>
    if (!r) {
   b4f04:	4604      	mov	r4, r0
   b4f06:	2800      	cmp	r0, #0
   b4f08:	d14b      	bne.n	b4fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f0a:	4602      	mov	r2, r0
   b4f0c:	2101      	movs	r1, #1
   b4f0e:	6868      	ldr	r0, [r5, #4]
   b4f10:	f7ff fe08 	bl	b4b24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f18:	4622      	mov	r2, r4
   b4f1a:	6868      	ldr	r0, [r5, #4]
   b4f1c:	f7ff fe02 	bl	b4b24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f22:	4681      	mov	r9, r0
        bool ok = false;
   b4f24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f26:	2e00      	cmp	r6, #0
   b4f28:	d03b      	beq.n	b4fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4f2a:	2900      	cmp	r1, #0
   b4f2c:	d139      	bne.n	b4fa2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4f2e:	6873      	ldr	r3, [r6, #4]
   b4f30:	2b02      	cmp	r3, #2
   b4f32:	d003      	beq.n	b4f3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4f34:	2b0a      	cmp	r3, #10
   b4f36:	d011      	beq.n	b4f5c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f38:	69f6      	ldr	r6, [r6, #28]
   b4f3a:	e7f4      	b.n	b4f26 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4f3c:	f1b8 0f00 	cmp.w	r8, #0
   b4f40:	d0fa      	beq.n	b4f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4f42:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4f44:	a806      	add	r0, sp, #24
   b4f46:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4f48:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4f4a:	f7ff ff71 	bl	b4e30 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f50:	1d3c      	adds	r4, r7, #4
   b4f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f54:	682b      	ldr	r3, [r5, #0]
   b4f56:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f58:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4f5a:	e7ed      	b.n	b4f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4f5c:	f1b9 0f00 	cmp.w	r9, #0
   b4f60:	d0ea      	beq.n	b4f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4f62:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4f64:	2210      	movs	r2, #16
   b4f66:	a801      	add	r0, sp, #4
   b4f68:	f000 ff94 	bl	b5e94 <memset>
                    a.v = 6;
   b4f6c:	2306      	movs	r3, #6
   b4f6e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4f72:	ad01      	add	r5, sp, #4
   b4f74:	f104 0308 	add.w	r3, r4, #8
   b4f78:	3418      	adds	r4, #24
   b4f7a:	6818      	ldr	r0, [r3, #0]
   b4f7c:	6859      	ldr	r1, [r3, #4]
   b4f7e:	462a      	mov	r2, r5
   b4f80:	c203      	stmia	r2!, {r0, r1}
   b4f82:	3308      	adds	r3, #8
   b4f84:	42a3      	cmp	r3, r4
   b4f86:	4615      	mov	r5, r2
   b4f88:	d1f7      	bne.n	b4f7a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4f8a:	a901      	add	r1, sp, #4
   b4f8c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4f8e:	ad07      	add	r5, sp, #28
   b4f90:	f7ff ff18 	bl	b4dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f96:	1d3c      	adds	r4, r7, #4
   b4f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f9a:	682b      	ldr	r3, [r5, #0]
   b4f9c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f9e:	4649      	mov	r1, r9
   b4fa0:	e7ca      	b.n	b4f38 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4fa2:	9800      	ldr	r0, [sp, #0]
   b4fa4:	f7ff fcba 	bl	b491c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4fa8:	4638      	mov	r0, r7
   b4faa:	b015      	add	sp, #84	; 0x54
   b4fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4fb0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4fb0:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4fb2:	4a03      	ldr	r2, [pc, #12]	; (b4fc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4fb4:	601a      	str	r2, [r3, #0]
   b4fb6:	2200      	movs	r2, #0
   b4fb8:	605a      	str	r2, [r3, #4]

} // spark
   b4fba:	4770      	bx	lr
   b4fbc:	2003e6c8 	.word	0x2003e6c8
   b4fc0:	000b617c 	.word	0x000b617c

000b4fc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fc6:	4606      	mov	r6, r0
   b4fc8:	460d      	mov	r5, r1
  size_t n = 0;
   b4fca:	188f      	adds	r7, r1, r2
   b4fcc:	2400      	movs	r4, #0
  while (size--) {
   b4fce:	42bd      	cmp	r5, r7
   b4fd0:	d00c      	beq.n	b4fec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4fd2:	6833      	ldr	r3, [r6, #0]
   b4fd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4fd8:	689b      	ldr	r3, [r3, #8]
   b4fda:	4630      	mov	r0, r6
   b4fdc:	4798      	blx	r3
     if (chunk>=0)
   b4fde:	1e03      	subs	r3, r0, #0
   b4fe0:	db01      	blt.n	b4fe6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4fe2:	441c      	add	r4, r3
  while (size--) {
   b4fe4:	e7f3      	b.n	b4fce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4fe6:	2c00      	cmp	r4, #0
   b4fe8:	bf08      	it	eq
   b4fea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4fec:	4620      	mov	r0, r4
   b4fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ff0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4ff0:	b513      	push	{r0, r1, r4, lr}
   b4ff2:	4604      	mov	r4, r0
    }
   b4ff4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ff6:	b159      	cbz	r1, b5010 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ff8:	9101      	str	r1, [sp, #4]
   b4ffa:	f000 ff8b 	bl	b5f14 <strlen>
   b4ffe:	6823      	ldr	r3, [r4, #0]
   b5000:	9901      	ldr	r1, [sp, #4]
   b5002:	68db      	ldr	r3, [r3, #12]
   b5004:	4602      	mov	r2, r0
   b5006:	4620      	mov	r0, r4
    }
   b5008:	b002      	add	sp, #8
   b500a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b500e:	4718      	bx	r3
    }
   b5010:	b002      	add	sp, #8
   b5012:	bd10      	pop	{r4, pc}

000b5014 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5014:	6803      	ldr	r3, [r0, #0]
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	4718      	bx	r3

000b501a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b501a:	b530      	push	{r4, r5, lr}
   b501c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b501e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5020:	2a01      	cmp	r2, #1
  *str = '\0';
   b5022:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5026:	bf98      	it	ls
   b5028:	220a      	movls	r2, #10
   b502a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b502c:	460d      	mov	r5, r1
   b502e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5032:	fb01 5312 	mls	r3, r1, r2, r5
   b5036:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b503a:	2b09      	cmp	r3, #9
   b503c:	bf94      	ite	ls
   b503e:	3330      	addls	r3, #48	; 0x30
   b5040:	3337      	addhi	r3, #55	; 0x37
   b5042:	b2db      	uxtb	r3, r3
  } while(n);
   b5044:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5046:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b504a:	d9ef      	bls.n	b502c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b504c:	4621      	mov	r1, r4
   b504e:	f7ff ffcf 	bl	b4ff0 <_ZN5Print5writeEPKc>
}
   b5052:	b00b      	add	sp, #44	; 0x2c
   b5054:	bd30      	pop	{r4, r5, pc}
	...

000b5058 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5058:	4b01      	ldr	r3, [pc, #4]	; (b5060 <_GLOBAL__sub_I_RGB+0x8>)
   b505a:	2200      	movs	r2, #0
   b505c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b505e:	4770      	bx	lr
   b5060:	2003e6d0 	.word	0x2003e6d0

000b5064 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5064:	b510      	push	{r4, lr}
   b5066:	4604      	mov	r4, r0
   b5068:	4608      	mov	r0, r1
{
    _spi = spi;
   b506a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b506c:	f7ff fc96 	bl	b499c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5070:	2300      	movs	r3, #0
   b5072:	6063      	str	r3, [r4, #4]
}
   b5074:	4620      	mov	r0, r4
   b5076:	bd10      	pop	{r4, pc}

000b5078 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5078:	b510      	push	{r4, lr}
   b507a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b507c:	6800      	ldr	r0, [r0, #0]
   b507e:	b108      	cbz	r0, b5084 <_ZN6String10invalidateEv+0xc>
   b5080:	f7ff fda0 	bl	b4bc4 <free>
	buffer = NULL;
   b5084:	2300      	movs	r3, #0
	capacity = len = 0;
   b5086:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b508a:	6023      	str	r3, [r4, #0]
}
   b508c:	bd10      	pop	{r4, pc}

000b508e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b508e:	b538      	push	{r3, r4, r5, lr}
   b5090:	4604      	mov	r4, r0
   b5092:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5094:	6800      	ldr	r0, [r0, #0]
   b5096:	3101      	adds	r1, #1
   b5098:	f7ff fd9c 	bl	b4bd4 <realloc>
	if (newbuffer) {
   b509c:	b110      	cbz	r0, b50a4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b509e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b50a2:	2001      	movs	r0, #1
	}
	return 0;
}
   b50a4:	bd38      	pop	{r3, r4, r5, pc}

000b50a6 <_ZN6String7reserveEj>:
{
   b50a6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b50a8:	6803      	ldr	r3, [r0, #0]
{
   b50aa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b50ac:	b123      	cbz	r3, b50b8 <_ZN6String7reserveEj+0x12>
   b50ae:	6843      	ldr	r3, [r0, #4]
   b50b0:	428b      	cmp	r3, r1
   b50b2:	d301      	bcc.n	b50b8 <_ZN6String7reserveEj+0x12>
   b50b4:	2001      	movs	r0, #1
}
   b50b6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b50b8:	4620      	mov	r0, r4
   b50ba:	f7ff ffe8 	bl	b508e <_ZN6String12changeBufferEj>
   b50be:	2800      	cmp	r0, #0
   b50c0:	d0f9      	beq.n	b50b6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b50c2:	68a3      	ldr	r3, [r4, #8]
   b50c4:	2b00      	cmp	r3, #0
   b50c6:	d1f5      	bne.n	b50b4 <_ZN6String7reserveEj+0xe>
   b50c8:	6822      	ldr	r2, [r4, #0]
   b50ca:	7013      	strb	r3, [r2, #0]
   b50cc:	e7f2      	b.n	b50b4 <_ZN6String7reserveEj+0xe>

000b50ce <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b50ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50d0:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b50d2:	4611      	mov	r1, r2
   b50d4:	9201      	str	r2, [sp, #4]
{
   b50d6:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b50d8:	f7ff ffe5 	bl	b50a6 <_ZN6String7reserveEj>
   b50dc:	9a01      	ldr	r2, [sp, #4]
   b50de:	b928      	cbnz	r0, b50ec <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b50e0:	4620      	mov	r0, r4
   b50e2:	f7ff ffc9 	bl	b5078 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b50e6:	4620      	mov	r0, r4
   b50e8:	b003      	add	sp, #12
   b50ea:	bd30      	pop	{r4, r5, pc}
	len = length;
   b50ec:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b50ee:	4629      	mov	r1, r5
   b50f0:	6820      	ldr	r0, [r4, #0]
   b50f2:	f000 fec1 	bl	b5e78 <memcpy>
	buffer[len] = 0;
   b50f6:	6822      	ldr	r2, [r4, #0]
   b50f8:	68a3      	ldr	r3, [r4, #8]
   b50fa:	2100      	movs	r1, #0
   b50fc:	54d1      	strb	r1, [r2, r3]
	return *this;
   b50fe:	e7f2      	b.n	b50e6 <_ZN6String4copyEPKcj+0x18>

000b5100 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5100:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5102:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5104:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5108:	4604      	mov	r4, r0
	len = 0;
   b510a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b510c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b510e:	b141      	cbz	r1, b5122 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5110:	4608      	mov	r0, r1
   b5112:	9101      	str	r1, [sp, #4]
   b5114:	f000 fefe 	bl	b5f14 <strlen>
   b5118:	9901      	ldr	r1, [sp, #4]
   b511a:	4602      	mov	r2, r0
   b511c:	4620      	mov	r0, r4
   b511e:	f7ff ffd6 	bl	b50ce <_ZN6String4copyEPKcj>
}
   b5122:	4620      	mov	r0, r4
   b5124:	b002      	add	sp, #8
   b5126:	bd10      	pop	{r4, pc}

000b5128 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5128:	4b05      	ldr	r3, [pc, #20]	; (b5140 <_GLOBAL__sub_I_System+0x18>)
   b512a:	2202      	movs	r2, #2
   b512c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b512e:	4b05      	ldr	r3, [pc, #20]	; (b5144 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5130:	4a05      	ldr	r2, [pc, #20]	; (b5148 <_GLOBAL__sub_I_System+0x20>)
   b5132:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5134:	2000      	movs	r0, #0
   b5136:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b513a:	f7ff bcb7 	b.w	b4aac <set_system_mode>
   b513e:	bf00      	nop
   b5140:	2003e6ec 	.word	0x2003e6ec
   b5144:	2003e6e0 	.word	0x2003e6e0
   b5148:	ffff0000 	.word	0xffff0000

000b514c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b514c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b514e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5150:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5154:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5156:	2201      	movs	r2, #1
   b5158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b515c:	f10d 0107 	add.w	r1, sp, #7
   b5160:	47a0      	blx	r4
}
   b5162:	b002      	add	sp, #8
   b5164:	bd10      	pop	{r4, pc}

000b5166 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5166:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5168:	6803      	ldr	r3, [r0, #0]
   b516a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b516c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5170:	46a4      	mov	ip, r4
}
   b5172:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5176:	4760      	bx	ip

000b5178 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5178:	b513      	push	{r0, r1, r4, lr}
   b517a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b517c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b517e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5182:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5184:	f10d 0107 	add.w	r1, sp, #7
   b5188:	2201      	movs	r2, #1
   b518a:	47a0      	blx	r4
}
   b518c:	b002      	add	sp, #8
   b518e:	bd10      	pop	{r4, pc}

000b5190 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5190:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5192:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5194:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5198:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b519c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b519e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51a0:	d008      	beq.n	b51b4 <_ZN9TCPClient4readEv+0x24>
   b51a2:	6963      	ldr	r3, [r4, #20]
   b51a4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b51a8:	1c51      	adds	r1, r2, #1
   b51aa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b51ae:	4413      	add	r3, r2
   b51b0:	7918      	ldrb	r0, [r3, #4]
}
   b51b2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51b4:	6803      	ldr	r3, [r0, #0]
   b51b6:	691b      	ldr	r3, [r3, #16]
   b51b8:	4798      	blx	r3
   b51ba:	2800      	cmp	r0, #0
   b51bc:	d1f1      	bne.n	b51a2 <_ZN9TCPClient4readEv+0x12>
   b51be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b51c2:	e7f6      	b.n	b51b2 <_ZN9TCPClient4readEv+0x22>

000b51c4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b51c4:	4770      	bx	lr

000b51c6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b51c6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b51c8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b51ca:	43c0      	mvns	r0, r0
   b51cc:	0fc0      	lsrs	r0, r0, #31
   b51ce:	4770      	bx	lr

000b51d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b51d0:	4770      	bx	lr
	...

000b51d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b51d4:	4b06      	ldr	r3, [pc, #24]	; (b51f0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b51d6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b51d8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b51da:	f100 040c 	add.w	r4, r0, #12
	    ||
   b51de:	d005      	beq.n	b51ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b51e0:	4608      	mov	r0, r1
   b51e2:	f000 fd31 	bl	b5c48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b51e6:	2800      	cmp	r0, #0
   b51e8:	bf08      	it	eq
   b51ea:	2400      	moveq	r4, #0
      }
   b51ec:	4620      	mov	r0, r4
   b51ee:	bd10      	pop	{r4, pc}
   b51f0:	000b60f0 	.word	0x000b60f0

000b51f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b51f4:	b510      	push	{r4, lr}
   b51f6:	21ac      	movs	r1, #172	; 0xac
   b51f8:	4604      	mov	r4, r0
   b51fa:	f7fe ff4e 	bl	b409a <_ZdlPvj>
   b51fe:	4620      	mov	r0, r4
   b5200:	bd10      	pop	{r4, pc}

000b5202 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5202:	21ac      	movs	r1, #172	; 0xac
   b5204:	f7fe bf49 	b.w	b409a <_ZdlPvj>

000b5208 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b520c:	f04f 0800 	mov.w	r8, #0
   b5210:	b086      	sub	sp, #24
   b5212:	461c      	mov	r4, r3
   b5214:	f8c0 8004 	str.w	r8, [r0, #4]
   b5218:	4605      	mov	r5, r0
   b521a:	460e      	mov	r6, r1
   b521c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b521e:	4641      	mov	r1, r8
   b5220:	2210      	movs	r2, #16
   b5222:	a802      	add	r0, sp, #8
   b5224:	f000 fe36 	bl	b5e94 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5228:	1c63      	adds	r3, r4, #1
   b522a:	d009      	beq.n	b5240 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b522c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5230:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5234:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5238:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b523c:	435c      	muls	r4, r3
   b523e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5240:	6968      	ldr	r0, [r5, #20]
   b5242:	2310      	movs	r3, #16
   b5244:	9300      	str	r3, [sp, #0]
   b5246:	6800      	ldr	r0, [r0, #0]
   b5248:	ab02      	add	r3, sp, #8
   b524a:	f241 0205 	movw	r2, #4101	; 0x1005
   b524e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5252:	f7ff fb73 	bl	b493c <sock_setsockopt>
    if (ret < 0) {
   b5256:	2800      	cmp	r0, #0
   b5258:	da07      	bge.n	b526a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b525a:	f7ff fcc3 	bl	b4be4 <__errno>
   b525e:	6803      	ldr	r3, [r0, #0]
   b5260:	606b      	str	r3, [r5, #4]
        return 0;
   b5262:	2000      	movs	r0, #0
}
   b5264:	b006      	add	sp, #24
   b5266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b526a:	6968      	ldr	r0, [r5, #20]
   b526c:	2300      	movs	r3, #0
   b526e:	6800      	ldr	r0, [r0, #0]
   b5270:	463a      	mov	r2, r7
   b5272:	4631      	mov	r1, r6
   b5274:	f7ff fb82 	bl	b497c <sock_send>
    if (ret < 0) {
   b5278:	1e03      	subs	r3, r0, #0
   b527a:	dbee      	blt.n	b525a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b527c:	4618      	mov	r0, r3
   b527e:	e7f1      	b.n	b5264 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5280 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5280:	b530      	push	{r4, r5, lr}
   b5282:	b087      	sub	sp, #28
   b5284:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5286:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5288:	4668      	mov	r0, sp
   b528a:	f7ff fdd1 	bl	b4e30 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b528e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5290:	3404      	adds	r4, #4
   b5292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5294:	682b      	ldr	r3, [r5, #0]
   b5296:	7023      	strb	r3, [r4, #0]
    }
   b5298:	b007      	add	sp, #28
   b529a:	bd30      	pop	{r4, r5, pc}

000b529c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b529c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b529e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b52a0:	4b05      	ldr	r3, [pc, #20]	; (b52b8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b52a2:	4604      	mov	r4, r0
   b52a4:	358c      	adds	r5, #140	; 0x8c
   b52a6:	f844 3b04 	str.w	r3, [r4], #4
   b52aa:	4606      	mov	r6, r0
   b52ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52b0:	682b      	ldr	r3, [r5, #0]
   b52b2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b52b4:	4630      	mov	r0, r6
   b52b6:	bd70      	pop	{r4, r5, r6, pc}
   b52b8:	000b6164 	.word	0x000b6164

000b52bc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52c0:	4698      	mov	r8, r3
    stop();
   b52c2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52c4:	b093      	sub	sp, #76	; 0x4c
   b52c6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b52c8:	2400      	movs	r4, #0
    stop();
   b52ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52cc:	4606      	mov	r6, r0
   b52ce:	4617      	mov	r7, r2
    stop();
   b52d0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b52d2:	4628      	mov	r0, r5
   b52d4:	466b      	mov	r3, sp
   b52d6:	4622      	mov	r2, r4
   b52d8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b52da:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b52dc:	f7ff fb26 	bl	b492c <netdb_getaddrinfo>
   b52e0:	4605      	mov	r5, r0
   b52e2:	2800      	cmp	r0, #0
   b52e4:	d163      	bne.n	b53ae <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b52e6:	9b00      	ldr	r3, [sp, #0]
   b52e8:	2b00      	cmp	r3, #0
   b52ea:	d04b      	beq.n	b5384 <_ZN9TCPClient7connectEPKctm+0xc8>
   b52ec:	695b      	ldr	r3, [r3, #20]
   b52ee:	2b00      	cmp	r3, #0
   b52f0:	d048      	beq.n	b5384 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b52f2:	a806      	add	r0, sp, #24
   b52f4:	f7ff fd58 	bl	b4da8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b52f8:	9b00      	ldr	r3, [sp, #0]
   b52fa:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b52fc:	7863      	ldrb	r3, [r4, #1]
   b52fe:	2b02      	cmp	r3, #2
   b5300:	d104      	bne.n	b530c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5302:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5304:	a806      	add	r0, sp, #24
   b5306:	f7ff ffbb 	bl	b5280 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b530a:	e026      	b.n	b535a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b530c:	2b0a      	cmp	r3, #10
   b530e:	d124      	bne.n	b535a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5310:	2211      	movs	r2, #17
   b5312:	4629      	mov	r1, r5
   b5314:	a801      	add	r0, sp, #4
   b5316:	f000 fdbd 	bl	b5e94 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b531a:	68a3      	ldr	r3, [r4, #8]
   b531c:	2b00      	cmp	r3, #0
   b531e:	d038      	beq.n	b5392 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5320:	f104 0308 	add.w	r3, r4, #8
   b5324:	f10d 0c04 	add.w	ip, sp, #4
   b5328:	3418      	adds	r4, #24
   b532a:	6818      	ldr	r0, [r3, #0]
   b532c:	6859      	ldr	r1, [r3, #4]
   b532e:	4662      	mov	r2, ip
   b5330:	c203      	stmia	r2!, {r0, r1}
   b5332:	3308      	adds	r3, #8
   b5334:	42a3      	cmp	r3, r4
   b5336:	4694      	mov	ip, r2
   b5338:	d1f7      	bne.n	b532a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b533a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b533c:	a901      	add	r1, sp, #4
   b533e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5340:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5344:	f7ff fd3e 	bl	b4dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5348:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b534c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5350:	ac07      	add	r4, sp, #28
   b5352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5354:	f8dc 3000 	ldr.w	r3, [ip]
   b5358:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b535a:	a806      	add	r0, sp, #24
   b535c:	f7ff fd44 	bl	b4de8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5360:	b180      	cbz	r0, b5384 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5362:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5364:	ad07      	add	r5, sp, #28
   b5366:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b536a:	4b12      	ldr	r3, [pc, #72]	; (b53b4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b536c:	930c      	str	r3, [sp, #48]	; 0x30
   b536e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5370:	ac0d      	add	r4, sp, #52	; 0x34
   b5372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5374:	682b      	ldr	r3, [r5, #0]
   b5376:	7023      	strb	r3, [r4, #0]
   b5378:	463a      	mov	r2, r7
   b537a:	4643      	mov	r3, r8
   b537c:	a90c      	add	r1, sp, #48	; 0x30
   b537e:	4630      	mov	r0, r6
   b5380:	47c8      	blx	r9
   b5382:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5384:	9800      	ldr	r0, [sp, #0]
   b5386:	f7ff fac9 	bl	b491c <netdb_freeaddrinfo>
}
   b538a:	4628      	mov	r0, r5
   b538c:	b013      	add	sp, #76	; 0x4c
   b538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5392:	68e3      	ldr	r3, [r4, #12]
   b5394:	2b00      	cmp	r3, #0
   b5396:	d1c3      	bne.n	b5320 <_ZN9TCPClient7connectEPKctm+0x64>
   b5398:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b539c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b53a0:	f7ff faac 	bl	b48fc <inet_htonl>
   b53a4:	4581      	cmp	r9, r0
   b53a6:	d1bb      	bne.n	b5320 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b53a8:	f104 0114 	add.w	r1, r4, #20
   b53ac:	e7aa      	b.n	b5304 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b53ae:	4625      	mov	r5, r4
   b53b0:	e7e8      	b.n	b5384 <_ZN9TCPClient7connectEPKctm+0xc8>
   b53b2:	bf00      	nop
   b53b4:	000b6164 	.word	0x000b6164

000b53b8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b53b8:	b538      	push	{r3, r4, r5, lr}
   b53ba:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b53bc:	681a      	ldr	r2, [r3, #0]
   b53be:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b53c0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b53c2:	da10      	bge.n	b53e6 <_ZN9TCPClient9connectedEv+0x2e>
   b53c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b53c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b53cc:	429a      	cmp	r2, r3
   b53ce:	d10a      	bne.n	b53e6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b53d0:	6803      	ldr	r3, [r0, #0]
   b53d2:	691b      	ldr	r3, [r3, #16]
   b53d4:	4798      	blx	r3
        if (!rv) {
   b53d6:	4604      	mov	r4, r0
   b53d8:	b928      	cbnz	r0, b53e6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b53da:	682b      	ldr	r3, [r5, #0]
   b53dc:	4628      	mov	r0, r5
   b53de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53e0:	4798      	blx	r3
        rv = available();
   b53e2:	4620      	mov	r0, r4
}
   b53e4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b53e6:	2001      	movs	r0, #1
   b53e8:	e7fc      	b.n	b53e4 <_ZN9TCPClient9connectedEv+0x2c>

000b53ea <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b53ea:	b510      	push	{r4, lr}
   b53ec:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b53ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b53f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b53f6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b53f8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b53fa:	d005      	beq.n	b5408 <_ZN9TCPClient4peekEv+0x1e>
   b53fc:	6963      	ldr	r3, [r4, #20]
   b53fe:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5402:	4413      	add	r3, r2
   b5404:	7918      	ldrb	r0, [r3, #4]
}
   b5406:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5408:	6803      	ldr	r3, [r0, #0]
   b540a:	691b      	ldr	r3, [r3, #16]
   b540c:	4798      	blx	r3
   b540e:	2800      	cmp	r0, #0
   b5410:	d1f4      	bne.n	b53fc <_ZN9TCPClient4peekEv+0x12>
   b5412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5416:	e7f6      	b.n	b5406 <_ZN9TCPClient4peekEv+0x1c>

000b5418 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b541a:	6943      	ldr	r3, [r0, #20]
   b541c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b541e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5422:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5426:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5428:	4605      	mov	r5, r0
   b542a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b542c:	d016      	beq.n	b545c <_ZN9TCPClient4readEPhj+0x44>
   b542e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5430:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5434:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5438:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b543a:	42bc      	cmp	r4, r7
   b543c:	bf28      	it	cs
   b543e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5440:	3304      	adds	r3, #4
   b5442:	4622      	mov	r2, r4
   b5444:	4419      	add	r1, r3
   b5446:	4630      	mov	r0, r6
   b5448:	f000 fd16 	bl	b5e78 <memcpy>
   b544c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b544e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5452:	4423      	add	r3, r4
   b5454:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5458:	4620      	mov	r0, r4
   b545a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b545c:	6803      	ldr	r3, [r0, #0]
   b545e:	691b      	ldr	r3, [r3, #16]
   b5460:	4798      	blx	r3
   b5462:	2800      	cmp	r0, #0
   b5464:	d1e3      	bne.n	b542e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5466:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b546a:	e7f5      	b.n	b5458 <_ZN9TCPClient4readEPhj+0x40>

000b546c <_ZN9TCPClient12flush_bufferEv>:
   b546c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b546e:	2300      	movs	r3, #0
   b5470:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5474:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5476:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b547a:	4770      	bx	lr

000b547c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5480:	461f      	mov	r7, r3
    stop();
   b5482:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5484:	460c      	mov	r4, r1
    stop();
   b5486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5488:	b08a      	sub	sp, #40	; 0x28
   b548a:	4605      	mov	r5, r0
   b548c:	4616      	mov	r6, r2
    stop();
   b548e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5490:	7d23      	ldrb	r3, [r4, #20]
   b5492:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5496:	2b04      	cmp	r3, #4
   b5498:	bf0c      	ite	eq
   b549a:	2002      	moveq	r0, #2
   b549c:	200a      	movne	r0, #10
   b549e:	2206      	movs	r2, #6
   b54a0:	2101      	movs	r1, #1
   b54a2:	f7ff fa73 	bl	b498c <sock_socket>
   b54a6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b54aa:	696b      	ldr	r3, [r5, #20]
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	2b00      	cmp	r3, #0
   b54b0:	da08      	bge.n	b54c4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b54b2:	682b      	ldr	r3, [r5, #0]
   b54b4:	4628      	mov	r0, r5
   b54b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b54b8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b54ba:	4798      	blx	r3
}
   b54bc:	4620      	mov	r0, r4
   b54be:	b00a      	add	sp, #40	; 0x28
   b54c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b54c4:	4628      	mov	r0, r5
   b54c6:	f7ff ffd1 	bl	b546c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b54ca:	b1b7      	cbz	r7, b54fa <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b54cc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b54ce:	a903      	add	r1, sp, #12
   b54d0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b54d2:	9303      	str	r3, [sp, #12]
   b54d4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b54d8:	f7ff fa00 	bl	b48dc <if_index_to_name>
   b54dc:	2800      	cmp	r0, #0
   b54de:	d1e8      	bne.n	b54b2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b54e0:	6968      	ldr	r0, [r5, #20]
   b54e2:	2306      	movs	r3, #6
   b54e4:	9300      	str	r3, [sp, #0]
   b54e6:	6800      	ldr	r0, [r0, #0]
   b54e8:	ab03      	add	r3, sp, #12
   b54ea:	f241 020b 	movw	r2, #4107	; 0x100b
   b54ee:	f640 71ff 	movw	r1, #4095	; 0xfff
   b54f2:	f7ff fa23 	bl	b493c <sock_setsockopt>
   b54f6:	2800      	cmp	r0, #0
   b54f8:	d1db      	bne.n	b54b2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b54fa:	221c      	movs	r2, #28
   b54fc:	2100      	movs	r1, #0
   b54fe:	a803      	add	r0, sp, #12
   b5500:	f000 fcc8 	bl	b5e94 <memset>
    if (ip.version() == 4) {
   b5504:	7d23      	ldrb	r3, [r4, #20]
   b5506:	2b04      	cmp	r3, #4
   b5508:	d11d      	bne.n	b5546 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b550a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b550e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5510:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5514:	f7ff f9fa 	bl	b490c <inet_htons>
   b5518:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b551c:	6860      	ldr	r0, [r4, #4]
   b551e:	f7ff f9ed 	bl	b48fc <inet_htonl>
   b5522:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5524:	696b      	ldr	r3, [r5, #20]
   b5526:	221c      	movs	r2, #28
   b5528:	6818      	ldr	r0, [r3, #0]
   b552a:	a903      	add	r1, sp, #12
   b552c:	f7ff fa16 	bl	b495c <sock_connect>
   b5530:	2800      	cmp	r0, #0
   b5532:	d1be      	bne.n	b54b2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5534:	3404      	adds	r4, #4
   b5536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5538:	696d      	ldr	r5, [r5, #20]
   b553a:	358c      	adds	r5, #140	; 0x8c
   b553c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b553e:	6823      	ldr	r3, [r4, #0]
   b5540:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5542:	2401      	movs	r4, #1
   b5544:	e7ba      	b.n	b54bc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5546:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b554a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b554c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5550:	f7ff f9dc 	bl	b490c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5554:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5556:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b555a:	1d23      	adds	r3, r4, #4
   b555c:	f104 0714 	add.w	r7, r4, #20
   b5560:	6818      	ldr	r0, [r3, #0]
   b5562:	6859      	ldr	r1, [r3, #4]
   b5564:	4632      	mov	r2, r6
   b5566:	c203      	stmia	r2!, {r0, r1}
   b5568:	3308      	adds	r3, #8
   b556a:	42bb      	cmp	r3, r7
   b556c:	4616      	mov	r6, r2
   b556e:	d1f7      	bne.n	b5560 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5570:	e7d8      	b.n	b5524 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5574 <_ZN9TCPClient9availableEv>:
{
   b5574:	b530      	push	{r4, r5, lr}
   b5576:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5578:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b557c:	b08b      	sub	sp, #44	; 0x2c
   b557e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5580:	b12b      	cbz	r3, b558e <_ZN9TCPClient9availableEv+0x1a>
   b5582:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5586:	429a      	cmp	r2, r3
   b5588:	d101      	bne.n	b558e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b558a:	f7ff ff6f 	bl	b546c <_ZN9TCPClient12flush_bufferEv>
   b558e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5590:	6808      	ldr	r0, [r1, #0]
   b5592:	2800      	cmp	r0, #0
   b5594:	db18      	blt.n	b55c8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5596:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b559a:	2d7f      	cmp	r5, #127	; 0x7f
   b559c:	d814      	bhi.n	b55c8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b559e:	3104      	adds	r1, #4
   b55a0:	2308      	movs	r3, #8
   b55a2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b55a6:	4429      	add	r1, r5
   b55a8:	f7ff f9e0 	bl	b496c <sock_recv>
            if (ret > 0) {
   b55ac:	2800      	cmp	r0, #0
   b55ae:	dd13      	ble.n	b55d8 <_ZN9TCPClient9availableEv+0x64>
   b55b0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b55b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55b6:	b90a      	cbnz	r2, b55bc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b55b8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b55bc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b55be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55c2:	4410      	add	r0, r2
   b55c4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b55c8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b55ca:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b55ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b55d2:	1ac0      	subs	r0, r0, r3
   b55d4:	b00b      	add	sp, #44	; 0x2c
   b55d6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b55d8:	f7ff fb04 	bl	b4be4 <__errno>
   b55dc:	6803      	ldr	r3, [r0, #0]
   b55de:	2b0b      	cmp	r3, #11
   b55e0:	d0f2      	beq.n	b55c8 <_ZN9TCPClient9availableEv+0x54>
   b55e2:	f7ff faff 	bl	b4be4 <__errno>
   b55e6:	6803      	ldr	r3, [r0, #0]
   b55e8:	2b0b      	cmp	r3, #11
   b55ea:	d0ed      	beq.n	b55c8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b55ec:	2320      	movs	r3, #32
   b55ee:	2500      	movs	r5, #0
   b55f0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b55f4:	f7ff faf6 	bl	b4be4 <__errno>
   b55f8:	6803      	ldr	r3, [r0, #0]
   b55fa:	9301      	str	r3, [sp, #4]
   b55fc:	4b08      	ldr	r3, [pc, #32]	; (b5620 <_ZN9TCPClient9availableEv+0xac>)
   b55fe:	4909      	ldr	r1, [pc, #36]	; (b5624 <_ZN9TCPClient9availableEv+0xb0>)
   b5600:	9300      	str	r3, [sp, #0]
   b5602:	aa02      	add	r2, sp, #8
   b5604:	462b      	mov	r3, r5
   b5606:	2032      	movs	r0, #50	; 0x32
   b5608:	f7ff fa48 	bl	b4a9c <log_message>
                    sock_close(d_->sock);
   b560c:	6963      	ldr	r3, [r4, #20]
   b560e:	6818      	ldr	r0, [r3, #0]
   b5610:	f7ff f99c 	bl	b494c <sock_close>
   b5614:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b561a:	601a      	str	r2, [r3, #0]
   b561c:	e7d4      	b.n	b55c8 <_ZN9TCPClient9availableEv+0x54>
   b561e:	bf00      	nop
   b5620:	000b61b7 	.word	0x000b61b7
   b5624:	000b61b0 	.word	0x000b61b0

000b5628 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5628:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b562a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b562c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b562e:	6818      	ldr	r0, [r3, #0]
   b5630:	2800      	cmp	r0, #0
   b5632:	db01      	blt.n	b5638 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5634:	f7ff f98a 	bl	b494c <sock_close>
   b5638:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b563a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b563e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5640:	6960      	ldr	r0, [r4, #20]
   b5642:	2211      	movs	r2, #17
   b5644:	2100      	movs	r1, #0
   b5646:	308c      	adds	r0, #140	; 0x8c
   b5648:	f000 fc24 	bl	b5e94 <memset>
    flush_buffer();
   b564c:	4620      	mov	r0, r4
}
   b564e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5652:	f7ff bf0b 	b.w	b546c <_ZN9TCPClient12flush_bufferEv>

000b5656 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5656:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5658:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b565a:	4604      	mov	r4, r0
          total(0) {
   b565c:	6001      	str	r1, [r0, #0]
   b565e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5662:	3088      	adds	r0, #136	; 0x88
   b5664:	f7ff fba0 	bl	b4da8 <_ZN9IPAddressC1Ev>
}
   b5668:	4620      	mov	r0, r4
   b566a:	bd10      	pop	{r4, pc}

000b566c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b566c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b566e:	2300      	movs	r3, #0
   b5670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5674:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5678:	4a0e      	ldr	r2, [pc, #56]	; (b56b4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b567a:	6103      	str	r3, [r0, #16]
   b567c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b567e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5680:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5682:	20ac      	movs	r0, #172	; 0xac
   b5684:	9101      	str	r1, [sp, #4]
   b5686:	f7fe fd04 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b568a:	1e05      	subs	r5, r0, #0
   b568c:	f105 060c 	add.w	r6, r5, #12
   b5690:	d008      	beq.n	b56a4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5692:	2301      	movs	r3, #1
   b5694:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5698:	4b07      	ldr	r3, [pc, #28]	; (b56b8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b569a:	9901      	ldr	r1, [sp, #4]
   b569c:	602b      	str	r3, [r5, #0]
   b569e:	4630      	mov	r0, r6
   b56a0:	f7ff ffd9 	bl	b5656 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b56a4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b56a6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b56aa:	f7ff fedf 	bl	b546c <_ZN9TCPClient12flush_bufferEv>
}
   b56ae:	b002      	add	sp, #8
   b56b0:	bd70      	pop	{r4, r5, r6, pc}
   b56b2:	bf00      	nop
   b56b4:	000b61ec 	.word	0x000b61ec
   b56b8:	000b61d0 	.word	0x000b61d0

000b56bc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b56bc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b56be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b56c2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b56c4:	f7ff ffd2 	bl	b566c <_ZN9TCPClientC1Ei>
}
   b56c8:	4620      	mov	r0, r4
   b56ca:	bd10      	pop	{r4, pc}

000b56cc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b56cc:	b510      	push	{r4, lr}
   b56ce:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b56d0:	6800      	ldr	r0, [r0, #0]
   b56d2:	2800      	cmp	r0, #0
   b56d4:	db01      	blt.n	b56da <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b56d6:	f7ff f939 	bl	b494c <sock_close>
    }
}
   b56da:	4620      	mov	r0, r4
   b56dc:	bd10      	pop	{r4, pc}

000b56de <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b56de:	300c      	adds	r0, #12
   b56e0:	f7ff bff4 	b.w	b56cc <_ZN9TCPClient4DataD1Ev>

000b56e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b56e4:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b56e6:	681a      	ldr	r2, [r3, #0]
   b56e8:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b56ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b56ec:	4770      	bx	lr
   b56ee:	bf00      	nop
   b56f0:	2003e5b8 	.word	0x2003e5b8
   b56f4:	2003e6f0 	.word	0x2003e6f0

000b56f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b56f8:	4770      	bx	lr

000b56fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56fa:	7441      	strb	r1, [r0, #17]
}
   b56fc:	4770      	bx	lr

000b56fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b56fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5700:	7c00      	ldrb	r0, [r0, #16]
   b5702:	f7ff f98b 	bl	b4a1c <hal_usart_available_data_for_write>
}
   b5706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b570a:	bd08      	pop	{r3, pc}

000b570c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b570c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b570e:	7c00      	ldrb	r0, [r0, #16]
   b5710:	f7ff f95c 	bl	b49cc <hal_usart_available>
}
   b5714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5718:	bd08      	pop	{r3, pc}

000b571a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b571a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b571c:	7c00      	ldrb	r0, [r0, #16]
   b571e:	f7ff f965 	bl	b49ec <hal_usart_peek>
}
   b5722:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5726:	bd08      	pop	{r3, pc}

000b5728 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5728:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b572a:	7c00      	ldrb	r0, [r0, #16]
   b572c:	f7ff f956 	bl	b49dc <hal_usart_read>
}
   b5730:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5734:	bd08      	pop	{r3, pc}

000b5736 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5736:	7c00      	ldrb	r0, [r0, #16]
   b5738:	f7ff b960 	b.w	b49fc <hal_usart_flush>

000b573c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b573e:	7c45      	ldrb	r5, [r0, #17]
{
   b5740:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5742:	b12d      	cbz	r5, b5750 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5744:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5746:	b003      	add	sp, #12
   b5748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b574c:	f7ff b936 	b.w	b49bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5750:	7c00      	ldrb	r0, [r0, #16]
   b5752:	9101      	str	r1, [sp, #4]
   b5754:	f7ff f962 	bl	b4a1c <hal_usart_available_data_for_write>
   b5758:	2800      	cmp	r0, #0
   b575a:	9901      	ldr	r1, [sp, #4]
   b575c:	dcf2      	bgt.n	b5744 <_ZN11USARTSerial5writeEh+0x8>
}
   b575e:	4628      	mov	r0, r5
   b5760:	b003      	add	sp, #12
   b5762:	bd30      	pop	{r4, r5, pc}

000b5764 <_ZN11USARTSerialD0Ev>:
   b5764:	b510      	push	{r4, lr}
   b5766:	2114      	movs	r1, #20
   b5768:	4604      	mov	r4, r0
   b576a:	f7fe fc96 	bl	b409a <_ZdlPvj>
   b576e:	4620      	mov	r0, r4
   b5770:	bd10      	pop	{r4, pc}
	...

000b5774 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5774:	b510      	push	{r4, lr}
   b5776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b577a:	4604      	mov	r4, r0
   b577c:	4608      	mov	r0, r1
   b577e:	4611      	mov	r1, r2
   b5780:	2200      	movs	r2, #0
   b5782:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5786:	4b04      	ldr	r3, [pc, #16]	; (b5798 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5788:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b578a:	2301      	movs	r3, #1
  _serial = serial;
   b578c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b578e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5790:	f7ff f94c 	bl	b4a2c <hal_usart_init_ex>
}
   b5794:	4620      	mov	r0, r4
   b5796:	bd10      	pop	{r4, pc}
   b5798:	000b6254 	.word	0x000b6254

000b579c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b579c:	7441      	strb	r1, [r0, #17]
}
   b579e:	4770      	bx	lr

000b57a0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57a0:	4770      	bx	lr

000b57a2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b57a2:	4770      	bx	lr

000b57a4 <_ZN9USBSerial4readEv>:
{
   b57a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b57a6:	2100      	movs	r1, #0
   b57a8:	7c00      	ldrb	r0, [r0, #16]
   b57aa:	f7ff f95f 	bl	b4a6c <HAL_USB_USART_Receive_Data>
}
   b57ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57b2:	bd08      	pop	{r3, pc}

000b57b4 <_ZN9USBSerial4peekEv>:
{
   b57b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b57b6:	2101      	movs	r1, #1
   b57b8:	7c00      	ldrb	r0, [r0, #16]
   b57ba:	f7ff f957 	bl	b4a6c <HAL_USB_USART_Receive_Data>
}
   b57be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b57c2:	bd08      	pop	{r3, pc}

000b57c4 <_ZN9USBSerial17availableForWriteEv>:
{
   b57c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b57c6:	7c00      	ldrb	r0, [r0, #16]
   b57c8:	f7ff f948 	bl	b4a5c <HAL_USB_USART_Available_Data_For_Write>
}
   b57cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57d0:	bd08      	pop	{r3, pc}

000b57d2 <_ZN9USBSerial9availableEv>:
{
   b57d2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b57d4:	7c00      	ldrb	r0, [r0, #16]
   b57d6:	f7ff f939 	bl	b4a4c <HAL_USB_USART_Available_Data>
}
   b57da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b57de:	bd08      	pop	{r3, pc}

000b57e0 <_ZN9USBSerial5writeEh>:
{
   b57e0:	b513      	push	{r0, r1, r4, lr}
   b57e2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b57e4:	7c00      	ldrb	r0, [r0, #16]
{
   b57e6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b57e8:	f7ff f938 	bl	b4a5c <HAL_USB_USART_Available_Data_For_Write>
   b57ec:	2800      	cmp	r0, #0
   b57ee:	9901      	ldr	r1, [sp, #4]
   b57f0:	dc01      	bgt.n	b57f6 <_ZN9USBSerial5writeEh+0x16>
   b57f2:	7c60      	ldrb	r0, [r4, #17]
   b57f4:	b120      	cbz	r0, b5800 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b57f6:	7c20      	ldrb	r0, [r4, #16]
   b57f8:	f7ff f940 	bl	b4a7c <HAL_USB_USART_Send_Data>
   b57fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5800:	b002      	add	sp, #8
   b5802:	bd10      	pop	{r4, pc}

000b5804 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5804:	7c00      	ldrb	r0, [r0, #16]
   b5806:	f7ff b941 	b.w	b4a8c <HAL_USB_USART_Flush_Data>

000b580a <_ZN9USBSerialD0Ev>:
   b580a:	b510      	push	{r4, lr}
   b580c:	2114      	movs	r1, #20
   b580e:	4604      	mov	r4, r0
   b5810:	f7fe fc43 	bl	b409a <_ZdlPvj>
   b5814:	4620      	mov	r0, r4
   b5816:	bd10      	pop	{r4, pc}

000b5818 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5818:	b510      	push	{r4, lr}
   b581a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b581e:	4604      	mov	r4, r0
   b5820:	4608      	mov	r0, r1
   b5822:	2100      	movs	r1, #0
   b5824:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5828:	4b04      	ldr	r3, [pc, #16]	; (b583c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b582a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b582c:	2301      	movs	r3, #1
  _serial = serial;
   b582e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5830:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5832:	4611      	mov	r1, r2
   b5834:	f7ff f902 	bl	b4a3c <HAL_USB_USART_Init>
}
   b5838:	4620      	mov	r0, r4
   b583a:	bd10      	pop	{r4, pc}
   b583c:	000b6284 	.word	0x000b6284

000b5840 <_Z19acquireSerialBufferv>:
{
   b5840:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5842:	2214      	movs	r2, #20
{
   b5844:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5846:	2100      	movs	r1, #0
   b5848:	f000 fb24 	bl	b5e94 <memset>
}
   b584c:	4620      	mov	r0, r4
   b584e:	bd10      	pop	{r4, pc}

000b5850 <_Z16_fetch_usbserialv>:
{
   b5850:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5852:	4c0f      	ldr	r4, [pc, #60]	; (b5890 <_Z16_fetch_usbserialv+0x40>)
{
   b5854:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5856:	a803      	add	r0, sp, #12
   b5858:	f7ff fff2 	bl	b5840 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b585c:	7821      	ldrb	r1, [r4, #0]
   b585e:	f3bf 8f5b 	dmb	ish
   b5862:	f011 0101 	ands.w	r1, r1, #1
   b5866:	d10f      	bne.n	b5888 <_Z16_fetch_usbserialv+0x38>
   b5868:	4620      	mov	r0, r4
   b586a:	9101      	str	r1, [sp, #4]
   b586c:	f7fe fc17 	bl	b409e <__cxa_guard_acquire>
   b5870:	9901      	ldr	r1, [sp, #4]
   b5872:	b148      	cbz	r0, b5888 <_Z16_fetch_usbserialv+0x38>
   b5874:	aa03      	add	r2, sp, #12
   b5876:	4807      	ldr	r0, [pc, #28]	; (b5894 <_Z16_fetch_usbserialv+0x44>)
   b5878:	f7ff ffce 	bl	b5818 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b587c:	4620      	mov	r0, r4
   b587e:	f7fe fc13 	bl	b40a8 <__cxa_guard_release>
   b5882:	4805      	ldr	r0, [pc, #20]	; (b5898 <_Z16_fetch_usbserialv+0x48>)
   b5884:	f000 faf2 	bl	b5e6c <atexit>
	return _usbserial;
}
   b5888:	4802      	ldr	r0, [pc, #8]	; (b5894 <_Z16_fetch_usbserialv+0x44>)
   b588a:	b008      	add	sp, #32
   b588c:	bd10      	pop	{r4, pc}
   b588e:	bf00      	nop
   b5890:	2003e6f4 	.word	0x2003e6f4
   b5894:	2003e6f8 	.word	0x2003e6f8
   b5898:	000b57a1 	.word	0x000b57a1

000b589c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b589c:	2200      	movs	r2, #0
   b589e:	6840      	ldr	r0, [r0, #4]
   b58a0:	4611      	mov	r1, r2
   b58a2:	f7ff b93f 	b.w	b4b24 <network_ready>

000b58a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b58a6:	2200      	movs	r2, #0
   b58a8:	6840      	ldr	r0, [r0, #4]
   b58aa:	4611      	mov	r1, r2
   b58ac:	f7ff b95a 	b.w	b4b64 <network_listening>

000b58b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b58b0:	2200      	movs	r2, #0
   b58b2:	6840      	ldr	r0, [r0, #4]
   b58b4:	4611      	mov	r1, r2
   b58b6:	f7ff b965 	b.w	b4b84 <network_get_listen_timeout>

000b58ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b58ba:	6840      	ldr	r0, [r0, #4]
   b58bc:	2200      	movs	r2, #0
   b58be:	f7ff b959 	b.w	b4b74 <network_set_listen_timeout>

000b58c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b58c2:	6840      	ldr	r0, [r0, #4]
   b58c4:	2200      	movs	r2, #0
   b58c6:	f081 0101 	eor.w	r1, r1, #1
   b58ca:	f7ff b943 	b.w	b4b54 <network_listen>

000b58ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b58ce:	2300      	movs	r3, #0
   b58d0:	6840      	ldr	r0, [r0, #4]
   b58d2:	461a      	mov	r2, r3
   b58d4:	4619      	mov	r1, r3
   b58d6:	f7ff b935 	b.w	b4b44 <network_off>

000b58da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b58da:	2300      	movs	r3, #0
   b58dc:	6840      	ldr	r0, [r0, #4]
   b58de:	461a      	mov	r2, r3
   b58e0:	4619      	mov	r1, r3
   b58e2:	f7ff b927 	b.w	b4b34 <network_on>

000b58e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b58e6:	2200      	movs	r2, #0
   b58e8:	6840      	ldr	r0, [r0, #4]
   b58ea:	4611      	mov	r1, r2
   b58ec:	f7ff b90a 	b.w	b4b04 <network_connecting>

000b58f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b58f0:	6840      	ldr	r0, [r0, #4]
   b58f2:	2200      	movs	r2, #0
   b58f4:	2102      	movs	r1, #2
   b58f6:	f7ff b90d 	b.w	b4b14 <network_disconnect>

000b58fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b58fa:	2300      	movs	r3, #0
   b58fc:	6840      	ldr	r0, [r0, #4]
   b58fe:	461a      	mov	r2, r3
   b5900:	f7ff b8f8 	b.w	b4af4 <network_connect>

000b5904 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5904:	4b02      	ldr	r3, [pc, #8]	; (b5910 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5906:	2204      	movs	r2, #4
   b5908:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b590a:	4a02      	ldr	r2, [pc, #8]	; (b5914 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b590c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b590e:	4770      	bx	lr
   b5910:	2003e70c 	.word	0x2003e70c
   b5914:	000b62b4 	.word	0x000b62b4

000b5918 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5918:	4b01      	ldr	r3, [pc, #4]	; (b5920 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b591a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b591c:	4770      	bx	lr
   b591e:	bf00      	nop
   b5920:	2003e5bc 	.word	0x2003e5bc

000b5924 <serialEventRun>:
{
   b5924:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5926:	4b0b      	ldr	r3, [pc, #44]	; (b5954 <serialEventRun+0x30>)
   b5928:	b143      	cbz	r3, b593c <serialEventRun+0x18>
   b592a:	f7ff ff91 	bl	b5850 <_Z16_fetch_usbserialv>
   b592e:	6803      	ldr	r3, [r0, #0]
   b5930:	691b      	ldr	r3, [r3, #16]
   b5932:	4798      	blx	r3
   b5934:	2800      	cmp	r0, #0
   b5936:	dd01      	ble.n	b593c <serialEventRun+0x18>
        serialEvent();
   b5938:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b593c:	4b06      	ldr	r3, [pc, #24]	; (b5958 <serialEventRun+0x34>)
   b593e:	b143      	cbz	r3, b5952 <serialEventRun+0x2e>
   b5940:	f000 f95c 	bl	b5bfc <_Z22__fetch_global_Serial1v>
   b5944:	6803      	ldr	r3, [r0, #0]
   b5946:	691b      	ldr	r3, [r3, #16]
   b5948:	4798      	blx	r3
   b594a:	2800      	cmp	r0, #0
   b594c:	dd01      	ble.n	b5952 <serialEventRun+0x2e>
        serialEvent1();
   b594e:	f3af 8000 	nop.w
}
   b5952:	bd08      	pop	{r3, pc}
	...

000b595c <_post_loop>:
{
   b595c:	b508      	push	{r3, lr}
	serialEventRun();
   b595e:	f7ff ffe1 	bl	b5924 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5962:	f7fe ff53 	bl	b480c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5966:	4b01      	ldr	r3, [pc, #4]	; (b596c <_post_loop+0x10>)
   b5968:	6018      	str	r0, [r3, #0]
}
   b596a:	bd08      	pop	{r3, pc}
   b596c:	2003e728 	.word	0x2003e728

000b5970 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5970:	4805      	ldr	r0, [pc, #20]	; (b5988 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5972:	4a06      	ldr	r2, [pc, #24]	; (b598c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5974:	4906      	ldr	r1, [pc, #24]	; (b5990 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5976:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5978:	1a12      	subs	r2, r2, r0
   b597a:	f000 fa7d 	bl	b5e78 <memcpy>
    __backup_sram_signature = signature;
   b597e:	4b05      	ldr	r3, [pc, #20]	; (b5994 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5980:	4a05      	ldr	r2, [pc, #20]	; (b5998 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5982:	601a      	str	r2, [r3, #0]
}
   b5984:	bd08      	pop	{r3, pc}
   b5986:	bf00      	nop
   b5988:	2003f400 	.word	0x2003f400
   b598c:	2003f404 	.word	0x2003f404
   b5990:	000b64a4 	.word	0x000b64a4
   b5994:	2003f400 	.word	0x2003f400
   b5998:	9a271c1e 	.word	0x9a271c1e

000b599c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b599c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b599e:	2300      	movs	r3, #0
   b59a0:	9300      	str	r3, [sp, #0]
   b59a2:	461a      	mov	r2, r3
   b59a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b59a8:	f7ff f892 	bl	b4ad0 <system_ctrl_set_result>
}
   b59ac:	b003      	add	sp, #12
   b59ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b59b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b59b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b59b6:	8843      	ldrh	r3, [r0, #2]
   b59b8:	2b0a      	cmp	r3, #10
   b59ba:	d008      	beq.n	b59ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b59bc:	2b50      	cmp	r3, #80	; 0x50
   b59be:	d10b      	bne.n	b59d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b59c0:	4b09      	ldr	r3, [pc, #36]	; (b59e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b59c2:	681b      	ldr	r3, [r3, #0]
   b59c4:	b14b      	cbz	r3, b59da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b59c6:	b003      	add	sp, #12
   b59c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b59cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b59ce:	f7ff ffe5 	bl	b599c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b59d2:	b003      	add	sp, #12
   b59d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b59d8:	2300      	movs	r3, #0
   b59da:	9300      	str	r3, [sp, #0]
   b59dc:	461a      	mov	r2, r3
   b59de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b59e2:	f7ff f875 	bl	b4ad0 <system_ctrl_set_result>
}
   b59e6:	e7f4      	b.n	b59d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b59e8:	2003e718 	.word	0x2003e718

000b59ec <module_user_init_hook>:
{
   b59ec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b59ee:	4812      	ldr	r0, [pc, #72]	; (b5a38 <module_user_init_hook+0x4c>)
   b59f0:	2100      	movs	r1, #0
   b59f2:	f7ff f907 	bl	b4c04 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b59f6:	4b11      	ldr	r3, [pc, #68]	; (b5a3c <module_user_init_hook+0x50>)
   b59f8:	681a      	ldr	r2, [r3, #0]
   b59fa:	4b11      	ldr	r3, [pc, #68]	; (b5a40 <module_user_init_hook+0x54>)
   b59fc:	429a      	cmp	r2, r3
   b59fe:	4b11      	ldr	r3, [pc, #68]	; (b5a44 <module_user_init_hook+0x58>)
   b5a00:	bf0c      	ite	eq
   b5a02:	2201      	moveq	r2, #1
   b5a04:	2200      	movne	r2, #0
   b5a06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5a08:	d001      	beq.n	b5a0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5a0a:	f7ff ffb1 	bl	b5970 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5a0e:	f7fe fee5 	bl	b47dc <HAL_RNG_GetRandomNumber>
   b5a12:	4604      	mov	r4, r0
    srand(seed);
   b5a14:	f000 fa46 	bl	b5ea4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5a18:	4b0b      	ldr	r3, [pc, #44]	; (b5a48 <module_user_init_hook+0x5c>)
   b5a1a:	b113      	cbz	r3, b5a22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5a22:	2100      	movs	r1, #0
   b5a24:	4808      	ldr	r0, [pc, #32]	; (b5a48 <module_user_init_hook+0x5c>)
   b5a26:	f7ff f85d 	bl	b4ae4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5a2e:	4807      	ldr	r0, [pc, #28]	; (b5a4c <module_user_init_hook+0x60>)
   b5a30:	2100      	movs	r1, #0
   b5a32:	f7ff b843 	b.w	b4abc <system_ctrl_set_app_request_handler>
   b5a36:	bf00      	nop
   b5a38:	000b5919 	.word	0x000b5919
   b5a3c:	2003f400 	.word	0x2003f400
   b5a40:	9a271c1e 	.word	0x9a271c1e
   b5a44:	2003e714 	.word	0x2003e714
   b5a48:	00000000 	.word	0x00000000
   b5a4c:	000b59b5 	.word	0x000b59b5

000b5a50 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5a50:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5a52:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5a54:	d902      	bls.n	b5a5c <pinAvailable+0xc>
    return false;
   b5a56:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5a58:	b002      	add	sp, #8
   b5a5a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5a5c:	f1a0 030b 	sub.w	r3, r0, #11
   b5a60:	2b02      	cmp	r3, #2
   b5a62:	d81a      	bhi.n	b5a9a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5a64:	4c17      	ldr	r4, [pc, #92]	; (b5ac4 <pinAvailable+0x74>)
   b5a66:	7821      	ldrb	r1, [r4, #0]
   b5a68:	f3bf 8f5b 	dmb	ish
   b5a6c:	f011 0101 	ands.w	r1, r1, #1
   b5a70:	d10b      	bne.n	b5a8a <pinAvailable+0x3a>
   b5a72:	4620      	mov	r0, r4
   b5a74:	9101      	str	r1, [sp, #4]
   b5a76:	f7fe fb12 	bl	b409e <__cxa_guard_acquire>
   b5a7a:	9901      	ldr	r1, [sp, #4]
   b5a7c:	b128      	cbz	r0, b5a8a <pinAvailable+0x3a>
   b5a7e:	4812      	ldr	r0, [pc, #72]	; (b5ac8 <pinAvailable+0x78>)
   b5a80:	f7ff faf0 	bl	b5064 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7fe fb0f 	bl	b40a8 <__cxa_guard_release>
   b5a8a:	4b0f      	ldr	r3, [pc, #60]	; (b5ac8 <pinAvailable+0x78>)
   b5a8c:	7818      	ldrb	r0, [r3, #0]
   b5a8e:	f7fe ff8d 	bl	b49ac <hal_spi_is_enabled>
   b5a92:	2800      	cmp	r0, #0
   b5a94:	d1df      	bne.n	b5a56 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5a96:	2001      	movs	r0, #1
   b5a98:	e7de      	b.n	b5a58 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5a9a:	2801      	cmp	r0, #1
   b5a9c:	d809      	bhi.n	b5ab2 <pinAvailable+0x62>
   b5a9e:	f000 f86d 	bl	b5b7c <_Z19__fetch_global_Wirev>
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	7c00      	ldrb	r0, [r0, #16]
   b5aa6:	f7fe ff09 	bl	b48bc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5aaa:	f080 0001 	eor.w	r0, r0, #1
   b5aae:	b2c0      	uxtb	r0, r0
   b5ab0:	e7d2      	b.n	b5a58 <pinAvailable+0x8>
   b5ab2:	3809      	subs	r0, #9
   b5ab4:	2801      	cmp	r0, #1
   b5ab6:	d8ee      	bhi.n	b5a96 <pinAvailable+0x46>
   b5ab8:	f000 f8a0 	bl	b5bfc <_Z22__fetch_global_Serial1v>
   b5abc:	7c00      	ldrb	r0, [r0, #16]
   b5abe:	f7fe ffa5 	bl	b4a0c <hal_usart_is_enabled>
   b5ac2:	e7f2      	b.n	b5aaa <pinAvailable+0x5a>
   b5ac4:	2003e71c 	.word	0x2003e71c
   b5ac8:	2003e720 	.word	0x2003e720

000b5acc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5acc:	2823      	cmp	r0, #35	; 0x23
{
   b5ace:	b538      	push	{r3, r4, r5, lr}
   b5ad0:	4604      	mov	r4, r0
   b5ad2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ad4:	d80a      	bhi.n	b5aec <pinMode+0x20>
   b5ad6:	29ff      	cmp	r1, #255	; 0xff
   b5ad8:	d008      	beq.n	b5aec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5ada:	f7ff ffb9 	bl	b5a50 <pinAvailable>
   b5ade:	b128      	cbz	r0, b5aec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5ae0:	4629      	mov	r1, r5
   b5ae2:	4620      	mov	r0, r4
}
   b5ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5ae8:	f7fe bea0 	b.w	b482c <HAL_Pin_Mode>
}
   b5aec:	bd38      	pop	{r3, r4, r5, pc}

000b5aee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5aee:	b538      	push	{r3, r4, r5, lr}
   b5af0:	4604      	mov	r4, r0
   b5af2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5af4:	f7fe fea2 	bl	b483c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5af8:	28ff      	cmp	r0, #255	; 0xff
   b5afa:	d010      	beq.n	b5b1e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5afc:	2806      	cmp	r0, #6
   b5afe:	d804      	bhi.n	b5b0a <digitalWrite+0x1c>
   b5b00:	234d      	movs	r3, #77	; 0x4d
   b5b02:	fa23 f000 	lsr.w	r0, r3, r0
   b5b06:	07c3      	lsls	r3, r0, #31
   b5b08:	d409      	bmi.n	b5b1e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	f7ff ffa0 	bl	b5a50 <pinAvailable>
   b5b10:	b128      	cbz	r0, b5b1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5b12:	4629      	mov	r1, r5
   b5b14:	4620      	mov	r0, r4
}
   b5b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5b1a:	f7fe be97 	b.w	b484c <HAL_GPIO_Write>
}
   b5b1e:	bd38      	pop	{r3, r4, r5, pc}

000b5b20 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b5b20:	b510      	push	{r4, lr}
   b5b22:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5b24:	f7fe fe8a 	bl	b483c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5b28:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5b2a:	b2db      	uxtb	r3, r3
   b5b2c:	2b01      	cmp	r3, #1
   b5b2e:	d908      	bls.n	b5b42 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5b30:	4620      	mov	r0, r4
   b5b32:	f7ff ff8d 	bl	b5a50 <pinAvailable>
   b5b36:	b120      	cbz	r0, b5b42 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b5b38:	4620      	mov	r0, r4
}
   b5b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b5b3e:	f7fe be8d 	b.w	b485c <HAL_GPIO_Read>
}
   b5b42:	2000      	movs	r0, #0
   b5b44:	bd10      	pop	{r4, pc}

000b5b46 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b46:	4770      	bx	lr

000b5b48 <_Z17acquireWireBufferv>:
{
   b5b48:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5b4a:	4b0a      	ldr	r3, [pc, #40]	; (b5b74 <_Z17acquireWireBufferv+0x2c>)
   b5b4c:	6003      	str	r3, [r0, #0]
   b5b4e:	2301      	movs	r3, #1
{
   b5b50:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5b52:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b54:	4908      	ldr	r1, [pc, #32]	; (b5b78 <_Z17acquireWireBufferv+0x30>)
   b5b56:	2020      	movs	r0, #32
   b5b58:	f000 f874 	bl	b5c44 <_ZnajRKSt9nothrow_t>
	};
   b5b5c:	2520      	movs	r5, #32
   b5b5e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b60:	4905      	ldr	r1, [pc, #20]	; (b5b78 <_Z17acquireWireBufferv+0x30>)
	};
   b5b62:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5b64:	4628      	mov	r0, r5
   b5b66:	f000 f86d 	bl	b5c44 <_ZnajRKSt9nothrow_t>
	};
   b5b6a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5b6e:	4620      	mov	r0, r4
   b5b70:	bd38      	pop	{r3, r4, r5, pc}
   b5b72:	bf00      	nop
   b5b74:	00010018 	.word	0x00010018
   b5b78:	000b62e8 	.word	0x000b62e8

000b5b7c <_Z19__fetch_global_Wirev>:
{
   b5b7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b7e:	4d0e      	ldr	r5, [pc, #56]	; (b5bb8 <_Z19__fetch_global_Wirev+0x3c>)
   b5b80:	7829      	ldrb	r1, [r5, #0]
   b5b82:	f3bf 8f5b 	dmb	ish
   b5b86:	f011 0401 	ands.w	r4, r1, #1
{
   b5b8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b8c:	d111      	bne.n	b5bb2 <_Z19__fetch_global_Wirev+0x36>
   b5b8e:	4628      	mov	r0, r5
   b5b90:	f7fe fa85 	bl	b409e <__cxa_guard_acquire>
   b5b94:	b168      	cbz	r0, b5bb2 <_Z19__fetch_global_Wirev+0x36>
   b5b96:	4668      	mov	r0, sp
   b5b98:	f7ff ffd6 	bl	b5b48 <_Z17acquireWireBufferv>
   b5b9c:	466a      	mov	r2, sp
   b5b9e:	4621      	mov	r1, r4
   b5ba0:	4806      	ldr	r0, [pc, #24]	; (b5bbc <_Z19__fetch_global_Wirev+0x40>)
   b5ba2:	f7ff f8a9 	bl	b4cf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	f7fe fa7e 	bl	b40a8 <__cxa_guard_release>
   b5bac:	4804      	ldr	r0, [pc, #16]	; (b5bc0 <_Z19__fetch_global_Wirev+0x44>)
   b5bae:	f000 f95d 	bl	b5e6c <atexit>
	return wire;
}
   b5bb2:	4802      	ldr	r0, [pc, #8]	; (b5bbc <_Z19__fetch_global_Wirev+0x40>)
   b5bb4:	b007      	add	sp, #28
   b5bb6:	bd30      	pop	{r4, r5, pc}
   b5bb8:	2003e72c 	.word	0x2003e72c
   b5bbc:	2003e730 	.word	0x2003e730
   b5bc0:	000b5b47 	.word	0x000b5b47

000b5bc4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bc4:	4770      	bx	lr
	...

000b5bc8 <_Z20acquireSerial1Bufferv>:
{
   b5bc8:	b538      	push	{r3, r4, r5, lr}
   b5bca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5bcc:	2514      	movs	r5, #20
   b5bce:	462a      	mov	r2, r5
   b5bd0:	2100      	movs	r1, #0
   b5bd2:	f000 f95f 	bl	b5e94 <memset>
   b5bd6:	8025      	strh	r5, [r4, #0]
   b5bd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bda:	4907      	ldr	r1, [pc, #28]	; (b5bf8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5bdc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5be0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5be2:	f000 f82f 	bl	b5c44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5be6:	4904      	ldr	r1, [pc, #16]	; (b5bf8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5be8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5bea:	4628      	mov	r0, r5
   b5bec:	f000 f82a 	bl	b5c44 <_ZnajRKSt9nothrow_t>
    };
   b5bf0:	60e0      	str	r0, [r4, #12]
}
   b5bf2:	4620      	mov	r0, r4
   b5bf4:	bd38      	pop	{r3, r4, r5, pc}
   b5bf6:	bf00      	nop
   b5bf8:	000b62e8 	.word	0x000b62e8

000b5bfc <_Z22__fetch_global_Serial1v>:
{
   b5bfc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5bfe:	4d0e      	ldr	r5, [pc, #56]	; (b5c38 <_Z22__fetch_global_Serial1v+0x3c>)
   b5c00:	7829      	ldrb	r1, [r5, #0]
   b5c02:	f3bf 8f5b 	dmb	ish
   b5c06:	f011 0401 	ands.w	r4, r1, #1
{
   b5c0a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5c0c:	d111      	bne.n	b5c32 <_Z22__fetch_global_Serial1v+0x36>
   b5c0e:	4628      	mov	r0, r5
   b5c10:	f7fe fa45 	bl	b409e <__cxa_guard_acquire>
   b5c14:	b168      	cbz	r0, b5c32 <_Z22__fetch_global_Serial1v+0x36>
   b5c16:	a801      	add	r0, sp, #4
   b5c18:	f7ff ffd6 	bl	b5bc8 <_Z20acquireSerial1Bufferv>
   b5c1c:	aa01      	add	r2, sp, #4
   b5c1e:	4621      	mov	r1, r4
   b5c20:	4806      	ldr	r0, [pc, #24]	; (b5c3c <_Z22__fetch_global_Serial1v+0x40>)
   b5c22:	f7ff fda7 	bl	b5774 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5c26:	4628      	mov	r0, r5
   b5c28:	f7fe fa3e 	bl	b40a8 <__cxa_guard_release>
   b5c2c:	4804      	ldr	r0, [pc, #16]	; (b5c40 <_Z22__fetch_global_Serial1v+0x44>)
   b5c2e:	f000 f91d 	bl	b5e6c <atexit>
    return serial1;
}
   b5c32:	4802      	ldr	r0, [pc, #8]	; (b5c3c <_Z22__fetch_global_Serial1v+0x40>)
   b5c34:	b007      	add	sp, #28
   b5c36:	bd30      	pop	{r4, r5, pc}
   b5c38:	2003e744 	.word	0x2003e744
   b5c3c:	2003e748 	.word	0x2003e748
   b5c40:	000b5bc5 	.word	0x000b5bc5

000b5c44 <_ZnajRKSt9nothrow_t>:
   b5c44:	f7fe ba27 	b.w	b4096 <_Znaj>

000b5c48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5c48:	4901      	ldr	r1, [pc, #4]	; (b5c50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5c4a:	f000 b8f9 	b.w	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5c4e:	bf00      	nop
   b5c50:	000b6304 	.word	0x000b6304

000b5c54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5c56:	2400      	movs	r4, #0
   b5c58:	2310      	movs	r3, #16
   b5c5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5c5e:	6803      	ldr	r3, [r0, #0]
   b5c60:	4615      	mov	r5, r2
   b5c62:	699e      	ldr	r6, [r3, #24]
   b5c64:	6812      	ldr	r2, [r2, #0]
   b5c66:	466b      	mov	r3, sp
   b5c68:	e9cd 4400 	strd	r4, r4, [sp]
   b5c6c:	47b0      	blx	r6
   b5c6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5c72:	f003 0306 	and.w	r3, r3, #6
   b5c76:	2b06      	cmp	r3, #6
   b5c78:	bf03      	ittte	eq
   b5c7a:	9b00      	ldreq	r3, [sp, #0]
   b5c7c:	602b      	streq	r3, [r5, #0]
   b5c7e:	2001      	moveq	r0, #1
   b5c80:	4620      	movne	r0, r4
   b5c82:	b004      	add	sp, #16
   b5c84:	bd70      	pop	{r4, r5, r6, pc}

000b5c86 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5c86:	9800      	ldr	r0, [sp, #0]
   b5c88:	4290      	cmp	r0, r2
   b5c8a:	bf14      	ite	ne
   b5c8c:	2001      	movne	r0, #1
   b5c8e:	2006      	moveq	r0, #6
   b5c90:	4770      	bx	lr
	...

000b5c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5c94:	b510      	push	{r4, lr}
   b5c96:	4b03      	ldr	r3, [pc, #12]	; (b5ca4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5c98:	6003      	str	r3, [r0, #0]
   b5c9a:	4604      	mov	r4, r0
   b5c9c:	f000 f8cd 	bl	b5e3a <_ZNSt9type_infoD1Ev>
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	bd10      	pop	{r4, pc}
   b5ca4:	000b6344 	.word	0x000b6344

000b5ca8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5ca8:	b510      	push	{r4, lr}
   b5caa:	4604      	mov	r4, r0
   b5cac:	f7ff fff2 	bl	b5c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	2108      	movs	r1, #8
   b5cb4:	f7fe f9f1 	bl	b409a <_ZdlPvj>
   b5cb8:	4620      	mov	r0, r4
   b5cba:	bd10      	pop	{r4, pc}

000b5cbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5cc0:	461f      	mov	r7, r3
   b5cc2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5cc6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5cca:	4598      	cmp	r8, r3
   b5ccc:	4606      	mov	r6, r0
   b5cce:	4615      	mov	r5, r2
   b5cd0:	d107      	bne.n	b5ce2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5cd2:	9907      	ldr	r1, [sp, #28]
   b5cd4:	f000 f8b4 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5cd8:	b118      	cbz	r0, b5ce2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5cda:	7165      	strb	r5, [r4, #5]
   b5cdc:	2000      	movs	r0, #0
   b5cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5ce2:	4639      	mov	r1, r7
   b5ce4:	4630      	mov	r0, r6
   b5ce6:	f000 f8ab 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5cea:	2800      	cmp	r0, #0
   b5cec:	d0f6      	beq.n	b5cdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5cee:	2301      	movs	r3, #1
   b5cf0:	f8c4 8000 	str.w	r8, [r4]
   b5cf4:	7125      	strb	r5, [r4, #4]
   b5cf6:	71a3      	strb	r3, [r4, #6]
   b5cf8:	e7f0      	b.n	b5cdc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5cfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5cfa:	b538      	push	{r3, r4, r5, lr}
   b5cfc:	4615      	mov	r5, r2
   b5cfe:	461c      	mov	r4, r3
   b5d00:	f000 f89e 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5d04:	b120      	cbz	r0, b5d10 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5d06:	2308      	movs	r3, #8
   b5d08:	60e3      	str	r3, [r4, #12]
   b5d0a:	2306      	movs	r3, #6
   b5d0c:	6025      	str	r5, [r4, #0]
   b5d0e:	7123      	strb	r3, [r4, #4]
   b5d10:	bd38      	pop	{r3, r4, r5, pc}

000b5d12 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d14:	4605      	mov	r5, r0
   b5d16:	460c      	mov	r4, r1
   b5d18:	9201      	str	r2, [sp, #4]
   b5d1a:	461e      	mov	r6, r3
   b5d1c:	f000 f890 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5d20:	b950      	cbnz	r0, b5d38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5d22:	2e03      	cmp	r6, #3
   b5d24:	d808      	bhi.n	b5d38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5d26:	6823      	ldr	r3, [r4, #0]
   b5d28:	9a01      	ldr	r2, [sp, #4]
   b5d2a:	695b      	ldr	r3, [r3, #20]
   b5d2c:	4629      	mov	r1, r5
   b5d2e:	4620      	mov	r0, r4
   b5d30:	b002      	add	sp, #8
   b5d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5d36:	4718      	bx	r3
   b5d38:	b002      	add	sp, #8
   b5d3a:	bd70      	pop	{r4, r5, r6, pc}

000b5d3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5d3c:	b510      	push	{r4, lr}
   b5d3e:	4b03      	ldr	r3, [pc, #12]	; (b5d4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5d40:	6003      	str	r3, [r0, #0]
   b5d42:	4604      	mov	r4, r0
   b5d44:	f7ff ffa6 	bl	b5c94 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5d48:	4620      	mov	r0, r4
   b5d4a:	bd10      	pop	{r4, pc}
   b5d4c:	000b63a4 	.word	0x000b63a4

000b5d50 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5d50:	b510      	push	{r4, lr}
   b5d52:	4604      	mov	r4, r0
   b5d54:	f7ff fff2 	bl	b5d3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5d58:	4620      	mov	r0, r4
   b5d5a:	210c      	movs	r1, #12
   b5d5c:	f7fe f99d 	bl	b409a <_ZdlPvj>
   b5d60:	4620      	mov	r0, r4
   b5d62:	bd10      	pop	{r4, pc}

000b5d64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5d66:	9f08      	ldr	r7, [sp, #32]
   b5d68:	4297      	cmp	r7, r2
   b5d6a:	4605      	mov	r5, r0
   b5d6c:	460e      	mov	r6, r1
   b5d6e:	4614      	mov	r4, r2
   b5d70:	d00a      	beq.n	b5d88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5d72:	68a8      	ldr	r0, [r5, #8]
   b5d74:	6802      	ldr	r2, [r0, #0]
   b5d76:	9708      	str	r7, [sp, #32]
   b5d78:	6a15      	ldr	r5, [r2, #32]
   b5d7a:	4631      	mov	r1, r6
   b5d7c:	4622      	mov	r2, r4
   b5d7e:	46ac      	mov	ip, r5
   b5d80:	b003      	add	sp, #12
   b5d82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5d86:	4760      	bx	ip
   b5d88:	4619      	mov	r1, r3
   b5d8a:	9301      	str	r3, [sp, #4]
   b5d8c:	f000 f858 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5d90:	9b01      	ldr	r3, [sp, #4]
   b5d92:	2800      	cmp	r0, #0
   b5d94:	d0ed      	beq.n	b5d72 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5d96:	2006      	movs	r0, #6
   b5d98:	b003      	add	sp, #12
   b5d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5d9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5d9c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5da0:	460d      	mov	r5, r1
   b5da2:	4619      	mov	r1, r3
   b5da4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5da8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5dac:	4681      	mov	r9, r0
   b5dae:	4617      	mov	r7, r2
   b5db0:	4698      	mov	r8, r3
   b5db2:	f000 f845 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5db6:	b190      	cbz	r0, b5dde <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5db8:	2d00      	cmp	r5, #0
   b5dba:	6034      	str	r4, [r6, #0]
   b5dbc:	7137      	strb	r7, [r6, #4]
   b5dbe:	db09      	blt.n	b5dd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5dc0:	1961      	adds	r1, r4, r5
   b5dc2:	458a      	cmp	sl, r1
   b5dc4:	bf0c      	ite	eq
   b5dc6:	2106      	moveq	r1, #6
   b5dc8:	2101      	movne	r1, #1
   b5dca:	71b1      	strb	r1, [r6, #6]
   b5dcc:	2000      	movs	r0, #0
   b5dce:	b001      	add	sp, #4
   b5dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5dd4:	3502      	adds	r5, #2
   b5dd6:	d1f9      	bne.n	b5dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5dd8:	2301      	movs	r3, #1
   b5dda:	71b3      	strb	r3, [r6, #6]
   b5ddc:	e7f6      	b.n	b5dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5dde:	4554      	cmp	r4, sl
   b5de0:	d106      	bne.n	b5df0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5de2:	4659      	mov	r1, fp
   b5de4:	4648      	mov	r0, r9
   b5de6:	f000 f82b 	bl	b5e40 <_ZNKSt9type_infoeqERKS_>
   b5dea:	b108      	cbz	r0, b5df0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5dec:	7177      	strb	r7, [r6, #5]
   b5dee:	e7ed      	b.n	b5dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5df0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5df4:	6803      	ldr	r3, [r0, #0]
   b5df6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5dfa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5dfe:	69dc      	ldr	r4, [r3, #28]
   b5e00:	463a      	mov	r2, r7
   b5e02:	4643      	mov	r3, r8
   b5e04:	4629      	mov	r1, r5
   b5e06:	46a4      	mov	ip, r4
   b5e08:	b001      	add	sp, #4
   b5e0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e0e:	4760      	bx	ip

000b5e10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e14:	4607      	mov	r7, r0
   b5e16:	460c      	mov	r4, r1
   b5e18:	4615      	mov	r5, r2
   b5e1a:	461e      	mov	r6, r3
   b5e1c:	f7ff ff6d 	bl	b5cfa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5e20:	b948      	cbnz	r0, b5e36 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5e22:	68b8      	ldr	r0, [r7, #8]
   b5e24:	6803      	ldr	r3, [r0, #0]
   b5e26:	699f      	ldr	r7, [r3, #24]
   b5e28:	462a      	mov	r2, r5
   b5e2a:	4633      	mov	r3, r6
   b5e2c:	4621      	mov	r1, r4
   b5e2e:	46bc      	mov	ip, r7
   b5e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5e34:	4760      	bx	ip
   b5e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e3a <_ZNSt9type_infoD1Ev>:
   b5e3a:	4770      	bx	lr

000b5e3c <_ZNKSt9type_info14__is_pointer_pEv>:
   b5e3c:	2000      	movs	r0, #0
   b5e3e:	4770      	bx	lr

000b5e40 <_ZNKSt9type_infoeqERKS_>:
   b5e40:	4281      	cmp	r1, r0
   b5e42:	b508      	push	{r3, lr}
   b5e44:	d00e      	beq.n	b5e64 <_ZNKSt9type_infoeqERKS_+0x24>
   b5e46:	6840      	ldr	r0, [r0, #4]
   b5e48:	7803      	ldrb	r3, [r0, #0]
   b5e4a:	2b2a      	cmp	r3, #42	; 0x2a
   b5e4c:	d00c      	beq.n	b5e68 <_ZNKSt9type_infoeqERKS_+0x28>
   b5e4e:	6849      	ldr	r1, [r1, #4]
   b5e50:	780b      	ldrb	r3, [r1, #0]
   b5e52:	2b2a      	cmp	r3, #42	; 0x2a
   b5e54:	bf08      	it	eq
   b5e56:	3101      	addeq	r1, #1
   b5e58:	f000 f852 	bl	b5f00 <strcmp>
   b5e5c:	fab0 f080 	clz	r0, r0
   b5e60:	0940      	lsrs	r0, r0, #5
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	2001      	movs	r0, #1
   b5e66:	e7fc      	b.n	b5e62 <_ZNKSt9type_infoeqERKS_+0x22>
   b5e68:	2000      	movs	r0, #0
   b5e6a:	e7fa      	b.n	b5e62 <_ZNKSt9type_infoeqERKS_+0x22>

000b5e6c <atexit>:
   b5e6c:	2300      	movs	r3, #0
   b5e6e:	4601      	mov	r1, r0
   b5e70:	461a      	mov	r2, r3
   b5e72:	4618      	mov	r0, r3
   b5e74:	f000 b856 	b.w	b5f24 <__register_exitproc>

000b5e78 <memcpy>:
   b5e78:	440a      	add	r2, r1
   b5e7a:	4291      	cmp	r1, r2
   b5e7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5e80:	d100      	bne.n	b5e84 <memcpy+0xc>
   b5e82:	4770      	bx	lr
   b5e84:	b510      	push	{r4, lr}
   b5e86:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5e8e:	4291      	cmp	r1, r2
   b5e90:	d1f9      	bne.n	b5e86 <memcpy+0xe>
   b5e92:	bd10      	pop	{r4, pc}

000b5e94 <memset>:
   b5e94:	4402      	add	r2, r0
   b5e96:	4603      	mov	r3, r0
   b5e98:	4293      	cmp	r3, r2
   b5e9a:	d100      	bne.n	b5e9e <memset+0xa>
   b5e9c:	4770      	bx	lr
   b5e9e:	f803 1b01 	strb.w	r1, [r3], #1
   b5ea2:	e7f9      	b.n	b5e98 <memset+0x4>

000b5ea4 <srand>:
   b5ea4:	b538      	push	{r3, r4, r5, lr}
   b5ea6:	4b10      	ldr	r3, [pc, #64]	; (b5ee8 <srand+0x44>)
   b5ea8:	681d      	ldr	r5, [r3, #0]
   b5eaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5eac:	4604      	mov	r4, r0
   b5eae:	b9b3      	cbnz	r3, b5ede <srand+0x3a>
   b5eb0:	2018      	movs	r0, #24
   b5eb2:	f7fe fe7f 	bl	b4bb4 <malloc>
   b5eb6:	4602      	mov	r2, r0
   b5eb8:	63a8      	str	r0, [r5, #56]	; 0x38
   b5eba:	b920      	cbnz	r0, b5ec6 <srand+0x22>
   b5ebc:	4b0b      	ldr	r3, [pc, #44]	; (b5eec <srand+0x48>)
   b5ebe:	480c      	ldr	r0, [pc, #48]	; (b5ef0 <srand+0x4c>)
   b5ec0:	2142      	movs	r1, #66	; 0x42
   b5ec2:	f7fe fe97 	bl	b4bf4 <__assert_func>
   b5ec6:	490b      	ldr	r1, [pc, #44]	; (b5ef4 <srand+0x50>)
   b5ec8:	4b0b      	ldr	r3, [pc, #44]	; (b5ef8 <srand+0x54>)
   b5eca:	e9c0 1300 	strd	r1, r3, [r0]
   b5ece:	4b0b      	ldr	r3, [pc, #44]	; (b5efc <srand+0x58>)
   b5ed0:	6083      	str	r3, [r0, #8]
   b5ed2:	230b      	movs	r3, #11
   b5ed4:	8183      	strh	r3, [r0, #12]
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	2001      	movs	r0, #1
   b5eda:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5ede:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5ee0:	2200      	movs	r2, #0
   b5ee2:	611c      	str	r4, [r3, #16]
   b5ee4:	615a      	str	r2, [r3, #20]
   b5ee6:	bd38      	pop	{r3, r4, r5, pc}
   b5ee8:	2003e5bc 	.word	0x2003e5bc
   b5eec:	000b63dd 	.word	0x000b63dd
   b5ef0:	000b63f4 	.word	0x000b63f4
   b5ef4:	abcd330e 	.word	0xabcd330e
   b5ef8:	e66d1234 	.word	0xe66d1234
   b5efc:	0005deec 	.word	0x0005deec

000b5f00 <strcmp>:
   b5f00:	f810 2b01 	ldrb.w	r2, [r0], #1
   b5f04:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5f08:	2a01      	cmp	r2, #1
   b5f0a:	bf28      	it	cs
   b5f0c:	429a      	cmpcs	r2, r3
   b5f0e:	d0f7      	beq.n	b5f00 <strcmp>
   b5f10:	1ad0      	subs	r0, r2, r3
   b5f12:	4770      	bx	lr

000b5f14 <strlen>:
   b5f14:	4603      	mov	r3, r0
   b5f16:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f1a:	2a00      	cmp	r2, #0
   b5f1c:	d1fb      	bne.n	b5f16 <strlen+0x2>
   b5f1e:	1a18      	subs	r0, r3, r0
   b5f20:	3801      	subs	r0, #1
   b5f22:	4770      	bx	lr

000b5f24 <__register_exitproc>:
   b5f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5fe4 <__register_exitproc+0xc0>
   b5f2c:	4606      	mov	r6, r0
   b5f2e:	f8d8 0000 	ldr.w	r0, [r8]
   b5f32:	461f      	mov	r7, r3
   b5f34:	460d      	mov	r5, r1
   b5f36:	4691      	mov	r9, r2
   b5f38:	f000 f856 	bl	b5fe8 <__retarget_lock_acquire_recursive>
   b5f3c:	4b25      	ldr	r3, [pc, #148]	; (b5fd4 <__register_exitproc+0xb0>)
   b5f3e:	681c      	ldr	r4, [r3, #0]
   b5f40:	b934      	cbnz	r4, b5f50 <__register_exitproc+0x2c>
   b5f42:	4c25      	ldr	r4, [pc, #148]	; (b5fd8 <__register_exitproc+0xb4>)
   b5f44:	601c      	str	r4, [r3, #0]
   b5f46:	4b25      	ldr	r3, [pc, #148]	; (b5fdc <__register_exitproc+0xb8>)
   b5f48:	b113      	cbz	r3, b5f50 <__register_exitproc+0x2c>
   b5f4a:	681b      	ldr	r3, [r3, #0]
   b5f4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5f50:	6863      	ldr	r3, [r4, #4]
   b5f52:	2b1f      	cmp	r3, #31
   b5f54:	dd07      	ble.n	b5f66 <__register_exitproc+0x42>
   b5f56:	f8d8 0000 	ldr.w	r0, [r8]
   b5f5a:	f000 f847 	bl	b5fec <__retarget_lock_release_recursive>
   b5f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5f66:	b34e      	cbz	r6, b5fbc <__register_exitproc+0x98>
   b5f68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5f6c:	b988      	cbnz	r0, b5f92 <__register_exitproc+0x6e>
   b5f6e:	4b1c      	ldr	r3, [pc, #112]	; (b5fe0 <__register_exitproc+0xbc>)
   b5f70:	b923      	cbnz	r3, b5f7c <__register_exitproc+0x58>
   b5f72:	f8d8 0000 	ldr.w	r0, [r8]
   b5f76:	f000 f838 	bl	b5fea <__retarget_lock_release>
   b5f7a:	e7f0      	b.n	b5f5e <__register_exitproc+0x3a>
   b5f7c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5f80:	f7fe fe18 	bl	b4bb4 <malloc>
   b5f84:	2800      	cmp	r0, #0
   b5f86:	d0f4      	beq.n	b5f72 <__register_exitproc+0x4e>
   b5f88:	2300      	movs	r3, #0
   b5f8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5f8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5f92:	6863      	ldr	r3, [r4, #4]
   b5f94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5f98:	2201      	movs	r2, #1
   b5f9a:	409a      	lsls	r2, r3
   b5f9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5fa0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5fa4:	4313      	orrs	r3, r2
   b5fa6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5faa:	2e02      	cmp	r6, #2
   b5fac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5fb0:	bf02      	ittt	eq
   b5fb2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5fb6:	4313      	orreq	r3, r2
   b5fb8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5fbc:	6863      	ldr	r3, [r4, #4]
   b5fbe:	f8d8 0000 	ldr.w	r0, [r8]
   b5fc2:	1c5a      	adds	r2, r3, #1
   b5fc4:	3302      	adds	r3, #2
   b5fc6:	6062      	str	r2, [r4, #4]
   b5fc8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5fcc:	f000 f80e 	bl	b5fec <__retarget_lock_release_recursive>
   b5fd0:	2000      	movs	r0, #0
   b5fd2:	e7c6      	b.n	b5f62 <__register_exitproc+0x3e>
   b5fd4:	2003e7e8 	.word	0x2003e7e8
   b5fd8:	2003e75c 	.word	0x2003e75c
   b5fdc:	00000000 	.word	0x00000000
   b5fe0:	000b4bb5 	.word	0x000b4bb5
   b5fe4:	2003e620 	.word	0x2003e620

000b5fe8 <__retarget_lock_acquire_recursive>:
   b5fe8:	4770      	bx	lr

000b5fea <__retarget_lock_release>:
   b5fea:	4770      	bx	lr

000b5fec <__retarget_lock_release_recursive>:
   b5fec:	4770      	bx	lr

000b5fee <link_code_end>:
	...

000b5ff0 <dynalib_user>:
   b5ff0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6000:	0000 0000 6f4e 4320 6168 676e 2065 202d     ....No Change - 
   b6010:	6143 636e 6c65 696c 676e 4320 444d 000a     Cancelling CMD..
   b6020:	227b 6e6f 3a22 7274 6575 222c 6173 2274     {"on":true,"sat"
   b6030:	003a 222c 7262 2269 003a 222c 7568 2265     :.,"bri":.,"hue"
   b6040:	003a 227b 6e6f 3a22 6166 736c 7d65 5300     :.{"on":false}.S
   b6050:	6e65 6964 676e 4320 6d6f 616d 646e 7420     ending Command t
   b6060:	206f 7548 0065 5550 2054 612f 6970 002f     o Hue.PUT /api/.
   b6070:	6c2f 6769 7468 2f73 2f00 7473 7461 2065     /lights/./state 
   b6080:	5448 5054 312f 312e 6b00 6565 2d70 6c61     HTTP/1.1.keep-al
   b6090:	7669 0065 6f48 7473 203a 4300 6e6f 6574     ive.Host: .Conte
   b60a0:	746e 4c2d 6e65 7467 3a68 0020 6f43 746e     nt-Length: .Cont
   b60b0:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
   b60c0:	616c 6e69 633b 6168 7372 7465 553d 4654     lain;charset=UTF
   b60d0:	382d 4600 6f72 206d 7548 0065               -8.From Hue.

000b60dc <CSWTCH.88>:
   b60dc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b60ec:	0050 0000                                   P...

000b60f0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b60f8 <_ZTVN5spark13EthernetClassE>:
	...
   b6100:	4c83 000b 4c79 000b 4c6f 000b 4c65 000b     .L..yL..oL..eL..
   b6110:	4c59 000b 4c4d 000b 4ea1 000b 4ea9 000b     YL..ML...N...N..
   b6120:	4c41 000b 4c39 000b 4c2f 000b 4c25 000b     AL..9L../L..%L..
   b6130:	4ed9 000b                                   .N..

000b6134 <_ZTV7TwoWire>:
	...
   b613c:	4ca1 000b 4ceb 000b 4cc3 000b 4ca3 000b     .L...L...L...L..
   b614c:	4ccb 000b 4cd3 000b 4cdb 000b 4ce3 000b     .L...L...L...L..

000b615c <_ZTV9IPAddress>:
	...
   b6164:	4d45 000b 4d35 000b 4d37 000b 7061 0070     EM..5M..7M..app.

000b6174 <_ZTVN5spark12NetworkClassE>:
	...
   b617c:	4e61 000b 4e6b 000b 4e75 000b 4e7f 000b     aN..kN..uN...N..
   b618c:	4e89 000b 4e95 000b 4ea1 000b 4ea9 000b     .N...N...N...N..
   b619c:	4eb1 000b 4ebd 000b 4ec5 000b 4ecf 000b     .N...N...N...N..
   b61ac:	4ed9 000b 6977 6972 676e 7200 6365 2076     .N..wiring.recv 
   b61bc:	7265 6f72 2072 203d 6425 0000               error = %d..

000b61c8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b61d0:	51d1 000b 51f5 000b 56df 000b 5203 000b     .Q...Q...V...R..
   b61e0:	51d5 000b                                   .Q..

000b61e4 <_ZTV9TCPClient>:
	...
   b61ec:	40b1 000b 40e5 000b 514d 000b 5167 000b     .@...@..MQ..gQ..
   b61fc:	5575 000b 5191 000b 53eb 000b 51c5 000b     uU...Q...S...Q..
   b620c:	547d 000b 52bd 000b 5419 000b 5629 000b     }T...R...T..)V..
   b621c:	53b9 000b 51c7 000b 5179 000b 5209 000b     .S...Q..yQ...R..
   b622c:	529d 000b 5925 252d 2d6d 6425 2554 3a48     .R..%Y-%m-%dT%H:
   b623c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b624c <_ZTV11USARTSerial>:
	...
   b6254:	56f9 000b 5765 000b 573d 000b 4fc5 000b     .V..eW..=W...O..
   b6264:	570d 000b 5729 000b 571b 000b 5737 000b     .W..)W...W..7W..
   b6274:	56fb 000b 56ff 000b                         .V...V..

000b627c <_ZTV9USBSerial>:
	...
   b6284:	57a3 000b 580b 000b 57e1 000b 4fc5 000b     .W...X...W...O..
   b6294:	57d3 000b 57a5 000b 57b5 000b 5805 000b     .W...W...W...X..
   b62a4:	57c5 000b 579d 000b                         .W...W..

000b62ac <_ZTVN5spark9WiFiClassE>:
	...
   b62b4:	58fb 000b 58f1 000b 58e7 000b 589d 000b     .X...X...X...X..
   b62c4:	58db 000b 58cf 000b 4ea1 000b 4ea9 000b     .X...X...N...N..
   b62d4:	58c3 000b 58bb 000b 58b1 000b 58a7 000b     .X...X...X...X..
   b62e4:	4ed9 000b                                   .N..

000b62e8 <_ZSt7nothrow>:
	...

000b62e9 <_ZTSSt19_Sp_make_shared_tag>:
   b62e9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b62f9:	6572 5f64 6174 0067 0000                     red_tag....

000b6304 <_ZTISt19_Sp_make_shared_tag>:
   b6304:	6344 000b 62e9 000b                         Dc...b..

000b630c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b630c:	63a4 000b 6318 000b 63c8 000b               .c...c...c..

000b6318 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6318:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6328:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6338:	0045 0000                                   E...

000b633c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b633c:	0000 0000 630c 000b 5c95 000b 5ca9 000b     .....c...\...\..
   b634c:	5e3d 000b 5e3d 000b 5d13 000b 5c55 000b     =^..=^...]..U\..
   b635c:	5cfb 000b 5cbd 000b 5c87 000b               .\...\...\..

000b6368 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6368:	63a4 000b 6374 000b 630c 000b               .c..tc...c..

000b6374 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6374:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6384:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6394:	666e 456f 0000 0000                         nfoE....

000b639c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b639c:	0000 0000 6368 000b 5d3d 000b 5d51 000b     ....hc..=]..Q]..
   b63ac:	5e3d 000b 5e3d 000b 5d13 000b 5c55 000b     =^..=^...]..U\..
   b63bc:	5e11 000b 5d9d 000b 5d65 000b               .^...]..e]..

000b63c8 <_ZTISt9type_info>:
   b63c8:	6344 000b 63d0 000b                         Dc...c..

000b63d0 <_ZTSSt9type_info>:
   b63d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b63e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b63f0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b6400:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b6410:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b6420:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b6430:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b6440:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b644d <link_const_variable_data_end>:
   b644d:	00          	.byte	0x00
	...

000b6450 <link_constructors_location>:
   b6450:	000b41a1 	.word	0x000b41a1
   b6454:	000b47bd 	.word	0x000b47bd
   b6458:	000b4c15 	.word	0x000b4c15
   b645c:	000b4c8d 	.word	0x000b4c8d
   b6460:	000b4e51 	.word	0x000b4e51
   b6464:	000b4fb1 	.word	0x000b4fb1
   b6468:	000b5059 	.word	0x000b5059
   b646c:	000b5129 	.word	0x000b5129
   b6470:	000b56e5 	.word	0x000b56e5
   b6474:	000b5905 	.word	0x000b5905

000b6478 <link_constructors_end>:
	...
