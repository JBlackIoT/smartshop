
/Users/jamesblack/Documents/IoT/smartshop/SmartShopSourceCode002/target/4.0.2/argon/SmartShopSourceCode002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000047b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b87d0  000b87d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b87f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  2003e56c  000b87f8  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  2003e600  2003e600  0002e600  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b888c  000b888c  0002888c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b88b4  000b88b4  000288b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001134d4  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012b04  00000000  00000000  0013bd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000389e1  00000000  00000000  0014e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ec8  00000000  00000000  00187271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a400  00000000  00000000  0018a139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000386ca  00000000  00000000  00194539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003e58d  00000000  00000000  001ccc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013333d  00000000  00000000  0020b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008628  00000000  00000000  0033e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ff97 	bl	b7f64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 ff9f 	bl	b7f80 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e56c 	.word	0x2003e56c
   b404c:	000b87f8 	.word	0x000b87f8
   b4050:	2003e600 	.word	0x2003e600
   b4054:	2003e600 	.word	0x2003e600
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 feab 	bl	b5dbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b87a0 	.word	0x000b87a0
   b4080:	000b87c4 	.word	0x000b87c4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b980 	b.w	b4388 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa11 	bl	b44b0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 be4b 	b.w	b5d2c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bd91 	b.w	b4bbc <malloc>

000b409a <_Znaj>:
   b409a:	f000 bd8f 	b.w	b4bbc <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bd95 	b.w	b4bcc <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40b2:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40b4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40b6:	4606      	mov	r6, r0
   b40b8:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40ba:	da0b      	bge.n	b40d4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40bc:	2a0a      	cmp	r2, #10
   b40be:	d109      	bne.n	b40d4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40c0:	212d      	movs	r1, #45	; 0x2d
   b40c2:	f000 ffc7 	bl	b5054 <_ZN5Print5printEc>
            val = -n;
   b40c6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40c8:	b2ea      	uxtb	r2, r5
   b40ca:	4630      	mov	r0, r6
    }
}
   b40cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40d0:	f000 bfd9 	b.w	b5086 <_ZN5Print11printNumberEmh>
            val = n;
   b40d4:	4621      	mov	r1, r4
   b40d6:	e7f7      	b.n	b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40d8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d8:	b40e      	push	{r1, r2, r3}
   b40da:	b503      	push	{r0, r1, lr}
   b40dc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40de:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e6:	f000 ffec 	bl	b50c2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b40ea:	b002      	add	sp, #8
   b40ec:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f0:	b003      	add	sp, #12
   b40f2:	4770      	bx	lr

000b40f4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40f4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40f6:	6984      	ldr	r4, [r0, #24]
   b40f8:	4b0a      	ldr	r3, [pc, #40]	; (b4124 <_ZN9TCPClientD1Ev+0x30>)
   b40fa:	6003      	str	r3, [r0, #0]
   b40fc:	4605      	mov	r5, r0
   b40fe:	b17c      	cbz	r4, b4120 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4100:	6863      	ldr	r3, [r4, #4]
   b4102:	3b01      	subs	r3, #1
   b4104:	6063      	str	r3, [r4, #4]
   b4106:	b95b      	cbnz	r3, b4120 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4620      	mov	r0, r4
   b410c:	689b      	ldr	r3, [r3, #8]
   b410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4110:	68a3      	ldr	r3, [r4, #8]
   b4112:	3b01      	subs	r3, #1
   b4114:	60a3      	str	r3, [r4, #8]
   b4116:	b91b      	cbnz	r3, b4120 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4118:	6823      	ldr	r3, [r4, #0]
   b411a:	4620      	mov	r0, r4
   b411c:	68db      	ldr	r3, [r3, #12]
   b411e:	4798      	blx	r3
   b4120:	4628      	mov	r0, r5
   b4122:	bd38      	pop	{r3, r4, r5, pc}
   b4124:	000b8364 	.word	0x000b8364

000b4128 <_ZN9TCPClientD0Ev>:
   b4128:	b510      	push	{r4, lr}
   b412a:	4604      	mov	r4, r0
   b412c:	f7ff ffe2 	bl	b40f4 <_ZN9TCPClientD1Ev>
   b4130:	4620      	mov	r0, r4
   b4132:	211c      	movs	r1, #28
   b4134:	f7ff ffb3 	bl	b409e <_ZdlPvj>
   b4138:	4620      	mov	r0, r4
   b413a:	bd10      	pop	{r4, pc}

000b413c <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4140:	b08c      	sub	sp, #48	; 0x30
   b4142:	4605      	mov	r5, r0
   b4144:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4146:	4668      	mov	r0, sp
   b4148:	4977      	ldr	r1, [pc, #476]	; (b4328 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b414a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b414e:	4614      	mov	r4, r2
   b4150:	461e      	mov	r6, r3
  String command = "";  
   b4152:	f001 f8e4 	bl	b531e <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4156:	f8df e228 	ldr.w	lr, [pc, #552]	; b4380 <_Z6setHueibiii+0x244>
   b415a:	4974      	ldr	r1, [pc, #464]	; (b432c <_Z6setHueibiii+0x1f0>)
   b415c:	f8de 3000 	ldr.w	r3, [lr]
   b4160:	4873      	ldr	r0, [pc, #460]	; (b4330 <_Z6setHueibiii+0x1f4>)
   b4162:	4a74      	ldr	r2, [pc, #464]	; (b4334 <_Z6setHueibiii+0x1f8>)
   b4164:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4384 <_Z6setHueibiii+0x248>
   b4168:	42ab      	cmp	r3, r5
   b416a:	d119      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b416c:	680b      	ldr	r3, [r1, #0]
   b416e:	42bb      	cmp	r3, r7
   b4170:	d116      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b4172:	6803      	ldr	r3, [r0, #0]
   b4174:	42a3      	cmp	r3, r4
   b4176:	d113      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b4178:	6813      	ldr	r3, [r2, #0]
   b417a:	42b3      	cmp	r3, r6
   b417c:	d110      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b417e:	f8dc 3000 	ldr.w	r3, [ip]
   b4182:	4543      	cmp	r3, r8
   b4184:	d10c      	bne.n	b41a0 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b4186:	f001 fcff 	bl	b5b88 <_Z16_fetch_usbserialv>
   b418a:	496b      	ldr	r1, [pc, #428]	; (b4338 <_Z6setHueibiii+0x1fc>)
   b418c:	f7ff ffa4 	bl	b40d8 <_ZN5Print6printfEPKcz>
    return false;
   b4190:	2400      	movs	r4, #0
  String command = "";  
   b4192:	4668      	mov	r0, sp
   b4194:	f001 f878 	bl	b5288 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b4198:	4620      	mov	r0, r4
   b419a:	b00c      	add	sp, #48	; 0x30
   b419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41a0:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41a4:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41a6:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41a8:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41aa:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ae:	2f00      	cmp	r7, #0
   b41b0:	f000 80b5 	beq.w	b431e <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41b4:	4961      	ldr	r1, [pc, #388]	; (b433c <_Z6setHueibiii+0x200>)
   b41b6:	4668      	mov	r0, sp
   b41b8:	f001 f8df 	bl	b537a <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41bc:	4669      	mov	r1, sp
   b41be:	a808      	add	r0, sp, #32
   b41c0:	f001 f8d0 	bl	b5364 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41c4:	220a      	movs	r2, #10
   b41c6:	4641      	mov	r1, r8
   b41c8:	a804      	add	r0, sp, #16
   b41ca:	f001 f8e8 	bl	b539e <_ZN6StringC1Eih>
   b41ce:	a904      	add	r1, sp, #16
   b41d0:	a808      	add	r0, sp, #32
   b41d2:	f001 f91b 	bl	b540c <_ZplRK15StringSumHelperRK6String>
   b41d6:	495a      	ldr	r1, [pc, #360]	; (b4340 <_Z6setHueibiii+0x204>)
   b41d8:	f001 f924 	bl	b5424 <_ZplRK15StringSumHelperPKc>
   b41dc:	4601      	mov	r1, r0
   b41de:	4668      	mov	r0, sp
   b41e0:	f001 f8b1 	bl	b5346 <_ZN6StringaSERKS_>
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f001 f84f 	bl	b5288 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41ea:	a808      	add	r0, sp, #32
   b41ec:	f001 f84c 	bl	b5288 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b41f0:	4669      	mov	r1, sp
   b41f2:	a808      	add	r0, sp, #32
   b41f4:	f001 f8b6 	bl	b5364 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b41f8:	220a      	movs	r2, #10
   b41fa:	4631      	mov	r1, r6
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f001 f8ce 	bl	b539e <_ZN6StringC1Eih>
   b4202:	a904      	add	r1, sp, #16
   b4204:	a808      	add	r0, sp, #32
   b4206:	f001 f901 	bl	b540c <_ZplRK15StringSumHelperRK6String>
   b420a:	494e      	ldr	r1, [pc, #312]	; (b4344 <_Z6setHueibiii+0x208>)
   b420c:	f001 f90a 	bl	b5424 <_ZplRK15StringSumHelperPKc>
   b4210:	4601      	mov	r1, r0
   b4212:	4668      	mov	r0, sp
   b4214:	f001 f897 	bl	b5346 <_ZN6StringaSERKS_>
   b4218:	a804      	add	r0, sp, #16
   b421a:	f001 f835 	bl	b5288 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b421e:	a808      	add	r0, sp, #32
   b4220:	f001 f832 	bl	b5288 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4224:	4669      	mov	r1, sp
   b4226:	a808      	add	r0, sp, #32
   b4228:	f001 f89c 	bl	b5364 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b422c:	220a      	movs	r2, #10
   b422e:	4621      	mov	r1, r4
   b4230:	a804      	add	r0, sp, #16
   b4232:	f001 f8b4 	bl	b539e <_ZN6StringC1Eih>
   b4236:	a904      	add	r1, sp, #16
   b4238:	a808      	add	r0, sp, #32
   b423a:	f001 f8e7 	bl	b540c <_ZplRK15StringSumHelperRK6String>
   b423e:	4942      	ldr	r1, [pc, #264]	; (b4348 <_Z6setHueibiii+0x20c>)
   b4240:	f001 f8f0 	bl	b5424 <_ZplRK15StringSumHelperPKc>
   b4244:	4601      	mov	r1, r0
   b4246:	4668      	mov	r0, sp
   b4248:	f001 f87d 	bl	b5346 <_ZN6StringaSERKS_>
   b424c:	a804      	add	r0, sp, #16
   b424e:	f001 f81b 	bl	b5288 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4252:	a808      	add	r0, sp, #32
   b4254:	f001 f818 	bl	b5288 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4258:	493c      	ldr	r1, [pc, #240]	; (b434c <_Z6setHueibiii+0x210>)
   b425a:	483d      	ldr	r0, [pc, #244]	; (b4350 <_Z6setHueibiii+0x214>)
   b425c:	2300      	movs	r3, #0
   b425e:	2250      	movs	r2, #80	; 0x50
   b4260:	f001 f9c0 	bl	b55e4 <_ZN9TCPClient7connectEPKctm>
   b4264:	4604      	mov	r4, r0
   b4266:	2800      	cmp	r0, #0
   b4268:	d093      	beq.n	b4192 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b426a:	f001 fc8d 	bl	b5b88 <_Z16_fetch_usbserialv>
   b426e:	4939      	ldr	r1, [pc, #228]	; (b4354 <_Z6setHueibiii+0x218>)
   b4270:	f000 feff 	bl	b5072 <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4274:	f001 fc88 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4278:	9900      	ldr	r1, [sp, #0]
   b427a:	f000 fefa 	bl	b5072 <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b427e:	4936      	ldr	r1, [pc, #216]	; (b4358 <_Z6setHueibiii+0x21c>)
   b4280:	4833      	ldr	r0, [pc, #204]	; (b4350 <_Z6setHueibiii+0x214>)
   b4282:	f000 fee3 	bl	b504c <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b4286:	4935      	ldr	r1, [pc, #212]	; (b435c <_Z6setHueibiii+0x220>)
   b4288:	4831      	ldr	r0, [pc, #196]	; (b4350 <_Z6setHueibiii+0x214>)
   b428a:	f000 fedf 	bl	b504c <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b428e:	4934      	ldr	r1, [pc, #208]	; (b4360 <_Z6setHueibiii+0x224>)
   b4290:	482f      	ldr	r0, [pc, #188]	; (b4350 <_Z6setHueibiii+0x214>)
   b4292:	f000 fedb 	bl	b504c <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b4296:	220a      	movs	r2, #10
   b4298:	482d      	ldr	r0, [pc, #180]	; (b4350 <_Z6setHueibiii+0x214>)
   b429a:	4629      	mov	r1, r5
   b429c:	f7ff ff09 	bl	b40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42a0:	4930      	ldr	r1, [pc, #192]	; (b4364 <_Z6setHueibiii+0x228>)
   b42a2:	482b      	ldr	r0, [pc, #172]	; (b4350 <_Z6setHueibiii+0x214>)
   b42a4:	f000 fee5 	bl	b5072 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42a8:	492f      	ldr	r1, [pc, #188]	; (b4368 <_Z6setHueibiii+0x22c>)
   b42aa:	4829      	ldr	r0, [pc, #164]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ac:	f000 fee1 	bl	b5072 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42b0:	492e      	ldr	r1, [pc, #184]	; (b436c <_Z6setHueibiii+0x230>)
   b42b2:	4827      	ldr	r0, [pc, #156]	; (b4350 <_Z6setHueibiii+0x214>)
   b42b4:	f000 feca 	bl	b504c <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42b8:	4924      	ldr	r1, [pc, #144]	; (b434c <_Z6setHueibiii+0x210>)
   b42ba:	4825      	ldr	r0, [pc, #148]	; (b4350 <_Z6setHueibiii+0x214>)
   b42bc:	f000 fed9 	bl	b5072 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42c0:	492b      	ldr	r1, [pc, #172]	; (b4370 <_Z6setHueibiii+0x234>)
   b42c2:	4823      	ldr	r0, [pc, #140]	; (b4350 <_Z6setHueibiii+0x214>)
   b42c4:	f000 fec2 	bl	b504c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42c8:	220a      	movs	r2, #10
   b42ca:	9902      	ldr	r1, [sp, #8]
   b42cc:	4820      	ldr	r0, [pc, #128]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ce:	f000 feda 	bl	b5086 <_ZN5Print11printNumberEmh>
        n += println();
   b42d2:	481f      	ldr	r0, [pc, #124]	; (b4350 <_Z6setHueibiii+0x214>)
   b42d4:	f000 fec1 	bl	b505a <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42d8:	4926      	ldr	r1, [pc, #152]	; (b4374 <_Z6setHueibiii+0x238>)
   b42da:	481d      	ldr	r0, [pc, #116]	; (b4350 <_Z6setHueibiii+0x214>)
   b42dc:	f000 fec9 	bl	b5072 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42e0:	481b      	ldr	r0, [pc, #108]	; (b4350 <_Z6setHueibiii+0x214>)
   b42e2:	f000 feba 	bl	b505a <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42e6:	9900      	ldr	r1, [sp, #0]
   b42e8:	4819      	ldr	r0, [pc, #100]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ea:	f000 fec2 	bl	b5072 <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b42ee:	f001 fc4b 	bl	b5b88 <_Z16_fetch_usbserialv>
   b42f2:	4921      	ldr	r1, [pc, #132]	; (b4378 <_Z6setHueibiii+0x23c>)
   b42f4:	f000 febd 	bl	b5072 <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b42f8:	f001 fc46 	bl	b5b88 <_Z16_fetch_usbserialv>
   b42fc:	4914      	ldr	r1, [pc, #80]	; (b4350 <_Z6setHueibiii+0x214>)
   b42fe:	4604      	mov	r4, r0
   b4300:	a808      	add	r0, sp, #32
   b4302:	f000 ffad 	bl	b5260 <_ZN6Stream10readStringEv>
   b4306:	9908      	ldr	r1, [sp, #32]
   b4308:	4620      	mov	r0, r4
   b430a:	f000 feb2 	bl	b5072 <_ZN5Print7printlnEPKc>
   b430e:	a808      	add	r0, sp, #32
   b4310:	f000 ffba 	bl	b5288 <_ZN6StringD1Ev>
    HueClient.stop();
   b4314:	480e      	ldr	r0, [pc, #56]	; (b4350 <_Z6setHueibiii+0x214>)
   b4316:	f001 fb1b 	bl	b5950 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b431a:	2401      	movs	r4, #1
   b431c:	e739      	b.n	b4192 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b431e:	4917      	ldr	r1, [pc, #92]	; (b437c <_Z6setHueibiii+0x240>)
   b4320:	4668      	mov	r0, sp
   b4322:	f001 f82a 	bl	b537a <_ZN6StringaSEPKc>
   b4326:	e797      	b.n	b4258 <_Z6setHueibiii+0x11c>
   b4328:	000b8217 	.word	0x000b8217
   b432c:	2003e66c 	.word	0x2003e66c
   b4330:	2003e674 	.word	0x2003e674
   b4334:	2003e664 	.word	0x2003e664
   b4338:	000b8100 	.word	0x000b8100
   b433c:	000b811c 	.word	0x000b811c
   b4340:	000b812e 	.word	0x000b812e
   b4344:	000b8136 	.word	0x000b8136
   b4348:	000b8149 	.word	0x000b8149
   b434c:	000b8259 	.word	0x000b8259
   b4350:	2003e600 	.word	0x2003e600
   b4354:	000b814b 	.word	0x000b814b
   b4358:	000b8162 	.word	0x000b8162
   b435c:	000b8230 	.word	0x000b8230
   b4360:	000b816c 	.word	0x000b816c
   b4364:	000b8175 	.word	0x000b8175
   b4368:	000b8185 	.word	0x000b8185
   b436c:	000b8190 	.word	0x000b8190
   b4370:	000b8197 	.word	0x000b8197
   b4374:	000b81a8 	.word	0x000b81a8
   b4378:	000b81cf 	.word	0x000b81cf
   b437c:	000b813e 	.word	0x000b813e
   b4380:	2003e668 	.word	0x2003e668
   b4384:	2003e670 	.word	0x2003e670

000b4388 <setup>:
int relay = 17;

Servo myservo; // create servo object to control a servo
SYSTEM_MODE (SEMI_AUTOMATIC);
void setup()
{
   b4388:	b530      	push	{r4, r5, lr}
  {
  pinMode(waterSens, INPUT); // set water sensor as an input
   b438a:	2100      	movs	r1, #0
{
   b438c:	b097      	sub	sp, #92	; 0x5c
  pinMode(waterSens, INPUT); // set water sensor as an input
   b438e:	2010      	movs	r0, #16
   b4390:	f001 fd84 	bl	b5e9c <pinMode>
  Serial.begin(9600); // initialize Serial  
   b4394:	f001 fbf8 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4398:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439c:	f001 fbe4 	bl	b5b68 <_ZN9USBSerial5beginEl>
}
pinMode(relay, OUTPUT);      // Initialize pin as an output
   b43a0:	4b3b      	ldr	r3, [pc, #236]	; (b4490 <setup+0x108>)
   b43a2:	2101      	movs	r1, #1
   b43a4:	8818      	ldrh	r0, [r3, #0]
   b43a6:	f001 fd79 	bl	b5e9c <pinMode>

  Serial.begin (9600);
   b43aa:	f001 fbed 	bl	b5b88 <_Z16_fetch_usbserialv>
   b43ae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43b2:	f001 fbd9 	bl	b5b68 <_ZN9USBSerial5beginEl>
  pinMode(photodiodePin, INPUT);
   b43b6:	2100      	movs	r1, #0
   b43b8:	2012      	movs	r0, #18
   b43ba:	f001 fd6f 	bl	b5e9c <pinMode>
  myservo.attach(servoPin); // attached to pin D6
   b43be:	2400      	movs	r4, #0
   b43c0:	23b4      	movs	r3, #180	; 0xb4
   b43c2:	f44f 7208 	mov.w	r2, #544	; 0x220
   b43c6:	e9cd 4300 	strd	r4, r3, [sp]
   b43ca:	2108      	movs	r1, #8
   b43cc:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b43d0:	4830      	ldr	r0, [pc, #192]	; (b4494 <setup+0x10c>)
   b43d2:	f000 fefb 	bl	b51cc <_ZN5Servo6attachEtttss>
  pinMode(pin,INPUT);
   b43d6:	4b30      	ldr	r3, [pc, #192]	; (b4498 <setup+0x110>)
   b43d8:	4621      	mov	r1, r4
   b43da:	8818      	ldrh	r0, [r3, #0]
   b43dc:	f001 fd5e 	bl	b5e9c <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43e0:	f000 f9c8 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
    starttime = millis();
   b43e4:	4b2d      	ldr	r3, [pc, #180]	; (b449c <setup+0x114>)
   b43e6:	6018      	str	r0, [r3, #0]
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b43e8:	4620      	mov	r0, r4
   b43ea:	f000 f9cb 	bl	b4784 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43ee:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b43f2:	4604      	mov	r4, r0
   b43f4:	2000      	movs	r0, #0
   b43f6:	f000 f9c5 	bl	b4784 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43fa:	1b00      	subs	r0, r0, r4
   b43fc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4400:	42a8      	cmp	r0, r5
   b4402:	f171 0300 	sbcs.w	r3, r1, #0
   b4406:	d207      	bcs.n	b4418 <setup+0x90>
  waitFor(Serial.isConnected,15000);
   b4408:	f001 fbbe 	bl	b5b88 <_Z16_fetch_usbserialv>
   b440c:	f001 fbb0 	bl	b5b70 <_ZN9USBSerial11isConnectedEv>
   b4410:	b910      	cbnz	r0, b4418 <setup+0x90>
            spark_process();
   b4412:	f000 fb5b 	bl	b4acc <spark_process>
        while (_while() && !_condition()) {
   b4416:	e7ed      	b.n	b43f4 <setup+0x6c>
   b4418:	f001 fbb6 	bl	b5b88 <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b441c:	4c20      	ldr	r4, [pc, #128]	; (b44a0 <setup+0x118>)
  WiFi.on();
  WiFi.setCredentials("IoTNetwork");

  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   b441e:	4d21      	ldr	r5, [pc, #132]	; (b44a4 <setup+0x11c>)
  waitFor(Serial.isConnected,15000);
   b4420:	f001 fba6 	bl	b5b70 <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4424:	2300      	movs	r3, #0
   b4426:	461a      	mov	r2, r3
   b4428:	4619      	mov	r1, r3
   b442a:	6860      	ldr	r0, [r4, #4]
   b442c:	f000 fb7e 	bl	b4b2c <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4430:	2238      	movs	r2, #56	; 0x38
   b4432:	2100      	movs	r1, #0
   b4434:	a808      	add	r0, sp, #32
   b4436:	f003 fda3 	bl	b7f80 <memset>
        creds.size = sizeof(creds);
   b443a:	234c      	movs	r3, #76	; 0x4c
   b443c:	9303      	str	r3, [sp, #12]
        creds.ssid = ssid;
   b443e:	4b1a      	ldr	r3, [pc, #104]	; (b44a8 <setup+0x120>)
   b4440:	9304      	str	r3, [sp, #16]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4442:	220a      	movs	r2, #10
   b4444:	2300      	movs	r3, #0
   b4446:	e9cd 2305 	strd	r2, r3, [sp, #20]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b444a:	4619      	mov	r1, r3
   b444c:	aa03      	add	r2, sp, #12
   b444e:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b4450:	9307      	str	r3, [sp, #28]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4452:	f000 fb8b 	bl	b4b6c <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4456:	2300      	movs	r3, #0
   b4458:	6860      	ldr	r0, [r4, #4]
   b445a:	461a      	mov	r2, r3
   b445c:	4619      	mov	r1, r3
   b445e:	f000 fb45 	bl	b4aec <network_connect>
        return network_connecting(*this, 0, NULL);
   b4462:	2200      	movs	r2, #0
   b4464:	6860      	ldr	r0, [r4, #4]
   b4466:	4611      	mov	r1, r2
   b4468:	f000 fb48 	bl	b4afc <network_connecting>
  while(WiFi.connecting()) {
   b446c:	b128      	cbz	r0, b447a <setup+0xf2>
    Serial.printf(".");
   b446e:	f001 fb8b 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4472:	4629      	mov	r1, r5
   b4474:	f7ff fe30 	bl	b40d8 <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   b4478:	e7f3      	b.n	b4462 <setup+0xda>
  }
  delay(1000);
   b447a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b447e:	f000 fbe1 	bl	b4c44 <delay>
  Serial.printf("\n\n");
   b4482:	f001 fb81 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4486:	4909      	ldr	r1, [pc, #36]	; (b44ac <setup+0x124>)
   b4488:	f7ff fe26 	bl	b40d8 <_ZN5Print6printfEPKcz>
  

}
   b448c:	b017      	add	sp, #92	; 0x5c
   b448e:	bd30      	pop	{r4, r5, pc}
   b4490:	2003e58c 	.word	0x2003e58c
   b4494:	2003e694 	.word	0x2003e694
   b4498:	2003e588 	.word	0x2003e588
   b449c:	2003e6ac 	.word	0x2003e6ac
   b44a0:	2003e70c 	.word	0x2003e70c
   b44a4:	000b81e3 	.word	0x000b81e3
   b44a8:	000b81d8 	.word	0x000b81d8
   b44ac:	000b8215 	.word	0x000b8215

000b44b0 <loop>:
  void loop() {
   b44b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  duration = pulseIn(pin, LOW);
   b44b2:	4b6f      	ldr	r3, [pc, #444]	; (b4670 <loop+0x1c0>)
   b44b4:	4d6f      	ldr	r5, [pc, #444]	; (b4674 <loop+0x1c4>)
   b44b6:	8818      	ldrh	r0, [r3, #0]
   b44b8:	4c6f      	ldr	r4, [pc, #444]	; (b4678 <loop+0x1c8>)
   b44ba:	2100      	movs	r1, #0
   b44bc:	f001 fd2f 	bl	b5f1e <pulseIn>
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b44c0:	4a6e      	ldr	r2, [pc, #440]	; (b467c <loop+0x1cc>)
  duration = pulseIn(pin, LOW);
   b44c2:	6028      	str	r0, [r5, #0]
    lowpulseoccupancy = lowpulseoccupancy+duration;
   b44c4:	6813      	ldr	r3, [r2, #0]
   b44c6:	4418      	add	r0, r3
   b44c8:	6010      	str	r0, [r2, #0]
   b44ca:	f000 f953 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>

    if ((millis()-starttime) > sampletime_ms){
   b44ce:	4b6c      	ldr	r3, [pc, #432]	; (b4680 <loop+0x1d0>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	1ac0      	subs	r0, r0, r3
   b44d4:	4b6b      	ldr	r3, [pc, #428]	; (b4684 <loop+0x1d4>)
   b44d6:	681b      	ldr	r3, [r3, #0]
   b44d8:	4298      	cmp	r0, r3
   b44da:	f240 80a0 	bls.w	b461e <loop+0x16e>
   b44de:	f000 f949 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
    concentration >=3000;
    duration = millis();
   b44e2:	6028      	str	r0, [r5, #0]
   //switchON ();
     setHue(BULB5,true,HueRed,255,255);
   b44e4:	25ff      	movs	r5, #255	; 0xff
   b44e6:	9500      	str	r5, [sp, #0]
   b44e8:	6822      	ldr	r2, [r4, #0]
   b44ea:	462b      	mov	r3, r5
   b44ec:	2101      	movs	r1, #1
   b44ee:	2005      	movs	r0, #5
   b44f0:	f7ff fe24 	bl	b413c <_Z6setHueibiii>
     setHue(BULB4,true,HueRed,255,255);
   b44f4:	9500      	str	r5, [sp, #0]
   b44f6:	6822      	ldr	r2, [r4, #0]
   b44f8:	462b      	mov	r3, r5
   b44fa:	2101      	movs	r1, #1
   b44fc:	2004      	movs	r0, #4
   b44fe:	f7ff fe1d 	bl	b413c <_Z6setHueibiii>
     setHue(BULB3,true,HueRed,255,255);
   b4502:	9500      	str	r5, [sp, #0]
   b4504:	6822      	ldr	r2, [r4, #0]
   b4506:	462b      	mov	r3, r5
   b4508:	2101      	movs	r1, #1
   b450a:	2003      	movs	r0, #3
   b450c:	f7ff fe16 	bl	b413c <_Z6setHueibiii>
     setHue(BULB2,true,HueRed,255,255);
   b4510:	9500      	str	r5, [sp, #0]
   b4512:	6822      	ldr	r2, [r4, #0]
   b4514:	462b      	mov	r3, r5
   b4516:	2101      	movs	r1, #1
   b4518:	2002      	movs	r0, #2
   b451a:	f7ff fe0f 	bl	b413c <_Z6setHueibiii>
     setHue(BULB1,true,HueRed,255,255);
   b451e:	9500      	str	r5, [sp, #0]
   b4520:	6822      	ldr	r2, [r4, #0]
   b4522:	462b      	mov	r3, r5
   b4524:	2101      	movs	r1, #1
   else {
   setHue(BULB5,false,HueRed,255,255);
   setHue(BULB4,false,HueRed,255,255);
   setHue(BULB3,false,HueRed,255,255);
   setHue(BULB2,false,HueRed,255,255);
  setHue(BULB1,false,HueRed,255,255);
   b4526:	2001      	movs	r0, #1
   b4528:	f7ff fe08 	bl	b413c <_Z6setHueibiii>
    
   }    //switchOFF ();
    Serial.printf ("sensorread");
   b452c:	f001 fb2c 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4530:	4955      	ldr	r1, [pc, #340]	; (b4688 <loop+0x1d8>)
     photodiodeValue = analogRead(photodiodePin);
   b4532:	4c56      	ldr	r4, [pc, #344]	; (b468c <loop+0x1dc>)
  brightness = 255 - (photodiodeValue / 16);
   b4534:	4d56      	ldr	r5, [pc, #344]	; (b4690 <loop+0x1e0>)
    Serial.printf ("sensorread");
   b4536:	f7ff fdcf 	bl	b40d8 <_ZN5Print6printfEPKcz>
     photodiodeValue = analogRead(photodiodePin);
   b453a:	2012      	movs	r0, #18
   b453c:	f001 fcd8 	bl	b5ef0 <analogRead>
   b4540:	6020      	str	r0, [r4, #0]
  brightness = 255 - (photodiodeValue / 16);
   b4542:	2800      	cmp	r0, #0
   b4544:	bfb8      	it	lt
   b4546:	300f      	addlt	r0, #15
   b4548:	1100      	asrs	r0, r0, #4
   b454a:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
   b454e:	6028      	str	r0, [r5, #0]
  Serial.printf("\n\n\nphotodiodeValue=%i\n,brightness=%i\n\n\n",photodiodeValue,brightness);
   b4550:	f001 fb1a 	bl	b5b88 <_Z16_fetch_usbserialv>
   b4554:	682b      	ldr	r3, [r5, #0]
   b4556:	6822      	ldr	r2, [r4, #0]
   b4558:	494e      	ldr	r1, [pc, #312]	; (b4694 <loop+0x1e4>)
   b455a:	f7ff fdbd 	bl	b40d8 <_ZN5Print6printfEPKcz>
// myservo.write(60);
// delay(1000);
// myservo.write(120);
// delay(1100);

  if (photodiodeValue < 600) { // check if it is dark
   b455e:	6823      	ldr	r3, [r4, #0]
   b4560:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4564:	da3a      	bge.n	b45dc <loop+0x12c>
    signal = AMP * sin(2 * M_PI * freq * t) + OFFSET; //sine wave
   b4566:	4b4c      	ldr	r3, [pc, #304]	; (b4698 <loop+0x1e8>)
   b4568:	4e4c      	ldr	r6, [pc, #304]	; (b469c <loop+0x1ec>)
   b456a:	6818      	ldr	r0, [r3, #0]
   b456c:	f003 f98a 	bl	b7884 <__aeabi_f2d>
   b4570:	a33d      	add	r3, pc, #244	; (adr r3, b4668 <loop+0x1b8>)
   b4572:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4576:	f003 f9dd 	bl	b7934 <__aeabi_dmul>
   b457a:	4604      	mov	r4, r0
   b457c:	6830      	ldr	r0, [r6, #0]
   b457e:	460d      	mov	r5, r1
   b4580:	f003 f980 	bl	b7884 <__aeabi_f2d>
   b4584:	4602      	mov	r2, r0
   b4586:	460b      	mov	r3, r1
   b4588:	4620      	mov	r0, r4
   b458a:	4629      	mov	r1, r5
   b458c:	f003 f9d2 	bl	b7934 <__aeabi_dmul>
   b4590:	ec41 0b10 	vmov	d0, r0, r1
   b4594:	f001 fe58 	bl	b6248 <sin>
   b4598:	4b41      	ldr	r3, [pc, #260]	; (b46a0 <loop+0x1f0>)
   b459a:	ec51 0b10 	vmov	r0, r1, d0
   b459e:	2200      	movs	r2, #0
   b45a0:	f003 f9c8 	bl	b7934 <__aeabi_dmul>
   b45a4:	2200      	movs	r2, #0
   b45a6:	4b3e      	ldr	r3, [pc, #248]	; (b46a0 <loop+0x1f0>)
   b45a8:	f003 f80e 	bl	b75c8 <__adddf3>
   b45ac:	f003 fc84 	bl	b7eb8 <__aeabi_d2f>
   b45b0:	ee07 0a90 	vmov	s15, r0
   b45b4:	4b3b      	ldr	r3, [pc, #236]	; (b46a4 <loop+0x1f4>)
    myservo.write(signal); //send via my servo
   b45b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    signal = AMP * sin(2 * M_PI * freq * t) + OFFSET; //sine wave
   b45ba:	6018      	str	r0, [r3, #0]
    myservo.write(signal); //send via my servo
   b45bc:	ee17 1a90 	vmov	r1, s15
   b45c0:	4839      	ldr	r0, [pc, #228]	; (b46a8 <loop+0x1f8>)
   b45c2:	f000 fdc6 	bl	b5152 <_ZN5Servo5writeEi>
   b45c6:	f000 f8d5 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
    t = millis() / 1000.0; //time in milliseconds
   b45ca:	f003 f939 	bl	b7840 <__aeabi_ui2d>
   b45ce:	4b37      	ldr	r3, [pc, #220]	; (b46ac <loop+0x1fc>)
   b45d0:	2200      	movs	r2, #0
   b45d2:	f003 fad9 	bl	b7b88 <__aeabi_ddiv>
   b45d6:	f003 fc6f 	bl	b7eb8 <__aeabi_d2f>
   b45da:	6030      	str	r0, [r6, #0]
  }
  val = analogRead(waterSens);
   b45dc:	2010      	movs	r0, #16
   b45de:	f001 fc87 	bl	b5ef0 <analogRead>
   b45e2:	4c33      	ldr	r4, [pc, #204]	; (b46b0 <loop+0x200>)
  if (val > 150){// read the water sensor
   b45e4:	2896      	cmp	r0, #150	; 0x96
  val = analogRead(waterSens);
   b45e6:	6020      	str	r0, [r4, #0]
  if (val > 150){// read the water sensor
   b45e8:	dd3b      	ble.n	b4662 <loop+0x1b2>
  Serial.printf("Water level value = %d\n", val); // print the water level value to Serial
   b45ea:	f001 facd 	bl	b5b88 <_Z16_fetch_usbserialv>
   b45ee:	6822      	ldr	r2, [r4, #0]
digitalWrite(relay, HIGH);   // Turn the relay on (HIGH is the voltage level = 1)
   b45f0:	4c30      	ldr	r4, [pc, #192]	; (b46b4 <loop+0x204>)
  Serial.printf("Water level value = %d\n", val); // print the water level value to Serial
   b45f2:	4931      	ldr	r1, [pc, #196]	; (b46b8 <loop+0x208>)
   b45f4:	f7ff fd70 	bl	b40d8 <_ZN5Print6printfEPKcz>
digitalWrite(relay, HIGH);   // Turn the relay on (HIGH is the voltage level = 1)
   b45f8:	8820      	ldrh	r0, [r4, #0]
   b45fa:	2101      	movs	r1, #1
   b45fc:	f001 fc5f 	bl	b5ebe <digitalWrite>
delay(5000);                 // Stay ON for 5 seconds
   b4600:	f241 3088 	movw	r0, #5000	; 0x1388
   b4604:	f000 fb1e 	bl	b4c44 <delay>
digitalWrite(relay, LOW);    // Turn the relay off by making the voltage LOW = 0
   b4608:	8820      	ldrh	r0, [r4, #0]
   b460a:	2100      	movs	r1, #0
   b460c:	f001 fc57 	bl	b5ebe <digitalWrite>
delay(3000);                 // Stay OFF for 30 seconds
   b4610:	f640 30b8 	movw	r0, #3000	; 0xbb8
}
   b4614:	b002      	add	sp, #8
   b4616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
delay(3000);                 // Stay OFF for 30 seconds
   b461a:	f000 bb13 	b.w	b4c44 <delay>
   setHue(BULB5,false,HueRed,255,255);
   b461e:	25ff      	movs	r5, #255	; 0xff
   b4620:	9500      	str	r5, [sp, #0]
   b4622:	6822      	ldr	r2, [r4, #0]
   b4624:	462b      	mov	r3, r5
   b4626:	2100      	movs	r1, #0
   b4628:	2005      	movs	r0, #5
   b462a:	f7ff fd87 	bl	b413c <_Z6setHueibiii>
   setHue(BULB4,false,HueRed,255,255);
   b462e:	9500      	str	r5, [sp, #0]
   b4630:	6822      	ldr	r2, [r4, #0]
   b4632:	462b      	mov	r3, r5
   b4634:	2100      	movs	r1, #0
   b4636:	2004      	movs	r0, #4
   b4638:	f7ff fd80 	bl	b413c <_Z6setHueibiii>
   setHue(BULB3,false,HueRed,255,255);
   b463c:	9500      	str	r5, [sp, #0]
   b463e:	6822      	ldr	r2, [r4, #0]
   b4640:	462b      	mov	r3, r5
   b4642:	2100      	movs	r1, #0
   b4644:	2003      	movs	r0, #3
   b4646:	f7ff fd79 	bl	b413c <_Z6setHueibiii>
   setHue(BULB2,false,HueRed,255,255);
   b464a:	9500      	str	r5, [sp, #0]
   b464c:	6822      	ldr	r2, [r4, #0]
   b464e:	462b      	mov	r3, r5
   b4650:	2100      	movs	r1, #0
   b4652:	2002      	movs	r0, #2
   b4654:	f7ff fd72 	bl	b413c <_Z6setHueibiii>
  setHue(BULB1,false,HueRed,255,255);
   b4658:	9500      	str	r5, [sp, #0]
   b465a:	6822      	ldr	r2, [r4, #0]
   b465c:	462b      	mov	r3, r5
   b465e:	2100      	movs	r1, #0
   b4660:	e761      	b.n	b4526 <loop+0x76>
   b4662:	b002      	add	sp, #8
   b4664:	bd70      	pop	{r4, r5, r6, pc}
   b4666:	bf00      	nop
   b4668:	54442d18 	.word	0x54442d18
   b466c:	401921fb 	.word	0x401921fb
   b4670:	2003e588 	.word	0x2003e588
   b4674:	2003e67c 	.word	0x2003e67c
   b4678:	2003e638 	.word	0x2003e638
   b467c:	2003e690 	.word	0x2003e690
   b4680:	2003e6ac 	.word	0x2003e6ac
   b4684:	2003e590 	.word	0x2003e590
   b4688:	000b81e5 	.word	0x000b81e5
   b468c:	2003e6a4 	.word	0x2003e6a4
   b4690:	2003e678 	.word	0x2003e678
   b4694:	000b81f0 	.word	0x000b81f0
   b4698:	2003e584 	.word	0x2003e584
   b469c:	2003e6b0 	.word	0x2003e6b0
   b46a0:	40568000 	.word	0x40568000
   b46a4:	2003e6a8 	.word	0x2003e6a8
   b46a8:	2003e694 	.word	0x2003e694
   b46ac:	408f4000 	.word	0x408f4000
   b46b0:	2003e6b4 	.word	0x2003e6b4
   b46b4:	2003e58c 	.word	0x2003e58c
   b46b8:	000b8218 	.word	0x000b8218

000b46bc <_GLOBAL__sub_I_hueOn>:
   b46bc:	b508      	push	{r3, lr}
String hueCmd;  // Hue command
   b46be:	4917      	ldr	r1, [pc, #92]	; (b471c <_GLOBAL__sub_I_hueOn+0x60>)
   b46c0:	4817      	ldr	r0, [pc, #92]	; (b4720 <_GLOBAL__sub_I_hueOn+0x64>)
   b46c2:	f000 fe2c 	bl	b531e <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b46c6:	4a17      	ldr	r2, [pc, #92]	; (b4724 <_GLOBAL__sub_I_hueOn+0x68>)
   b46c8:	4b17      	ldr	r3, [pc, #92]	; (b4728 <_GLOBAL__sub_I_hueOn+0x6c>)
   b46ca:	6812      	ldr	r2, [r2, #0]
   b46cc:	601a      	str	r2, [r3, #0]
   b46ce:	4a17      	ldr	r2, [pc, #92]	; (b472c <_GLOBAL__sub_I_hueOn+0x70>)
TCPClient HueClient;
   b46d0:	4817      	ldr	r0, [pc, #92]	; (b4730 <_GLOBAL__sub_I_hueOn+0x74>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b46d2:	6812      	ldr	r2, [r2, #0]
   b46d4:	605a      	str	r2, [r3, #4]
   b46d6:	4a17      	ldr	r2, [pc, #92]	; (b4734 <_GLOBAL__sub_I_hueOn+0x78>)
   b46d8:	6812      	ldr	r2, [r2, #0]
   b46da:	609a      	str	r2, [r3, #8]
   b46dc:	4a16      	ldr	r2, [pc, #88]	; (b4738 <_GLOBAL__sub_I_hueOn+0x7c>)
   b46de:	6812      	ldr	r2, [r2, #0]
   b46e0:	60da      	str	r2, [r3, #12]
   b46e2:	4a16      	ldr	r2, [pc, #88]	; (b473c <_GLOBAL__sub_I_hueOn+0x80>)
   b46e4:	6812      	ldr	r2, [r2, #0]
   b46e6:	611a      	str	r2, [r3, #16]
   b46e8:	4a15      	ldr	r2, [pc, #84]	; (b4740 <_GLOBAL__sub_I_hueOn+0x84>)
   b46ea:	6812      	ldr	r2, [r2, #0]
   b46ec:	615a      	str	r2, [r3, #20]
   b46ee:	4a15      	ldr	r2, [pc, #84]	; (b4744 <_GLOBAL__sub_I_hueOn+0x88>)
   b46f0:	6812      	ldr	r2, [r2, #0]
   b46f2:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b46f4:	f001 f976 	bl	b59e4 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b46f8:	4813      	ldr	r0, [pc, #76]	; (b4748 <_GLOBAL__sub_I_hueOn+0x8c>)
   b46fa:	f001 f973 	bl	b59e4 <_ZN9TCPClientC1Ev>
Servo myservo; // create servo object to control a servo
   b46fe:	4813      	ldr	r0, [pc, #76]	; (b474c <_GLOBAL__sub_I_hueOn+0x90>)
   b4700:	f000 fd50 	bl	b51a4 <_ZN5ServoC1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b4704:	4b12      	ldr	r3, [pc, #72]	; (b4750 <_GLOBAL__sub_I_hueOn+0x94>)
   b4706:	2200      	movs	r2, #0
   b4708:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b470c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4710:	609a      	str	r2, [r3, #8]
   b4712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b4716:	2002      	movs	r0, #2
   b4718:	f000 b9b4 	b.w	b4a84 <set_system_mode>
   b471c:	000b8217 	.word	0x000b8217
   b4720:	2003e680 	.word	0x2003e680
   b4724:	2003e638 	.word	0x2003e638
   b4728:	2003e61c 	.word	0x2003e61c
   b472c:	2003e578 	.word	0x2003e578
   b4730:	2003e600 	.word	0x2003e600
   b4734:	2003e580 	.word	0x2003e580
   b4738:	2003e570 	.word	0x2003e570
   b473c:	2003e56c 	.word	0x2003e56c
   b4740:	2003e574 	.word	0x2003e574
   b4744:	2003e57c 	.word	0x2003e57c
   b4748:	2003e648 	.word	0x2003e648
   b474c:	2003e694 	.word	0x2003e694
   b4750:	2003e63c 	.word	0x2003e63c

000b4754 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <os_mutex_recursive_create+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030248 	.word	0x00030248

000b4764 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <HAL_RNG_GetRandomNumber+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	685b      	ldr	r3, [r3, #4]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030218 	.word	0x00030218

000b4774 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	695b      	ldr	r3, [r3, #20]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	00030218 	.word	0x00030218

000b4784 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_timer_millis+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	00030218 	.word	0x00030218

000b4794 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <HAL_Validate_Pin_Function+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	685b      	ldr	r3, [r3, #4]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003022c 	.word	0x0003022c

000b47a4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <HAL_Pin_Mode+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	689b      	ldr	r3, [r3, #8]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003022c 	.word	0x0003022c

000b47b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <HAL_Get_Pin_Mode+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	68db      	ldr	r3, [r3, #12]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003022c 	.word	0x0003022c

000b47c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <HAL_GPIO_Write+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	691b      	ldr	r3, [r3, #16]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003022c 	.word	0x0003022c

000b47d4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <hal_adc_read+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003022c 	.word	0x0003022c

000b47e4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <HAL_Pulse_In+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003022c 	.word	0x0003022c

000b47f4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_i2c_write+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6a1b      	ldr	r3, [r3, #32]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030228 	.word	0x00030228

000b4804 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_i2c_available+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030228 	.word	0x00030228

000b4814 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_i2c_read+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030228 	.word	0x00030228

000b4824 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <hal_i2c_peek+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030228 	.word	0x00030228

000b4834 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <hal_i2c_flush+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030228 	.word	0x00030228

000b4844 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <hal_i2c_is_enabled+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030228 	.word	0x00030228

000b4854 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <hal_i2c_init+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030228 	.word	0x00030228

000b4864 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <if_index_to_name+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	695b      	ldr	r3, [r3, #20]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	0003026c 	.word	0x0003026c

000b4874 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <inet_inet_ntop+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	695b      	ldr	r3, [r3, #20]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030264 	.word	0x00030264

000b4884 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <inet_htonl+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6a1b      	ldr	r3, [r3, #32]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030264 	.word	0x00030264

000b4894 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <inet_htons+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030264 	.word	0x00030264

000b48a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <netdb_freeaddrinfo+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	689b      	ldr	r3, [r3, #8]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030268 	.word	0x00030268

000b48b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <netdb_getaddrinfo+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	68db      	ldr	r3, [r3, #12]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030268 	.word	0x00030268

000b48c4 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_Servo_Attach+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	691b      	ldr	r3, [r3, #16]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030224 	.word	0x00030224

000b48d4 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <HAL_Servo_Detach+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	695b      	ldr	r3, [r3, #20]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030224 	.word	0x00030224

000b48e4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <HAL_Servo_Write_Pulse_Width+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	699b      	ldr	r3, [r3, #24]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030224 	.word	0x00030224

000b48f4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <sock_setsockopt+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	699b      	ldr	r3, [r3, #24]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030238 	.word	0x00030238

000b4904 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <sock_close+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	69db      	ldr	r3, [r3, #28]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030238 	.word	0x00030238

000b4914 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <sock_connect+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	6a1b      	ldr	r3, [r3, #32]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030238 	.word	0x00030238

000b4924 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <sock_recv+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030238 	.word	0x00030238

000b4934 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <sock_send+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030238 	.word	0x00030238

000b4944 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <sock_socket+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030238 	.word	0x00030238

000b4954 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <hal_spi_init+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	69db      	ldr	r3, [r3, #28]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030230 	.word	0x00030230

000b4964 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <hal_spi_is_enabled+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	6a1b      	ldr	r3, [r3, #32]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030230 	.word	0x00030230

000b4974 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <hal_usart_write+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	68db      	ldr	r3, [r3, #12]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	0003023c 	.word	0x0003023c

000b4984 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <hal_usart_available+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	691b      	ldr	r3, [r3, #16]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	0003023c 	.word	0x0003023c

000b4994 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <hal_usart_read+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	695b      	ldr	r3, [r3, #20]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	0003023c 	.word	0x0003023c

000b49a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <hal_usart_peek+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	699b      	ldr	r3, [r3, #24]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	0003023c 	.word	0x0003023c

000b49b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <hal_usart_flush+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	69db      	ldr	r3, [r3, #28]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	0003023c 	.word	0x0003023c

000b49c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <hal_usart_is_enabled+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	6a1b      	ldr	r3, [r3, #32]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	0003023c 	.word	0x0003023c

000b49d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <hal_usart_available_data_for_write+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	0003023c 	.word	0x0003023c

000b49e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <hal_usart_init_ex+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	0003023c 	.word	0x0003023c

000b49f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <HAL_USB_USART_Init+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	681b      	ldr	r3, [r3, #0]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	0003024c 	.word	0x0003024c

000b4a04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <HAL_USB_USART_Begin+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	685b      	ldr	r3, [r3, #4]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	0003024c 	.word	0x0003024c

000b4a14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <HAL_USB_USART_Available_Data+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	691b      	ldr	r3, [r3, #16]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	0003024c 	.word	0x0003024c

000b4a24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	695b      	ldr	r3, [r3, #20]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	0003024c 	.word	0x0003024c

000b4a34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <HAL_USB_USART_Receive_Data+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	699b      	ldr	r3, [r3, #24]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	0003024c 	.word	0x0003024c

000b4a44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <HAL_USB_USART_Send_Data+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	69db      	ldr	r3, [r3, #28]
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	0003024c 	.word	0x0003024c

000b4a54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <HAL_USB_USART_Flush_Data+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6a1b      	ldr	r3, [r3, #32]
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	0003024c 	.word	0x0003024c

000b4a64 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <HAL_USB_USART_Is_Connected+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	0003024c 	.word	0x0003024c

000b4a74 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <log_message+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030260 	.word	0x00030260

000b4a84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <set_system_mode+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	685b      	ldr	r3, [r3, #4]
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030220 	.word	0x00030220

000b4a94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <system_delay_ms+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	695b      	ldr	r3, [r3, #20]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030220 	.word	0x00030220

000b4aa4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b03      	ldr	r3, [pc, #12]	; (b4ab4 <system_ctrl_set_app_request_handler+0x10>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4aae:	9301      	str	r3, [sp, #4]
   b4ab0:	bd08      	pop	{r3, pc}
   b4ab2:	0000      	.short	0x0000
   b4ab4:	00030220 	.word	0x00030220

000b4ab8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b03      	ldr	r3, [pc, #12]	; (b4ac8 <system_ctrl_set_result+0x10>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ac2:	9301      	str	r3, [sp, #4]
   b4ac4:	bd08      	pop	{r3, pc}
   b4ac6:	0000      	.short	0x0000
   b4ac8:	00030220 	.word	0x00030220

000b4acc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <spark_process+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	689b      	ldr	r3, [r3, #8]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030244 	.word	0x00030244

000b4adc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	00030244 	.word	0x00030244

000b4aec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <network_connect+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	685b      	ldr	r3, [r3, #4]
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	00030240 	.word	0x00030240

000b4afc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <network_connecting+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	689b      	ldr	r3, [r3, #8]
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	00030240 	.word	0x00030240

000b4b0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <network_disconnect+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	68db      	ldr	r3, [r3, #12]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	00030240 	.word	0x00030240

000b4b1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <network_ready+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	691b      	ldr	r3, [r3, #16]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030240 	.word	0x00030240

000b4b2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <network_on+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	695b      	ldr	r3, [r3, #20]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	00030240 	.word	0x00030240

000b4b3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <network_off+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	699b      	ldr	r3, [r3, #24]
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	00030240 	.word	0x00030240

000b4b4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <network_listen+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	69db      	ldr	r3, [r3, #28]
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030240 	.word	0x00030240

000b4b5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b02      	ldr	r3, [pc, #8]	; (b4b68 <network_listening+0xc>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	6a1b      	ldr	r3, [r3, #32]
   b4b64:	9301      	str	r3, [sp, #4]
   b4b66:	bd08      	pop	{r3, pc}
   b4b68:	00030240 	.word	0x00030240

000b4b6c <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b4b6c:	b508      	push	{r3, lr}
   b4b6e:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <network_set_credentials+0xc>)
   b4b70:	681b      	ldr	r3, [r3, #0]
   b4b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b74:	9301      	str	r3, [sp, #4]
   b4b76:	bd08      	pop	{r3, pc}
   b4b78:	00030240 	.word	0x00030240

000b4b7c <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4b7c:	b508      	push	{r3, lr}
   b4b7e:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <network_set_listen_timeout+0xc>)
   b4b80:	681b      	ldr	r3, [r3, #0]
   b4b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b84:	9301      	str	r3, [sp, #4]
   b4b86:	bd08      	pop	{r3, pc}
   b4b88:	00030240 	.word	0x00030240

000b4b8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4b8c:	b508      	push	{r3, lr}
   b4b8e:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <network_get_listen_timeout+0xc>)
   b4b90:	681b      	ldr	r3, [r3, #0]
   b4b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b94:	9301      	str	r3, [sp, #4]
   b4b96:	bd08      	pop	{r3, pc}
   b4b98:	00030240 	.word	0x00030240

000b4b9c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4b9c:	b508      	push	{r3, lr}
   b4b9e:	4b02      	ldr	r3, [pc, #8]	; (b4ba8 <network_is_on+0xc>)
   b4ba0:	681b      	ldr	r3, [r3, #0]
   b4ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ba4:	9301      	str	r3, [sp, #4]
   b4ba6:	bd08      	pop	{r3, pc}
   b4ba8:	00030240 	.word	0x00030240

000b4bac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4bac:	b508      	push	{r3, lr}
   b4bae:	4b02      	ldr	r3, [pc, #8]	; (b4bb8 <network_is_off+0xc>)
   b4bb0:	681b      	ldr	r3, [r3, #0]
   b4bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bb4:	9301      	str	r3, [sp, #4]
   b4bb6:	bd08      	pop	{r3, pc}
   b4bb8:	00030240 	.word	0x00030240

000b4bbc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4bbc:	b508      	push	{r3, lr}
   b4bbe:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <malloc+0xc>)
   b4bc0:	681b      	ldr	r3, [r3, #0]
   b4bc2:	681b      	ldr	r3, [r3, #0]
   b4bc4:	9301      	str	r3, [sp, #4]
   b4bc6:	bd08      	pop	{r3, pc}
   b4bc8:	0003021c 	.word	0x0003021c

000b4bcc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4bcc:	b508      	push	{r3, lr}
   b4bce:	4b02      	ldr	r3, [pc, #8]	; (b4bd8 <free+0xc>)
   b4bd0:	681b      	ldr	r3, [r3, #0]
   b4bd2:	685b      	ldr	r3, [r3, #4]
   b4bd4:	9301      	str	r3, [sp, #4]
   b4bd6:	bd08      	pop	{r3, pc}
   b4bd8:	0003021c 	.word	0x0003021c

000b4bdc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4bdc:	b508      	push	{r3, lr}
   b4bde:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <realloc+0xc>)
   b4be0:	681b      	ldr	r3, [r3, #0]
   b4be2:	689b      	ldr	r3, [r3, #8]
   b4be4:	9301      	str	r3, [sp, #4]
   b4be6:	bd08      	pop	{r3, pc}
   b4be8:	0003021c 	.word	0x0003021c

000b4bec <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4bec:	b508      	push	{r3, lr}
   b4bee:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <vsnprintf+0xc>)
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4bf4:	9301      	str	r3, [sp, #4]
   b4bf6:	bd08      	pop	{r3, pc}
   b4bf8:	0003021c 	.word	0x0003021c

000b4bfc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4bfc:	b508      	push	{r3, lr}
   b4bfe:	4b02      	ldr	r3, [pc, #8]	; (b4c08 <__errno+0xc>)
   b4c00:	681b      	ldr	r3, [r3, #0]
   b4c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c04:	9301      	str	r3, [sp, #4]
   b4c06:	bd08      	pop	{r3, pc}
   b4c08:	0003021c 	.word	0x0003021c

000b4c0c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <__assert_func+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	0003021c 	.word	0x0003021c

000b4c1c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <newlib_impure_ptr_callback+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	0003021c 	.word	0x0003021c

000b4c2c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b4c2c:	428a      	cmp	r2, r1
{
   b4c2e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b4c30:	d007      	beq.n	b4c42 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4c32:	1a44      	subs	r4, r0, r1
   b4c34:	9802      	ldr	r0, [sp, #8]
   b4c36:	1ac0      	subs	r0, r0, r3
   b4c38:	4344      	muls	r4, r0
   b4c3a:	1a50      	subs	r0, r2, r1
   b4c3c:	fb94 f0f0 	sdiv	r0, r4, r0
   b4c40:	4418      	add	r0, r3
}
   b4c42:	bd10      	pop	{r4, pc}

000b4c44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4c44:	2100      	movs	r1, #0
   b4c46:	f7ff bf25 	b.w	b4a94 <system_delay_ms>
	...

000b4c4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4c4c:	4802      	ldr	r0, [pc, #8]	; (b4c58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4c4e:	2300      	movs	r3, #0
   b4c50:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4c52:	f7ff bd7f 	b.w	b4754 <os_mutex_recursive_create>
   b4c56:	bf00      	nop
   b4c58:	2003e6b8 	.word	0x2003e6b8

000b4c5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c5c:	2200      	movs	r2, #0
   b4c5e:	6840      	ldr	r0, [r0, #4]
   b4c60:	4611      	mov	r1, r2
   b4c62:	f7ff bf7b 	b.w	b4b5c <network_listening>

000b4c66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c66:	2200      	movs	r2, #0
   b4c68:	6840      	ldr	r0, [r0, #4]
   b4c6a:	4611      	mov	r1, r2
   b4c6c:	f7ff bf8e 	b.w	b4b8c <network_get_listen_timeout>

000b4c70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c70:	6840      	ldr	r0, [r0, #4]
   b4c72:	2200      	movs	r2, #0
   b4c74:	f7ff bf82 	b.w	b4b7c <network_set_listen_timeout>

000b4c78 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c78:	6840      	ldr	r0, [r0, #4]
   b4c7a:	2200      	movs	r2, #0
   b4c7c:	f081 0101 	eor.w	r1, r1, #1
   b4c80:	f7ff bf64 	b.w	b4b4c <network_listen>

000b4c84 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c84:	2300      	movs	r3, #0
   b4c86:	6840      	ldr	r0, [r0, #4]
   b4c88:	461a      	mov	r2, r3
   b4c8a:	4619      	mov	r1, r3
   b4c8c:	f7ff bf56 	b.w	b4b3c <network_off>

000b4c90 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c90:	2300      	movs	r3, #0
   b4c92:	6840      	ldr	r0, [r0, #4]
   b4c94:	461a      	mov	r2, r3
   b4c96:	4619      	mov	r1, r3
   b4c98:	f7ff bf48 	b.w	b4b2c <network_on>

000b4c9c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4c9c:	2200      	movs	r2, #0
   b4c9e:	6840      	ldr	r0, [r0, #4]
   b4ca0:	4611      	mov	r1, r2
   b4ca2:	f7ff bf3b 	b.w	b4b1c <network_ready>

000b4ca6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4ca6:	2200      	movs	r2, #0
   b4ca8:	6840      	ldr	r0, [r0, #4]
   b4caa:	4611      	mov	r1, r2
   b4cac:	f7ff bf26 	b.w	b4afc <network_connecting>

000b4cb0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cb0:	6840      	ldr	r0, [r0, #4]
   b4cb2:	2200      	movs	r2, #0
   b4cb4:	2102      	movs	r1, #2
   b4cb6:	f7ff bf29 	b.w	b4b0c <network_disconnect>

000b4cba <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cba:	2300      	movs	r3, #0
   b4cbc:	6840      	ldr	r0, [r0, #4]
   b4cbe:	461a      	mov	r2, r3
   b4cc0:	f7ff bf14 	b.w	b4aec <network_connect>

000b4cc4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4cc4:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4cc6:	2203      	movs	r2, #3
   b4cc8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4cca:	4a02      	ldr	r2, [pc, #8]	; (b4cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4ccc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4cce:	4770      	bx	lr
   b4cd0:	2003e6bc 	.word	0x2003e6bc
   b4cd4:	000b8278 	.word	0x000b8278

000b4cd8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4cd8:	4770      	bx	lr

000b4cda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cdc:	4606      	mov	r6, r0
   b4cde:	4615      	mov	r5, r2
   b4ce0:	460c      	mov	r4, r1
   b4ce2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4ce4:	42bc      	cmp	r4, r7
   b4ce6:	d006      	beq.n	b4cf6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4ce8:	6833      	ldr	r3, [r6, #0]
   b4cea:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4cee:	689b      	ldr	r3, [r3, #8]
   b4cf0:	4630      	mov	r0, r6
   b4cf2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4cf4:	e7f6      	b.n	b4ce4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4cf6:	4628      	mov	r0, r5
   b4cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4cfa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4cfa:	7c00      	ldrb	r0, [r0, #16]
   b4cfc:	2200      	movs	r2, #0
   b4cfe:	f7ff bd79 	b.w	b47f4 <hal_i2c_write>

000b4d02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4d02:	7c00      	ldrb	r0, [r0, #16]
   b4d04:	2100      	movs	r1, #0
   b4d06:	f7ff bd7d 	b.w	b4804 <hal_i2c_available>

000b4d0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4d0a:	7c00      	ldrb	r0, [r0, #16]
   b4d0c:	2100      	movs	r1, #0
   b4d0e:	f7ff bd81 	b.w	b4814 <hal_i2c_read>

000b4d12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4d12:	7c00      	ldrb	r0, [r0, #16]
   b4d14:	2100      	movs	r1, #0
   b4d16:	f7ff bd85 	b.w	b4824 <hal_i2c_peek>

000b4d1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4d1a:	7c00      	ldrb	r0, [r0, #16]
   b4d1c:	2100      	movs	r1, #0
   b4d1e:	f7ff bd89 	b.w	b4834 <hal_i2c_flush>

000b4d22 <_ZN7TwoWireD0Ev>:
   b4d22:	b510      	push	{r4, lr}
   b4d24:	2114      	movs	r1, #20
   b4d26:	4604      	mov	r4, r0
   b4d28:	f7ff f9b9 	bl	b409e <_ZdlPvj>
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	bd10      	pop	{r4, pc}

000b4d30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d30:	b538      	push	{r3, r4, r5, lr}
   b4d32:	4604      	mov	r4, r0
   b4d34:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d3a:	2200      	movs	r2, #0
   b4d3c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4d40:	4b09      	ldr	r3, [pc, #36]	; (b4d68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4d42:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d44:	4608      	mov	r0, r1
   b4d46:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4d48:	4629      	mov	r1, r5
   b4d4a:	f7ff fd83 	bl	b4854 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d4e:	30bf      	adds	r0, #191	; 0xbf
   b4d50:	d108      	bne.n	b4d64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4d52:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4d54:	07db      	lsls	r3, r3, #31
   b4d56:	d505      	bpl.n	b4d64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4d58:	6868      	ldr	r0, [r5, #4]
   b4d5a:	f7ff ff37 	bl	b4bcc <free>
    free(conf.tx_buffer);
   b4d5e:	68e8      	ldr	r0, [r5, #12]
   b4d60:	f7ff ff34 	bl	b4bcc <free>
}
   b4d64:	4620      	mov	r0, r4
   b4d66:	bd38      	pop	{r3, r4, r5, pc}
   b4d68:	000b82b4 	.word	0x000b82b4

000b4d6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4d6c:	4770      	bx	lr

000b4d6e <_ZN9IPAddressD0Ev>:
   b4d6e:	b510      	push	{r4, lr}
   b4d70:	2118      	movs	r1, #24
   b4d72:	4604      	mov	r4, r0
   b4d74:	f7ff f993 	bl	b409e <_ZdlPvj>
   b4d78:	4620      	mov	r0, r4
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4d7e:	7d03      	ldrb	r3, [r0, #20]
   b4d80:	2b06      	cmp	r3, #6
{
   b4d82:	b08d      	sub	sp, #52	; 0x34
   b4d84:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d86:	f100 0704 	add.w	r7, r0, #4
   b4d8a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4d8e:	d012      	beq.n	b4db6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4d90:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4d98:	220a      	movs	r2, #10
   b4d9a:	4630      	mov	r0, r6
   b4d9c:	f000 f973 	bl	b5086 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4da0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4da2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4da4:	d019      	beq.n	b4dda <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4da6:	2c00      	cmp	r4, #0
   b4da8:	d0f4      	beq.n	b4d94 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4daa:	212e      	movs	r1, #46	; 0x2e
   b4dac:	4630      	mov	r0, r6
   b4dae:	f000 f951 	bl	b5054 <_ZN5Print5printEc>
   b4db2:	4404      	add	r4, r0
   b4db4:	e7ee      	b.n	b4d94 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4db6:	232f      	movs	r3, #47	; 0x2f
   b4db8:	466a      	mov	r2, sp
   b4dba:	4639      	mov	r1, r7
   b4dbc:	200a      	movs	r0, #10
		buf[0] = 0;
   b4dbe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4dc2:	f7ff fd57 	bl	b4874 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4dc6:	4668      	mov	r0, sp
   b4dc8:	f003 f922 	bl	b8010 <strlen>
   b4dcc:	6833      	ldr	r3, [r6, #0]
   b4dce:	4602      	mov	r2, r0
   b4dd0:	68db      	ldr	r3, [r3, #12]
   b4dd2:	4669      	mov	r1, sp
   b4dd4:	4630      	mov	r0, r6
   b4dd6:	4798      	blx	r3
   b4dd8:	4604      	mov	r4, r0
    }
    return n;
}
   b4dda:	4620      	mov	r0, r4
   b4ddc:	b00d      	add	sp, #52	; 0x34
   b4dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4de0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4de0:	b510      	push	{r4, lr}
   b4de2:	4b05      	ldr	r3, [pc, #20]	; (b4df8 <_ZN9IPAddressC1Ev+0x18>)
   b4de4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4de6:	2211      	movs	r2, #17
   b4de8:	f840 3b04 	str.w	r3, [r0], #4
   b4dec:	2100      	movs	r1, #0
   b4dee:	f003 f8c7 	bl	b7f80 <memset>
}
   b4df2:	4620      	mov	r0, r4
   b4df4:	bd10      	pop	{r4, pc}
   b4df6:	bf00      	nop
   b4df8:	000b82dc 	.word	0x000b82dc

000b4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4dfc:	4603      	mov	r3, r0
   b4dfe:	4a07      	ldr	r2, [pc, #28]	; (b4e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4e00:	b510      	push	{r4, lr}
   b4e02:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4e06:	f101 0210 	add.w	r2, r1, #16
   b4e0a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4e0e:	f843 4b04 	str.w	r4, [r3], #4
   b4e12:	4291      	cmp	r1, r2
   b4e14:	d1f9      	bne.n	b4e0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4e16:	780a      	ldrb	r2, [r1, #0]
   b4e18:	701a      	strb	r2, [r3, #0]
}
   b4e1a:	bd10      	pop	{r4, pc}
   b4e1c:	000b82dc 	.word	0x000b82dc

000b4e20 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4e20:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4e22:	2b04      	cmp	r3, #4
   b4e24:	d104      	bne.n	b4e30 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4e26:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4e28:	3800      	subs	r0, #0
   b4e2a:	bf18      	it	ne
   b4e2c:	2001      	movne	r0, #1
   b4e2e:	4770      	bx	lr
    } else if (version() == 6) {
   b4e30:	2b06      	cmp	r3, #6
   b4e32:	d107      	bne.n	b4e44 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4e34:	6843      	ldr	r3, [r0, #4]
   b4e36:	b93b      	cbnz	r3, b4e48 <_ZNK9IPAddresscvbEv+0x28>
   b4e38:	6883      	ldr	r3, [r0, #8]
   b4e3a:	b92b      	cbnz	r3, b4e48 <_ZNK9IPAddresscvbEv+0x28>
   b4e3c:	68c3      	ldr	r3, [r0, #12]
   b4e3e:	b91b      	cbnz	r3, b4e48 <_ZNK9IPAddresscvbEv+0x28>
   b4e40:	6900      	ldr	r0, [r0, #16]
   b4e42:	e7f1      	b.n	b4e28 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4e44:	2000      	movs	r0, #0
   b4e46:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4e48:	2001      	movs	r0, #1
}
   b4e4a:	4770      	bx	lr

000b4e4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4e4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4e4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4e52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4e56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4e5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4e5e:	2304      	movs	r3, #4
   b4e60:	6041      	str	r1, [r0, #4]
   b4e62:	7503      	strb	r3, [r0, #20]
}
   b4e64:	bd10      	pop	{r4, pc}
	...

000b4e68 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4e68:	b507      	push	{r0, r1, r2, lr}
   b4e6a:	4b06      	ldr	r3, [pc, #24]	; (b4e84 <_ZN9IPAddressC1EPKh+0x1c>)
   b4e6c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4e6e:	78cb      	ldrb	r3, [r1, #3]
   b4e70:	9300      	str	r3, [sp, #0]
   b4e72:	788b      	ldrb	r3, [r1, #2]
   b4e74:	784a      	ldrb	r2, [r1, #1]
   b4e76:	7809      	ldrb	r1, [r1, #0]
   b4e78:	f7ff ffe8 	bl	b4e4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4e7c:	b003      	add	sp, #12
   b4e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e82:	bf00      	nop
   b4e84:	000b82dc 	.word	0x000b82dc

000b4e88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e88:	4b01      	ldr	r3, [pc, #4]	; (b4e90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e8a:	4a02      	ldr	r2, [pc, #8]	; (b4e94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e8e:	4770      	bx	lr
   b4e90:	2003e6c4 	.word	0x2003e6c4
   b4e94:	000b82e8 	.word	0x000b82e8

000b4e98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4e98:	2300      	movs	r3, #0
   b4e9a:	6840      	ldr	r0, [r0, #4]
   b4e9c:	461a      	mov	r2, r3
   b4e9e:	f7ff be25 	b.w	b4aec <network_connect>

000b4ea2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4ea2:	6840      	ldr	r0, [r0, #4]
   b4ea4:	2200      	movs	r2, #0
   b4ea6:	2102      	movs	r1, #2
   b4ea8:	f7ff be30 	b.w	b4b0c <network_disconnect>

000b4eac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4eac:	2200      	movs	r2, #0
   b4eae:	6840      	ldr	r0, [r0, #4]
   b4eb0:	4611      	mov	r1, r2
   b4eb2:	f7ff be23 	b.w	b4afc <network_connecting>

000b4eb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4eb6:	2200      	movs	r2, #0
   b4eb8:	6840      	ldr	r0, [r0, #4]
   b4eba:	4611      	mov	r1, r2
   b4ebc:	f7ff be2e 	b.w	b4b1c <network_ready>

000b4ec0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4ec0:	2300      	movs	r3, #0
   b4ec2:	6840      	ldr	r0, [r0, #4]
   b4ec4:	461a      	mov	r2, r3
   b4ec6:	4619      	mov	r1, r3
   b4ec8:	f7ff be30 	b.w	b4b2c <network_on>

000b4ecc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4ecc:	2300      	movs	r3, #0
   b4ece:	6840      	ldr	r0, [r0, #4]
   b4ed0:	461a      	mov	r2, r3
   b4ed2:	4619      	mov	r1, r3
   b4ed4:	f7ff be32 	b.w	b4b3c <network_off>

000b4ed8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4ed8:	6840      	ldr	r0, [r0, #4]
   b4eda:	2100      	movs	r1, #0
   b4edc:	f7ff be5e 	b.w	b4b9c <network_is_on>

000b4ee0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4ee0:	6840      	ldr	r0, [r0, #4]
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	f7ff be62 	b.w	b4bac <network_is_off>

000b4ee8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4ee8:	6840      	ldr	r0, [r0, #4]
   b4eea:	2200      	movs	r2, #0
   b4eec:	f081 0101 	eor.w	r1, r1, #1
   b4ef0:	f7ff be2c 	b.w	b4b4c <network_listen>

000b4ef4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4ef4:	6840      	ldr	r0, [r0, #4]
   b4ef6:	2200      	movs	r2, #0
   b4ef8:	f7ff be40 	b.w	b4b7c <network_set_listen_timeout>

000b4efc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4efc:	2200      	movs	r2, #0
   b4efe:	6840      	ldr	r0, [r0, #4]
   b4f00:	4611      	mov	r1, r2
   b4f02:	f7ff be43 	b.w	b4b8c <network_get_listen_timeout>

000b4f06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4f06:	2200      	movs	r2, #0
   b4f08:	6840      	ldr	r0, [r0, #4]
   b4f0a:	4611      	mov	r1, r2
   b4f0c:	f7ff be26 	b.w	b4b5c <network_listening>

000b4f10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f14:	b095      	sub	sp, #84	; 0x54
   b4f16:	4614      	mov	r4, r2
   b4f18:	460d      	mov	r5, r1
   b4f1a:	4607      	mov	r7, r0
    IPAddress addr;
   b4f1c:	f7ff ff60 	bl	b4de0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4f20:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4f22:	221c      	movs	r2, #28
   b4f24:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4f26:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4f28:	f003 f82a 	bl	b7f80 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4f2c:	2340      	movs	r3, #64	; 0x40
   b4f2e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4f30:	4620      	mov	r0, r4
   b4f32:	466b      	mov	r3, sp
   b4f34:	aa0c      	add	r2, sp, #48	; 0x30
   b4f36:	2100      	movs	r1, #0
   b4f38:	f7ff fcbc 	bl	b48b4 <netdb_getaddrinfo>
    if (!r) {
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	2800      	cmp	r0, #0
   b4f40:	d14b      	bne.n	b4fda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f42:	4602      	mov	r2, r0
   b4f44:	2101      	movs	r1, #1
   b4f46:	6868      	ldr	r0, [r5, #4]
   b4f48:	f7ff fde8 	bl	b4b1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4f4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f50:	4622      	mov	r2, r4
   b4f52:	6868      	ldr	r0, [r5, #4]
   b4f54:	f7ff fde2 	bl	b4b1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f58:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4f5a:	4681      	mov	r9, r0
        bool ok = false;
   b4f5c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f5e:	2e00      	cmp	r6, #0
   b4f60:	d03b      	beq.n	b4fda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4f62:	2900      	cmp	r1, #0
   b4f64:	d139      	bne.n	b4fda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4f66:	6873      	ldr	r3, [r6, #4]
   b4f68:	2b02      	cmp	r3, #2
   b4f6a:	d003      	beq.n	b4f74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4f6c:	2b0a      	cmp	r3, #10
   b4f6e:	d011      	beq.n	b4f94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4f70:	69f6      	ldr	r6, [r6, #28]
   b4f72:	e7f4      	b.n	b4f5e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4f74:	f1b8 0f00 	cmp.w	r8, #0
   b4f78:	d0fa      	beq.n	b4f70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4f7a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4f7c:	a806      	add	r0, sp, #24
   b4f7e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4f80:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4f82:	f7ff ff71 	bl	b4e68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f88:	1d3c      	adds	r4, r7, #4
   b4f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f8c:	682b      	ldr	r3, [r5, #0]
   b4f8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f90:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4f92:	e7ed      	b.n	b4f70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4f94:	f1b9 0f00 	cmp.w	r9, #0
   b4f98:	d0ea      	beq.n	b4f70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4f9a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4f9c:	2210      	movs	r2, #16
   b4f9e:	a801      	add	r0, sp, #4
   b4fa0:	f002 ffee 	bl	b7f80 <memset>
                    a.v = 6;
   b4fa4:	2306      	movs	r3, #6
   b4fa6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4faa:	ad01      	add	r5, sp, #4
   b4fac:	f104 0308 	add.w	r3, r4, #8
   b4fb0:	3418      	adds	r4, #24
   b4fb2:	6818      	ldr	r0, [r3, #0]
   b4fb4:	6859      	ldr	r1, [r3, #4]
   b4fb6:	462a      	mov	r2, r5
   b4fb8:	c203      	stmia	r2!, {r0, r1}
   b4fba:	3308      	adds	r3, #8
   b4fbc:	42a3      	cmp	r3, r4
   b4fbe:	4615      	mov	r5, r2
   b4fc0:	d1f7      	bne.n	b4fb2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4fc2:	a901      	add	r1, sp, #4
   b4fc4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4fc6:	ad07      	add	r5, sp, #28
   b4fc8:	f7ff ff18 	bl	b4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4fce:	1d3c      	adds	r4, r7, #4
   b4fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4fd2:	682b      	ldr	r3, [r5, #0]
   b4fd4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4fd6:	4649      	mov	r1, r9
   b4fd8:	e7ca      	b.n	b4f70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4fda:	9800      	ldr	r0, [sp, #0]
   b4fdc:	f7ff fc62 	bl	b48a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4fe0:	4638      	mov	r0, r7
   b4fe2:	b015      	add	sp, #84	; 0x54
   b4fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4fe8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4fe8:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4fea:	4a03      	ldr	r2, [pc, #12]	; (b4ff8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4fec:	601a      	str	r2, [r3, #0]
   b4fee:	2200      	movs	r2, #0
   b4ff0:	605a      	str	r2, [r3, #4]

} // spark
   b4ff2:	4770      	bx	lr
   b4ff4:	2003e6c8 	.word	0x2003e6c8
   b4ff8:	000b82f4 	.word	0x000b82f4

000b4ffc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ffe:	4606      	mov	r6, r0
   b5000:	460d      	mov	r5, r1
  size_t n = 0;
   b5002:	188f      	adds	r7, r1, r2
   b5004:	2400      	movs	r4, #0
  while (size--) {
   b5006:	42bd      	cmp	r5, r7
   b5008:	d00c      	beq.n	b5024 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b500a:	6833      	ldr	r3, [r6, #0]
   b500c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5010:	689b      	ldr	r3, [r3, #8]
   b5012:	4630      	mov	r0, r6
   b5014:	4798      	blx	r3
     if (chunk>=0)
   b5016:	1e03      	subs	r3, r0, #0
   b5018:	db01      	blt.n	b501e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b501a:	441c      	add	r4, r3
  while (size--) {
   b501c:	e7f3      	b.n	b5006 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b501e:	2c00      	cmp	r4, #0
   b5020:	bf08      	it	eq
   b5022:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5024:	4620      	mov	r0, r4
   b5026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5028 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5028:	b513      	push	{r0, r1, r4, lr}
   b502a:	4604      	mov	r4, r0
    }
   b502c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b502e:	b159      	cbz	r1, b5048 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5030:	9101      	str	r1, [sp, #4]
   b5032:	f002 ffed 	bl	b8010 <strlen>
   b5036:	6823      	ldr	r3, [r4, #0]
   b5038:	9901      	ldr	r1, [sp, #4]
   b503a:	68db      	ldr	r3, [r3, #12]
   b503c:	4602      	mov	r2, r0
   b503e:	4620      	mov	r0, r4
    }
   b5040:	b002      	add	sp, #8
   b5042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5046:	4718      	bx	r3
    }
   b5048:	b002      	add	sp, #8
   b504a:	bd10      	pop	{r4, pc}

000b504c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b504c:	b508      	push	{r3, lr}
  return write(str);
   b504e:	f7ff ffeb 	bl	b5028 <_ZN5Print5writeEPKc>
}
   b5052:	bd08      	pop	{r3, pc}

000b5054 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5054:	6803      	ldr	r3, [r0, #0]
   b5056:	689b      	ldr	r3, [r3, #8]
   b5058:	4718      	bx	r3

000b505a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b505a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b505c:	210d      	movs	r1, #13
{
   b505e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5060:	f7ff fff8 	bl	b5054 <_ZN5Print5printEc>
  n += print('\n');
   b5064:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5066:	4604      	mov	r4, r0
  n += print('\n');
   b5068:	4628      	mov	r0, r5
   b506a:	f7ff fff3 	bl	b5054 <_ZN5Print5printEc>
  return n;
}
   b506e:	4420      	add	r0, r4
   b5070:	bd38      	pop	{r3, r4, r5, pc}

000b5072 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5072:	b538      	push	{r3, r4, r5, lr}
   b5074:	4605      	mov	r5, r0
  return write(str);
   b5076:	f7ff ffd7 	bl	b5028 <_ZN5Print5writeEPKc>
   b507a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b507c:	4628      	mov	r0, r5
   b507e:	f7ff ffec 	bl	b505a <_ZN5Print7printlnEv>
  return n;
}
   b5082:	4420      	add	r0, r4
   b5084:	bd38      	pop	{r3, r4, r5, pc}

000b5086 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5086:	b530      	push	{r4, r5, lr}
   b5088:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b508a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b508c:	2a01      	cmp	r2, #1
  *str = '\0';
   b508e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5092:	bf98      	it	ls
   b5094:	220a      	movls	r2, #10
   b5096:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5098:	460d      	mov	r5, r1
   b509a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b509e:	fb01 5312 	mls	r3, r1, r2, r5
   b50a2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50a6:	2b09      	cmp	r3, #9
   b50a8:	bf94      	ite	ls
   b50aa:	3330      	addls	r3, #48	; 0x30
   b50ac:	3337      	addhi	r3, #55	; 0x37
   b50ae:	b2db      	uxtb	r3, r3
  } while(n);
   b50b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b50b6:	d9ef      	bls.n	b5098 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b50b8:	4621      	mov	r1, r4
   b50ba:	f7ff ffb5 	bl	b5028 <_ZN5Print5writeEPKc>
}
   b50be:	b00b      	add	sp, #44	; 0x2c
   b50c0:	bd30      	pop	{r4, r5, pc}

000b50c2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b50c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b50c6:	b086      	sub	sp, #24
   b50c8:	af00      	add	r7, sp, #0
   b50ca:	4605      	mov	r5, r0
   b50cc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b50ce:	1d38      	adds	r0, r7, #4
   b50d0:	2114      	movs	r1, #20
{
   b50d2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b50d4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b50d6:	f7ff fd89 	bl	b4bec <vsnprintf>

    if (n<bufsize)
   b50da:	2813      	cmp	r0, #19
   b50dc:	d80e      	bhi.n	b50fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b50de:	1d39      	adds	r1, r7, #4
   b50e0:	4628      	mov	r0, r5
   b50e2:	f7ff ffa1 	bl	b5028 <_ZN5Print5writeEPKc>
   b50e6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b50e8:	b11e      	cbz	r6, b50f2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b50ea:	4628      	mov	r0, r5
   b50ec:	f7ff ffb5 	bl	b505a <_ZN5Print7printlnEv>
   b50f0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b50f2:	4620      	mov	r0, r4
   b50f4:	3718      	adds	r7, #24
   b50f6:	46bd      	mov	sp, r7
   b50f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b50fc:	f100 0308 	add.w	r3, r0, #8
   b5100:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5104:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5106:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b510a:	4622      	mov	r2, r4
   b510c:	1c41      	adds	r1, r0, #1
   b510e:	683b      	ldr	r3, [r7, #0]
   b5110:	4668      	mov	r0, sp
   b5112:	f7ff fd6b 	bl	b4bec <vsnprintf>
  return write(str);
   b5116:	4669      	mov	r1, sp
   b5118:	4628      	mov	r0, r5
   b511a:	f7ff ff85 	bl	b5028 <_ZN5Print5writeEPKc>
   b511e:	4604      	mov	r4, r0
   b5120:	46c5      	mov	sp, r8
   b5122:	e7e1      	b.n	b50e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5124 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5124:	4b01      	ldr	r3, [pc, #4]	; (b512c <_GLOBAL__sub_I_RGB+0x8>)
   b5126:	2200      	movs	r2, #0
   b5128:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b512a:	4770      	bx	lr
   b512c:	2003e6d0 	.word	0x2003e6d0

000b5130 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b5130:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b5134:	1c53      	adds	r3, r2, #1
   b5136:	d00b      	beq.n	b5150 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b5138:	8843      	ldrh	r3, [r0, #2]
   b513a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b513c:	428b      	cmp	r3, r1
   b513e:	d803      	bhi.n	b5148 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b5140:	4288      	cmp	r0, r1
   b5142:	4603      	mov	r3, r0
   b5144:	bf28      	it	cs
   b5146:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b5148:	4619      	mov	r1, r3
   b514a:	b290      	uxth	r0, r2
   b514c:	f7ff bbca 	b.w	b48e4 <HAL_Servo_Write_Pulse_Width>
}
   b5150:	4770      	bx	lr

000b5152 <_ZN5Servo5writeEi>:
{
   b5152:	b513      	push	{r0, r1, r4, lr}
   b5154:	4604      	mov	r4, r0
   b5156:	4608      	mov	r0, r1
   b5158:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b515c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b5160:	4288      	cmp	r0, r1
   b5162:	db10      	blt.n	b5186 <_ZN5Servo5writeEi+0x34>
   b5164:	4290      	cmp	r0, r2
   b5166:	bfa8      	it	ge
   b5168:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b516a:	88a3      	ldrh	r3, [r4, #4]
   b516c:	9300      	str	r3, [sp, #0]
   b516e:	8863      	ldrh	r3, [r4, #2]
   b5170:	f7ff fd5c 	bl	b4c2c <_Z3mapiiiii>
   b5174:	68e1      	ldr	r1, [r4, #12]
   b5176:	4401      	add	r1, r0
   b5178:	b289      	uxth	r1, r1
   b517a:	4620      	mov	r0, r4
}
   b517c:	b002      	add	sp, #8
   b517e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b5182:	f7ff bfd5 	b.w	b5130 <_ZN5Servo17writeMicrosecondsEt>
   b5186:	4608      	mov	r0, r1
   b5188:	e7ef      	b.n	b516a <_ZN5Servo5writeEi+0x18>
	...

000b518c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b518c:	4a04      	ldr	r2, [pc, #16]	; (b51a0 <_ZN5Servo11resetFieldsEv+0x14>)
   b518e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b5192:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b5196:	23b4      	movs	r3, #180	; 0xb4
   b5198:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b519a:	2300      	movs	r3, #0
   b519c:	60c3      	str	r3, [r0, #12]
}
   b519e:	4770      	bx	lr
   b51a0:	0220ffff 	.word	0x0220ffff

000b51a4 <_ZN5ServoC1Ev>:
Servo::Servo()
   b51a4:	b508      	push	{r3, lr}
  this->resetFields();
   b51a6:	f7ff fff1 	bl	b518c <_ZN5Servo11resetFieldsEv>
}
   b51aa:	bd08      	pop	{r3, pc}

000b51ac <_ZN5Servo6detachEv>:
{
   b51ac:	b510      	push	{r4, lr}
   b51ae:	4604      	mov	r4, r0
   b51b0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b51b4:	1c43      	adds	r3, r0, #1
   b51b6:	d007      	beq.n	b51c8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b51b8:	b280      	uxth	r0, r0
   b51ba:	f7ff fb8b 	bl	b48d4 <HAL_Servo_Detach>
  this->resetFields();
   b51be:	4620      	mov	r0, r4
   b51c0:	f7ff ffe4 	bl	b518c <_ZN5Servo11resetFieldsEv>
  return true;
   b51c4:	2001      	movs	r0, #1
}
   b51c6:	bd10      	pop	{r4, pc}
    return false;
   b51c8:	2000      	movs	r0, #0
   b51ca:	e7fc      	b.n	b51c6 <_ZN5Servo6detachEv+0x1a>

000b51cc <_ZN5Servo6attachEtttss>:
{
   b51cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b51d0:	460d      	mov	r5, r1
   b51d2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b51d4:	2102      	movs	r1, #2
   b51d6:	4628      	mov	r0, r5
{
   b51d8:	4690      	mov	r8, r2
   b51da:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b51dc:	f7ff fada 	bl	b4794 <HAL_Validate_Pin_Function>
   b51e0:	2802      	cmp	r0, #2
   b51e2:	d003      	beq.n	b51ec <_ZN5Servo6attachEtttss+0x20>
    return false;
   b51e4:	2600      	movs	r6, #0
}
   b51e6:	4630      	mov	r0, r6
   b51e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b51ec:	4628      	mov	r0, r5
   b51ee:	f000 fe17 	bl	b5e20 <pinAvailable>
   b51f2:	4606      	mov	r6, r0
   b51f4:	2800      	cmp	r0, #0
   b51f6:	d0f5      	beq.n	b51e4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b51f8:	f9b4 3000 	ldrsh.w	r3, [r4]
   b51fc:	3301      	adds	r3, #1
   b51fe:	d002      	beq.n	b5206 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b5200:	4620      	mov	r0, r4
   b5202:	f7ff ffd3 	bl	b51ac <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b5206:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b520a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b520c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b5210:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b5212:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b5216:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b5218:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b521a:	4628      	mov	r0, r5
   b521c:	f7ff fb52 	bl	b48c4 <HAL_Servo_Attach>
  return true;
   b5220:	e7e1      	b.n	b51e6 <_ZN5Servo6attachEtttss+0x1a>

000b5222 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5222:	b510      	push	{r4, lr}
   b5224:	4604      	mov	r4, r0
   b5226:	4608      	mov	r0, r1
{
    _spi = spi;
   b5228:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b522a:	f7ff fb93 	bl	b4954 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b522e:	2300      	movs	r3, #0
   b5230:	6063      	str	r3, [r4, #4]
}
   b5232:	4620      	mov	r0, r4
   b5234:	bd10      	pop	{r4, pc}

000b5236 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5236:	b510      	push	{r4, lr}
   b5238:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b523a:	f7ff fa9b 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b523e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5240:	6823      	ldr	r3, [r4, #0]
   b5242:	4620      	mov	r0, r4
   b5244:	695b      	ldr	r3, [r3, #20]
   b5246:	4798      	blx	r3
    if (c >= 0) return c;
   b5248:	2800      	cmp	r0, #0
   b524a:	da08      	bge.n	b525e <_ZN6Stream9timedReadEv+0x28>
   b524c:	f7ff fa92 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5250:	68e3      	ldr	r3, [r4, #12]
   b5252:	1ac0      	subs	r0, r0, r3
   b5254:	68a3      	ldr	r3, [r4, #8]
   b5256:	4298      	cmp	r0, r3
   b5258:	d3f2      	bcc.n	b5240 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b525a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b525e:	bd10      	pop	{r4, pc}

000b5260 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b5260:	b538      	push	{r3, r4, r5, lr}
   b5262:	460d      	mov	r5, r1
  String ret;
   b5264:	4907      	ldr	r1, [pc, #28]	; (b5284 <_ZN6Stream10readStringEv+0x24>)
{
   b5266:	4604      	mov	r4, r0
  String ret;
   b5268:	f000 f859 	bl	b531e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b526c:	4628      	mov	r0, r5
   b526e:	f7ff ffe2 	bl	b5236 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b5272:	2800      	cmp	r0, #0
   b5274:	db04      	blt.n	b5280 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b5276:	b2c1      	uxtb	r1, r0
   b5278:	4620      	mov	r0, r4
   b527a:	f000 f8ba 	bl	b53f2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b527e:	e7f5      	b.n	b526c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b5280:	4620      	mov	r0, r4
   b5282:	bd38      	pop	{r3, r4, r5, pc}
   b5284:	000b8217 	.word	0x000b8217

000b5288 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5288:	b510      	push	{r4, lr}
   b528a:	4604      	mov	r4, r0
{
	free(buffer);
   b528c:	6800      	ldr	r0, [r0, #0]
   b528e:	f7ff fc9d 	bl	b4bcc <free>
}
   b5292:	4620      	mov	r0, r4
   b5294:	bd10      	pop	{r4, pc}

000b5296 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5296:	b510      	push	{r4, lr}
   b5298:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b529a:	6800      	ldr	r0, [r0, #0]
   b529c:	b108      	cbz	r0, b52a2 <_ZN6String10invalidateEv+0xc>
   b529e:	f7ff fc95 	bl	b4bcc <free>
	buffer = NULL;
   b52a2:	2300      	movs	r3, #0
	capacity = len = 0;
   b52a4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52a8:	6023      	str	r3, [r4, #0]
}
   b52aa:	bd10      	pop	{r4, pc}

000b52ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52ac:	b538      	push	{r3, r4, r5, lr}
   b52ae:	4604      	mov	r4, r0
   b52b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52b2:	6800      	ldr	r0, [r0, #0]
   b52b4:	3101      	adds	r1, #1
   b52b6:	f7ff fc91 	bl	b4bdc <realloc>
	if (newbuffer) {
   b52ba:	b110      	cbz	r0, b52c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52bc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52c0:	2001      	movs	r0, #1
	}
	return 0;
}
   b52c2:	bd38      	pop	{r3, r4, r5, pc}

000b52c4 <_ZN6String7reserveEj>:
{
   b52c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52c6:	6803      	ldr	r3, [r0, #0]
{
   b52c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52ca:	b123      	cbz	r3, b52d6 <_ZN6String7reserveEj+0x12>
   b52cc:	6843      	ldr	r3, [r0, #4]
   b52ce:	428b      	cmp	r3, r1
   b52d0:	d301      	bcc.n	b52d6 <_ZN6String7reserveEj+0x12>
   b52d2:	2001      	movs	r0, #1
}
   b52d4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b52d6:	4620      	mov	r0, r4
   b52d8:	f7ff ffe8 	bl	b52ac <_ZN6String12changeBufferEj>
   b52dc:	2800      	cmp	r0, #0
   b52de:	d0f9      	beq.n	b52d4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b52e0:	68a3      	ldr	r3, [r4, #8]
   b52e2:	2b00      	cmp	r3, #0
   b52e4:	d1f5      	bne.n	b52d2 <_ZN6String7reserveEj+0xe>
   b52e6:	6822      	ldr	r2, [r4, #0]
   b52e8:	7013      	strb	r3, [r2, #0]
   b52ea:	e7f2      	b.n	b52d2 <_ZN6String7reserveEj+0xe>

000b52ec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b52ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b52ee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b52f0:	4611      	mov	r1, r2
   b52f2:	9201      	str	r2, [sp, #4]
{
   b52f4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b52f6:	f7ff ffe5 	bl	b52c4 <_ZN6String7reserveEj>
   b52fa:	9a01      	ldr	r2, [sp, #4]
   b52fc:	b928      	cbnz	r0, b530a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b52fe:	4620      	mov	r0, r4
   b5300:	f7ff ffc9 	bl	b5296 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5304:	4620      	mov	r0, r4
   b5306:	b003      	add	sp, #12
   b5308:	bd30      	pop	{r4, r5, pc}
	len = length;
   b530a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b530c:	4629      	mov	r1, r5
   b530e:	6820      	ldr	r0, [r4, #0]
   b5310:	f002 fe28 	bl	b7f64 <memcpy>
	buffer[len] = 0;
   b5314:	6822      	ldr	r2, [r4, #0]
   b5316:	68a3      	ldr	r3, [r4, #8]
   b5318:	2100      	movs	r1, #0
   b531a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b531c:	e7f2      	b.n	b5304 <_ZN6String4copyEPKcj+0x18>

000b531e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b531e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5320:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5322:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5326:	4604      	mov	r4, r0
	len = 0;
   b5328:	6083      	str	r3, [r0, #8]
	flags = 0;
   b532a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b532c:	b141      	cbz	r1, b5340 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b532e:	4608      	mov	r0, r1
   b5330:	9101      	str	r1, [sp, #4]
   b5332:	f002 fe6d 	bl	b8010 <strlen>
   b5336:	9901      	ldr	r1, [sp, #4]
   b5338:	4602      	mov	r2, r0
   b533a:	4620      	mov	r0, r4
   b533c:	f7ff ffd6 	bl	b52ec <_ZN6String4copyEPKcj>
}
   b5340:	4620      	mov	r0, r4
   b5342:	b002      	add	sp, #8
   b5344:	bd10      	pop	{r4, pc}

000b5346 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5346:	4288      	cmp	r0, r1
{
   b5348:	b510      	push	{r4, lr}
   b534a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b534c:	d005      	beq.n	b535a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b534e:	680b      	ldr	r3, [r1, #0]
   b5350:	b12b      	cbz	r3, b535e <_ZN6StringaSERKS_+0x18>
   b5352:	688a      	ldr	r2, [r1, #8]
   b5354:	4619      	mov	r1, r3
   b5356:	f7ff ffc9 	bl	b52ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b535a:	4620      	mov	r0, r4
   b535c:	bd10      	pop	{r4, pc}
	else invalidate();
   b535e:	f7ff ff9a 	bl	b5296 <_ZN6String10invalidateEv>
   b5362:	e7fa      	b.n	b535a <_ZN6StringaSERKS_+0x14>

000b5364 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5364:	b510      	push	{r4, lr}
	buffer = NULL;
   b5366:	2300      	movs	r3, #0
String::String(const String &value)
   b5368:	4604      	mov	r4, r0
	capacity = 0;
   b536a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b536e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5370:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5372:	f7ff ffe8 	bl	b5346 <_ZN6StringaSERKS_>
}
   b5376:	4620      	mov	r0, r4
   b5378:	bd10      	pop	{r4, pc}

000b537a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b537a:	b513      	push	{r0, r1, r4, lr}
   b537c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b537e:	b159      	cbz	r1, b5398 <_ZN6StringaSEPKc+0x1e>
   b5380:	4608      	mov	r0, r1
   b5382:	9101      	str	r1, [sp, #4]
   b5384:	f002 fe44 	bl	b8010 <strlen>
   b5388:	9901      	ldr	r1, [sp, #4]
   b538a:	4602      	mov	r2, r0
   b538c:	4620      	mov	r0, r4
   b538e:	f7ff ffad 	bl	b52ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5392:	4620      	mov	r0, r4
   b5394:	b002      	add	sp, #8
   b5396:	bd10      	pop	{r4, pc}
	else invalidate();
   b5398:	f7ff ff7d 	bl	b5296 <_ZN6String10invalidateEv>
   b539c:	e7f9      	b.n	b5392 <_ZN6StringaSEPKc+0x18>

000b539e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b539e:	b510      	push	{r4, lr}
   b53a0:	4604      	mov	r4, r0
   b53a2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b53a4:	2300      	movs	r3, #0
	capacity = 0;
   b53a6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b53aa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b53ac:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b53ae:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b53b0:	a901      	add	r1, sp, #4
   b53b2:	f000 fc83 	bl	b5cbc <itoa>
	*this = buf;
   b53b6:	a901      	add	r1, sp, #4
   b53b8:	4620      	mov	r0, r4
   b53ba:	f7ff ffde 	bl	b537a <_ZN6StringaSEPKc>
}
   b53be:	4620      	mov	r0, r4
   b53c0:	b00a      	add	sp, #40	; 0x28
   b53c2:	bd10      	pop	{r4, pc}

000b53c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b53c4:	b570      	push	{r4, r5, r6, lr}
   b53c6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b53c8:	460e      	mov	r6, r1
   b53ca:	b909      	cbnz	r1, b53d0 <_ZN6String6concatEPKcj+0xc>
   b53cc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b53ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b53d0:	b16a      	cbz	r2, b53ee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b53d2:	6884      	ldr	r4, [r0, #8]
   b53d4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b53d6:	4621      	mov	r1, r4
   b53d8:	f7ff ff74 	bl	b52c4 <_ZN6String7reserveEj>
   b53dc:	2800      	cmp	r0, #0
   b53de:	d0f5      	beq.n	b53cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b53e0:	6828      	ldr	r0, [r5, #0]
   b53e2:	68ab      	ldr	r3, [r5, #8]
   b53e4:	4631      	mov	r1, r6
   b53e6:	4418      	add	r0, r3
   b53e8:	f002 fe0a 	bl	b8000 <strcpy>
	len = newlen;
   b53ec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b53ee:	2001      	movs	r0, #1
   b53f0:	e7ed      	b.n	b53ce <_ZN6String6concatEPKcj+0xa>

000b53f2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b53f2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b53f4:	2300      	movs	r3, #0
	buf[0] = c;
   b53f6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b53fa:	2201      	movs	r2, #1
   b53fc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b53fe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5402:	f7ff ffdf 	bl	b53c4 <_ZN6String6concatEPKcj>
}
   b5406:	b003      	add	sp, #12
   b5408:	f85d fb04 	ldr.w	pc, [sp], #4

000b540c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b540c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b540e:	688a      	ldr	r2, [r1, #8]
   b5410:	6809      	ldr	r1, [r1, #0]
{
   b5412:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5414:	f7ff ffd6 	bl	b53c4 <_ZN6String6concatEPKcj>
   b5418:	b910      	cbnz	r0, b5420 <_ZplRK15StringSumHelperRK6String+0x14>
   b541a:	4620      	mov	r0, r4
   b541c:	f7ff ff3b 	bl	b5296 <_ZN6String10invalidateEv>
	return a;
}
   b5420:	4620      	mov	r0, r4
   b5422:	bd10      	pop	{r4, pc}

000b5424 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5424:	b513      	push	{r0, r1, r4, lr}
   b5426:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5428:	b929      	cbnz	r1, b5436 <_ZplRK15StringSumHelperPKc+0x12>
   b542a:	4620      	mov	r0, r4
   b542c:	f7ff ff33 	bl	b5296 <_ZN6String10invalidateEv>
	return a;
}
   b5430:	4620      	mov	r0, r4
   b5432:	b002      	add	sp, #8
   b5434:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5436:	4608      	mov	r0, r1
   b5438:	9101      	str	r1, [sp, #4]
   b543a:	f002 fde9 	bl	b8010 <strlen>
   b543e:	9901      	ldr	r1, [sp, #4]
   b5440:	4602      	mov	r2, r0
   b5442:	4620      	mov	r0, r4
   b5444:	f7ff ffbe 	bl	b53c4 <_ZN6String6concatEPKcj>
   b5448:	2800      	cmp	r0, #0
   b544a:	d0ee      	beq.n	b542a <_ZplRK15StringSumHelperPKc+0x6>
   b544c:	e7f0      	b.n	b5430 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b5450 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5450:	4b05      	ldr	r3, [pc, #20]	; (b5468 <_GLOBAL__sub_I_System+0x18>)
   b5452:	2202      	movs	r2, #2
   b5454:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5456:	4b05      	ldr	r3, [pc, #20]	; (b546c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5458:	4a05      	ldr	r2, [pc, #20]	; (b5470 <_GLOBAL__sub_I_System+0x20>)
   b545a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b545c:	2000      	movs	r0, #0
   b545e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5462:	f7ff bb0f 	b.w	b4a84 <set_system_mode>
   b5466:	bf00      	nop
   b5468:	2003e6ec 	.word	0x2003e6ec
   b546c:	2003e6e0 	.word	0x2003e6e0
   b5470:	ffff0000 	.word	0xffff0000

000b5474 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5474:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5476:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5478:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b547c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b547e:	2201      	movs	r2, #1
   b5480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5484:	f10d 0107 	add.w	r1, sp, #7
   b5488:	47a0      	blx	r4
}
   b548a:	b002      	add	sp, #8
   b548c:	bd10      	pop	{r4, pc}

000b548e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b548e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5490:	6803      	ldr	r3, [r0, #0]
   b5492:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5498:	46a4      	mov	ip, r4
}
   b549a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b549e:	4760      	bx	ip

000b54a0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b54a0:	b513      	push	{r0, r1, r4, lr}
   b54a2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b54a4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b54a6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b54aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b54ac:	f10d 0107 	add.w	r1, sp, #7
   b54b0:	2201      	movs	r2, #1
   b54b2:	47a0      	blx	r4
}
   b54b4:	b002      	add	sp, #8
   b54b6:	bd10      	pop	{r4, pc}

000b54b8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b54b8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b54ba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b54c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b54c4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b54c6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54c8:	d008      	beq.n	b54dc <_ZN9TCPClient4readEv+0x24>
   b54ca:	6963      	ldr	r3, [r4, #20]
   b54cc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b54d0:	1c51      	adds	r1, r2, #1
   b54d2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b54d6:	4413      	add	r3, r2
   b54d8:	7918      	ldrb	r0, [r3, #4]
}
   b54da:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b54dc:	6803      	ldr	r3, [r0, #0]
   b54de:	691b      	ldr	r3, [r3, #16]
   b54e0:	4798      	blx	r3
   b54e2:	2800      	cmp	r0, #0
   b54e4:	d1f1      	bne.n	b54ca <_ZN9TCPClient4readEv+0x12>
   b54e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b54ea:	e7f6      	b.n	b54da <_ZN9TCPClient4readEv+0x22>

000b54ec <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b54ec:	4770      	bx	lr

000b54ee <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b54ee:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b54f0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b54f2:	43c0      	mvns	r0, r0
   b54f4:	0fc0      	lsrs	r0, r0, #31
   b54f6:	4770      	bx	lr

000b54f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b54f8:	4770      	bx	lr
	...

000b54fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b54fc:	4b06      	ldr	r3, [pc, #24]	; (b5518 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b54fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5500:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5502:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5506:	d005      	beq.n	b5514 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5508:	4608      	mov	r0, r1
   b550a:	f000 fd8b 	bl	b6024 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b550e:	2800      	cmp	r0, #0
   b5510:	bf08      	it	eq
   b5512:	2400      	moveq	r4, #0
      }
   b5514:	4620      	mov	r0, r4
   b5516:	bd10      	pop	{r4, pc}
   b5518:	000b8268 	.word	0x000b8268

000b551c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b551c:	b510      	push	{r4, lr}
   b551e:	21ac      	movs	r1, #172	; 0xac
   b5520:	4604      	mov	r4, r0
   b5522:	f7fe fdbc 	bl	b409e <_ZdlPvj>
   b5526:	4620      	mov	r0, r4
   b5528:	bd10      	pop	{r4, pc}

000b552a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b552a:	21ac      	movs	r1, #172	; 0xac
   b552c:	f7fe bdb7 	b.w	b409e <_ZdlPvj>

000b5530 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5534:	f04f 0800 	mov.w	r8, #0
   b5538:	b086      	sub	sp, #24
   b553a:	461c      	mov	r4, r3
   b553c:	f8c0 8004 	str.w	r8, [r0, #4]
   b5540:	4605      	mov	r5, r0
   b5542:	460e      	mov	r6, r1
   b5544:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5546:	4641      	mov	r1, r8
   b5548:	2210      	movs	r2, #16
   b554a:	a802      	add	r0, sp, #8
   b554c:	f002 fd18 	bl	b7f80 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5550:	1c63      	adds	r3, r4, #1
   b5552:	d009      	beq.n	b5568 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5558:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b555c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5560:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5564:	435c      	muls	r4, r3
   b5566:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5568:	6968      	ldr	r0, [r5, #20]
   b556a:	2310      	movs	r3, #16
   b556c:	9300      	str	r3, [sp, #0]
   b556e:	6800      	ldr	r0, [r0, #0]
   b5570:	ab02      	add	r3, sp, #8
   b5572:	f241 0205 	movw	r2, #4101	; 0x1005
   b5576:	f640 71ff 	movw	r1, #4095	; 0xfff
   b557a:	f7ff f9bb 	bl	b48f4 <sock_setsockopt>
    if (ret < 0) {
   b557e:	2800      	cmp	r0, #0
   b5580:	da07      	bge.n	b5592 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5582:	f7ff fb3b 	bl	b4bfc <__errno>
   b5586:	6803      	ldr	r3, [r0, #0]
   b5588:	606b      	str	r3, [r5, #4]
        return 0;
   b558a:	2000      	movs	r0, #0
}
   b558c:	b006      	add	sp, #24
   b558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5592:	6968      	ldr	r0, [r5, #20]
   b5594:	2300      	movs	r3, #0
   b5596:	6800      	ldr	r0, [r0, #0]
   b5598:	463a      	mov	r2, r7
   b559a:	4631      	mov	r1, r6
   b559c:	f7ff f9ca 	bl	b4934 <sock_send>
    if (ret < 0) {
   b55a0:	1e03      	subs	r3, r0, #0
   b55a2:	dbee      	blt.n	b5582 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b55a4:	4618      	mov	r0, r3
   b55a6:	e7f1      	b.n	b558c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b55a8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b55a8:	b530      	push	{r4, r5, lr}
   b55aa:	b087      	sub	sp, #28
   b55ac:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b55ae:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b55b0:	4668      	mov	r0, sp
   b55b2:	f7ff fc59 	bl	b4e68 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b55b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55b8:	3404      	adds	r4, #4
   b55ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55bc:	682b      	ldr	r3, [r5, #0]
   b55be:	7023      	strb	r3, [r4, #0]
    }
   b55c0:	b007      	add	sp, #28
   b55c2:	bd30      	pop	{r4, r5, pc}

000b55c4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b55c4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b55c6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b55c8:	4b05      	ldr	r3, [pc, #20]	; (b55e0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b55ca:	4604      	mov	r4, r0
   b55cc:	358c      	adds	r5, #140	; 0x8c
   b55ce:	f844 3b04 	str.w	r3, [r4], #4
   b55d2:	4606      	mov	r6, r0
   b55d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55d8:	682b      	ldr	r3, [r5, #0]
   b55da:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b55dc:	4630      	mov	r0, r6
   b55de:	bd70      	pop	{r4, r5, r6, pc}
   b55e0:	000b82dc 	.word	0x000b82dc

000b55e4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55e8:	4698      	mov	r8, r3
    stop();
   b55ea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55ec:	b093      	sub	sp, #76	; 0x4c
   b55ee:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b55f0:	2400      	movs	r4, #0
    stop();
   b55f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b55f4:	4606      	mov	r6, r0
   b55f6:	4617      	mov	r7, r2
    stop();
   b55f8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b55fa:	4628      	mov	r0, r5
   b55fc:	466b      	mov	r3, sp
   b55fe:	4622      	mov	r2, r4
   b5600:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5602:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5604:	f7ff f956 	bl	b48b4 <netdb_getaddrinfo>
   b5608:	4605      	mov	r5, r0
   b560a:	2800      	cmp	r0, #0
   b560c:	d163      	bne.n	b56d6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b560e:	9b00      	ldr	r3, [sp, #0]
   b5610:	2b00      	cmp	r3, #0
   b5612:	d04b      	beq.n	b56ac <_ZN9TCPClient7connectEPKctm+0xc8>
   b5614:	695b      	ldr	r3, [r3, #20]
   b5616:	2b00      	cmp	r3, #0
   b5618:	d048      	beq.n	b56ac <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b561a:	a806      	add	r0, sp, #24
   b561c:	f7ff fbe0 	bl	b4de0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5620:	9b00      	ldr	r3, [sp, #0]
   b5622:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5624:	7863      	ldrb	r3, [r4, #1]
   b5626:	2b02      	cmp	r3, #2
   b5628:	d104      	bne.n	b5634 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b562a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b562c:	a806      	add	r0, sp, #24
   b562e:	f7ff ffbb 	bl	b55a8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5632:	e026      	b.n	b5682 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5634:	2b0a      	cmp	r3, #10
   b5636:	d124      	bne.n	b5682 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5638:	2211      	movs	r2, #17
   b563a:	4629      	mov	r1, r5
   b563c:	a801      	add	r0, sp, #4
   b563e:	f002 fc9f 	bl	b7f80 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5642:	68a3      	ldr	r3, [r4, #8]
   b5644:	2b00      	cmp	r3, #0
   b5646:	d038      	beq.n	b56ba <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5648:	f104 0308 	add.w	r3, r4, #8
   b564c:	f10d 0c04 	add.w	ip, sp, #4
   b5650:	3418      	adds	r4, #24
   b5652:	6818      	ldr	r0, [r3, #0]
   b5654:	6859      	ldr	r1, [r3, #4]
   b5656:	4662      	mov	r2, ip
   b5658:	c203      	stmia	r2!, {r0, r1}
   b565a:	3308      	adds	r3, #8
   b565c:	42a3      	cmp	r3, r4
   b565e:	4694      	mov	ip, r2
   b5660:	d1f7      	bne.n	b5652 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5662:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5664:	a901      	add	r1, sp, #4
   b5666:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5668:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b566c:	f7ff fbc6 	bl	b4dfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5670:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5674:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5678:	ac07      	add	r4, sp, #28
   b567a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b567c:	f8dc 3000 	ldr.w	r3, [ip]
   b5680:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5682:	a806      	add	r0, sp, #24
   b5684:	f7ff fbcc 	bl	b4e20 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5688:	b180      	cbz	r0, b56ac <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b568a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b568c:	ad07      	add	r5, sp, #28
   b568e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5692:	4b12      	ldr	r3, [pc, #72]	; (b56dc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5694:	930c      	str	r3, [sp, #48]	; 0x30
   b5696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5698:	ac0d      	add	r4, sp, #52	; 0x34
   b569a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b569c:	682b      	ldr	r3, [r5, #0]
   b569e:	7023      	strb	r3, [r4, #0]
   b56a0:	463a      	mov	r2, r7
   b56a2:	4643      	mov	r3, r8
   b56a4:	a90c      	add	r1, sp, #48	; 0x30
   b56a6:	4630      	mov	r0, r6
   b56a8:	47c8      	blx	r9
   b56aa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b56ac:	9800      	ldr	r0, [sp, #0]
   b56ae:	f7ff f8f9 	bl	b48a4 <netdb_freeaddrinfo>
}
   b56b2:	4628      	mov	r0, r5
   b56b4:	b013      	add	sp, #76	; 0x4c
   b56b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b56ba:	68e3      	ldr	r3, [r4, #12]
   b56bc:	2b00      	cmp	r3, #0
   b56be:	d1c3      	bne.n	b5648 <_ZN9TCPClient7connectEPKctm+0x64>
   b56c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b56c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b56c8:	f7ff f8dc 	bl	b4884 <inet_htonl>
   b56cc:	4581      	cmp	r9, r0
   b56ce:	d1bb      	bne.n	b5648 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b56d0:	f104 0114 	add.w	r1, r4, #20
   b56d4:	e7aa      	b.n	b562c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b56d6:	4625      	mov	r5, r4
   b56d8:	e7e8      	b.n	b56ac <_ZN9TCPClient7connectEPKctm+0xc8>
   b56da:	bf00      	nop
   b56dc:	000b82dc 	.word	0x000b82dc

000b56e0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b56e0:	b538      	push	{r3, r4, r5, lr}
   b56e2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b56e4:	681a      	ldr	r2, [r3, #0]
   b56e6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b56e8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b56ea:	da10      	bge.n	b570e <_ZN9TCPClient9connectedEv+0x2e>
   b56ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b56f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b56f4:	429a      	cmp	r2, r3
   b56f6:	d10a      	bne.n	b570e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b56f8:	6803      	ldr	r3, [r0, #0]
   b56fa:	691b      	ldr	r3, [r3, #16]
   b56fc:	4798      	blx	r3
        if (!rv) {
   b56fe:	4604      	mov	r4, r0
   b5700:	b928      	cbnz	r0, b570e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5702:	682b      	ldr	r3, [r5, #0]
   b5704:	4628      	mov	r0, r5
   b5706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5708:	4798      	blx	r3
        rv = available();
   b570a:	4620      	mov	r0, r4
}
   b570c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b570e:	2001      	movs	r0, #1
   b5710:	e7fc      	b.n	b570c <_ZN9TCPClient9connectedEv+0x2c>

000b5712 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5712:	b510      	push	{r4, lr}
   b5714:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5716:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b571a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b571e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5720:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5722:	d005      	beq.n	b5730 <_ZN9TCPClient4peekEv+0x1e>
   b5724:	6963      	ldr	r3, [r4, #20]
   b5726:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b572a:	4413      	add	r3, r2
   b572c:	7918      	ldrb	r0, [r3, #4]
}
   b572e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5730:	6803      	ldr	r3, [r0, #0]
   b5732:	691b      	ldr	r3, [r3, #16]
   b5734:	4798      	blx	r3
   b5736:	2800      	cmp	r0, #0
   b5738:	d1f4      	bne.n	b5724 <_ZN9TCPClient4peekEv+0x12>
   b573a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b573e:	e7f6      	b.n	b572e <_ZN9TCPClient4peekEv+0x1c>

000b5740 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5742:	6943      	ldr	r3, [r0, #20]
   b5744:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5746:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b574a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b574e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5750:	4605      	mov	r5, r0
   b5752:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5754:	d016      	beq.n	b5784 <_ZN9TCPClient4readEPhj+0x44>
   b5756:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5758:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b575c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5760:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5762:	42bc      	cmp	r4, r7
   b5764:	bf28      	it	cs
   b5766:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5768:	3304      	adds	r3, #4
   b576a:	4622      	mov	r2, r4
   b576c:	4419      	add	r1, r3
   b576e:	4630      	mov	r0, r6
   b5770:	f002 fbf8 	bl	b7f64 <memcpy>
   b5774:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5776:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b577a:	4423      	add	r3, r4
   b577c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5780:	4620      	mov	r0, r4
   b5782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5784:	6803      	ldr	r3, [r0, #0]
   b5786:	691b      	ldr	r3, [r3, #16]
   b5788:	4798      	blx	r3
   b578a:	2800      	cmp	r0, #0
   b578c:	d1e3      	bne.n	b5756 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b578e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5792:	e7f5      	b.n	b5780 <_ZN9TCPClient4readEPhj+0x40>

000b5794 <_ZN9TCPClient12flush_bufferEv>:
   b5794:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5796:	2300      	movs	r3, #0
   b5798:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b579c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b579e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b57a2:	4770      	bx	lr

000b57a4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57a8:	461f      	mov	r7, r3
    stop();
   b57aa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57ac:	460c      	mov	r4, r1
    stop();
   b57ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b57b0:	b08a      	sub	sp, #40	; 0x28
   b57b2:	4605      	mov	r5, r0
   b57b4:	4616      	mov	r6, r2
    stop();
   b57b6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b57b8:	7d23      	ldrb	r3, [r4, #20]
   b57ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b57be:	2b04      	cmp	r3, #4
   b57c0:	bf0c      	ite	eq
   b57c2:	2002      	moveq	r0, #2
   b57c4:	200a      	movne	r0, #10
   b57c6:	2206      	movs	r2, #6
   b57c8:	2101      	movs	r1, #1
   b57ca:	f7ff f8bb 	bl	b4944 <sock_socket>
   b57ce:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b57d2:	696b      	ldr	r3, [r5, #20]
   b57d4:	681b      	ldr	r3, [r3, #0]
   b57d6:	2b00      	cmp	r3, #0
   b57d8:	da08      	bge.n	b57ec <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b57da:	682b      	ldr	r3, [r5, #0]
   b57dc:	4628      	mov	r0, r5
   b57de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57e0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b57e2:	4798      	blx	r3
}
   b57e4:	4620      	mov	r0, r4
   b57e6:	b00a      	add	sp, #40	; 0x28
   b57e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b57ec:	4628      	mov	r0, r5
   b57ee:	f7ff ffd1 	bl	b5794 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b57f2:	b1b7      	cbz	r7, b5822 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b57f4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b57f6:	a903      	add	r1, sp, #12
   b57f8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b57fa:	9303      	str	r3, [sp, #12]
   b57fc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5800:	f7ff f830 	bl	b4864 <if_index_to_name>
   b5804:	2800      	cmp	r0, #0
   b5806:	d1e8      	bne.n	b57da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5808:	6968      	ldr	r0, [r5, #20]
   b580a:	2306      	movs	r3, #6
   b580c:	9300      	str	r3, [sp, #0]
   b580e:	6800      	ldr	r0, [r0, #0]
   b5810:	ab03      	add	r3, sp, #12
   b5812:	f241 020b 	movw	r2, #4107	; 0x100b
   b5816:	f640 71ff 	movw	r1, #4095	; 0xfff
   b581a:	f7ff f86b 	bl	b48f4 <sock_setsockopt>
   b581e:	2800      	cmp	r0, #0
   b5820:	d1db      	bne.n	b57da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5822:	221c      	movs	r2, #28
   b5824:	2100      	movs	r1, #0
   b5826:	a803      	add	r0, sp, #12
   b5828:	f002 fbaa 	bl	b7f80 <memset>
    if (ip.version() == 4) {
   b582c:	7d23      	ldrb	r3, [r4, #20]
   b582e:	2b04      	cmp	r3, #4
   b5830:	d11d      	bne.n	b586e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5832:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5836:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5838:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b583c:	f7ff f82a 	bl	b4894 <inet_htons>
   b5840:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5844:	6860      	ldr	r0, [r4, #4]
   b5846:	f7ff f81d 	bl	b4884 <inet_htonl>
   b584a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b584c:	696b      	ldr	r3, [r5, #20]
   b584e:	221c      	movs	r2, #28
   b5850:	6818      	ldr	r0, [r3, #0]
   b5852:	a903      	add	r1, sp, #12
   b5854:	f7ff f85e 	bl	b4914 <sock_connect>
   b5858:	2800      	cmp	r0, #0
   b585a:	d1be      	bne.n	b57da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b585c:	3404      	adds	r4, #4
   b585e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5860:	696d      	ldr	r5, [r5, #20]
   b5862:	358c      	adds	r5, #140	; 0x8c
   b5864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5866:	6823      	ldr	r3, [r4, #0]
   b5868:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b586a:	2401      	movs	r4, #1
   b586c:	e7ba      	b.n	b57e4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b586e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5872:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5874:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5878:	f7ff f80c 	bl	b4894 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b587c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b587e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5882:	1d23      	adds	r3, r4, #4
   b5884:	f104 0714 	add.w	r7, r4, #20
   b5888:	6818      	ldr	r0, [r3, #0]
   b588a:	6859      	ldr	r1, [r3, #4]
   b588c:	4632      	mov	r2, r6
   b588e:	c203      	stmia	r2!, {r0, r1}
   b5890:	3308      	adds	r3, #8
   b5892:	42bb      	cmp	r3, r7
   b5894:	4616      	mov	r6, r2
   b5896:	d1f7      	bne.n	b5888 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5898:	e7d8      	b.n	b584c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b589c <_ZN9TCPClient9availableEv>:
{
   b589c:	b530      	push	{r4, r5, lr}
   b589e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b58a0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b58a4:	b08b      	sub	sp, #44	; 0x2c
   b58a6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b58a8:	b12b      	cbz	r3, b58b6 <_ZN9TCPClient9availableEv+0x1a>
   b58aa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b58ae:	429a      	cmp	r2, r3
   b58b0:	d101      	bne.n	b58b6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b58b2:	f7ff ff6f 	bl	b5794 <_ZN9TCPClient12flush_bufferEv>
   b58b6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b58b8:	6808      	ldr	r0, [r1, #0]
   b58ba:	2800      	cmp	r0, #0
   b58bc:	db18      	blt.n	b58f0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b58be:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b58c2:	2d7f      	cmp	r5, #127	; 0x7f
   b58c4:	d814      	bhi.n	b58f0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b58c6:	3104      	adds	r1, #4
   b58c8:	2308      	movs	r3, #8
   b58ca:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b58ce:	4429      	add	r1, r5
   b58d0:	f7ff f828 	bl	b4924 <sock_recv>
            if (ret > 0) {
   b58d4:	2800      	cmp	r0, #0
   b58d6:	dd13      	ble.n	b5900 <_ZN9TCPClient9availableEv+0x64>
   b58d8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b58da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b58de:	b90a      	cbnz	r2, b58e4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b58e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b58e4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b58e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b58ea:	4410      	add	r0, r2
   b58ec:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b58f0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b58f2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b58f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b58fa:	1ac0      	subs	r0, r0, r3
   b58fc:	b00b      	add	sp, #44	; 0x2c
   b58fe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5900:	f7ff f97c 	bl	b4bfc <__errno>
   b5904:	6803      	ldr	r3, [r0, #0]
   b5906:	2b0b      	cmp	r3, #11
   b5908:	d0f2      	beq.n	b58f0 <_ZN9TCPClient9availableEv+0x54>
   b590a:	f7ff f977 	bl	b4bfc <__errno>
   b590e:	6803      	ldr	r3, [r0, #0]
   b5910:	2b0b      	cmp	r3, #11
   b5912:	d0ed      	beq.n	b58f0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5914:	2320      	movs	r3, #32
   b5916:	2500      	movs	r5, #0
   b5918:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b591c:	f7ff f96e 	bl	b4bfc <__errno>
   b5920:	6803      	ldr	r3, [r0, #0]
   b5922:	9301      	str	r3, [sp, #4]
   b5924:	4b08      	ldr	r3, [pc, #32]	; (b5948 <_ZN9TCPClient9availableEv+0xac>)
   b5926:	4909      	ldr	r1, [pc, #36]	; (b594c <_ZN9TCPClient9availableEv+0xb0>)
   b5928:	9300      	str	r3, [sp, #0]
   b592a:	aa02      	add	r2, sp, #8
   b592c:	462b      	mov	r3, r5
   b592e:	2032      	movs	r0, #50	; 0x32
   b5930:	f7ff f8a0 	bl	b4a74 <log_message>
                    sock_close(d_->sock);
   b5934:	6963      	ldr	r3, [r4, #20]
   b5936:	6818      	ldr	r0, [r3, #0]
   b5938:	f7fe ffe4 	bl	b4904 <sock_close>
   b593c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b593e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5942:	601a      	str	r2, [r3, #0]
   b5944:	e7d4      	b.n	b58f0 <_ZN9TCPClient9availableEv+0x54>
   b5946:	bf00      	nop
   b5948:	000b832f 	.word	0x000b832f
   b594c:	000b8328 	.word	0x000b8328

000b5950 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5950:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5952:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5954:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5956:	6818      	ldr	r0, [r3, #0]
   b5958:	2800      	cmp	r0, #0
   b595a:	db01      	blt.n	b5960 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b595c:	f7fe ffd2 	bl	b4904 <sock_close>
   b5960:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5966:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5968:	6960      	ldr	r0, [r4, #20]
   b596a:	2211      	movs	r2, #17
   b596c:	2100      	movs	r1, #0
   b596e:	308c      	adds	r0, #140	; 0x8c
   b5970:	f002 fb06 	bl	b7f80 <memset>
    flush_buffer();
   b5974:	4620      	mov	r0, r4
}
   b5976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b597a:	f7ff bf0b 	b.w	b5794 <_ZN9TCPClient12flush_bufferEv>

000b597e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b597e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5980:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5982:	4604      	mov	r4, r0
          total(0) {
   b5984:	6001      	str	r1, [r0, #0]
   b5986:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b598a:	3088      	adds	r0, #136	; 0x88
   b598c:	f7ff fa28 	bl	b4de0 <_ZN9IPAddressC1Ev>
}
   b5990:	4620      	mov	r0, r4
   b5992:	bd10      	pop	{r4, pc}

000b5994 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5994:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5996:	2300      	movs	r3, #0
   b5998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b599c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b59a0:	4a0e      	ldr	r2, [pc, #56]	; (b59dc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b59a2:	6103      	str	r3, [r0, #16]
   b59a4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b59a6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b59a8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b59aa:	20ac      	movs	r0, #172	; 0xac
   b59ac:	9101      	str	r1, [sp, #4]
   b59ae:	f7fe fb72 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b59b2:	1e05      	subs	r5, r0, #0
   b59b4:	f105 060c 	add.w	r6, r5, #12
   b59b8:	d008      	beq.n	b59cc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b59ba:	2301      	movs	r3, #1
   b59bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b59c0:	4b07      	ldr	r3, [pc, #28]	; (b59e0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b59c2:	9901      	ldr	r1, [sp, #4]
   b59c4:	602b      	str	r3, [r5, #0]
   b59c6:	4630      	mov	r0, r6
   b59c8:	f7ff ffd9 	bl	b597e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b59cc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b59ce:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b59d2:	f7ff fedf 	bl	b5794 <_ZN9TCPClient12flush_bufferEv>
}
   b59d6:	b002      	add	sp, #8
   b59d8:	bd70      	pop	{r4, r5, r6, pc}
   b59da:	bf00      	nop
   b59dc:	000b8364 	.word	0x000b8364
   b59e0:	000b8348 	.word	0x000b8348

000b59e4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b59e4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b59e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b59ea:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b59ec:	f7ff ffd2 	bl	b5994 <_ZN9TCPClientC1Ei>
}
   b59f0:	4620      	mov	r0, r4
   b59f2:	bd10      	pop	{r4, pc}

000b59f4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b59f4:	b510      	push	{r4, lr}
   b59f6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b59f8:	6800      	ldr	r0, [r0, #0]
   b59fa:	2800      	cmp	r0, #0
   b59fc:	db01      	blt.n	b5a02 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b59fe:	f7fe ff81 	bl	b4904 <sock_close>
    }
}
   b5a02:	4620      	mov	r0, r4
   b5a04:	bd10      	pop	{r4, pc}

000b5a06 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5a06:	300c      	adds	r0, #12
   b5a08:	f7ff bff4 	b.w	b59f4 <_ZN9TCPClient4DataD1Ev>

000b5a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5a0c:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5a0e:	681a      	ldr	r2, [r3, #0]
   b5a10:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5a12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5a14:	4770      	bx	lr
   b5a16:	bf00      	nop
   b5a18:	2003e594 	.word	0x2003e594
   b5a1c:	2003e6f0 	.word	0x2003e6f0

000b5a20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5a20:	4770      	bx	lr

000b5a22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5a22:	7441      	strb	r1, [r0, #17]
}
   b5a24:	4770      	bx	lr

000b5a26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5a26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5a28:	7c00      	ldrb	r0, [r0, #16]
   b5a2a:	f7fe ffd3 	bl	b49d4 <hal_usart_available_data_for_write>
}
   b5a2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a32:	bd08      	pop	{r3, pc}

000b5a34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5a34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5a36:	7c00      	ldrb	r0, [r0, #16]
   b5a38:	f7fe ffa4 	bl	b4984 <hal_usart_available>
}
   b5a3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a40:	bd08      	pop	{r3, pc}

000b5a42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5a42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5a44:	7c00      	ldrb	r0, [r0, #16]
   b5a46:	f7fe ffad 	bl	b49a4 <hal_usart_peek>
}
   b5a4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a4e:	bd08      	pop	{r3, pc}

000b5a50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5a50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5a52:	7c00      	ldrb	r0, [r0, #16]
   b5a54:	f7fe ff9e 	bl	b4994 <hal_usart_read>
}
   b5a58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a5c:	bd08      	pop	{r3, pc}

000b5a5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5a5e:	7c00      	ldrb	r0, [r0, #16]
   b5a60:	f7fe bfa8 	b.w	b49b4 <hal_usart_flush>

000b5a64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a66:	7c45      	ldrb	r5, [r0, #17]
{
   b5a68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a6a:	b12d      	cbz	r5, b5a78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5a6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5a6e:	b003      	add	sp, #12
   b5a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5a74:	f7fe bf7e 	b.w	b4974 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a78:	7c00      	ldrb	r0, [r0, #16]
   b5a7a:	9101      	str	r1, [sp, #4]
   b5a7c:	f7fe ffaa 	bl	b49d4 <hal_usart_available_data_for_write>
   b5a80:	2800      	cmp	r0, #0
   b5a82:	9901      	ldr	r1, [sp, #4]
   b5a84:	dcf2      	bgt.n	b5a6c <_ZN11USARTSerial5writeEh+0x8>
}
   b5a86:	4628      	mov	r0, r5
   b5a88:	b003      	add	sp, #12
   b5a8a:	bd30      	pop	{r4, r5, pc}

000b5a8c <_ZN11USARTSerialD0Ev>:
   b5a8c:	b510      	push	{r4, lr}
   b5a8e:	2114      	movs	r1, #20
   b5a90:	4604      	mov	r4, r0
   b5a92:	f7fe fb04 	bl	b409e <_ZdlPvj>
   b5a96:	4620      	mov	r0, r4
   b5a98:	bd10      	pop	{r4, pc}
	...

000b5a9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5a9c:	b510      	push	{r4, lr}
   b5a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5aa2:	4604      	mov	r4, r0
   b5aa4:	4608      	mov	r0, r1
   b5aa6:	4611      	mov	r1, r2
   b5aa8:	2200      	movs	r2, #0
   b5aaa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5aae:	4b04      	ldr	r3, [pc, #16]	; (b5ac0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5ab0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ab2:	2301      	movs	r3, #1
  _serial = serial;
   b5ab4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ab6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5ab8:	f7fe ff94 	bl	b49e4 <hal_usart_init_ex>
}
   b5abc:	4620      	mov	r0, r4
   b5abe:	bd10      	pop	{r4, pc}
   b5ac0:	000b83cc 	.word	0x000b83cc

000b5ac4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ac4:	7441      	strb	r1, [r0, #17]
}
   b5ac6:	4770      	bx	lr

000b5ac8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ac8:	4770      	bx	lr

000b5aca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5aca:	4770      	bx	lr

000b5acc <_ZN9USBSerial4readEv>:
{
   b5acc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5ace:	2100      	movs	r1, #0
   b5ad0:	7c00      	ldrb	r0, [r0, #16]
   b5ad2:	f7fe ffaf 	bl	b4a34 <HAL_USB_USART_Receive_Data>
}
   b5ad6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ada:	bd08      	pop	{r3, pc}

000b5adc <_ZN9USBSerial4peekEv>:
{
   b5adc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5ade:	2101      	movs	r1, #1
   b5ae0:	7c00      	ldrb	r0, [r0, #16]
   b5ae2:	f7fe ffa7 	bl	b4a34 <HAL_USB_USART_Receive_Data>
}
   b5ae6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5aea:	bd08      	pop	{r3, pc}

000b5aec <_ZN9USBSerial17availableForWriteEv>:
{
   b5aec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5aee:	7c00      	ldrb	r0, [r0, #16]
   b5af0:	f7fe ff98 	bl	b4a24 <HAL_USB_USART_Available_Data_For_Write>
}
   b5af4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5af8:	bd08      	pop	{r3, pc}

000b5afa <_ZN9USBSerial9availableEv>:
{
   b5afa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5afc:	7c00      	ldrb	r0, [r0, #16]
   b5afe:	f7fe ff89 	bl	b4a14 <HAL_USB_USART_Available_Data>
}
   b5b02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b06:	bd08      	pop	{r3, pc}

000b5b08 <_ZN9USBSerial5writeEh>:
{
   b5b08:	b513      	push	{r0, r1, r4, lr}
   b5b0a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b0c:	7c00      	ldrb	r0, [r0, #16]
{
   b5b0e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b10:	f7fe ff88 	bl	b4a24 <HAL_USB_USART_Available_Data_For_Write>
   b5b14:	2800      	cmp	r0, #0
   b5b16:	9901      	ldr	r1, [sp, #4]
   b5b18:	dc01      	bgt.n	b5b1e <_ZN9USBSerial5writeEh+0x16>
   b5b1a:	7c60      	ldrb	r0, [r4, #17]
   b5b1c:	b120      	cbz	r0, b5b28 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5b1e:	7c20      	ldrb	r0, [r4, #16]
   b5b20:	f7fe ff90 	bl	b4a44 <HAL_USB_USART_Send_Data>
   b5b24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b28:	b002      	add	sp, #8
   b5b2a:	bd10      	pop	{r4, pc}

000b5b2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b2c:	7c00      	ldrb	r0, [r0, #16]
   b5b2e:	f7fe bf91 	b.w	b4a54 <HAL_USB_USART_Flush_Data>

000b5b32 <_ZN9USBSerialD0Ev>:
   b5b32:	b510      	push	{r4, lr}
   b5b34:	2114      	movs	r1, #20
   b5b36:	4604      	mov	r4, r0
   b5b38:	f7fe fab1 	bl	b409e <_ZdlPvj>
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	bd10      	pop	{r4, pc}

000b5b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5b40:	b510      	push	{r4, lr}
   b5b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b46:	4604      	mov	r4, r0
   b5b48:	4608      	mov	r0, r1
   b5b4a:	2100      	movs	r1, #0
   b5b4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5b50:	4b04      	ldr	r3, [pc, #16]	; (b5b64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5b52:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b54:	2301      	movs	r3, #1
  _serial = serial;
   b5b56:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b58:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5b5a:	4611      	mov	r1, r2
   b5b5c:	f7fe ff4a 	bl	b49f4 <HAL_USB_USART_Init>
}
   b5b60:	4620      	mov	r0, r4
   b5b62:	bd10      	pop	{r4, pc}
   b5b64:	000b83fc 	.word	0x000b83fc

000b5b68 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5b68:	7c00      	ldrb	r0, [r0, #16]
   b5b6a:	2200      	movs	r2, #0
   b5b6c:	f7fe bf4a 	b.w	b4a04 <HAL_USB_USART_Begin>

000b5b70 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5b70:	7c00      	ldrb	r0, [r0, #16]
   b5b72:	f7fe bf77 	b.w	b4a64 <HAL_USB_USART_Is_Connected>

000b5b76 <_Z19acquireSerialBufferv>:
{
   b5b76:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5b78:	2214      	movs	r2, #20
{
   b5b7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5b7c:	2100      	movs	r1, #0
   b5b7e:	f002 f9ff 	bl	b7f80 <memset>
}
   b5b82:	4620      	mov	r0, r4
   b5b84:	bd10      	pop	{r4, pc}
	...

000b5b88 <_Z16_fetch_usbserialv>:
{
   b5b88:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b8a:	4c0f      	ldr	r4, [pc, #60]	; (b5bc8 <_Z16_fetch_usbserialv+0x40>)
{
   b5b8c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b8e:	a803      	add	r0, sp, #12
   b5b90:	f7ff fff1 	bl	b5b76 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b94:	7821      	ldrb	r1, [r4, #0]
   b5b96:	f3bf 8f5b 	dmb	ish
   b5b9a:	f011 0101 	ands.w	r1, r1, #1
   b5b9e:	d10f      	bne.n	b5bc0 <_Z16_fetch_usbserialv+0x38>
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	9101      	str	r1, [sp, #4]
   b5ba4:	f7fe fa7d 	bl	b40a2 <__cxa_guard_acquire>
   b5ba8:	9901      	ldr	r1, [sp, #4]
   b5baa:	b148      	cbz	r0, b5bc0 <_Z16_fetch_usbserialv+0x38>
   b5bac:	aa03      	add	r2, sp, #12
   b5bae:	4807      	ldr	r0, [pc, #28]	; (b5bcc <_Z16_fetch_usbserialv+0x44>)
   b5bb0:	f7ff ffc6 	bl	b5b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	f7fe fa79 	bl	b40ac <__cxa_guard_release>
   b5bba:	4805      	ldr	r0, [pc, #20]	; (b5bd0 <_Z16_fetch_usbserialv+0x48>)
   b5bbc:	f002 f9cc 	bl	b7f58 <atexit>
	return _usbserial;
}
   b5bc0:	4802      	ldr	r0, [pc, #8]	; (b5bcc <_Z16_fetch_usbserialv+0x44>)
   b5bc2:	b008      	add	sp, #32
   b5bc4:	bd10      	pop	{r4, pc}
   b5bc6:	bf00      	nop
   b5bc8:	2003e6f4 	.word	0x2003e6f4
   b5bcc:	2003e6f8 	.word	0x2003e6f8
   b5bd0:	000b5ac9 	.word	0x000b5ac9

000b5bd4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5bd4:	2200      	movs	r2, #0
   b5bd6:	6840      	ldr	r0, [r0, #4]
   b5bd8:	4611      	mov	r1, r2
   b5bda:	f7fe bf9f 	b.w	b4b1c <network_ready>

000b5bde <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5bde:	2200      	movs	r2, #0
   b5be0:	6840      	ldr	r0, [r0, #4]
   b5be2:	4611      	mov	r1, r2
   b5be4:	f7fe bfba 	b.w	b4b5c <network_listening>

000b5be8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5be8:	2200      	movs	r2, #0
   b5bea:	6840      	ldr	r0, [r0, #4]
   b5bec:	4611      	mov	r1, r2
   b5bee:	f7fe bfcd 	b.w	b4b8c <network_get_listen_timeout>

000b5bf2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5bf2:	6840      	ldr	r0, [r0, #4]
   b5bf4:	2200      	movs	r2, #0
   b5bf6:	f7fe bfc1 	b.w	b4b7c <network_set_listen_timeout>

000b5bfa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5bfa:	6840      	ldr	r0, [r0, #4]
   b5bfc:	2200      	movs	r2, #0
   b5bfe:	f081 0101 	eor.w	r1, r1, #1
   b5c02:	f7fe bfa3 	b.w	b4b4c <network_listen>

000b5c06 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c06:	2300      	movs	r3, #0
   b5c08:	6840      	ldr	r0, [r0, #4]
   b5c0a:	461a      	mov	r2, r3
   b5c0c:	4619      	mov	r1, r3
   b5c0e:	f7fe bf95 	b.w	b4b3c <network_off>

000b5c12 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c12:	2300      	movs	r3, #0
   b5c14:	6840      	ldr	r0, [r0, #4]
   b5c16:	461a      	mov	r2, r3
   b5c18:	4619      	mov	r1, r3
   b5c1a:	f7fe bf87 	b.w	b4b2c <network_on>

000b5c1e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5c1e:	2200      	movs	r2, #0
   b5c20:	6840      	ldr	r0, [r0, #4]
   b5c22:	4611      	mov	r1, r2
   b5c24:	f7fe bf6a 	b.w	b4afc <network_connecting>

000b5c28 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5c28:	6840      	ldr	r0, [r0, #4]
   b5c2a:	2200      	movs	r2, #0
   b5c2c:	2102      	movs	r1, #2
   b5c2e:	f7fe bf6d 	b.w	b4b0c <network_disconnect>

000b5c32 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5c32:	2300      	movs	r3, #0
   b5c34:	6840      	ldr	r0, [r0, #4]
   b5c36:	461a      	mov	r2, r3
   b5c38:	f7fe bf58 	b.w	b4aec <network_connect>

000b5c3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5c3c:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5c3e:	2204      	movs	r2, #4
   b5c40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5c42:	4a02      	ldr	r2, [pc, #8]	; (b5c4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5c44:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5c46:	4770      	bx	lr
   b5c48:	2003e70c 	.word	0x2003e70c
   b5c4c:	000b842c 	.word	0x000b842c

000b5c50 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5c50:	b510      	push	{r4, lr}
   b5c52:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5c54:	f002 f9dc 	bl	b8010 <strlen>
   b5c58:	3801      	subs	r0, #1
   b5c5a:	1823      	adds	r3, r4, r0
   b5c5c:	4620      	mov	r0, r4
	while(i<j){
   b5c5e:	4283      	cmp	r3, r0
   b5c60:	d906      	bls.n	b5c70 <_Z11str_reversePc+0x20>
		c = *i;
   b5c62:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5c64:	7819      	ldrb	r1, [r3, #0]
   b5c66:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5c6a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5c6e:	e7f6      	b.n	b5c5e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5c70:	bd10      	pop	{r4, pc}

000b5c72 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5c72:	b570      	push	{r4, r5, r6, lr}
   b5c74:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5c76:	1e91      	subs	r1, r2, #2
   b5c78:	2922      	cmp	r1, #34	; 0x22
   b5c7a:	d81d      	bhi.n	b5cb8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5c7c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5c7e:	b930      	cbnz	r0, b5c8e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5c80:	4423      	add	r3, r4
            *ptr++ = '0';
   b5c82:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5c84:	429d      	cmp	r5, r3
   b5c86:	d210      	bcs.n	b5caa <ultoa+0x38>
            *ptr++ = '0';
   b5c88:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5c8c:	e7fa      	b.n	b5c84 <ultoa+0x12>
            result.quot = a/radix;
   b5c8e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5c92:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5c96:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5c98:	2809      	cmp	r0, #9
                *ptr += '0';
   b5c9a:	bf94      	ite	ls
   b5c9c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5c9e:	3157      	addhi	r1, #87	; 0x57
   b5ca0:	b2c9      	uxtb	r1, r1
   b5ca2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5ca6:	4630      	mov	r0, r6
	while(a){
   b5ca8:	e7e9      	b.n	b5c7e <ultoa+0xc>

	*ptr = '\0';
   b5caa:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5cac:	4620      	mov	r0, r4
	*ptr = '\0';
   b5cae:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5cb0:	f7ff ffce 	bl	b5c50 <_Z11str_reversePc>
	return buffer;
   b5cb4:	4620      	mov	r0, r4
}
   b5cb6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5cb8:	2000      	movs	r0, #0
   b5cba:	e7fc      	b.n	b5cb6 <ultoa+0x44>

000b5cbc <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5cbc:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5cbe:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5cc0:	460c      	mov	r4, r1
   b5cc2:	4615      	mov	r5, r2
	if(a<0){
   b5cc4:	da0e      	bge.n	b5ce4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5cca:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5cce:	bf14      	ite	ne
   b5cd0:	4258      	negne	r0, r3
   b5cd2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5cd4:	2301      	movs	r3, #1
		*buffer = '-';
   b5cd6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5cd8:	462a      	mov	r2, r5
   b5cda:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5cdc:	f7ff ffc9 	bl	b5c72 <ultoa>
	}
	return buffer;
}
   b5ce0:	4620      	mov	r0, r4
   b5ce2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5ce4:	2301      	movs	r3, #1
   b5ce6:	e7f9      	b.n	b5cdc <itoa+0x20>

000b5ce8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5ce8:	4b01      	ldr	r3, [pc, #4]	; (b5cf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5cea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5cec:	4770      	bx	lr
   b5cee:	bf00      	nop
   b5cf0:	2003e598 	.word	0x2003e598

000b5cf4 <serialEventRun>:
{
   b5cf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5cf6:	4b0b      	ldr	r3, [pc, #44]	; (b5d24 <serialEventRun+0x30>)
   b5cf8:	b143      	cbz	r3, b5d0c <serialEventRun+0x18>
   b5cfa:	f7ff ff45 	bl	b5b88 <_Z16_fetch_usbserialv>
   b5cfe:	6803      	ldr	r3, [r0, #0]
   b5d00:	691b      	ldr	r3, [r3, #16]
   b5d02:	4798      	blx	r3
   b5d04:	2800      	cmp	r0, #0
   b5d06:	dd01      	ble.n	b5d0c <serialEventRun+0x18>
        serialEvent();
   b5d08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5d0c:	4b06      	ldr	r3, [pc, #24]	; (b5d28 <serialEventRun+0x34>)
   b5d0e:	b143      	cbz	r3, b5d22 <serialEventRun+0x2e>
   b5d10:	f000 f962 	bl	b5fd8 <_Z22__fetch_global_Serial1v>
   b5d14:	6803      	ldr	r3, [r0, #0]
   b5d16:	691b      	ldr	r3, [r3, #16]
   b5d18:	4798      	blx	r3
   b5d1a:	2800      	cmp	r0, #0
   b5d1c:	dd01      	ble.n	b5d22 <serialEventRun+0x2e>
        serialEvent1();
   b5d1e:	f3af 8000 	nop.w
}
   b5d22:	bd08      	pop	{r3, pc}
	...

000b5d2c <_post_loop>:
{
   b5d2c:	b508      	push	{r3, lr}
	serialEventRun();
   b5d2e:	f7ff ffe1 	bl	b5cf4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5d32:	f7fe fd1f 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5d36:	4b01      	ldr	r3, [pc, #4]	; (b5d3c <_post_loop+0x10>)
   b5d38:	6018      	str	r0, [r3, #0]
}
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	2003e728 	.word	0x2003e728

000b5d40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d40:	4805      	ldr	r0, [pc, #20]	; (b5d58 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5d42:	4a06      	ldr	r2, [pc, #24]	; (b5d5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5d44:	4906      	ldr	r1, [pc, #24]	; (b5d60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5d46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d48:	1a12      	subs	r2, r2, r0
   b5d4a:	f002 f90b 	bl	b7f64 <memcpy>
    __backup_sram_signature = signature;
   b5d4e:	4b05      	ldr	r3, [pc, #20]	; (b5d64 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5d50:	4a05      	ldr	r2, [pc, #20]	; (b5d68 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5d52:	601a      	str	r2, [r3, #0]
}
   b5d54:	bd08      	pop	{r3, pc}
   b5d56:	bf00      	nop
   b5d58:	2003f400 	.word	0x2003f400
   b5d5c:	2003f404 	.word	0x2003f404
   b5d60:	000b87f4 	.word	0x000b87f4
   b5d64:	2003f400 	.word	0x2003f400
   b5d68:	9a271c1e 	.word	0x9a271c1e

000b5d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5d6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d6e:	2300      	movs	r3, #0
   b5d70:	9300      	str	r3, [sp, #0]
   b5d72:	461a      	mov	r2, r3
   b5d74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d78:	f7fe fe9e 	bl	b4ab8 <system_ctrl_set_result>
}
   b5d7c:	b003      	add	sp, #12
   b5d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5d84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5d84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5d86:	8843      	ldrh	r3, [r0, #2]
   b5d88:	2b0a      	cmp	r3, #10
   b5d8a:	d008      	beq.n	b5d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5d8c:	2b50      	cmp	r3, #80	; 0x50
   b5d8e:	d10b      	bne.n	b5da8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5d90:	4b09      	ldr	r3, [pc, #36]	; (b5db8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5d92:	681b      	ldr	r3, [r3, #0]
   b5d94:	b14b      	cbz	r3, b5daa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5d96:	b003      	add	sp, #12
   b5d98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5d9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5d9e:	f7ff ffe5 	bl	b5d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5da2:	b003      	add	sp, #12
   b5da4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5da8:	2300      	movs	r3, #0
   b5daa:	9300      	str	r3, [sp, #0]
   b5dac:	461a      	mov	r2, r3
   b5dae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5db2:	f7fe fe81 	bl	b4ab8 <system_ctrl_set_result>
}
   b5db6:	e7f4      	b.n	b5da2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5db8:	2003e718 	.word	0x2003e718

000b5dbc <module_user_init_hook>:
{
   b5dbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5dbe:	4812      	ldr	r0, [pc, #72]	; (b5e08 <module_user_init_hook+0x4c>)
   b5dc0:	2100      	movs	r1, #0
   b5dc2:	f7fe ff2b 	bl	b4c1c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5dc6:	4b11      	ldr	r3, [pc, #68]	; (b5e0c <module_user_init_hook+0x50>)
   b5dc8:	681a      	ldr	r2, [r3, #0]
   b5dca:	4b11      	ldr	r3, [pc, #68]	; (b5e10 <module_user_init_hook+0x54>)
   b5dcc:	429a      	cmp	r2, r3
   b5dce:	4b11      	ldr	r3, [pc, #68]	; (b5e14 <module_user_init_hook+0x58>)
   b5dd0:	bf0c      	ite	eq
   b5dd2:	2201      	moveq	r2, #1
   b5dd4:	2200      	movne	r2, #0
   b5dd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5dd8:	d001      	beq.n	b5dde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5dda:	f7ff ffb1 	bl	b5d40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5dde:	f7fe fcc1 	bl	b4764 <HAL_RNG_GetRandomNumber>
   b5de2:	4604      	mov	r4, r0
    srand(seed);
   b5de4:	f002 f8d4 	bl	b7f90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5de8:	4b0b      	ldr	r3, [pc, #44]	; (b5e18 <module_user_init_hook+0x5c>)
   b5dea:	b113      	cbz	r3, b5df2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5dec:	4620      	mov	r0, r4
   b5dee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5df2:	2100      	movs	r1, #0
   b5df4:	4808      	ldr	r0, [pc, #32]	; (b5e18 <module_user_init_hook+0x5c>)
   b5df6:	f7fe fe71 	bl	b4adc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5dfe:	4807      	ldr	r0, [pc, #28]	; (b5e1c <module_user_init_hook+0x60>)
   b5e00:	2100      	movs	r1, #0
   b5e02:	f7fe be4f 	b.w	b4aa4 <system_ctrl_set_app_request_handler>
   b5e06:	bf00      	nop
   b5e08:	000b5ce9 	.word	0x000b5ce9
   b5e0c:	2003f400 	.word	0x2003f400
   b5e10:	9a271c1e 	.word	0x9a271c1e
   b5e14:	2003e714 	.word	0x2003e714
   b5e18:	00000000 	.word	0x00000000
   b5e1c:	000b5d85 	.word	0x000b5d85

000b5e20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5e20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5e22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5e24:	d902      	bls.n	b5e2c <pinAvailable+0xc>
    return false;
   b5e26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5e28:	b002      	add	sp, #8
   b5e2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5e2c:	f1a0 030b 	sub.w	r3, r0, #11
   b5e30:	2b02      	cmp	r3, #2
   b5e32:	d81a      	bhi.n	b5e6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5e34:	4c17      	ldr	r4, [pc, #92]	; (b5e94 <pinAvailable+0x74>)
   b5e36:	7821      	ldrb	r1, [r4, #0]
   b5e38:	f3bf 8f5b 	dmb	ish
   b5e3c:	f011 0101 	ands.w	r1, r1, #1
   b5e40:	d10b      	bne.n	b5e5a <pinAvailable+0x3a>
   b5e42:	4620      	mov	r0, r4
   b5e44:	9101      	str	r1, [sp, #4]
   b5e46:	f7fe f92c 	bl	b40a2 <__cxa_guard_acquire>
   b5e4a:	9901      	ldr	r1, [sp, #4]
   b5e4c:	b128      	cbz	r0, b5e5a <pinAvailable+0x3a>
   b5e4e:	4812      	ldr	r0, [pc, #72]	; (b5e98 <pinAvailable+0x78>)
   b5e50:	f7ff f9e7 	bl	b5222 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5e54:	4620      	mov	r0, r4
   b5e56:	f7fe f929 	bl	b40ac <__cxa_guard_release>
   b5e5a:	4b0f      	ldr	r3, [pc, #60]	; (b5e98 <pinAvailable+0x78>)
   b5e5c:	7818      	ldrb	r0, [r3, #0]
   b5e5e:	f7fe fd81 	bl	b4964 <hal_spi_is_enabled>
   b5e62:	2800      	cmp	r0, #0
   b5e64:	d1df      	bne.n	b5e26 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5e66:	2001      	movs	r0, #1
   b5e68:	e7de      	b.n	b5e28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5e6a:	2801      	cmp	r0, #1
   b5e6c:	d809      	bhi.n	b5e82 <pinAvailable+0x62>
   b5e6e:	f000 f873 	bl	b5f58 <_Z19__fetch_global_Wirev>
   b5e72:	2100      	movs	r1, #0
   b5e74:	7c00      	ldrb	r0, [r0, #16]
   b5e76:	f7fe fce5 	bl	b4844 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5e7a:	f080 0001 	eor.w	r0, r0, #1
   b5e7e:	b2c0      	uxtb	r0, r0
   b5e80:	e7d2      	b.n	b5e28 <pinAvailable+0x8>
   b5e82:	3809      	subs	r0, #9
   b5e84:	2801      	cmp	r0, #1
   b5e86:	d8ee      	bhi.n	b5e66 <pinAvailable+0x46>
   b5e88:	f000 f8a6 	bl	b5fd8 <_Z22__fetch_global_Serial1v>
   b5e8c:	7c00      	ldrb	r0, [r0, #16]
   b5e8e:	f7fe fd99 	bl	b49c4 <hal_usart_is_enabled>
   b5e92:	e7f2      	b.n	b5e7a <pinAvailable+0x5a>
   b5e94:	2003e71c 	.word	0x2003e71c
   b5e98:	2003e720 	.word	0x2003e720

000b5e9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5e9c:	2823      	cmp	r0, #35	; 0x23
{
   b5e9e:	b538      	push	{r3, r4, r5, lr}
   b5ea0:	4604      	mov	r4, r0
   b5ea2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ea4:	d80a      	bhi.n	b5ebc <pinMode+0x20>
   b5ea6:	29ff      	cmp	r1, #255	; 0xff
   b5ea8:	d008      	beq.n	b5ebc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5eaa:	f7ff ffb9 	bl	b5e20 <pinAvailable>
   b5eae:	b128      	cbz	r0, b5ebc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5eb0:	4629      	mov	r1, r5
   b5eb2:	4620      	mov	r0, r4
}
   b5eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5eb8:	f7fe bc74 	b.w	b47a4 <HAL_Pin_Mode>
}
   b5ebc:	bd38      	pop	{r3, r4, r5, pc}

000b5ebe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5ebe:	b538      	push	{r3, r4, r5, lr}
   b5ec0:	4604      	mov	r4, r0
   b5ec2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5ec4:	f7fe fc76 	bl	b47b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5ec8:	28ff      	cmp	r0, #255	; 0xff
   b5eca:	d010      	beq.n	b5eee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5ecc:	2806      	cmp	r0, #6
   b5ece:	d804      	bhi.n	b5eda <digitalWrite+0x1c>
   b5ed0:	234d      	movs	r3, #77	; 0x4d
   b5ed2:	fa23 f000 	lsr.w	r0, r3, r0
   b5ed6:	07c3      	lsls	r3, r0, #31
   b5ed8:	d409      	bmi.n	b5eee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5eda:	4620      	mov	r0, r4
   b5edc:	f7ff ffa0 	bl	b5e20 <pinAvailable>
   b5ee0:	b128      	cbz	r0, b5eee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5ee2:	4629      	mov	r1, r5
   b5ee4:	4620      	mov	r0, r4
}
   b5ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5eea:	f7fe bc6b 	b.w	b47c4 <HAL_GPIO_Write>
}
   b5eee:	bd38      	pop	{r3, r4, r5, pc}

000b5ef0 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5ef0:	280d      	cmp	r0, #13
{
   b5ef2:	b510      	push	{r4, lr}
   b5ef4:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5ef6:	bf9c      	itt	ls
   b5ef8:	340e      	addls	r4, #14
   b5efa:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5efc:	4620      	mov	r0, r4
   b5efe:	f7ff ff8f 	bl	b5e20 <pinAvailable>
   b5f02:	b150      	cbz	r0, b5f1a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5f04:	2103      	movs	r1, #3
   b5f06:	4620      	mov	r0, r4
   b5f08:	f7fe fc44 	bl	b4794 <HAL_Validate_Pin_Function>
   b5f0c:	2803      	cmp	r0, #3
   b5f0e:	d104      	bne.n	b5f1a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5f10:	4620      	mov	r0, r4
}
   b5f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5f16:	f7fe bc5d 	b.w	b47d4 <hal_adc_read>
}
   b5f1a:	2000      	movs	r0, #0
   b5f1c:	bd10      	pop	{r4, pc}

000b5f1e <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b5f1e:	f7fe bc61 	b.w	b47e4 <HAL_Pulse_In>

000b5f22 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f22:	4770      	bx	lr

000b5f24 <_Z17acquireWireBufferv>:
{
   b5f24:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f26:	4b0a      	ldr	r3, [pc, #40]	; (b5f50 <_Z17acquireWireBufferv+0x2c>)
   b5f28:	6003      	str	r3, [r0, #0]
   b5f2a:	2301      	movs	r3, #1
{
   b5f2c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f2e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f30:	4908      	ldr	r1, [pc, #32]	; (b5f54 <_Z17acquireWireBufferv+0x30>)
   b5f32:	2020      	movs	r0, #32
   b5f34:	f000 f874 	bl	b6020 <_ZnajRKSt9nothrow_t>
	};
   b5f38:	2520      	movs	r5, #32
   b5f3a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f3c:	4905      	ldr	r1, [pc, #20]	; (b5f54 <_Z17acquireWireBufferv+0x30>)
	};
   b5f3e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f40:	4628      	mov	r0, r5
   b5f42:	f000 f86d 	bl	b6020 <_ZnajRKSt9nothrow_t>
	};
   b5f46:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f4a:	4620      	mov	r0, r4
   b5f4c:	bd38      	pop	{r3, r4, r5, pc}
   b5f4e:	bf00      	nop
   b5f50:	00010018 	.word	0x00010018
   b5f54:	000b8460 	.word	0x000b8460

000b5f58 <_Z19__fetch_global_Wirev>:
{
   b5f58:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f5a:	4d0e      	ldr	r5, [pc, #56]	; (b5f94 <_Z19__fetch_global_Wirev+0x3c>)
   b5f5c:	7829      	ldrb	r1, [r5, #0]
   b5f5e:	f3bf 8f5b 	dmb	ish
   b5f62:	f011 0401 	ands.w	r4, r1, #1
{
   b5f66:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f68:	d111      	bne.n	b5f8e <_Z19__fetch_global_Wirev+0x36>
   b5f6a:	4628      	mov	r0, r5
   b5f6c:	f7fe f899 	bl	b40a2 <__cxa_guard_acquire>
   b5f70:	b168      	cbz	r0, b5f8e <_Z19__fetch_global_Wirev+0x36>
   b5f72:	4668      	mov	r0, sp
   b5f74:	f7ff ffd6 	bl	b5f24 <_Z17acquireWireBufferv>
   b5f78:	466a      	mov	r2, sp
   b5f7a:	4621      	mov	r1, r4
   b5f7c:	4806      	ldr	r0, [pc, #24]	; (b5f98 <_Z19__fetch_global_Wirev+0x40>)
   b5f7e:	f7fe fed7 	bl	b4d30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5f82:	4628      	mov	r0, r5
   b5f84:	f7fe f892 	bl	b40ac <__cxa_guard_release>
   b5f88:	4804      	ldr	r0, [pc, #16]	; (b5f9c <_Z19__fetch_global_Wirev+0x44>)
   b5f8a:	f001 ffe5 	bl	b7f58 <atexit>
	return wire;
}
   b5f8e:	4802      	ldr	r0, [pc, #8]	; (b5f98 <_Z19__fetch_global_Wirev+0x40>)
   b5f90:	b007      	add	sp, #28
   b5f92:	bd30      	pop	{r4, r5, pc}
   b5f94:	2003e72c 	.word	0x2003e72c
   b5f98:	2003e730 	.word	0x2003e730
   b5f9c:	000b5f23 	.word	0x000b5f23

000b5fa0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fa0:	4770      	bx	lr
	...

000b5fa4 <_Z20acquireSerial1Bufferv>:
{
   b5fa4:	b538      	push	{r3, r4, r5, lr}
   b5fa6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5fa8:	2514      	movs	r5, #20
   b5faa:	462a      	mov	r2, r5
   b5fac:	2100      	movs	r1, #0
   b5fae:	f001 ffe7 	bl	b7f80 <memset>
   b5fb2:	8025      	strh	r5, [r4, #0]
   b5fb4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fb6:	4907      	ldr	r1, [pc, #28]	; (b5fd4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5fb8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fba:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5fbc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fbe:	f000 f82f 	bl	b6020 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fc2:	4904      	ldr	r1, [pc, #16]	; (b5fd4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5fc4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fc6:	4628      	mov	r0, r5
   b5fc8:	f000 f82a 	bl	b6020 <_ZnajRKSt9nothrow_t>
    };
   b5fcc:	60e0      	str	r0, [r4, #12]
}
   b5fce:	4620      	mov	r0, r4
   b5fd0:	bd38      	pop	{r3, r4, r5, pc}
   b5fd2:	bf00      	nop
   b5fd4:	000b8460 	.word	0x000b8460

000b5fd8 <_Z22__fetch_global_Serial1v>:
{
   b5fd8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fda:	4d0e      	ldr	r5, [pc, #56]	; (b6014 <_Z22__fetch_global_Serial1v+0x3c>)
   b5fdc:	7829      	ldrb	r1, [r5, #0]
   b5fde:	f3bf 8f5b 	dmb	ish
   b5fe2:	f011 0401 	ands.w	r4, r1, #1
{
   b5fe6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fe8:	d111      	bne.n	b600e <_Z22__fetch_global_Serial1v+0x36>
   b5fea:	4628      	mov	r0, r5
   b5fec:	f7fe f859 	bl	b40a2 <__cxa_guard_acquire>
   b5ff0:	b168      	cbz	r0, b600e <_Z22__fetch_global_Serial1v+0x36>
   b5ff2:	a801      	add	r0, sp, #4
   b5ff4:	f7ff ffd6 	bl	b5fa4 <_Z20acquireSerial1Bufferv>
   b5ff8:	aa01      	add	r2, sp, #4
   b5ffa:	4621      	mov	r1, r4
   b5ffc:	4806      	ldr	r0, [pc, #24]	; (b6018 <_Z22__fetch_global_Serial1v+0x40>)
   b5ffe:	f7ff fd4d 	bl	b5a9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6002:	4628      	mov	r0, r5
   b6004:	f7fe f852 	bl	b40ac <__cxa_guard_release>
   b6008:	4804      	ldr	r0, [pc, #16]	; (b601c <_Z22__fetch_global_Serial1v+0x44>)
   b600a:	f001 ffa5 	bl	b7f58 <atexit>
    return serial1;
}
   b600e:	4802      	ldr	r0, [pc, #8]	; (b6018 <_Z22__fetch_global_Serial1v+0x40>)
   b6010:	b007      	add	sp, #28
   b6012:	bd30      	pop	{r4, r5, pc}
   b6014:	2003e744 	.word	0x2003e744
   b6018:	2003e748 	.word	0x2003e748
   b601c:	000b5fa1 	.word	0x000b5fa1

000b6020 <_ZnajRKSt9nothrow_t>:
   b6020:	f7fe b83b 	b.w	b409a <_Znaj>

000b6024 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6024:	4901      	ldr	r1, [pc, #4]	; (b602c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6026:	f000 b8f9 	b.w	b621c <_ZNKSt9type_infoeqERKS_>
   b602a:	bf00      	nop
   b602c:	000b847c 	.word	0x000b847c

000b6030 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6032:	2400      	movs	r4, #0
   b6034:	2310      	movs	r3, #16
   b6036:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b603a:	6803      	ldr	r3, [r0, #0]
   b603c:	4615      	mov	r5, r2
   b603e:	699e      	ldr	r6, [r3, #24]
   b6040:	6812      	ldr	r2, [r2, #0]
   b6042:	466b      	mov	r3, sp
   b6044:	e9cd 4400 	strd	r4, r4, [sp]
   b6048:	47b0      	blx	r6
   b604a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b604e:	f003 0306 	and.w	r3, r3, #6
   b6052:	2b06      	cmp	r3, #6
   b6054:	bf03      	ittte	eq
   b6056:	9b00      	ldreq	r3, [sp, #0]
   b6058:	602b      	streq	r3, [r5, #0]
   b605a:	2001      	moveq	r0, #1
   b605c:	4620      	movne	r0, r4
   b605e:	b004      	add	sp, #16
   b6060:	bd70      	pop	{r4, r5, r6, pc}

000b6062 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6062:	9800      	ldr	r0, [sp, #0]
   b6064:	4290      	cmp	r0, r2
   b6066:	bf14      	ite	ne
   b6068:	2001      	movne	r0, #1
   b606a:	2006      	moveq	r0, #6
   b606c:	4770      	bx	lr
	...

000b6070 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6070:	b510      	push	{r4, lr}
   b6072:	4b03      	ldr	r3, [pc, #12]	; (b6080 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6074:	6003      	str	r3, [r0, #0]
   b6076:	4604      	mov	r4, r0
   b6078:	f000 f8cd 	bl	b6216 <_ZNSt9type_infoD1Ev>
   b607c:	4620      	mov	r0, r4
   b607e:	bd10      	pop	{r4, pc}
   b6080:	000b84bc 	.word	0x000b84bc

000b6084 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6084:	b510      	push	{r4, lr}
   b6086:	4604      	mov	r4, r0
   b6088:	f7ff fff2 	bl	b6070 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b608c:	4620      	mov	r0, r4
   b608e:	2108      	movs	r1, #8
   b6090:	f7fe f805 	bl	b409e <_ZdlPvj>
   b6094:	4620      	mov	r0, r4
   b6096:	bd10      	pop	{r4, pc}

000b6098 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b609c:	461f      	mov	r7, r3
   b609e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b60a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b60a6:	4598      	cmp	r8, r3
   b60a8:	4606      	mov	r6, r0
   b60aa:	4615      	mov	r5, r2
   b60ac:	d107      	bne.n	b60be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b60ae:	9907      	ldr	r1, [sp, #28]
   b60b0:	f000 f8b4 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b60b4:	b118      	cbz	r0, b60be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b60b6:	7165      	strb	r5, [r4, #5]
   b60b8:	2000      	movs	r0, #0
   b60ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b60be:	4639      	mov	r1, r7
   b60c0:	4630      	mov	r0, r6
   b60c2:	f000 f8ab 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b60c6:	2800      	cmp	r0, #0
   b60c8:	d0f6      	beq.n	b60b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b60ca:	2301      	movs	r3, #1
   b60cc:	f8c4 8000 	str.w	r8, [r4]
   b60d0:	7125      	strb	r5, [r4, #4]
   b60d2:	71a3      	strb	r3, [r4, #6]
   b60d4:	e7f0      	b.n	b60b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b60d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b60d6:	b538      	push	{r3, r4, r5, lr}
   b60d8:	4615      	mov	r5, r2
   b60da:	461c      	mov	r4, r3
   b60dc:	f000 f89e 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b60e0:	b120      	cbz	r0, b60ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b60e2:	2308      	movs	r3, #8
   b60e4:	60e3      	str	r3, [r4, #12]
   b60e6:	2306      	movs	r3, #6
   b60e8:	6025      	str	r5, [r4, #0]
   b60ea:	7123      	strb	r3, [r4, #4]
   b60ec:	bd38      	pop	{r3, r4, r5, pc}

000b60ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b60ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b60f0:	4605      	mov	r5, r0
   b60f2:	460c      	mov	r4, r1
   b60f4:	9201      	str	r2, [sp, #4]
   b60f6:	461e      	mov	r6, r3
   b60f8:	f000 f890 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b60fc:	b950      	cbnz	r0, b6114 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b60fe:	2e03      	cmp	r6, #3
   b6100:	d808      	bhi.n	b6114 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6102:	6823      	ldr	r3, [r4, #0]
   b6104:	9a01      	ldr	r2, [sp, #4]
   b6106:	695b      	ldr	r3, [r3, #20]
   b6108:	4629      	mov	r1, r5
   b610a:	4620      	mov	r0, r4
   b610c:	b002      	add	sp, #8
   b610e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6112:	4718      	bx	r3
   b6114:	b002      	add	sp, #8
   b6116:	bd70      	pop	{r4, r5, r6, pc}

000b6118 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6118:	b510      	push	{r4, lr}
   b611a:	4b03      	ldr	r3, [pc, #12]	; (b6128 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b611c:	6003      	str	r3, [r0, #0]
   b611e:	4604      	mov	r4, r0
   b6120:	f7ff ffa6 	bl	b6070 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6124:	4620      	mov	r0, r4
   b6126:	bd10      	pop	{r4, pc}
   b6128:	000b851c 	.word	0x000b851c

000b612c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b612c:	b510      	push	{r4, lr}
   b612e:	4604      	mov	r4, r0
   b6130:	f7ff fff2 	bl	b6118 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6134:	4620      	mov	r0, r4
   b6136:	210c      	movs	r1, #12
   b6138:	f7fd ffb1 	bl	b409e <_ZdlPvj>
   b613c:	4620      	mov	r0, r4
   b613e:	bd10      	pop	{r4, pc}

000b6140 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6142:	9f08      	ldr	r7, [sp, #32]
   b6144:	4297      	cmp	r7, r2
   b6146:	4605      	mov	r5, r0
   b6148:	460e      	mov	r6, r1
   b614a:	4614      	mov	r4, r2
   b614c:	d00a      	beq.n	b6164 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b614e:	68a8      	ldr	r0, [r5, #8]
   b6150:	6802      	ldr	r2, [r0, #0]
   b6152:	9708      	str	r7, [sp, #32]
   b6154:	6a15      	ldr	r5, [r2, #32]
   b6156:	4631      	mov	r1, r6
   b6158:	4622      	mov	r2, r4
   b615a:	46ac      	mov	ip, r5
   b615c:	b003      	add	sp, #12
   b615e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6162:	4760      	bx	ip
   b6164:	4619      	mov	r1, r3
   b6166:	9301      	str	r3, [sp, #4]
   b6168:	f000 f858 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b616c:	9b01      	ldr	r3, [sp, #4]
   b616e:	2800      	cmp	r0, #0
   b6170:	d0ed      	beq.n	b614e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6172:	2006      	movs	r0, #6
   b6174:	b003      	add	sp, #12
   b6176:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6178:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b617c:	460d      	mov	r5, r1
   b617e:	4619      	mov	r1, r3
   b6180:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6184:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6188:	4681      	mov	r9, r0
   b618a:	4617      	mov	r7, r2
   b618c:	4698      	mov	r8, r3
   b618e:	f000 f845 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b6192:	b190      	cbz	r0, b61ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6194:	2d00      	cmp	r5, #0
   b6196:	6034      	str	r4, [r6, #0]
   b6198:	7137      	strb	r7, [r6, #4]
   b619a:	db09      	blt.n	b61b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b619c:	1961      	adds	r1, r4, r5
   b619e:	458a      	cmp	sl, r1
   b61a0:	bf0c      	ite	eq
   b61a2:	2106      	moveq	r1, #6
   b61a4:	2101      	movne	r1, #1
   b61a6:	71b1      	strb	r1, [r6, #6]
   b61a8:	2000      	movs	r0, #0
   b61aa:	b001      	add	sp, #4
   b61ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61b0:	3502      	adds	r5, #2
   b61b2:	d1f9      	bne.n	b61a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b61b4:	2301      	movs	r3, #1
   b61b6:	71b3      	strb	r3, [r6, #6]
   b61b8:	e7f6      	b.n	b61a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b61ba:	4554      	cmp	r4, sl
   b61bc:	d106      	bne.n	b61cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b61be:	4659      	mov	r1, fp
   b61c0:	4648      	mov	r0, r9
   b61c2:	f000 f82b 	bl	b621c <_ZNKSt9type_infoeqERKS_>
   b61c6:	b108      	cbz	r0, b61cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b61c8:	7177      	strb	r7, [r6, #5]
   b61ca:	e7ed      	b.n	b61a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b61cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b61d0:	6803      	ldr	r3, [r0, #0]
   b61d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b61d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b61da:	69dc      	ldr	r4, [r3, #28]
   b61dc:	463a      	mov	r2, r7
   b61de:	4643      	mov	r3, r8
   b61e0:	4629      	mov	r1, r5
   b61e2:	46a4      	mov	ip, r4
   b61e4:	b001      	add	sp, #4
   b61e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61ea:	4760      	bx	ip

000b61ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b61ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61f0:	4607      	mov	r7, r0
   b61f2:	460c      	mov	r4, r1
   b61f4:	4615      	mov	r5, r2
   b61f6:	461e      	mov	r6, r3
   b61f8:	f7ff ff6d 	bl	b60d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b61fc:	b948      	cbnz	r0, b6212 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b61fe:	68b8      	ldr	r0, [r7, #8]
   b6200:	6803      	ldr	r3, [r0, #0]
   b6202:	699f      	ldr	r7, [r3, #24]
   b6204:	462a      	mov	r2, r5
   b6206:	4633      	mov	r3, r6
   b6208:	4621      	mov	r1, r4
   b620a:	46bc      	mov	ip, r7
   b620c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6210:	4760      	bx	ip
   b6212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6216 <_ZNSt9type_infoD1Ev>:
   b6216:	4770      	bx	lr

000b6218 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6218:	2000      	movs	r0, #0
   b621a:	4770      	bx	lr

000b621c <_ZNKSt9type_infoeqERKS_>:
   b621c:	4281      	cmp	r1, r0
   b621e:	b508      	push	{r3, lr}
   b6220:	d00e      	beq.n	b6240 <_ZNKSt9type_infoeqERKS_+0x24>
   b6222:	6840      	ldr	r0, [r0, #4]
   b6224:	7803      	ldrb	r3, [r0, #0]
   b6226:	2b2a      	cmp	r3, #42	; 0x2a
   b6228:	d00c      	beq.n	b6244 <_ZNKSt9type_infoeqERKS_+0x28>
   b622a:	6849      	ldr	r1, [r1, #4]
   b622c:	780b      	ldrb	r3, [r1, #0]
   b622e:	2b2a      	cmp	r3, #42	; 0x2a
   b6230:	bf08      	it	eq
   b6232:	3101      	addeq	r1, #1
   b6234:	f001 feda 	bl	b7fec <strcmp>
   b6238:	fab0 f080 	clz	r0, r0
   b623c:	0940      	lsrs	r0, r0, #5
   b623e:	bd08      	pop	{r3, pc}
   b6240:	2001      	movs	r0, #1
   b6242:	e7fc      	b.n	b623e <_ZNKSt9type_infoeqERKS_+0x22>
   b6244:	2000      	movs	r0, #0
   b6246:	e7fa      	b.n	b623e <_ZNKSt9type_infoeqERKS_+0x22>

000b6248 <sin>:
   b6248:	ec51 0b10 	vmov	r0, r1, d0
   b624c:	4a20      	ldr	r2, [pc, #128]	; (b62d0 <sin+0x88>)
   b624e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6252:	4293      	cmp	r3, r2
   b6254:	dd27      	ble.n	b62a6 <sin+0x5e>
   b6256:	b500      	push	{lr}
   b6258:	4a1e      	ldr	r2, [pc, #120]	; (b62d4 <sin+0x8c>)
   b625a:	4293      	cmp	r3, r2
   b625c:	b085      	sub	sp, #20
   b625e:	dd09      	ble.n	b6274 <sin+0x2c>
   b6260:	ee10 2a10 	vmov	r2, s0
   b6264:	460b      	mov	r3, r1
   b6266:	f001 f9ad 	bl	b75c4 <__aeabi_dsub>
   b626a:	ec41 0b10 	vmov	d0, r0, r1
   b626e:	b005      	add	sp, #20
   b6270:	f85d fb04 	ldr.w	pc, [sp], #4
   b6274:	4668      	mov	r0, sp
   b6276:	f000 f82f 	bl	b62d8 <__ieee754_rem_pio2>
   b627a:	f000 0003 	and.w	r0, r0, #3
   b627e:	2801      	cmp	r0, #1
   b6280:	ed9d 1b02 	vldr	d1, [sp, #8]
   b6284:	ed9d 0b00 	vldr	d0, [sp]
   b6288:	d012      	beq.n	b62b0 <sin+0x68>
   b628a:	2802      	cmp	r0, #2
   b628c:	d017      	beq.n	b62be <sin+0x76>
   b628e:	b190      	cbz	r0, b62b6 <sin+0x6e>
   b6290:	f000 fa4a 	bl	b6728 <__kernel_cos>
   b6294:	ec53 2b10 	vmov	r2, r3, d0
   b6298:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   b629c:	ee00 3a90 	vmov	s1, r3
   b62a0:	b005      	add	sp, #20
   b62a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b62a6:	ed9f 1b08 	vldr	d1, [pc, #32]	; b62c8 <sin+0x80>
   b62aa:	2000      	movs	r0, #0
   b62ac:	f000 bfa8 	b.w	b7200 <__kernel_sin>
   b62b0:	f000 fa3a 	bl	b6728 <__kernel_cos>
   b62b4:	e7db      	b.n	b626e <sin+0x26>
   b62b6:	2001      	movs	r0, #1
   b62b8:	f000 ffa2 	bl	b7200 <__kernel_sin>
   b62bc:	e7d7      	b.n	b626e <sin+0x26>
   b62be:	2001      	movs	r0, #1
   b62c0:	f000 ff9e 	bl	b7200 <__kernel_sin>
   b62c4:	e7e6      	b.n	b6294 <sin+0x4c>
   b62c6:	bf00      	nop
	...
   b62d0:	3fe921fb 	.word	0x3fe921fb
   b62d4:	7fefffff 	.word	0x7fefffff

000b62d8 <__ieee754_rem_pio2>:
   b62d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62dc:	ec53 2b10 	vmov	r2, r3, d0
   b62e0:	ed2d 8b04 	vpush	{d8-d9}
   b62e4:	4990      	ldr	r1, [pc, #576]	; (b6528 <__ieee754_rem_pio2+0x250>)
   b62e6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   b62ea:	428d      	cmp	r5, r1
   b62ec:	b08b      	sub	sp, #44	; 0x2c
   b62ee:	4604      	mov	r4, r0
   b62f0:	f340 808c 	ble.w	b640c <__ieee754_rem_pio2+0x134>
   b62f4:	498d      	ldr	r1, [pc, #564]	; (b652c <__ieee754_rem_pio2+0x254>)
   b62f6:	428d      	cmp	r5, r1
   b62f8:	461f      	mov	r7, r3
   b62fa:	dc2b      	bgt.n	b6354 <__ieee754_rem_pio2+0x7c>
   b62fc:	2f00      	cmp	r7, #0
   b62fe:	4619      	mov	r1, r3
   b6300:	ee10 0a10 	vmov	r0, s0
   b6304:	a37e      	add	r3, pc, #504	; (adr r3, b6500 <__ieee754_rem_pio2+0x228>)
   b6306:	e9d3 2300 	ldrd	r2, r3, [r3]
   b630a:	f340 81b6 	ble.w	b667a <__ieee754_rem_pio2+0x3a2>
   b630e:	f001 f959 	bl	b75c4 <__aeabi_dsub>
   b6312:	4b87      	ldr	r3, [pc, #540]	; (b6530 <__ieee754_rem_pio2+0x258>)
   b6314:	429d      	cmp	r5, r3
   b6316:	4680      	mov	r8, r0
   b6318:	4689      	mov	r9, r1
   b631a:	f000 808f 	beq.w	b643c <__ieee754_rem_pio2+0x164>
   b631e:	a37a      	add	r3, pc, #488	; (adr r3, b6508 <__ieee754_rem_pio2+0x230>)
   b6320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6324:	f001 f94e 	bl	b75c4 <__aeabi_dsub>
   b6328:	4602      	mov	r2, r0
   b632a:	460b      	mov	r3, r1
   b632c:	e9c4 2300 	strd	r2, r3, [r4]
   b6330:	4640      	mov	r0, r8
   b6332:	4649      	mov	r1, r9
   b6334:	f001 f946 	bl	b75c4 <__aeabi_dsub>
   b6338:	a373      	add	r3, pc, #460	; (adr r3, b6508 <__ieee754_rem_pio2+0x230>)
   b633a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b633e:	f001 f941 	bl	b75c4 <__aeabi_dsub>
   b6342:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b6346:	2601      	movs	r6, #1
   b6348:	4630      	mov	r0, r6
   b634a:	b00b      	add	sp, #44	; 0x2c
   b634c:	ecbd 8b04 	vpop	{d8-d9}
   b6350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6354:	4977      	ldr	r1, [pc, #476]	; (b6534 <__ieee754_rem_pio2+0x25c>)
   b6356:	428d      	cmp	r5, r1
   b6358:	f340 8092 	ble.w	b6480 <__ieee754_rem_pio2+0x1a8>
   b635c:	4976      	ldr	r1, [pc, #472]	; (b6538 <__ieee754_rem_pio2+0x260>)
   b635e:	428d      	cmp	r5, r1
   b6360:	dc61      	bgt.n	b6426 <__ieee754_rem_pio2+0x14e>
   b6362:	152e      	asrs	r6, r5, #20
   b6364:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   b6368:	ee10 0a10 	vmov	r0, s0
   b636c:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   b6370:	4690      	mov	r8, r2
   b6372:	4689      	mov	r9, r1
   b6374:	f001 fd78 	bl	b7e68 <__aeabi_d2iz>
   b6378:	f001 fa72 	bl	b7860 <__aeabi_i2d>
   b637c:	4602      	mov	r2, r0
   b637e:	460b      	mov	r3, r1
   b6380:	4640      	mov	r0, r8
   b6382:	4649      	mov	r1, r9
   b6384:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b6388:	f001 f91c 	bl	b75c4 <__aeabi_dsub>
   b638c:	4b6b      	ldr	r3, [pc, #428]	; (b653c <__ieee754_rem_pio2+0x264>)
   b638e:	2200      	movs	r2, #0
   b6390:	f001 fad0 	bl	b7934 <__aeabi_dmul>
   b6394:	4689      	mov	r9, r1
   b6396:	4680      	mov	r8, r0
   b6398:	f001 fd66 	bl	b7e68 <__aeabi_d2iz>
   b639c:	4605      	mov	r5, r0
   b639e:	f001 fa5f 	bl	b7860 <__aeabi_i2d>
   b63a2:	4602      	mov	r2, r0
   b63a4:	460b      	mov	r3, r1
   b63a6:	4640      	mov	r0, r8
   b63a8:	4649      	mov	r1, r9
   b63aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b63ae:	f001 f909 	bl	b75c4 <__aeabi_dsub>
   b63b2:	4b62      	ldr	r3, [pc, #392]	; (b653c <__ieee754_rem_pio2+0x264>)
   b63b4:	2200      	movs	r2, #0
   b63b6:	f001 fabd 	bl	b7934 <__aeabi_dmul>
   b63ba:	4602      	mov	r2, r0
   b63bc:	460b      	mov	r3, r1
   b63be:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b63c2:	2200      	movs	r2, #0
   b63c4:	2300      	movs	r3, #0
   b63c6:	f001 fd1d 	bl	b7e04 <__aeabi_dcmpeq>
   b63ca:	2800      	cmp	r0, #0
   b63cc:	f000 8153 	beq.w	b6676 <__ieee754_rem_pio2+0x39e>
   b63d0:	2d00      	cmp	r5, #0
   b63d2:	bf0c      	ite	eq
   b63d4:	2301      	moveq	r3, #1
   b63d6:	2302      	movne	r3, #2
   b63d8:	4a59      	ldr	r2, [pc, #356]	; (b6540 <__ieee754_rem_pio2+0x268>)
   b63da:	9201      	str	r2, [sp, #4]
   b63dc:	2202      	movs	r2, #2
   b63de:	9200      	str	r2, [sp, #0]
   b63e0:	4621      	mov	r1, r4
   b63e2:	4632      	mov	r2, r6
   b63e4:	a804      	add	r0, sp, #16
   b63e6:	f000 fadf 	bl	b69a8 <__kernel_rem_pio2>
   b63ea:	2f00      	cmp	r7, #0
   b63ec:	4606      	mov	r6, r0
   b63ee:	daab      	bge.n	b6348 <__ieee754_rem_pio2+0x70>
   b63f0:	6861      	ldr	r1, [r4, #4]
   b63f2:	6822      	ldr	r2, [r4, #0]
   b63f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b63f8:	68e1      	ldr	r1, [r4, #12]
   b63fa:	e9c4 2300 	strd	r2, r3, [r4]
   b63fe:	68a2      	ldr	r2, [r4, #8]
   b6400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6404:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b6408:	4246      	negs	r6, r0
   b640a:	e79d      	b.n	b6348 <__ieee754_rem_pio2+0x70>
   b640c:	2000      	movs	r0, #0
   b640e:	2100      	movs	r1, #0
   b6410:	2600      	movs	r6, #0
   b6412:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b6416:	4630      	mov	r0, r6
   b6418:	ed84 0b00 	vstr	d0, [r4]
   b641c:	b00b      	add	sp, #44	; 0x2c
   b641e:	ecbd 8b04 	vpop	{d8-d9}
   b6422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6426:	ee10 0a10 	vmov	r0, s0
   b642a:	4619      	mov	r1, r3
   b642c:	f001 f8ca 	bl	b75c4 <__aeabi_dsub>
   b6430:	2600      	movs	r6, #0
   b6432:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b6436:	e9c4 0100 	strd	r0, r1, [r4]
   b643a:	e785      	b.n	b6348 <__ieee754_rem_pio2+0x70>
   b643c:	a334      	add	r3, pc, #208	; (adr r3, b6510 <__ieee754_rem_pio2+0x238>)
   b643e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6442:	f001 f8bf 	bl	b75c4 <__aeabi_dsub>
   b6446:	a334      	add	r3, pc, #208	; (adr r3, b6518 <__ieee754_rem_pio2+0x240>)
   b6448:	e9d3 2300 	ldrd	r2, r3, [r3]
   b644c:	4680      	mov	r8, r0
   b644e:	4689      	mov	r9, r1
   b6450:	f001 f8b8 	bl	b75c4 <__aeabi_dsub>
   b6454:	4602      	mov	r2, r0
   b6456:	460b      	mov	r3, r1
   b6458:	e9c4 2300 	strd	r2, r3, [r4]
   b645c:	4640      	mov	r0, r8
   b645e:	4649      	mov	r1, r9
   b6460:	f001 f8b0 	bl	b75c4 <__aeabi_dsub>
   b6464:	a32c      	add	r3, pc, #176	; (adr r3, b6518 <__ieee754_rem_pio2+0x240>)
   b6466:	e9d3 2300 	ldrd	r2, r3, [r3]
   b646a:	f001 f8ab 	bl	b75c4 <__aeabi_dsub>
   b646e:	2601      	movs	r6, #1
   b6470:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b6474:	4630      	mov	r0, r6
   b6476:	b00b      	add	sp, #44	; 0x2c
   b6478:	ecbd 8b04 	vpop	{d8-d9}
   b647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6480:	f000 ff7c 	bl	b737c <fabs>
   b6484:	ec59 8b10 	vmov	r8, r9, d0
   b6488:	ee10 0a10 	vmov	r0, s0
   b648c:	a324      	add	r3, pc, #144	; (adr r3, b6520 <__ieee754_rem_pio2+0x248>)
   b648e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6492:	4649      	mov	r1, r9
   b6494:	f001 fa4e 	bl	b7934 <__aeabi_dmul>
   b6498:	4b2a      	ldr	r3, [pc, #168]	; (b6544 <__ieee754_rem_pio2+0x26c>)
   b649a:	2200      	movs	r2, #0
   b649c:	f001 f894 	bl	b75c8 <__adddf3>
   b64a0:	f001 fce2 	bl	b7e68 <__aeabi_d2iz>
   b64a4:	4606      	mov	r6, r0
   b64a6:	f001 f9db 	bl	b7860 <__aeabi_i2d>
   b64aa:	4602      	mov	r2, r0
   b64ac:	460b      	mov	r3, r1
   b64ae:	ec43 2b18 	vmov	d8, r2, r3
   b64b2:	a313      	add	r3, pc, #76	; (adr r3, b6500 <__ieee754_rem_pio2+0x228>)
   b64b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b64b8:	eeb0 9a48 	vmov.f32	s18, s16
   b64bc:	eef0 9a68 	vmov.f32	s19, s17
   b64c0:	f001 fa38 	bl	b7934 <__aeabi_dmul>
   b64c4:	4602      	mov	r2, r0
   b64c6:	460b      	mov	r3, r1
   b64c8:	4640      	mov	r0, r8
   b64ca:	4649      	mov	r1, r9
   b64cc:	f001 f87a 	bl	b75c4 <__aeabi_dsub>
   b64d0:	a30d      	add	r3, pc, #52	; (adr r3, b6508 <__ieee754_rem_pio2+0x230>)
   b64d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b64d6:	4682      	mov	sl, r0
   b64d8:	468b      	mov	fp, r1
   b64da:	ec51 0b18 	vmov	r0, r1, d8
   b64de:	f001 fa29 	bl	b7934 <__aeabi_dmul>
   b64e2:	2e1f      	cmp	r6, #31
   b64e4:	ec41 0b18 	vmov	d8, r0, r1
   b64e8:	dc30      	bgt.n	b654c <__ieee754_rem_pio2+0x274>
   b64ea:	4b17      	ldr	r3, [pc, #92]	; (b6548 <__ieee754_rem_pio2+0x270>)
   b64ec:	1e72      	subs	r2, r6, #1
   b64ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b64f2:	42ab      	cmp	r3, r5
   b64f4:	d02a      	beq.n	b654c <__ieee754_rem_pio2+0x274>
   b64f6:	4602      	mov	r2, r0
   b64f8:	460b      	mov	r3, r1
   b64fa:	e09b      	b.n	b6634 <__ieee754_rem_pio2+0x35c>
   b64fc:	f3af 8000 	nop.w
   b6500:	54400000 	.word	0x54400000
   b6504:	3ff921fb 	.word	0x3ff921fb
   b6508:	1a626331 	.word	0x1a626331
   b650c:	3dd0b461 	.word	0x3dd0b461
   b6510:	1a600000 	.word	0x1a600000
   b6514:	3dd0b461 	.word	0x3dd0b461
   b6518:	2e037073 	.word	0x2e037073
   b651c:	3ba3198a 	.word	0x3ba3198a
   b6520:	6dc9c883 	.word	0x6dc9c883
   b6524:	3fe45f30 	.word	0x3fe45f30
   b6528:	3fe921fb 	.word	0x3fe921fb
   b652c:	4002d97b 	.word	0x4002d97b
   b6530:	3ff921fb 	.word	0x3ff921fb
   b6534:	413921fb 	.word	0x413921fb
   b6538:	7fefffff 	.word	0x7fefffff
   b653c:	41700000 	.word	0x41700000
   b6540:	000b85d8 	.word	0x000b85d8
   b6544:	3fe00000 	.word	0x3fe00000
   b6548:	000b8558 	.word	0x000b8558
   b654c:	152b      	asrs	r3, r5, #20
   b654e:	9303      	str	r3, [sp, #12]
   b6550:	4650      	mov	r0, sl
   b6552:	ec53 2b18 	vmov	r2, r3, d8
   b6556:	4659      	mov	r1, fp
   b6558:	f001 f834 	bl	b75c4 <__aeabi_dsub>
   b655c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b6560:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   b6564:	2d10      	cmp	r5, #16
   b6566:	4680      	mov	r8, r0
   b6568:	4689      	mov	r9, r1
   b656a:	dd69      	ble.n	b6640 <__ieee754_rem_pio2+0x368>
   b656c:	a364      	add	r3, pc, #400	; (adr r3, b6700 <__ieee754_rem_pio2+0x428>)
   b656e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6572:	ec51 0b19 	vmov	r0, r1, d9
   b6576:	f001 f9dd 	bl	b7934 <__aeabi_dmul>
   b657a:	4680      	mov	r8, r0
   b657c:	4689      	mov	r9, r1
   b657e:	4642      	mov	r2, r8
   b6580:	464b      	mov	r3, r9
   b6582:	4650      	mov	r0, sl
   b6584:	4659      	mov	r1, fp
   b6586:	f001 f81d 	bl	b75c4 <__aeabi_dsub>
   b658a:	4602      	mov	r2, r0
   b658c:	460b      	mov	r3, r1
   b658e:	4650      	mov	r0, sl
   b6590:	4659      	mov	r1, fp
   b6592:	4692      	mov	sl, r2
   b6594:	469b      	mov	fp, r3
   b6596:	f001 f815 	bl	b75c4 <__aeabi_dsub>
   b659a:	4642      	mov	r2, r8
   b659c:	464b      	mov	r3, r9
   b659e:	f001 f811 	bl	b75c4 <__aeabi_dsub>
   b65a2:	a359      	add	r3, pc, #356	; (adr r3, b6708 <__ieee754_rem_pio2+0x430>)
   b65a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65a8:	4680      	mov	r8, r0
   b65aa:	4689      	mov	r9, r1
   b65ac:	ec51 0b19 	vmov	r0, r1, d9
   b65b0:	f001 f9c0 	bl	b7934 <__aeabi_dmul>
   b65b4:	4642      	mov	r2, r8
   b65b6:	464b      	mov	r3, r9
   b65b8:	f001 f804 	bl	b75c4 <__aeabi_dsub>
   b65bc:	4602      	mov	r2, r0
   b65be:	460b      	mov	r3, r1
   b65c0:	4650      	mov	r0, sl
   b65c2:	4659      	mov	r1, fp
   b65c4:	ec43 2b18 	vmov	d8, r2, r3
   b65c8:	f000 fffc 	bl	b75c4 <__aeabi_dsub>
   b65cc:	9a03      	ldr	r2, [sp, #12]
   b65ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b65d2:	1ad3      	subs	r3, r2, r3
   b65d4:	2b31      	cmp	r3, #49	; 0x31
   b65d6:	4680      	mov	r8, r0
   b65d8:	4689      	mov	r9, r1
   b65da:	dd31      	ble.n	b6640 <__ieee754_rem_pio2+0x368>
   b65dc:	a34d      	add	r3, pc, #308	; (adr r3, b6714 <__ieee754_rem_pio2+0x43c>)
   b65de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65e2:	ec51 0b19 	vmov	r0, r1, d9
   b65e6:	f001 f9a5 	bl	b7934 <__aeabi_dmul>
   b65ea:	4680      	mov	r8, r0
   b65ec:	4689      	mov	r9, r1
   b65ee:	4642      	mov	r2, r8
   b65f0:	464b      	mov	r3, r9
   b65f2:	4650      	mov	r0, sl
   b65f4:	4659      	mov	r1, fp
   b65f6:	f000 ffe5 	bl	b75c4 <__aeabi_dsub>
   b65fa:	4602      	mov	r2, r0
   b65fc:	460b      	mov	r3, r1
   b65fe:	4650      	mov	r0, sl
   b6600:	4659      	mov	r1, fp
   b6602:	4692      	mov	sl, r2
   b6604:	469b      	mov	fp, r3
   b6606:	f000 ffdd 	bl	b75c4 <__aeabi_dsub>
   b660a:	4642      	mov	r2, r8
   b660c:	464b      	mov	r3, r9
   b660e:	f000 ffd9 	bl	b75c4 <__aeabi_dsub>
   b6612:	a342      	add	r3, pc, #264	; (adr r3, b671c <__ieee754_rem_pio2+0x444>)
   b6614:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6618:	4680      	mov	r8, r0
   b661a:	4689      	mov	r9, r1
   b661c:	ec51 0b19 	vmov	r0, r1, d9
   b6620:	f001 f988 	bl	b7934 <__aeabi_dmul>
   b6624:	4642      	mov	r2, r8
   b6626:	464b      	mov	r3, r9
   b6628:	f000 ffcc 	bl	b75c4 <__aeabi_dsub>
   b662c:	4602      	mov	r2, r0
   b662e:	460b      	mov	r3, r1
   b6630:	ec43 2b18 	vmov	d8, r2, r3
   b6634:	4650      	mov	r0, sl
   b6636:	4659      	mov	r1, fp
   b6638:	f000 ffc4 	bl	b75c4 <__aeabi_dsub>
   b663c:	4680      	mov	r8, r0
   b663e:	4689      	mov	r9, r1
   b6640:	4642      	mov	r2, r8
   b6642:	464b      	mov	r3, r9
   b6644:	e9c4 8900 	strd	r8, r9, [r4]
   b6648:	4650      	mov	r0, sl
   b664a:	4659      	mov	r1, fp
   b664c:	f000 ffba 	bl	b75c4 <__aeabi_dsub>
   b6650:	ec53 2b18 	vmov	r2, r3, d8
   b6654:	f000 ffb6 	bl	b75c4 <__aeabi_dsub>
   b6658:	2f00      	cmp	r7, #0
   b665a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b665e:	f6bf ae73 	bge.w	b6348 <__ieee754_rem_pio2+0x70>
   b6662:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b6666:	e9c4 8300 	strd	r8, r3, [r4]
   b666a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b666e:	e9c4 0302 	strd	r0, r3, [r4, #8]
   b6672:	4276      	negs	r6, r6
   b6674:	e668      	b.n	b6348 <__ieee754_rem_pio2+0x70>
   b6676:	2303      	movs	r3, #3
   b6678:	e6ae      	b.n	b63d8 <__ieee754_rem_pio2+0x100>
   b667a:	f000 ffa5 	bl	b75c8 <__adddf3>
   b667e:	4b24      	ldr	r3, [pc, #144]	; (b6710 <__ieee754_rem_pio2+0x438>)
   b6680:	429d      	cmp	r5, r3
   b6682:	4680      	mov	r8, r0
   b6684:	4689      	mov	r9, r1
   b6686:	d016      	beq.n	b66b6 <__ieee754_rem_pio2+0x3de>
   b6688:	a31b      	add	r3, pc, #108	; (adr r3, b66f8 <__ieee754_rem_pio2+0x420>)
   b668a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b668e:	f000 ff9b 	bl	b75c8 <__adddf3>
   b6692:	4602      	mov	r2, r0
   b6694:	460b      	mov	r3, r1
   b6696:	e9c4 2300 	strd	r2, r3, [r4]
   b669a:	4640      	mov	r0, r8
   b669c:	4649      	mov	r1, r9
   b669e:	f000 ff91 	bl	b75c4 <__aeabi_dsub>
   b66a2:	a315      	add	r3, pc, #84	; (adr r3, b66f8 <__ieee754_rem_pio2+0x420>)
   b66a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66a8:	f000 ff8e 	bl	b75c8 <__adddf3>
   b66ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   b66b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b66b4:	e648      	b.n	b6348 <__ieee754_rem_pio2+0x70>
   b66b6:	a312      	add	r3, pc, #72	; (adr r3, b6700 <__ieee754_rem_pio2+0x428>)
   b66b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66bc:	f000 ff84 	bl	b75c8 <__adddf3>
   b66c0:	a311      	add	r3, pc, #68	; (adr r3, b6708 <__ieee754_rem_pio2+0x430>)
   b66c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66c6:	4680      	mov	r8, r0
   b66c8:	4689      	mov	r9, r1
   b66ca:	f000 ff7d 	bl	b75c8 <__adddf3>
   b66ce:	4602      	mov	r2, r0
   b66d0:	460b      	mov	r3, r1
   b66d2:	e9c4 2300 	strd	r2, r3, [r4]
   b66d6:	4640      	mov	r0, r8
   b66d8:	4649      	mov	r1, r9
   b66da:	f000 ff73 	bl	b75c4 <__aeabi_dsub>
   b66de:	a30a      	add	r3, pc, #40	; (adr r3, b6708 <__ieee754_rem_pio2+0x430>)
   b66e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66e4:	f000 ff70 	bl	b75c8 <__adddf3>
   b66e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   b66ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b66f0:	e62a      	b.n	b6348 <__ieee754_rem_pio2+0x70>
   b66f2:	bf00      	nop
   b66f4:	f3af 8000 	nop.w
   b66f8:	1a626331 	.word	0x1a626331
   b66fc:	3dd0b461 	.word	0x3dd0b461
   b6700:	1a600000 	.word	0x1a600000
   b6704:	3dd0b461 	.word	0x3dd0b461
   b6708:	2e037073 	.word	0x2e037073
   b670c:	3ba3198a 	.word	0x3ba3198a
   b6710:	3ff921fb 	.word	0x3ff921fb
   b6714:	2e000000 	.word	0x2e000000
   b6718:	3ba3198a 	.word	0x3ba3198a
   b671c:	252049c1 	.word	0x252049c1
   b6720:	397b839a 	.word	0x397b839a
   b6724:	00000000 	.word	0x00000000

000b6728 <__kernel_cos>:
   b6728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b672c:	ec57 6b10 	vmov	r6, r7, d0
   b6730:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   b6734:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   b6738:	ed2d 8b04 	vpush	{d8-d9}
   b673c:	ec5b ab11 	vmov	sl, fp, d1
   b6740:	da71      	bge.n	b6826 <__kernel_cos+0xfe>
   b6742:	ee10 0a10 	vmov	r0, s0
   b6746:	4639      	mov	r1, r7
   b6748:	f001 fb8e 	bl	b7e68 <__aeabi_d2iz>
   b674c:	2800      	cmp	r0, #0
   b674e:	f000 80f6 	beq.w	b693e <__kernel_cos+0x216>
   b6752:	4632      	mov	r2, r6
   b6754:	463b      	mov	r3, r7
   b6756:	4630      	mov	r0, r6
   b6758:	4639      	mov	r1, r7
   b675a:	f001 f8eb 	bl	b7934 <__aeabi_dmul>
   b675e:	a37c      	add	r3, pc, #496	; (adr r3, b6950 <__kernel_cos+0x228>)
   b6760:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6764:	4604      	mov	r4, r0
   b6766:	460d      	mov	r5, r1
   b6768:	f001 f8e4 	bl	b7934 <__aeabi_dmul>
   b676c:	a37a      	add	r3, pc, #488	; (adr r3, b6958 <__kernel_cos+0x230>)
   b676e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6772:	f000 ff29 	bl	b75c8 <__adddf3>
   b6776:	4622      	mov	r2, r4
   b6778:	462b      	mov	r3, r5
   b677a:	f001 f8db 	bl	b7934 <__aeabi_dmul>
   b677e:	a378      	add	r3, pc, #480	; (adr r3, b6960 <__kernel_cos+0x238>)
   b6780:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6784:	f000 ff1e 	bl	b75c4 <__aeabi_dsub>
   b6788:	4622      	mov	r2, r4
   b678a:	462b      	mov	r3, r5
   b678c:	f001 f8d2 	bl	b7934 <__aeabi_dmul>
   b6790:	a375      	add	r3, pc, #468	; (adr r3, b6968 <__kernel_cos+0x240>)
   b6792:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6796:	f000 ff17 	bl	b75c8 <__adddf3>
   b679a:	4622      	mov	r2, r4
   b679c:	462b      	mov	r3, r5
   b679e:	f001 f8c9 	bl	b7934 <__aeabi_dmul>
   b67a2:	a373      	add	r3, pc, #460	; (adr r3, b6970 <__kernel_cos+0x248>)
   b67a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67a8:	f000 ff0c 	bl	b75c4 <__aeabi_dsub>
   b67ac:	4622      	mov	r2, r4
   b67ae:	462b      	mov	r3, r5
   b67b0:	f001 f8c0 	bl	b7934 <__aeabi_dmul>
   b67b4:	a370      	add	r3, pc, #448	; (adr r3, b6978 <__kernel_cos+0x250>)
   b67b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67ba:	f000 ff05 	bl	b75c8 <__adddf3>
   b67be:	4622      	mov	r2, r4
   b67c0:	462b      	mov	r3, r5
   b67c2:	f001 f8b7 	bl	b7934 <__aeabi_dmul>
   b67c6:	ec41 0b18 	vmov	d8, r0, r1
   b67ca:	4b71      	ldr	r3, [pc, #452]	; (b6990 <__kernel_cos+0x268>)
   b67cc:	2200      	movs	r2, #0
   b67ce:	4620      	mov	r0, r4
   b67d0:	4629      	mov	r1, r5
   b67d2:	f001 f8af 	bl	b7934 <__aeabi_dmul>
   b67d6:	ec53 2b18 	vmov	r2, r3, d8
   b67da:	4680      	mov	r8, r0
   b67dc:	4689      	mov	r9, r1
   b67de:	4620      	mov	r0, r4
   b67e0:	4629      	mov	r1, r5
   b67e2:	f001 f8a7 	bl	b7934 <__aeabi_dmul>
   b67e6:	4652      	mov	r2, sl
   b67e8:	465b      	mov	r3, fp
   b67ea:	4604      	mov	r4, r0
   b67ec:	460d      	mov	r5, r1
   b67ee:	4630      	mov	r0, r6
   b67f0:	4639      	mov	r1, r7
   b67f2:	f001 f89f 	bl	b7934 <__aeabi_dmul>
   b67f6:	4602      	mov	r2, r0
   b67f8:	460b      	mov	r3, r1
   b67fa:	4620      	mov	r0, r4
   b67fc:	4629      	mov	r1, r5
   b67fe:	f000 fee1 	bl	b75c4 <__aeabi_dsub>
   b6802:	4602      	mov	r2, r0
   b6804:	460b      	mov	r3, r1
   b6806:	4640      	mov	r0, r8
   b6808:	4649      	mov	r1, r9
   b680a:	f000 fedb 	bl	b75c4 <__aeabi_dsub>
   b680e:	4602      	mov	r2, r0
   b6810:	460b      	mov	r3, r1
   b6812:	2000      	movs	r0, #0
   b6814:	495f      	ldr	r1, [pc, #380]	; (b6994 <__kernel_cos+0x26c>)
   b6816:	f000 fed5 	bl	b75c4 <__aeabi_dsub>
   b681a:	ecbd 8b04 	vpop	{d8-d9}
   b681e:	ec41 0b10 	vmov	d0, r0, r1
   b6822:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6826:	ee10 2a10 	vmov	r2, s0
   b682a:	ee10 0a10 	vmov	r0, s0
   b682e:	463b      	mov	r3, r7
   b6830:	4639      	mov	r1, r7
   b6832:	f001 f87f 	bl	b7934 <__aeabi_dmul>
   b6836:	a346      	add	r3, pc, #280	; (adr r3, b6950 <__kernel_cos+0x228>)
   b6838:	e9d3 2300 	ldrd	r2, r3, [r3]
   b683c:	4604      	mov	r4, r0
   b683e:	460d      	mov	r5, r1
   b6840:	f001 f878 	bl	b7934 <__aeabi_dmul>
   b6844:	a344      	add	r3, pc, #272	; (adr r3, b6958 <__kernel_cos+0x230>)
   b6846:	e9d3 2300 	ldrd	r2, r3, [r3]
   b684a:	f000 febd 	bl	b75c8 <__adddf3>
   b684e:	4622      	mov	r2, r4
   b6850:	462b      	mov	r3, r5
   b6852:	f001 f86f 	bl	b7934 <__aeabi_dmul>
   b6856:	a342      	add	r3, pc, #264	; (adr r3, b6960 <__kernel_cos+0x238>)
   b6858:	e9d3 2300 	ldrd	r2, r3, [r3]
   b685c:	f000 feb2 	bl	b75c4 <__aeabi_dsub>
   b6860:	4622      	mov	r2, r4
   b6862:	462b      	mov	r3, r5
   b6864:	f001 f866 	bl	b7934 <__aeabi_dmul>
   b6868:	a33f      	add	r3, pc, #252	; (adr r3, b6968 <__kernel_cos+0x240>)
   b686a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b686e:	f000 feab 	bl	b75c8 <__adddf3>
   b6872:	4622      	mov	r2, r4
   b6874:	462b      	mov	r3, r5
   b6876:	f001 f85d 	bl	b7934 <__aeabi_dmul>
   b687a:	a33d      	add	r3, pc, #244	; (adr r3, b6970 <__kernel_cos+0x248>)
   b687c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6880:	f000 fea0 	bl	b75c4 <__aeabi_dsub>
   b6884:	4622      	mov	r2, r4
   b6886:	462b      	mov	r3, r5
   b6888:	f001 f854 	bl	b7934 <__aeabi_dmul>
   b688c:	a33a      	add	r3, pc, #232	; (adr r3, b6978 <__kernel_cos+0x250>)
   b688e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6892:	f000 fe99 	bl	b75c8 <__adddf3>
   b6896:	462b      	mov	r3, r5
   b6898:	4622      	mov	r2, r4
   b689a:	f001 f84b 	bl	b7934 <__aeabi_dmul>
   b689e:	4b3e      	ldr	r3, [pc, #248]	; (b6998 <__kernel_cos+0x270>)
   b68a0:	4599      	cmp	r9, r3
   b68a2:	ec41 0b18 	vmov	d8, r0, r1
   b68a6:	dd90      	ble.n	b67ca <__kernel_cos+0xa2>
   b68a8:	4b3c      	ldr	r3, [pc, #240]	; (b699c <__kernel_cos+0x274>)
   b68aa:	4599      	cmp	r9, r3
   b68ac:	dc3c      	bgt.n	b6928 <__kernel_cos+0x200>
   b68ae:	2200      	movs	r2, #0
   b68b0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   b68b4:	4937      	ldr	r1, [pc, #220]	; (b6994 <__kernel_cos+0x26c>)
   b68b6:	2000      	movs	r0, #0
   b68b8:	4690      	mov	r8, r2
   b68ba:	4699      	mov	r9, r3
   b68bc:	f000 fe82 	bl	b75c4 <__aeabi_dsub>
   b68c0:	ec41 0b19 	vmov	d9, r0, r1
   b68c4:	4b32      	ldr	r3, [pc, #200]	; (b6990 <__kernel_cos+0x268>)
   b68c6:	2200      	movs	r2, #0
   b68c8:	4620      	mov	r0, r4
   b68ca:	4629      	mov	r1, r5
   b68cc:	f001 f832 	bl	b7934 <__aeabi_dmul>
   b68d0:	4642      	mov	r2, r8
   b68d2:	464b      	mov	r3, r9
   b68d4:	f000 fe76 	bl	b75c4 <__aeabi_dsub>
   b68d8:	ec53 2b18 	vmov	r2, r3, d8
   b68dc:	4680      	mov	r8, r0
   b68de:	4689      	mov	r9, r1
   b68e0:	4620      	mov	r0, r4
   b68e2:	4629      	mov	r1, r5
   b68e4:	f001 f826 	bl	b7934 <__aeabi_dmul>
   b68e8:	4652      	mov	r2, sl
   b68ea:	465b      	mov	r3, fp
   b68ec:	4604      	mov	r4, r0
   b68ee:	460d      	mov	r5, r1
   b68f0:	4630      	mov	r0, r6
   b68f2:	4639      	mov	r1, r7
   b68f4:	f001 f81e 	bl	b7934 <__aeabi_dmul>
   b68f8:	4602      	mov	r2, r0
   b68fa:	460b      	mov	r3, r1
   b68fc:	4620      	mov	r0, r4
   b68fe:	4629      	mov	r1, r5
   b6900:	f000 fe60 	bl	b75c4 <__aeabi_dsub>
   b6904:	4602      	mov	r2, r0
   b6906:	460b      	mov	r3, r1
   b6908:	4640      	mov	r0, r8
   b690a:	4649      	mov	r1, r9
   b690c:	f000 fe5a 	bl	b75c4 <__aeabi_dsub>
   b6910:	4602      	mov	r2, r0
   b6912:	460b      	mov	r3, r1
   b6914:	ec51 0b19 	vmov	r0, r1, d9
   b6918:	f000 fe54 	bl	b75c4 <__aeabi_dsub>
   b691c:	ecbd 8b04 	vpop	{d8-d9}
   b6920:	ec41 0b10 	vmov	d0, r0, r1
   b6924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6928:	ed9f 7b15 	vldr	d7, [pc, #84]	; b6980 <__kernel_cos+0x258>
   b692c:	f8df 9070 	ldr.w	r9, [pc, #112]	; b69a0 <__kernel_cos+0x278>
   b6930:	eeb0 9a47 	vmov.f32	s18, s14
   b6934:	eef0 9a67 	vmov.f32	s19, s15
   b6938:	f04f 0800 	mov.w	r8, #0
   b693c:	e7c2      	b.n	b68c4 <__kernel_cos+0x19c>
   b693e:	ecbd 8b04 	vpop	{d8-d9}
   b6942:	ed9f 0b11 	vldr	d0, [pc, #68]	; b6988 <__kernel_cos+0x260>
   b6946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b694a:	bf00      	nop
   b694c:	f3af 8000 	nop.w
   b6950:	be8838d4 	.word	0xbe8838d4
   b6954:	bda8fae9 	.word	0xbda8fae9
   b6958:	bdb4b1c4 	.word	0xbdb4b1c4
   b695c:	3e21ee9e 	.word	0x3e21ee9e
   b6960:	809c52ad 	.word	0x809c52ad
   b6964:	3e927e4f 	.word	0x3e927e4f
   b6968:	19cb1590 	.word	0x19cb1590
   b696c:	3efa01a0 	.word	0x3efa01a0
   b6970:	16c15177 	.word	0x16c15177
   b6974:	3f56c16c 	.word	0x3f56c16c
   b6978:	5555554c 	.word	0x5555554c
   b697c:	3fa55555 	.word	0x3fa55555
   b6980:	00000000 	.word	0x00000000
   b6984:	3fe70000 	.word	0x3fe70000
   b6988:	00000000 	.word	0x00000000
   b698c:	3ff00000 	.word	0x3ff00000
   b6990:	3fe00000 	.word	0x3fe00000
   b6994:	3ff00000 	.word	0x3ff00000
   b6998:	3fd33332 	.word	0x3fd33332
   b699c:	3fe90000 	.word	0x3fe90000
   b69a0:	3fd20000 	.word	0x3fd20000
   b69a4:	00000000 	.word	0x00000000

000b69a8 <__kernel_rem_pio2>:
   b69a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b69ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   b69b0:	461c      	mov	r4, r3
   b69b2:	9308      	str	r3, [sp, #32]
   b69b4:	910b      	str	r1, [sp, #44]	; 0x2c
   b69b6:	4bbb      	ldr	r3, [pc, #748]	; (b6ca4 <__kernel_rem_pio2+0x2fc>)
   b69b8:	99a2      	ldr	r1, [sp, #648]	; 0x288
   b69ba:	9004      	str	r0, [sp, #16]
   b69bc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   b69c0:	9105      	str	r1, [sp, #20]
   b69c2:	1e63      	subs	r3, r4, #1
   b69c4:	f112 0f14 	cmn.w	r2, #20
   b69c8:	9303      	str	r3, [sp, #12]
   b69ca:	f2c0 834b 	blt.w	b7064 <__kernel_rem_pio2+0x6bc>
   b69ce:	49b6      	ldr	r1, [pc, #728]	; (b6ca8 <__kernel_rem_pio2+0x300>)
   b69d0:	1ed3      	subs	r3, r2, #3
   b69d2:	fb81 0103 	smull	r0, r1, r1, r3
   b69d6:	17db      	asrs	r3, r3, #31
   b69d8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   b69dc:	9307      	str	r3, [sp, #28]
   b69de:	3301      	adds	r3, #1
   b69e0:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b69e4:	00db      	lsls	r3, r3, #3
   b69e6:	18d3      	adds	r3, r2, r3
   b69e8:	9306      	str	r3, [sp, #24]
   b69ea:	9a07      	ldr	r2, [sp, #28]
   b69ec:	9b03      	ldr	r3, [sp, #12]
   b69ee:	1ad4      	subs	r4, r2, r3
   b69f0:	9a05      	ldr	r2, [sp, #20]
   b69f2:	18d6      	adds	r6, r2, r3
   b69f4:	d41a      	bmi.n	b6a2c <__kernel_rem_pio2+0x84>
   b69f6:	3601      	adds	r6, #1
   b69f8:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   b69fa:	4426      	add	r6, r4
   b69fc:	ad20      	add	r5, sp, #128	; 0x80
   b69fe:	f04f 0800 	mov.w	r8, #0
   b6a02:	f04f 0900 	mov.w	r9, #0
   b6a06:	e008      	b.n	b6a1a <__kernel_rem_pio2+0x72>
   b6a08:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b6a0c:	f000 ff28 	bl	b7860 <__aeabi_i2d>
   b6a10:	3401      	adds	r4, #1
   b6a12:	42b4      	cmp	r4, r6
   b6a14:	e8e5 0102 	strd	r0, r1, [r5], #8
   b6a18:	d008      	beq.n	b6a2c <__kernel_rem_pio2+0x84>
   b6a1a:	2c00      	cmp	r4, #0
   b6a1c:	daf4      	bge.n	b6a08 <__kernel_rem_pio2+0x60>
   b6a1e:	3401      	adds	r4, #1
   b6a20:	4640      	mov	r0, r8
   b6a22:	4649      	mov	r1, r9
   b6a24:	42b4      	cmp	r4, r6
   b6a26:	e8e5 0102 	strd	r0, r1, [r5], #8
   b6a2a:	d1f6      	bne.n	b6a1a <__kernel_rem_pio2+0x72>
   b6a2c:	9b05      	ldr	r3, [sp, #20]
   b6a2e:	2b00      	cmp	r3, #0
   b6a30:	f2c0 83c8 	blt.w	b71c4 <__kernel_rem_pio2+0x81c>
   b6a34:	9b08      	ldr	r3, [sp, #32]
   b6a36:	f8dd 900c 	ldr.w	r9, [sp, #12]
   b6a3a:	00da      	lsls	r2, r3, #3
   b6a3c:	9202      	str	r2, [sp, #8]
   b6a3e:	9a05      	ldr	r2, [sp, #20]
   b6a40:	441a      	add	r2, r3
   b6a42:	9201      	str	r2, [sp, #4]
   b6a44:	9a04      	ldr	r2, [sp, #16]
   b6a46:	a920      	add	r1, sp, #128	; 0x80
   b6a48:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   b6a4c:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   b6a50:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   b6a54:	9b03      	ldr	r3, [sp, #12]
   b6a56:	2b00      	cmp	r3, #0
   b6a58:	f2c0 81a9 	blt.w	b6dae <__kernel_rem_pio2+0x406>
   b6a5c:	9e04      	ldr	r6, [sp, #16]
   b6a5e:	4657      	mov	r7, sl
   b6a60:	2400      	movs	r4, #0
   b6a62:	2500      	movs	r5, #0
   b6a64:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b6a68:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b6a6c:	f000 ff62 	bl	b7934 <__aeabi_dmul>
   b6a70:	4602      	mov	r2, r0
   b6a72:	460b      	mov	r3, r1
   b6a74:	4620      	mov	r0, r4
   b6a76:	4629      	mov	r1, r5
   b6a78:	f000 fda6 	bl	b75c8 <__adddf3>
   b6a7c:	4546      	cmp	r6, r8
   b6a7e:	4604      	mov	r4, r0
   b6a80:	460d      	mov	r5, r1
   b6a82:	d1ef      	bne.n	b6a64 <__kernel_rem_pio2+0xbc>
   b6a84:	9b01      	ldr	r3, [sp, #4]
   b6a86:	f109 0901 	add.w	r9, r9, #1
   b6a8a:	4599      	cmp	r9, r3
   b6a8c:	e8eb 4502 	strd	r4, r5, [fp], #8
   b6a90:	f10a 0a08 	add.w	sl, sl, #8
   b6a94:	d1de      	bne.n	b6a54 <__kernel_rem_pio2+0xac>
   b6a96:	9a04      	ldr	r2, [sp, #16]
   b6a98:	9b02      	ldr	r3, [sp, #8]
   b6a9a:	4413      	add	r3, r2
   b6a9c:	469b      	mov	fp, r3
   b6a9e:	9b05      	ldr	r3, [sp, #20]
   b6aa0:	a90b      	add	r1, sp, #44	; 0x2c
   b6aa2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   b6aa6:	a90c      	add	r1, sp, #48	; 0x30
   b6aa8:	920a      	str	r2, [sp, #40]	; 0x28
   b6aaa:	461a      	mov	r2, r3
   b6aac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b6ab0:	3b08      	subs	r3, #8
   b6ab2:	9309      	str	r3, [sp, #36]	; 0x24
   b6ab4:	9201      	str	r2, [sp, #4]
   b6ab6:	9a01      	ldr	r2, [sp, #4]
   b6ab8:	a998      	add	r1, sp, #608	; 0x260
   b6aba:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   b6abe:	2a00      	cmp	r2, #0
   b6ac0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   b6ac4:	dd29      	ble.n	b6b1a <__kernel_rem_pio2+0x172>
   b6ac6:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   b6aca:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   b6ace:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   b6ad2:	4b76      	ldr	r3, [pc, #472]	; (b6cac <__kernel_rem_pio2+0x304>)
   b6ad4:	2200      	movs	r2, #0
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	4629      	mov	r1, r5
   b6ada:	f000 ff2b 	bl	b7934 <__aeabi_dmul>
   b6ade:	f001 f9c3 	bl	b7e68 <__aeabi_d2iz>
   b6ae2:	f000 febd 	bl	b7860 <__aeabi_i2d>
   b6ae6:	4b72      	ldr	r3, [pc, #456]	; (b6cb0 <__kernel_rem_pio2+0x308>)
   b6ae8:	2200      	movs	r2, #0
   b6aea:	4606      	mov	r6, r0
   b6aec:	460f      	mov	r7, r1
   b6aee:	f000 ff21 	bl	b7934 <__aeabi_dmul>
   b6af2:	4602      	mov	r2, r0
   b6af4:	460b      	mov	r3, r1
   b6af6:	4620      	mov	r0, r4
   b6af8:	4629      	mov	r1, r5
   b6afa:	f000 fd63 	bl	b75c4 <__aeabi_dsub>
   b6afe:	f001 f9b3 	bl	b7e68 <__aeabi_d2iz>
   b6b02:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   b6b06:	f849 0b04 	str.w	r0, [r9], #4
   b6b0a:	4639      	mov	r1, r7
   b6b0c:	4630      	mov	r0, r6
   b6b0e:	f000 fd5b 	bl	b75c8 <__adddf3>
   b6b12:	45d0      	cmp	r8, sl
   b6b14:	4604      	mov	r4, r0
   b6b16:	460d      	mov	r5, r1
   b6b18:	d1db      	bne.n	b6ad2 <__kernel_rem_pio2+0x12a>
   b6b1a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   b6b1e:	ec45 4b10 	vmov	d0, r4, r5
   b6b22:	4648      	mov	r0, r9
   b6b24:	f000 fcb8 	bl	b7498 <scalbn>
   b6b28:	ec55 4b10 	vmov	r4, r5, d0
   b6b2c:	2200      	movs	r2, #0
   b6b2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   b6b32:	ee10 0a10 	vmov	r0, s0
   b6b36:	4629      	mov	r1, r5
   b6b38:	f000 fefc 	bl	b7934 <__aeabi_dmul>
   b6b3c:	ec41 0b10 	vmov	d0, r0, r1
   b6b40:	f000 fc26 	bl	b7390 <floor>
   b6b44:	4b5b      	ldr	r3, [pc, #364]	; (b6cb4 <__kernel_rem_pio2+0x30c>)
   b6b46:	ec51 0b10 	vmov	r0, r1, d0
   b6b4a:	2200      	movs	r2, #0
   b6b4c:	f000 fef2 	bl	b7934 <__aeabi_dmul>
   b6b50:	4602      	mov	r2, r0
   b6b52:	460b      	mov	r3, r1
   b6b54:	4620      	mov	r0, r4
   b6b56:	4629      	mov	r1, r5
   b6b58:	f000 fd34 	bl	b75c4 <__aeabi_dsub>
   b6b5c:	460d      	mov	r5, r1
   b6b5e:	4604      	mov	r4, r0
   b6b60:	f001 f982 	bl	b7e68 <__aeabi_d2iz>
   b6b64:	4680      	mov	r8, r0
   b6b66:	f000 fe7b 	bl	b7860 <__aeabi_i2d>
   b6b6a:	460b      	mov	r3, r1
   b6b6c:	4602      	mov	r2, r0
   b6b6e:	4629      	mov	r1, r5
   b6b70:	4620      	mov	r0, r4
   b6b72:	f000 fd27 	bl	b75c4 <__aeabi_dsub>
   b6b76:	464b      	mov	r3, r9
   b6b78:	2b00      	cmp	r3, #0
   b6b7a:	4606      	mov	r6, r0
   b6b7c:	460f      	mov	r7, r1
   b6b7e:	f340 809b 	ble.w	b6cb8 <__kernel_rem_pio2+0x310>
   b6b82:	9a01      	ldr	r2, [sp, #4]
   b6b84:	1e51      	subs	r1, r2, #1
   b6b86:	aa0c      	add	r2, sp, #48	; 0x30
   b6b88:	f1c9 0318 	rsb	r3, r9, #24
   b6b8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b6b90:	fa42 f003 	asr.w	r0, r2, r3
   b6b94:	fa00 f303 	lsl.w	r3, r0, r3
   b6b98:	1ad3      	subs	r3, r2, r3
   b6b9a:	f1c9 0517 	rsb	r5, r9, #23
   b6b9e:	aa0c      	add	r2, sp, #48	; 0x30
   b6ba0:	fa43 f505 	asr.w	r5, r3, r5
   b6ba4:	2d00      	cmp	r5, #0
   b6ba6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   b6baa:	4480      	add	r8, r0
   b6bac:	f300 808e 	bgt.w	b6ccc <__kernel_rem_pio2+0x324>
   b6bb0:	2200      	movs	r2, #0
   b6bb2:	2300      	movs	r3, #0
   b6bb4:	4630      	mov	r0, r6
   b6bb6:	4639      	mov	r1, r7
   b6bb8:	f001 f924 	bl	b7e04 <__aeabi_dcmpeq>
   b6bbc:	2800      	cmp	r0, #0
   b6bbe:	f000 8258 	beq.w	b7072 <__kernel_rem_pio2+0x6ca>
   b6bc2:	9b01      	ldr	r3, [sp, #4]
   b6bc4:	9a05      	ldr	r2, [sp, #20]
   b6bc6:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   b6bca:	4552      	cmp	r2, sl
   b6bcc:	dc10      	bgt.n	b6bf0 <__kernel_rem_pio2+0x248>
   b6bce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b6bd2:	aa0c      	add	r2, sp, #48	; 0x30
   b6bd4:	3b01      	subs	r3, #1
   b6bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6bd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b6bdc:	2200      	movs	r2, #0
   b6bde:	f853 1904 	ldr.w	r1, [r3], #-4
   b6be2:	4283      	cmp	r3, r0
   b6be4:	ea42 0201 	orr.w	r2, r2, r1
   b6be8:	d1f9      	bne.n	b6bde <__kernel_rem_pio2+0x236>
   b6bea:	2a00      	cmp	r2, #0
   b6bec:	f040 80e2 	bne.w	b6db4 <__kernel_rem_pio2+0x40c>
   b6bf0:	9b05      	ldr	r3, [sp, #20]
   b6bf2:	aa0c      	add	r2, sp, #48	; 0x30
   b6bf4:	3b01      	subs	r3, #1
   b6bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b6bfa:	2b00      	cmp	r3, #0
   b6bfc:	f040 80d2 	bne.w	b6da4 <__kernel_rem_pio2+0x3fc>
   b6c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6c02:	2301      	movs	r3, #1
   b6c04:	f852 1904 	ldr.w	r1, [r2], #-4
   b6c08:	3301      	adds	r3, #1
   b6c0a:	2900      	cmp	r1, #0
   b6c0c:	d0fa      	beq.n	b6c04 <__kernel_rem_pio2+0x25c>
   b6c0e:	9a01      	ldr	r2, [sp, #4]
   b6c10:	18d3      	adds	r3, r2, r3
   b6c12:	9302      	str	r3, [sp, #8]
   b6c14:	1c53      	adds	r3, r2, #1
   b6c16:	4699      	mov	r9, r3
   b6c18:	9a01      	ldr	r2, [sp, #4]
   b6c1a:	9908      	ldr	r1, [sp, #32]
   b6c1c:	440a      	add	r2, r1
   b6c1e:	4690      	mov	r8, r2
   b6c20:	9a07      	ldr	r2, [sp, #28]
   b6c22:	eb02 0a03 	add.w	sl, r2, r3
   b6c26:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   b6c2a:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   b6c2c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6c30:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   b6c34:	aa20      	add	r2, sp, #128	; 0x80
   b6c36:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   b6c3a:	aa70      	add	r2, sp, #448	; 0x1c0
   b6c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   b6c46:	f000 fe0b 	bl	b7860 <__aeabi_i2d>
   b6c4a:	460b      	mov	r3, r1
   b6c4c:	9903      	ldr	r1, [sp, #12]
   b6c4e:	4602      	mov	r2, r0
   b6c50:	2900      	cmp	r1, #0
   b6c52:	e9c8 2300 	strd	r2, r3, [r8]
   b6c56:	4647      	mov	r7, r8
   b6c58:	f108 0808 	add.w	r8, r8, #8
   b6c5c:	db1e      	blt.n	b6c9c <__kernel_rem_pio2+0x2f4>
   b6c5e:	9e04      	ldr	r6, [sp, #16]
   b6c60:	2400      	movs	r4, #0
   b6c62:	2500      	movs	r5, #0
   b6c64:	e001      	b.n	b6c6a <__kernel_rem_pio2+0x2c2>
   b6c66:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b6c6a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b6c6e:	f000 fe61 	bl	b7934 <__aeabi_dmul>
   b6c72:	4602      	mov	r2, r0
   b6c74:	460b      	mov	r3, r1
   b6c76:	4620      	mov	r0, r4
   b6c78:	4629      	mov	r1, r5
   b6c7a:	f000 fca5 	bl	b75c8 <__adddf3>
   b6c7e:	455e      	cmp	r6, fp
   b6c80:	4604      	mov	r4, r0
   b6c82:	460d      	mov	r5, r1
   b6c84:	d1ef      	bne.n	b6c66 <__kernel_rem_pio2+0x2be>
   b6c86:	9b01      	ldr	r3, [sp, #4]
   b6c88:	e8e3 4502 	strd	r4, r5, [r3], #8
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	9b02      	ldr	r3, [sp, #8]
   b6c90:	f109 0901 	add.w	r9, r9, #1
   b6c94:	4599      	cmp	r9, r3
   b6c96:	ddd4      	ble.n	b6c42 <__kernel_rem_pio2+0x29a>
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	e70c      	b.n	b6ab6 <__kernel_rem_pio2+0x10e>
   b6c9c:	2400      	movs	r4, #0
   b6c9e:	2500      	movs	r5, #0
   b6ca0:	e7f1      	b.n	b6c86 <__kernel_rem_pio2+0x2de>
   b6ca2:	bf00      	nop
   b6ca4:	000b8720 	.word	0x000b8720
   b6ca8:	2aaaaaab 	.word	0x2aaaaaab
   b6cac:	3e700000 	.word	0x3e700000
   b6cb0:	41700000 	.word	0x41700000
   b6cb4:	40200000 	.word	0x40200000
   b6cb8:	d16b      	bne.n	b6d92 <__kernel_rem_pio2+0x3ea>
   b6cba:	9b01      	ldr	r3, [sp, #4]
   b6cbc:	aa0c      	add	r2, sp, #48	; 0x30
   b6cbe:	3b01      	subs	r3, #1
   b6cc0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b6cc4:	15ed      	asrs	r5, r5, #23
   b6cc6:	2d00      	cmp	r5, #0
   b6cc8:	f77f af72 	ble.w	b6bb0 <__kernel_rem_pio2+0x208>
   b6ccc:	9b01      	ldr	r3, [sp, #4]
   b6cce:	2b00      	cmp	r3, #0
   b6cd0:	f108 0801 	add.w	r8, r8, #1
   b6cd4:	f340 81cb 	ble.w	b706e <__kernel_rem_pio2+0x6c6>
   b6cd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6cda:	2c00      	cmp	r4, #0
   b6cdc:	d151      	bne.n	b6d82 <__kernel_rem_pio2+0x3da>
   b6cde:	9b01      	ldr	r3, [sp, #4]
   b6ce0:	2b01      	cmp	r3, #1
   b6ce2:	d020      	beq.n	b6d26 <__kernel_rem_pio2+0x37e>
   b6ce4:	ab0c      	add	r3, sp, #48	; 0x30
   b6ce6:	2201      	movs	r2, #1
   b6ce8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   b6cec:	2c00      	cmp	r4, #0
   b6cee:	d04b      	beq.n	b6d88 <__kernel_rem_pio2+0x3e0>
   b6cf0:	1c53      	adds	r3, r2, #1
   b6cf2:	a90c      	add	r1, sp, #48	; 0x30
   b6cf4:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   b6cf8:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   b6cfc:	9901      	ldr	r1, [sp, #4]
   b6cfe:	4299      	cmp	r1, r3
   b6d00:	dd10      	ble.n	b6d24 <__kernel_rem_pio2+0x37c>
   b6d02:	aa0c      	add	r2, sp, #48	; 0x30
   b6d04:	a80c      	add	r0, sp, #48	; 0x30
   b6d06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b6d0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   b6d0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   b6d12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b6d16:	e000      	b.n	b6d1a <__kernel_rem_pio2+0x372>
   b6d18:	681a      	ldr	r2, [r3, #0]
   b6d1a:	1a8a      	subs	r2, r1, r2
   b6d1c:	f843 2b04 	str.w	r2, [r3], #4
   b6d20:	4283      	cmp	r3, r0
   b6d22:	d1f9      	bne.n	b6d18 <__kernel_rem_pio2+0x370>
   b6d24:	2401      	movs	r4, #1
   b6d26:	9b06      	ldr	r3, [sp, #24]
   b6d28:	2b00      	cmp	r3, #0
   b6d2a:	dd0e      	ble.n	b6d4a <__kernel_rem_pio2+0x3a2>
   b6d2c:	2b01      	cmp	r3, #1
   b6d2e:	f000 816c 	beq.w	b700a <__kernel_rem_pio2+0x662>
   b6d32:	2b02      	cmp	r3, #2
   b6d34:	d109      	bne.n	b6d4a <__kernel_rem_pio2+0x3a2>
   b6d36:	9b01      	ldr	r3, [sp, #4]
   b6d38:	1e5a      	subs	r2, r3, #1
   b6d3a:	ab0c      	add	r3, sp, #48	; 0x30
   b6d3c:	a90c      	add	r1, sp, #48	; 0x30
   b6d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b6d42:	f3c3 0315 	ubfx	r3, r3, #0, #22
   b6d46:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b6d4a:	2d02      	cmp	r5, #2
   b6d4c:	f47f af30 	bne.w	b6bb0 <__kernel_rem_pio2+0x208>
   b6d50:	4632      	mov	r2, r6
   b6d52:	463b      	mov	r3, r7
   b6d54:	49b6      	ldr	r1, [pc, #728]	; (b7030 <__kernel_rem_pio2+0x688>)
   b6d56:	2000      	movs	r0, #0
   b6d58:	f000 fc34 	bl	b75c4 <__aeabi_dsub>
   b6d5c:	4606      	mov	r6, r0
   b6d5e:	460f      	mov	r7, r1
   b6d60:	2c00      	cmp	r4, #0
   b6d62:	f43f af25 	beq.w	b6bb0 <__kernel_rem_pio2+0x208>
   b6d66:	9806      	ldr	r0, [sp, #24]
   b6d68:	ed9f 0bad 	vldr	d0, [pc, #692]	; b7020 <__kernel_rem_pio2+0x678>
   b6d6c:	f000 fb94 	bl	b7498 <scalbn>
   b6d70:	4630      	mov	r0, r6
   b6d72:	4639      	mov	r1, r7
   b6d74:	ec53 2b10 	vmov	r2, r3, d0
   b6d78:	f000 fc24 	bl	b75c4 <__aeabi_dsub>
   b6d7c:	4606      	mov	r6, r0
   b6d7e:	460f      	mov	r7, r1
   b6d80:	e716      	b.n	b6bb0 <__kernel_rem_pio2+0x208>
   b6d82:	2301      	movs	r3, #1
   b6d84:	2200      	movs	r2, #0
   b6d86:	e7b4      	b.n	b6cf2 <__kernel_rem_pio2+0x34a>
   b6d88:	9901      	ldr	r1, [sp, #4]
   b6d8a:	3201      	adds	r2, #1
   b6d8c:	428a      	cmp	r2, r1
   b6d8e:	d1ab      	bne.n	b6ce8 <__kernel_rem_pio2+0x340>
   b6d90:	e7c9      	b.n	b6d26 <__kernel_rem_pio2+0x37e>
   b6d92:	4ba8      	ldr	r3, [pc, #672]	; (b7034 <__kernel_rem_pio2+0x68c>)
   b6d94:	2200      	movs	r2, #0
   b6d96:	f001 f853 	bl	b7e40 <__aeabi_dcmpge>
   b6d9a:	2800      	cmp	r0, #0
   b6d9c:	f040 8150 	bne.w	b7040 <__kernel_rem_pio2+0x698>
   b6da0:	4605      	mov	r5, r0
   b6da2:	e705      	b.n	b6bb0 <__kernel_rem_pio2+0x208>
   b6da4:	9b01      	ldr	r3, [sp, #4]
   b6da6:	3301      	adds	r3, #1
   b6da8:	4699      	mov	r9, r3
   b6daa:	9302      	str	r3, [sp, #8]
   b6dac:	e734      	b.n	b6c18 <__kernel_rem_pio2+0x270>
   b6dae:	2400      	movs	r4, #0
   b6db0:	2500      	movs	r5, #0
   b6db2:	e667      	b.n	b6a84 <__kernel_rem_pio2+0xdc>
   b6db4:	9b06      	ldr	r3, [sp, #24]
   b6db6:	9503      	str	r5, [sp, #12]
   b6db8:	f1a3 0218 	sub.w	r2, r3, #24
   b6dbc:	ab0c      	add	r3, sp, #48	; 0x30
   b6dbe:	f8cd 801c 	str.w	r8, [sp, #28]
   b6dc2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   b6dc6:	9206      	str	r2, [sp, #24]
   b6dc8:	b973      	cbnz	r3, b6de8 <__kernel_rem_pio2+0x440>
   b6dca:	9b01      	ldr	r3, [sp, #4]
   b6dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b6dd0:	3b02      	subs	r3, #2
   b6dd2:	a90c      	add	r1, sp, #48	; 0x30
   b6dd4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b6dd8:	f853 1904 	ldr.w	r1, [r3], #-4
   b6ddc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6de0:	3a18      	subs	r2, #24
   b6de2:	2900      	cmp	r1, #0
   b6de4:	d0f8      	beq.n	b6dd8 <__kernel_rem_pio2+0x430>
   b6de6:	9206      	str	r2, [sp, #24]
   b6de8:	ed9f 0b8d 	vldr	d0, [pc, #564]	; b7020 <__kernel_rem_pio2+0x678>
   b6dec:	9806      	ldr	r0, [sp, #24]
   b6dee:	f000 fb53 	bl	b7498 <scalbn>
   b6df2:	f1ba 0f00 	cmp.w	sl, #0
   b6df6:	ec55 4b10 	vmov	r4, r5, d0
   b6dfa:	f2c0 81d9 	blt.w	b71b0 <__kernel_rem_pio2+0x808>
   b6dfe:	ab70      	add	r3, sp, #448	; 0x1c0
   b6e00:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   b6e04:	aa0c      	add	r2, sp, #48	; 0x30
   b6e06:	f10a 0301 	add.w	r3, sl, #1
   b6e0a:	9306      	str	r3, [sp, #24]
   b6e0c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   b6e10:	f8df 9224 	ldr.w	r9, [pc, #548]	; b7038 <__kernel_rem_pio2+0x690>
   b6e14:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   b6e18:	9304      	str	r3, [sp, #16]
   b6e1a:	f10b 0708 	add.w	r7, fp, #8
   b6e1e:	f04f 0800 	mov.w	r8, #0
   b6e22:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   b6e26:	f000 fd1b 	bl	b7860 <__aeabi_i2d>
   b6e2a:	4622      	mov	r2, r4
   b6e2c:	462b      	mov	r3, r5
   b6e2e:	f000 fd81 	bl	b7934 <__aeabi_dmul>
   b6e32:	464b      	mov	r3, r9
   b6e34:	e967 0102 	strd	r0, r1, [r7, #-8]!
   b6e38:	4642      	mov	r2, r8
   b6e3a:	4620      	mov	r0, r4
   b6e3c:	4629      	mov	r1, r5
   b6e3e:	f000 fd79 	bl	b7934 <__aeabi_dmul>
   b6e42:	ab0c      	add	r3, sp, #48	; 0x30
   b6e44:	429e      	cmp	r6, r3
   b6e46:	4604      	mov	r4, r0
   b6e48:	460d      	mov	r5, r1
   b6e4a:	d1ea      	bne.n	b6e22 <__kernel_rem_pio2+0x47a>
   b6e4c:	ab48      	add	r3, sp, #288	; 0x120
   b6e4e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   b6e52:	f8dd a014 	ldr.w	sl, [sp, #20]
   b6e56:	f1ba 0f00 	cmp.w	sl, #0
   b6e5a:	f04f 0900 	mov.w	r9, #0
   b6e5e:	db2c      	blt.n	b6eba <__kernel_rem_pio2+0x512>
   b6e60:	a371      	add	r3, pc, #452	; (adr r3, b7028 <__kernel_rem_pio2+0x680>)
   b6e62:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e66:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b703c <__kernel_rem_pio2+0x694>
   b6e6a:	465f      	mov	r7, fp
   b6e6c:	2600      	movs	r6, #0
   b6e6e:	2400      	movs	r4, #0
   b6e70:	2500      	movs	r5, #0
   b6e72:	e003      	b.n	b6e7c <__kernel_rem_pio2+0x4d4>
   b6e74:	45b1      	cmp	r9, r6
   b6e76:	db10      	blt.n	b6e9a <__kernel_rem_pio2+0x4f2>
   b6e78:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   b6e7c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b6e80:	f000 fd58 	bl	b7934 <__aeabi_dmul>
   b6e84:	4602      	mov	r2, r0
   b6e86:	460b      	mov	r3, r1
   b6e88:	4620      	mov	r0, r4
   b6e8a:	4629      	mov	r1, r5
   b6e8c:	f000 fb9c 	bl	b75c8 <__adddf3>
   b6e90:	3601      	adds	r6, #1
   b6e92:	45b2      	cmp	sl, r6
   b6e94:	4604      	mov	r4, r0
   b6e96:	460d      	mov	r5, r1
   b6e98:	daec      	bge.n	b6e74 <__kernel_rem_pio2+0x4cc>
   b6e9a:	9b01      	ldr	r3, [sp, #4]
   b6e9c:	9a02      	ldr	r2, [sp, #8]
   b6e9e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   b6ea2:	454a      	cmp	r2, r9
   b6ea4:	e9c3 4500 	strd	r4, r5, [r3]
   b6ea8:	f1ab 0b08 	sub.w	fp, fp, #8
   b6eac:	f109 0301 	add.w	r3, r9, #1
   b6eb0:	d006      	beq.n	b6ec0 <__kernel_rem_pio2+0x518>
   b6eb2:	f1ba 0f00 	cmp.w	sl, #0
   b6eb6:	4699      	mov	r9, r3
   b6eb8:	dad2      	bge.n	b6e60 <__kernel_rem_pio2+0x4b8>
   b6eba:	2400      	movs	r4, #0
   b6ebc:	2500      	movs	r5, #0
   b6ebe:	e7ec      	b.n	b6e9a <__kernel_rem_pio2+0x4f2>
   b6ec0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b6ec2:	f8dd a008 	ldr.w	sl, [sp, #8]
   b6ec6:	2b02      	cmp	r3, #2
   b6ec8:	dc1e      	bgt.n	b6f08 <__kernel_rem_pio2+0x560>
   b6eca:	2b00      	cmp	r3, #0
   b6ecc:	f300 8107 	bgt.w	b70de <__kernel_rem_pio2+0x736>
   b6ed0:	d113      	bne.n	b6efa <__kernel_rem_pio2+0x552>
   b6ed2:	9c04      	ldr	r4, [sp, #16]
   b6ed4:	9d01      	ldr	r5, [sp, #4]
   b6ed6:	3408      	adds	r4, #8
   b6ed8:	442c      	add	r4, r5
   b6eda:	2000      	movs	r0, #0
   b6edc:	2100      	movs	r1, #0
   b6ede:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b6ee2:	f000 fb71 	bl	b75c8 <__adddf3>
   b6ee6:	42a5      	cmp	r5, r4
   b6ee8:	d1f9      	bne.n	b6ede <__kernel_rem_pio2+0x536>
   b6eea:	9b03      	ldr	r3, [sp, #12]
   b6eec:	b113      	cbz	r3, b6ef4 <__kernel_rem_pio2+0x54c>
   b6eee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6ef2:	4619      	mov	r1, r3
   b6ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6ef6:	e9c3 0100 	strd	r0, r1, [r3]
   b6efa:	9b07      	ldr	r3, [sp, #28]
   b6efc:	f003 0007 	and.w	r0, r3, #7
   b6f00:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b6f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6f08:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b6f0a:	2b03      	cmp	r3, #3
   b6f0c:	d1f5      	bne.n	b6efa <__kernel_rem_pio2+0x552>
   b6f0e:	f1ba 0f00 	cmp.w	sl, #0
   b6f12:	f000 8169 	beq.w	b71e8 <__kernel_rem_pio2+0x840>
   b6f16:	9a01      	ldr	r2, [sp, #4]
   b6f18:	9b04      	ldr	r3, [sp, #16]
   b6f1a:	18d3      	adds	r3, r2, r3
   b6f1c:	e9d3 4500 	ldrd	r4, r5, [r3]
   b6f20:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   b6f24:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   b6f28:	4620      	mov	r0, r4
   b6f2a:	4629      	mov	r1, r5
   b6f2c:	4632      	mov	r2, r6
   b6f2e:	463b      	mov	r3, r7
   b6f30:	f000 fb4a 	bl	b75c8 <__adddf3>
   b6f34:	46a0      	mov	r8, r4
   b6f36:	46a9      	mov	r9, r5
   b6f38:	4604      	mov	r4, r0
   b6f3a:	460d      	mov	r5, r1
   b6f3c:	4622      	mov	r2, r4
   b6f3e:	462b      	mov	r3, r5
   b6f40:	4630      	mov	r0, r6
   b6f42:	4639      	mov	r1, r7
   b6f44:	f000 fb3e 	bl	b75c4 <__aeabi_dsub>
   b6f48:	464b      	mov	r3, r9
   b6f4a:	4642      	mov	r2, r8
   b6f4c:	f000 fb3c 	bl	b75c8 <__adddf3>
   b6f50:	9b01      	ldr	r3, [sp, #4]
   b6f52:	455b      	cmp	r3, fp
   b6f54:	e9cb 0102 	strd	r0, r1, [fp, #8]
   b6f58:	e9cb 4500 	strd	r4, r5, [fp]
   b6f5c:	d1e2      	bne.n	b6f24 <__kernel_rem_pio2+0x57c>
   b6f5e:	f1ba 0f01 	cmp.w	sl, #1
   b6f62:	f340 8141 	ble.w	b71e8 <__kernel_rem_pio2+0x840>
   b6f66:	9a01      	ldr	r2, [sp, #4]
   b6f68:	9b04      	ldr	r3, [sp, #16]
   b6f6a:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   b6f6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6f72:	4413      	add	r3, r2
   b6f74:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   b6f78:	e9d3 4500 	ldrd	r4, r5, [r3]
   b6f7c:	f101 0a08 	add.w	sl, r1, #8
   b6f80:	9102      	str	r1, [sp, #8]
   b6f82:	4492      	add	sl, r2
   b6f84:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   b6f88:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	4629      	mov	r1, r5
   b6f90:	4632      	mov	r2, r6
   b6f92:	463b      	mov	r3, r7
   b6f94:	f000 fb18 	bl	b75c8 <__adddf3>
   b6f98:	46a0      	mov	r8, r4
   b6f9a:	46a9      	mov	r9, r5
   b6f9c:	4604      	mov	r4, r0
   b6f9e:	460d      	mov	r5, r1
   b6fa0:	4622      	mov	r2, r4
   b6fa2:	462b      	mov	r3, r5
   b6fa4:	4630      	mov	r0, r6
   b6fa6:	4639      	mov	r1, r7
   b6fa8:	f000 fb0c 	bl	b75c4 <__aeabi_dsub>
   b6fac:	4642      	mov	r2, r8
   b6fae:	464b      	mov	r3, r9
   b6fb0:	f000 fb0a 	bl	b75c8 <__adddf3>
   b6fb4:	45d3      	cmp	fp, sl
   b6fb6:	e9ca 0102 	strd	r0, r1, [sl, #8]
   b6fba:	e9ca 4500 	strd	r4, r5, [sl]
   b6fbe:	d1e3      	bne.n	b6f88 <__kernel_rem_pio2+0x5e0>
   b6fc0:	9c02      	ldr	r4, [sp, #8]
   b6fc2:	9b01      	ldr	r3, [sp, #4]
   b6fc4:	3410      	adds	r4, #16
   b6fc6:	441c      	add	r4, r3
   b6fc8:	f103 0510 	add.w	r5, r3, #16
   b6fcc:	2000      	movs	r0, #0
   b6fce:	2100      	movs	r1, #0
   b6fd0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b6fd4:	f000 faf8 	bl	b75c8 <__adddf3>
   b6fd8:	42a5      	cmp	r5, r4
   b6fda:	d1f9      	bne.n	b6fd0 <__kernel_rem_pio2+0x628>
   b6fdc:	9b03      	ldr	r3, [sp, #12]
   b6fde:	2b00      	cmp	r3, #0
   b6fe0:	f040 80bb 	bne.w	b715a <__kernel_rem_pio2+0x7b2>
   b6fe4:	9d01      	ldr	r5, [sp, #4]
   b6fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b6fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
   b6fec:	e9c4 2300 	strd	r2, r3, [r4]
   b6ff0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   b6ff4:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b6ff8:	9b07      	ldr	r3, [sp, #28]
   b6ffa:	e9c4 0104 	strd	r0, r1, [r4, #16]
   b6ffe:	f003 0007 	and.w	r0, r3, #7
   b7002:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b7006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b700a:	9b01      	ldr	r3, [sp, #4]
   b700c:	1e5a      	subs	r2, r3, #1
   b700e:	ab0c      	add	r3, sp, #48	; 0x30
   b7010:	a90c      	add	r1, sp, #48	; 0x30
   b7012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b7016:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b701a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b701e:	e694      	b.n	b6d4a <__kernel_rem_pio2+0x3a2>
   b7020:	00000000 	.word	0x00000000
   b7024:	3ff00000 	.word	0x3ff00000
   b7028:	40000000 	.word	0x40000000
   b702c:	3ff921fb 	.word	0x3ff921fb
   b7030:	3ff00000 	.word	0x3ff00000
   b7034:	3fe00000 	.word	0x3fe00000
   b7038:	3e700000 	.word	0x3e700000
   b703c:	000b86e8 	.word	0x000b86e8
   b7040:	9b01      	ldr	r3, [sp, #4]
   b7042:	2b00      	cmp	r3, #0
   b7044:	f108 0801 	add.w	r8, r8, #1
   b7048:	bfc8      	it	gt
   b704a:	2502      	movgt	r5, #2
   b704c:	f73f ae44 	bgt.w	b6cd8 <__kernel_rem_pio2+0x330>
   b7050:	4632      	mov	r2, r6
   b7052:	463b      	mov	r3, r7
   b7054:	4966      	ldr	r1, [pc, #408]	; (b71f0 <__kernel_rem_pio2+0x848>)
   b7056:	2000      	movs	r0, #0
   b7058:	f000 fab4 	bl	b75c4 <__aeabi_dsub>
   b705c:	2502      	movs	r5, #2
   b705e:	4606      	mov	r6, r0
   b7060:	460f      	mov	r7, r1
   b7062:	e5a5      	b.n	b6bb0 <__kernel_rem_pio2+0x208>
   b7064:	2100      	movs	r1, #0
   b7066:	f06f 0317 	mvn.w	r3, #23
   b706a:	9107      	str	r1, [sp, #28]
   b706c:	e4bb      	b.n	b69e6 <__kernel_rem_pio2+0x3e>
   b706e:	2400      	movs	r4, #0
   b7070:	e659      	b.n	b6d26 <__kernel_rem_pio2+0x37e>
   b7072:	ec47 6b10 	vmov	d0, r6, r7
   b7076:	9e06      	ldr	r6, [sp, #24]
   b7078:	9503      	str	r5, [sp, #12]
   b707a:	4270      	negs	r0, r6
   b707c:	f8cd 801c 	str.w	r8, [sp, #28]
   b7080:	f000 fa0a 	bl	b7498 <scalbn>
   b7084:	ec55 4b10 	vmov	r4, r5, d0
   b7088:	4b5a      	ldr	r3, [pc, #360]	; (b71f4 <__kernel_rem_pio2+0x84c>)
   b708a:	ee10 0a10 	vmov	r0, s0
   b708e:	2200      	movs	r2, #0
   b7090:	4629      	mov	r1, r5
   b7092:	f000 fed5 	bl	b7e40 <__aeabi_dcmpge>
   b7096:	2800      	cmp	r0, #0
   b7098:	d055      	beq.n	b7146 <__kernel_rem_pio2+0x79e>
   b709a:	4b57      	ldr	r3, [pc, #348]	; (b71f8 <__kernel_rem_pio2+0x850>)
   b709c:	9f01      	ldr	r7, [sp, #4]
   b709e:	2200      	movs	r2, #0
   b70a0:	3618      	adds	r6, #24
   b70a2:	4620      	mov	r0, r4
   b70a4:	4629      	mov	r1, r5
   b70a6:	9606      	str	r6, [sp, #24]
   b70a8:	f000 fc44 	bl	b7934 <__aeabi_dmul>
   b70ac:	f000 fedc 	bl	b7e68 <__aeabi_d2iz>
   b70b0:	4606      	mov	r6, r0
   b70b2:	f000 fbd5 	bl	b7860 <__aeabi_i2d>
   b70b6:	4b4f      	ldr	r3, [pc, #316]	; (b71f4 <__kernel_rem_pio2+0x84c>)
   b70b8:	2200      	movs	r2, #0
   b70ba:	f000 fc3b 	bl	b7934 <__aeabi_dmul>
   b70be:	460b      	mov	r3, r1
   b70c0:	4602      	mov	r2, r0
   b70c2:	4629      	mov	r1, r5
   b70c4:	4620      	mov	r0, r4
   b70c6:	f000 fa7d 	bl	b75c4 <__aeabi_dsub>
   b70ca:	f000 fecd 	bl	b7e68 <__aeabi_d2iz>
   b70ce:	f107 0a01 	add.w	sl, r7, #1
   b70d2:	ab0c      	add	r3, sp, #48	; 0x30
   b70d4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   b70d8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   b70dc:	e684      	b.n	b6de8 <__kernel_rem_pio2+0x440>
   b70de:	9d01      	ldr	r5, [sp, #4]
   b70e0:	9a06      	ldr	r2, [sp, #24]
   b70e2:	2000      	movs	r0, #0
   b70e4:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   b70e8:	2100      	movs	r1, #0
   b70ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b70ee:	f000 fa6b 	bl	b75c8 <__adddf3>
   b70f2:	42a5      	cmp	r5, r4
   b70f4:	d1f9      	bne.n	b70ea <__kernel_rem_pio2+0x742>
   b70f6:	9b03      	ldr	r3, [sp, #12]
   b70f8:	2b00      	cmp	r3, #0
   b70fa:	d149      	bne.n	b7190 <__kernel_rem_pio2+0x7e8>
   b70fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b70fe:	e9c3 0100 	strd	r0, r1, [r3]
   b7102:	460b      	mov	r3, r1
   b7104:	9901      	ldr	r1, [sp, #4]
   b7106:	4602      	mov	r2, r0
   b7108:	e9d1 0100 	ldrd	r0, r1, [r1]
   b710c:	f000 fa5a 	bl	b75c4 <__aeabi_dsub>
   b7110:	f1ba 0f00 	cmp.w	sl, #0
   b7114:	dd0d      	ble.n	b7132 <__kernel_rem_pio2+0x78a>
   b7116:	ad4a      	add	r5, sp, #296	; 0x128
   b7118:	2401      	movs	r4, #1
   b711a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   b711e:	3401      	adds	r4, #1
   b7120:	f000 fa52 	bl	b75c8 <__adddf3>
   b7124:	45a2      	cmp	sl, r4
   b7126:	daf8      	bge.n	b711a <__kernel_rem_pio2+0x772>
   b7128:	9b03      	ldr	r3, [sp, #12]
   b712a:	b113      	cbz	r3, b7132 <__kernel_rem_pio2+0x78a>
   b712c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7130:	4619      	mov	r1, r3
   b7132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7134:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b7138:	9b07      	ldr	r3, [sp, #28]
   b713a:	f003 0007 	and.w	r0, r3, #7
   b713e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b7142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7146:	4620      	mov	r0, r4
   b7148:	4629      	mov	r1, r5
   b714a:	f000 fe8d 	bl	b7e68 <__aeabi_d2iz>
   b714e:	9b01      	ldr	r3, [sp, #4]
   b7150:	aa0c      	add	r2, sp, #48	; 0x30
   b7152:	469a      	mov	sl, r3
   b7154:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   b7158:	e646      	b.n	b6de8 <__kernel_rem_pio2+0x440>
   b715a:	9b01      	ldr	r3, [sp, #4]
   b715c:	461e      	mov	r6, r3
   b715e:	685c      	ldr	r4, [r3, #4]
   b7160:	68dd      	ldr	r5, [r3, #12]
   b7162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7166:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b7168:	4602      	mov	r2, r0
   b716a:	e9c1 2304 	strd	r2, r3, [r1, #16]
   b716e:	6832      	ldr	r2, [r6, #0]
   b7170:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   b7174:	e9c1 2300 	strd	r2, r3, [r1]
   b7178:	68b2      	ldr	r2, [r6, #8]
   b717a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   b717e:	e9c1 2302 	strd	r2, r3, [r1, #8]
   b7182:	9b07      	ldr	r3, [sp, #28]
   b7184:	f003 0007 	and.w	r0, r3, #7
   b7188:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7196:	6053      	str	r3, [r2, #4]
   b7198:	460b      	mov	r3, r1
   b719a:	9901      	ldr	r1, [sp, #4]
   b719c:	6010      	str	r0, [r2, #0]
   b719e:	4602      	mov	r2, r0
   b71a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b71a4:	f000 fa0e 	bl	b75c4 <__aeabi_dsub>
   b71a8:	f1ba 0f00 	cmp.w	sl, #0
   b71ac:	dcb3      	bgt.n	b7116 <__kernel_rem_pio2+0x76e>
   b71ae:	e7bd      	b.n	b712c <__kernel_rem_pio2+0x784>
   b71b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b71b2:	2b02      	cmp	r3, #2
   b71b4:	dc0a      	bgt.n	b71cc <__kernel_rem_pio2+0x824>
   b71b6:	2b00      	cmp	r3, #0
   b71b8:	dc11      	bgt.n	b71de <__kernel_rem_pio2+0x836>
   b71ba:	f47f ae9e 	bne.w	b6efa <__kernel_rem_pio2+0x552>
   b71be:	2000      	movs	r0, #0
   b71c0:	2100      	movs	r1, #0
   b71c2:	e692      	b.n	b6eea <__kernel_rem_pio2+0x542>
   b71c4:	9b08      	ldr	r3, [sp, #32]
   b71c6:	00db      	lsls	r3, r3, #3
   b71c8:	9302      	str	r3, [sp, #8]
   b71ca:	e464      	b.n	b6a96 <__kernel_rem_pio2+0xee>
   b71cc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b71ce:	2b03      	cmp	r3, #3
   b71d0:	f47f ae93 	bne.w	b6efa <__kernel_rem_pio2+0x552>
   b71d4:	ab48      	add	r3, sp, #288	; 0x120
   b71d6:	2000      	movs	r0, #0
   b71d8:	2100      	movs	r1, #0
   b71da:	9301      	str	r3, [sp, #4]
   b71dc:	e6fe      	b.n	b6fdc <__kernel_rem_pio2+0x634>
   b71de:	ab48      	add	r3, sp, #288	; 0x120
   b71e0:	2000      	movs	r0, #0
   b71e2:	2100      	movs	r1, #0
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	e786      	b.n	b70f6 <__kernel_rem_pio2+0x74e>
   b71e8:	2000      	movs	r0, #0
   b71ea:	2100      	movs	r1, #0
   b71ec:	e6f6      	b.n	b6fdc <__kernel_rem_pio2+0x634>
   b71ee:	bf00      	nop
   b71f0:	3ff00000 	.word	0x3ff00000
   b71f4:	41700000 	.word	0x41700000
   b71f8:	3e700000 	.word	0x3e700000
   b71fc:	00000000 	.word	0x00000000

000b7200 <__kernel_sin>:
   b7200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7204:	ec55 4b10 	vmov	r4, r5, d0
   b7208:	b085      	sub	sp, #20
   b720a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   b720e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   b7212:	ed8d 1b00 	vstr	d1, [sp]
   b7216:	9003      	str	r0, [sp, #12]
   b7218:	da07      	bge.n	b722a <__kernel_sin+0x2a>
   b721a:	ee10 0a10 	vmov	r0, s0
   b721e:	4629      	mov	r1, r5
   b7220:	f000 fe22 	bl	b7e68 <__aeabi_d2iz>
   b7224:	2800      	cmp	r0, #0
   b7226:	f000 8089 	beq.w	b733c <__kernel_sin+0x13c>
   b722a:	4622      	mov	r2, r4
   b722c:	462b      	mov	r3, r5
   b722e:	4620      	mov	r0, r4
   b7230:	4629      	mov	r1, r5
   b7232:	f000 fb7f 	bl	b7934 <__aeabi_dmul>
   b7236:	4606      	mov	r6, r0
   b7238:	460f      	mov	r7, r1
   b723a:	4632      	mov	r2, r6
   b723c:	463b      	mov	r3, r7
   b723e:	4620      	mov	r0, r4
   b7240:	4629      	mov	r1, r5
   b7242:	f000 fb77 	bl	b7934 <__aeabi_dmul>
   b7246:	a343      	add	r3, pc, #268	; (adr r3, b7354 <__kernel_sin+0x154>)
   b7248:	e9d3 2300 	ldrd	r2, r3, [r3]
   b724c:	4682      	mov	sl, r0
   b724e:	468b      	mov	fp, r1
   b7250:	4630      	mov	r0, r6
   b7252:	4639      	mov	r1, r7
   b7254:	f000 fb6e 	bl	b7934 <__aeabi_dmul>
   b7258:	a340      	add	r3, pc, #256	; (adr r3, b735c <__kernel_sin+0x15c>)
   b725a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b725e:	f000 f9b1 	bl	b75c4 <__aeabi_dsub>
   b7262:	4632      	mov	r2, r6
   b7264:	463b      	mov	r3, r7
   b7266:	f000 fb65 	bl	b7934 <__aeabi_dmul>
   b726a:	a33e      	add	r3, pc, #248	; (adr r3, b7364 <__kernel_sin+0x164>)
   b726c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7270:	f000 f9aa 	bl	b75c8 <__adddf3>
   b7274:	4632      	mov	r2, r6
   b7276:	463b      	mov	r3, r7
   b7278:	f000 fb5c 	bl	b7934 <__aeabi_dmul>
   b727c:	a33b      	add	r3, pc, #236	; (adr r3, b736c <__kernel_sin+0x16c>)
   b727e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7282:	f000 f99f 	bl	b75c4 <__aeabi_dsub>
   b7286:	4632      	mov	r2, r6
   b7288:	463b      	mov	r3, r7
   b728a:	f000 fb53 	bl	b7934 <__aeabi_dmul>
   b728e:	a339      	add	r3, pc, #228	; (adr r3, b7374 <__kernel_sin+0x174>)
   b7290:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7294:	f000 f998 	bl	b75c8 <__adddf3>
   b7298:	9b03      	ldr	r3, [sp, #12]
   b729a:	4680      	mov	r8, r0
   b729c:	4689      	mov	r9, r1
   b729e:	b3ab      	cbz	r3, b730c <__kernel_sin+0x10c>
   b72a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   b72a4:	4b2a      	ldr	r3, [pc, #168]	; (b7350 <__kernel_sin+0x150>)
   b72a6:	2200      	movs	r2, #0
   b72a8:	f000 fb44 	bl	b7934 <__aeabi_dmul>
   b72ac:	4642      	mov	r2, r8
   b72ae:	464b      	mov	r3, r9
   b72b0:	4680      	mov	r8, r0
   b72b2:	4689      	mov	r9, r1
   b72b4:	4650      	mov	r0, sl
   b72b6:	4659      	mov	r1, fp
   b72b8:	f000 fb3c 	bl	b7934 <__aeabi_dmul>
   b72bc:	4602      	mov	r2, r0
   b72be:	460b      	mov	r3, r1
   b72c0:	4640      	mov	r0, r8
   b72c2:	4649      	mov	r1, r9
   b72c4:	f000 f97e 	bl	b75c4 <__aeabi_dsub>
   b72c8:	4632      	mov	r2, r6
   b72ca:	463b      	mov	r3, r7
   b72cc:	f000 fb32 	bl	b7934 <__aeabi_dmul>
   b72d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   b72d4:	f000 f976 	bl	b75c4 <__aeabi_dsub>
   b72d8:	a31b      	add	r3, pc, #108	; (adr r3, b7348 <__kernel_sin+0x148>)
   b72da:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72de:	4606      	mov	r6, r0
   b72e0:	460f      	mov	r7, r1
   b72e2:	4650      	mov	r0, sl
   b72e4:	4659      	mov	r1, fp
   b72e6:	f000 fb25 	bl	b7934 <__aeabi_dmul>
   b72ea:	4602      	mov	r2, r0
   b72ec:	460b      	mov	r3, r1
   b72ee:	4630      	mov	r0, r6
   b72f0:	4639      	mov	r1, r7
   b72f2:	f000 f969 	bl	b75c8 <__adddf3>
   b72f6:	4602      	mov	r2, r0
   b72f8:	460b      	mov	r3, r1
   b72fa:	4620      	mov	r0, r4
   b72fc:	4629      	mov	r1, r5
   b72fe:	f000 f961 	bl	b75c4 <__aeabi_dsub>
   b7302:	ec41 0b10 	vmov	d0, r0, r1
   b7306:	b005      	add	sp, #20
   b7308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b730c:	4602      	mov	r2, r0
   b730e:	460b      	mov	r3, r1
   b7310:	4630      	mov	r0, r6
   b7312:	4639      	mov	r1, r7
   b7314:	f000 fb0e 	bl	b7934 <__aeabi_dmul>
   b7318:	a30b      	add	r3, pc, #44	; (adr r3, b7348 <__kernel_sin+0x148>)
   b731a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b731e:	f000 f951 	bl	b75c4 <__aeabi_dsub>
   b7322:	4652      	mov	r2, sl
   b7324:	465b      	mov	r3, fp
   b7326:	f000 fb05 	bl	b7934 <__aeabi_dmul>
   b732a:	4622      	mov	r2, r4
   b732c:	462b      	mov	r3, r5
   b732e:	f000 f94b 	bl	b75c8 <__adddf3>
   b7332:	ec41 0b10 	vmov	d0, r0, r1
   b7336:	b005      	add	sp, #20
   b7338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b733c:	ec45 4b10 	vmov	d0, r4, r5
   b7340:	b005      	add	sp, #20
   b7342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7346:	bf00      	nop
   b7348:	55555549 	.word	0x55555549
   b734c:	3fc55555 	.word	0x3fc55555
   b7350:	3fe00000 	.word	0x3fe00000
   b7354:	5acfd57c 	.word	0x5acfd57c
   b7358:	3de5d93a 	.word	0x3de5d93a
   b735c:	8a2b9ceb 	.word	0x8a2b9ceb
   b7360:	3e5ae5e6 	.word	0x3e5ae5e6
   b7364:	57b1fe7d 	.word	0x57b1fe7d
   b7368:	3ec71de3 	.word	0x3ec71de3
   b736c:	19c161d5 	.word	0x19c161d5
   b7370:	3f2a01a0 	.word	0x3f2a01a0
   b7374:	1110f8a6 	.word	0x1110f8a6
   b7378:	3f811111 	.word	0x3f811111

000b737c <fabs>:
   b737c:	ec51 0b10 	vmov	r0, r1, d0
   b7380:	ee10 2a10 	vmov	r2, s0
   b7384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7388:	ec43 2b10 	vmov	d0, r2, r3
   b738c:	4770      	bx	lr
   b738e:	bf00      	nop

000b7390 <floor>:
   b7390:	ec51 0b10 	vmov	r0, r1, d0
   b7394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7396:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b739a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   b739e:	2d13      	cmp	r5, #19
   b73a0:	ee10 6a10 	vmov	r6, s0
   b73a4:	460c      	mov	r4, r1
   b73a6:	dc30      	bgt.n	b740a <floor+0x7a>
   b73a8:	2d00      	cmp	r5, #0
   b73aa:	db1e      	blt.n	b73ea <floor+0x5a>
   b73ac:	4f38      	ldr	r7, [pc, #224]	; (b7490 <floor+0x100>)
   b73ae:	412f      	asrs	r7, r5
   b73b0:	ea01 0307 	and.w	r3, r1, r7
   b73b4:	4303      	orrs	r3, r0
   b73b6:	d02d      	beq.n	b7414 <floor+0x84>
   b73b8:	a333      	add	r3, pc, #204	; (adr r3, b7488 <floor+0xf8>)
   b73ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73be:	f000 f903 	bl	b75c8 <__adddf3>
   b73c2:	2200      	movs	r2, #0
   b73c4:	2300      	movs	r3, #0
   b73c6:	f000 fd45 	bl	b7e54 <__aeabi_dcmpgt>
   b73ca:	b148      	cbz	r0, b73e0 <floor+0x50>
   b73cc:	2c00      	cmp	r4, #0
   b73ce:	da04      	bge.n	b73da <floor+0x4a>
   b73d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b73d4:	fa43 f505 	asr.w	r5, r3, r5
   b73d8:	442c      	add	r4, r5
   b73da:	ea24 0407 	bic.w	r4, r4, r7
   b73de:	2600      	movs	r6, #0
   b73e0:	4623      	mov	r3, r4
   b73e2:	4632      	mov	r2, r6
   b73e4:	ec43 2b10 	vmov	d0, r2, r3
   b73e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b73ea:	a327      	add	r3, pc, #156	; (adr r3, b7488 <floor+0xf8>)
   b73ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73f0:	f000 f8ea 	bl	b75c8 <__adddf3>
   b73f4:	2200      	movs	r2, #0
   b73f6:	2300      	movs	r3, #0
   b73f8:	f000 fd2c 	bl	b7e54 <__aeabi_dcmpgt>
   b73fc:	2800      	cmp	r0, #0
   b73fe:	d0ef      	beq.n	b73e0 <floor+0x50>
   b7400:	2c00      	cmp	r4, #0
   b7402:	db29      	blt.n	b7458 <floor+0xc8>
   b7404:	2600      	movs	r6, #0
   b7406:	4634      	mov	r4, r6
   b7408:	e7ea      	b.n	b73e0 <floor+0x50>
   b740a:	2d33      	cmp	r5, #51	; 0x33
   b740c:	dd05      	ble.n	b741a <floor+0x8a>
   b740e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   b7412:	d019      	beq.n	b7448 <floor+0xb8>
   b7414:	ec41 0b10 	vmov	d0, r0, r1
   b7418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b741a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   b741e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   b7422:	40df      	lsrs	r7, r3
   b7424:	4207      	tst	r7, r0
   b7426:	d0f5      	beq.n	b7414 <floor+0x84>
   b7428:	a317      	add	r3, pc, #92	; (adr r3, b7488 <floor+0xf8>)
   b742a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b742e:	f000 f8cb 	bl	b75c8 <__adddf3>
   b7432:	2200      	movs	r2, #0
   b7434:	2300      	movs	r3, #0
   b7436:	f000 fd0d 	bl	b7e54 <__aeabi_dcmpgt>
   b743a:	2800      	cmp	r0, #0
   b743c:	d0d0      	beq.n	b73e0 <floor+0x50>
   b743e:	2c00      	cmp	r4, #0
   b7440:	db13      	blt.n	b746a <floor+0xda>
   b7442:	ea26 0607 	bic.w	r6, r6, r7
   b7446:	e7cb      	b.n	b73e0 <floor+0x50>
   b7448:	ee10 2a10 	vmov	r2, s0
   b744c:	460b      	mov	r3, r1
   b744e:	f000 f8bb 	bl	b75c8 <__adddf3>
   b7452:	ec41 0b10 	vmov	d0, r0, r1
   b7456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7458:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   b745c:	4a0d      	ldr	r2, [pc, #52]	; (b7494 <floor+0x104>)
   b745e:	431e      	orrs	r6, r3
   b7460:	2e00      	cmp	r6, #0
   b7462:	bf18      	it	ne
   b7464:	4614      	movne	r4, r2
   b7466:	2600      	movs	r6, #0
   b7468:	e7ba      	b.n	b73e0 <floor+0x50>
   b746a:	2d14      	cmp	r5, #20
   b746c:	d008      	beq.n	b7480 <floor+0xf0>
   b746e:	2301      	movs	r3, #1
   b7470:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   b7474:	fa03 f505 	lsl.w	r5, r3, r5
   b7478:	19ae      	adds	r6, r5, r6
   b747a:	bf28      	it	cs
   b747c:	18e4      	addcs	r4, r4, r3
   b747e:	e7e0      	b.n	b7442 <floor+0xb2>
   b7480:	3401      	adds	r4, #1
   b7482:	e7de      	b.n	b7442 <floor+0xb2>
   b7484:	f3af 8000 	nop.w
   b7488:	8800759c 	.word	0x8800759c
   b748c:	7e37e43c 	.word	0x7e37e43c
   b7490:	000fffff 	.word	0x000fffff
   b7494:	bff00000 	.word	0xbff00000

000b7498 <scalbn>:
   b7498:	b538      	push	{r3, r4, r5, lr}
   b749a:	ec53 2b10 	vmov	r2, r3, d0
   b749e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b74a2:	4604      	mov	r4, r0
   b74a4:	469c      	mov	ip, r3
   b74a6:	bb89      	cbnz	r1, b750c <scalbn+0x74>
   b74a8:	ee10 1a10 	vmov	r1, s0
   b74ac:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b74b0:	ea5c 0101 	orrs.w	r1, ip, r1
   b74b4:	d029      	beq.n	b750a <scalbn+0x72>
   b74b6:	4619      	mov	r1, r3
   b74b8:	2200      	movs	r2, #0
   b74ba:	4b3d      	ldr	r3, [pc, #244]	; (b75b0 <scalbn+0x118>)
   b74bc:	4d3d      	ldr	r5, [pc, #244]	; (b75b4 <scalbn+0x11c>)
   b74be:	ee10 0a10 	vmov	r0, s0
   b74c2:	f000 fa37 	bl	b7934 <__aeabi_dmul>
   b74c6:	42ac      	cmp	r4, r5
   b74c8:	4602      	mov	r2, r0
   b74ca:	460b      	mov	r3, r1
   b74cc:	db16      	blt.n	b74fc <scalbn+0x64>
   b74ce:	468c      	mov	ip, r1
   b74d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b74d4:	3936      	subs	r1, #54	; 0x36
   b74d6:	4421      	add	r1, r4
   b74d8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b74dc:	4281      	cmp	r1, r0
   b74de:	dc21      	bgt.n	b7524 <scalbn+0x8c>
   b74e0:	2900      	cmp	r1, #0
   b74e2:	dc47      	bgt.n	b7574 <scalbn+0xdc>
   b74e4:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b74e8:	da34      	bge.n	b7554 <scalbn+0xbc>
   b74ea:	f24c 3150 	movw	r1, #50000	; 0xc350
   b74ee:	428c      	cmp	r4, r1
   b74f0:	dc18      	bgt.n	b7524 <scalbn+0x8c>
   b74f2:	2b00      	cmp	r3, #0
   b74f4:	a126      	add	r1, pc, #152	; (adr r1, b7590 <scalbn+0xf8>)
   b74f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b74fa:	db44      	blt.n	b7586 <scalbn+0xee>
   b74fc:	a324      	add	r3, pc, #144	; (adr r3, b7590 <scalbn+0xf8>)
   b74fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7502:	f000 fa17 	bl	b7934 <__aeabi_dmul>
   b7506:	ec41 0b10 	vmov	d0, r0, r1
   b750a:	bd38      	pop	{r3, r4, r5, pc}
   b750c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7510:	4281      	cmp	r1, r0
   b7512:	d1e0      	bne.n	b74d6 <scalbn+0x3e>
   b7514:	ee10 0a10 	vmov	r0, s0
   b7518:	4619      	mov	r1, r3
   b751a:	f000 f855 	bl	b75c8 <__adddf3>
   b751e:	ec41 0b10 	vmov	d0, r0, r1
   b7522:	bd38      	pop	{r3, r4, r5, pc}
   b7524:	2b00      	cmp	r3, #0
   b7526:	a11c      	add	r1, pc, #112	; (adr r1, b7598 <scalbn+0x100>)
   b7528:	e9d1 0100 	ldrd	r0, r1, [r1]
   b752c:	db07      	blt.n	b753e <scalbn+0xa6>
   b752e:	a31a      	add	r3, pc, #104	; (adr r3, b7598 <scalbn+0x100>)
   b7530:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7534:	f000 f9fe 	bl	b7934 <__aeabi_dmul>
   b7538:	ec41 0b10 	vmov	d0, r0, r1
   b753c:	bd38      	pop	{r3, r4, r5, pc}
   b753e:	a118      	add	r1, pc, #96	; (adr r1, b75a0 <scalbn+0x108>)
   b7540:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7544:	a314      	add	r3, pc, #80	; (adr r3, b7598 <scalbn+0x100>)
   b7546:	e9d3 2300 	ldrd	r2, r3, [r3]
   b754a:	f000 f9f3 	bl	b7934 <__aeabi_dmul>
   b754e:	ec41 0b10 	vmov	d0, r0, r1
   b7552:	e7f3      	b.n	b753c <scalbn+0xa4>
   b7554:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7558:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b755c:	3136      	adds	r1, #54	; 0x36
   b755e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7562:	4610      	mov	r0, r2
   b7564:	4619      	mov	r1, r3
   b7566:	2200      	movs	r2, #0
   b7568:	4b13      	ldr	r3, [pc, #76]	; (b75b8 <scalbn+0x120>)
   b756a:	f000 f9e3 	bl	b7934 <__aeabi_dmul>
   b756e:	ec41 0b10 	vmov	d0, r0, r1
   b7572:	bd38      	pop	{r3, r4, r5, pc}
   b7574:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7578:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b757c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7580:	ec43 2b10 	vmov	d0, r2, r3
   b7584:	bd38      	pop	{r3, r4, r5, pc}
   b7586:	a108      	add	r1, pc, #32	; (adr r1, b75a8 <scalbn+0x110>)
   b7588:	e9d1 0100 	ldrd	r0, r1, [r1]
   b758c:	e7b6      	b.n	b74fc <scalbn+0x64>
   b758e:	bf00      	nop
   b7590:	c2f8f359 	.word	0xc2f8f359
   b7594:	01a56e1f 	.word	0x01a56e1f
   b7598:	8800759c 	.word	0x8800759c
   b759c:	7e37e43c 	.word	0x7e37e43c
   b75a0:	8800759c 	.word	0x8800759c
   b75a4:	fe37e43c 	.word	0xfe37e43c
   b75a8:	c2f8f359 	.word	0xc2f8f359
   b75ac:	81a56e1f 	.word	0x81a56e1f
   b75b0:	43500000 	.word	0x43500000
   b75b4:	ffff3cb0 	.word	0xffff3cb0
   b75b8:	3c900000 	.word	0x3c900000

000b75bc <__aeabi_drsub>:
   b75bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b75c0:	e002      	b.n	b75c8 <__adddf3>
   b75c2:	bf00      	nop

000b75c4 <__aeabi_dsub>:
   b75c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b75c8 <__adddf3>:
   b75c8:	b530      	push	{r4, r5, lr}
   b75ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b75ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b75d2:	ea94 0f05 	teq	r4, r5
   b75d6:	bf08      	it	eq
   b75d8:	ea90 0f02 	teqeq	r0, r2
   b75dc:	bf1f      	itttt	ne
   b75de:	ea54 0c00 	orrsne.w	ip, r4, r0
   b75e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b75e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b75ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b75ee:	f000 80e2 	beq.w	b77b6 <__adddf3+0x1ee>
   b75f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b75f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b75fa:	bfb8      	it	lt
   b75fc:	426d      	neglt	r5, r5
   b75fe:	dd0c      	ble.n	b761a <__adddf3+0x52>
   b7600:	442c      	add	r4, r5
   b7602:	ea80 0202 	eor.w	r2, r0, r2
   b7606:	ea81 0303 	eor.w	r3, r1, r3
   b760a:	ea82 0000 	eor.w	r0, r2, r0
   b760e:	ea83 0101 	eor.w	r1, r3, r1
   b7612:	ea80 0202 	eor.w	r2, r0, r2
   b7616:	ea81 0303 	eor.w	r3, r1, r3
   b761a:	2d36      	cmp	r5, #54	; 0x36
   b761c:	bf88      	it	hi
   b761e:	bd30      	pophi	{r4, r5, pc}
   b7620:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7624:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7628:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b762c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7630:	d002      	beq.n	b7638 <__adddf3+0x70>
   b7632:	4240      	negs	r0, r0
   b7634:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7638:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b763c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7640:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7644:	d002      	beq.n	b764c <__adddf3+0x84>
   b7646:	4252      	negs	r2, r2
   b7648:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b764c:	ea94 0f05 	teq	r4, r5
   b7650:	f000 80a7 	beq.w	b77a2 <__adddf3+0x1da>
   b7654:	f1a4 0401 	sub.w	r4, r4, #1
   b7658:	f1d5 0e20 	rsbs	lr, r5, #32
   b765c:	db0d      	blt.n	b767a <__adddf3+0xb2>
   b765e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7662:	fa22 f205 	lsr.w	r2, r2, r5
   b7666:	1880      	adds	r0, r0, r2
   b7668:	f141 0100 	adc.w	r1, r1, #0
   b766c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7670:	1880      	adds	r0, r0, r2
   b7672:	fa43 f305 	asr.w	r3, r3, r5
   b7676:	4159      	adcs	r1, r3
   b7678:	e00e      	b.n	b7698 <__adddf3+0xd0>
   b767a:	f1a5 0520 	sub.w	r5, r5, #32
   b767e:	f10e 0e20 	add.w	lr, lr, #32
   b7682:	2a01      	cmp	r2, #1
   b7684:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7688:	bf28      	it	cs
   b768a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b768e:	fa43 f305 	asr.w	r3, r3, r5
   b7692:	18c0      	adds	r0, r0, r3
   b7694:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b769c:	d507      	bpl.n	b76ae <__adddf3+0xe6>
   b769e:	f04f 0e00 	mov.w	lr, #0
   b76a2:	f1dc 0c00 	rsbs	ip, ip, #0
   b76a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b76aa:	eb6e 0101 	sbc.w	r1, lr, r1
   b76ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b76b2:	d31b      	bcc.n	b76ec <__adddf3+0x124>
   b76b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b76b8:	d30c      	bcc.n	b76d4 <__adddf3+0x10c>
   b76ba:	0849      	lsrs	r1, r1, #1
   b76bc:	ea5f 0030 	movs.w	r0, r0, rrx
   b76c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b76c4:	f104 0401 	add.w	r4, r4, #1
   b76c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b76cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b76d0:	f080 809a 	bcs.w	b7808 <__adddf3+0x240>
   b76d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b76d8:	bf08      	it	eq
   b76da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b76de:	f150 0000 	adcs.w	r0, r0, #0
   b76e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b76e6:	ea41 0105 	orr.w	r1, r1, r5
   b76ea:	bd30      	pop	{r4, r5, pc}
   b76ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b76f0:	4140      	adcs	r0, r0
   b76f2:	eb41 0101 	adc.w	r1, r1, r1
   b76f6:	3c01      	subs	r4, #1
   b76f8:	bf28      	it	cs
   b76fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b76fe:	d2e9      	bcs.n	b76d4 <__adddf3+0x10c>
   b7700:	f091 0f00 	teq	r1, #0
   b7704:	bf04      	itt	eq
   b7706:	4601      	moveq	r1, r0
   b7708:	2000      	moveq	r0, #0
   b770a:	fab1 f381 	clz	r3, r1
   b770e:	bf08      	it	eq
   b7710:	3320      	addeq	r3, #32
   b7712:	f1a3 030b 	sub.w	r3, r3, #11
   b7716:	f1b3 0220 	subs.w	r2, r3, #32
   b771a:	da0c      	bge.n	b7736 <__adddf3+0x16e>
   b771c:	320c      	adds	r2, #12
   b771e:	dd08      	ble.n	b7732 <__adddf3+0x16a>
   b7720:	f102 0c14 	add.w	ip, r2, #20
   b7724:	f1c2 020c 	rsb	r2, r2, #12
   b7728:	fa01 f00c 	lsl.w	r0, r1, ip
   b772c:	fa21 f102 	lsr.w	r1, r1, r2
   b7730:	e00c      	b.n	b774c <__adddf3+0x184>
   b7732:	f102 0214 	add.w	r2, r2, #20
   b7736:	bfd8      	it	le
   b7738:	f1c2 0c20 	rsble	ip, r2, #32
   b773c:	fa01 f102 	lsl.w	r1, r1, r2
   b7740:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7744:	bfdc      	itt	le
   b7746:	ea41 010c 	orrle.w	r1, r1, ip
   b774a:	4090      	lslle	r0, r2
   b774c:	1ae4      	subs	r4, r4, r3
   b774e:	bfa2      	ittt	ge
   b7750:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7754:	4329      	orrge	r1, r5
   b7756:	bd30      	popge	{r4, r5, pc}
   b7758:	ea6f 0404 	mvn.w	r4, r4
   b775c:	3c1f      	subs	r4, #31
   b775e:	da1c      	bge.n	b779a <__adddf3+0x1d2>
   b7760:	340c      	adds	r4, #12
   b7762:	dc0e      	bgt.n	b7782 <__adddf3+0x1ba>
   b7764:	f104 0414 	add.w	r4, r4, #20
   b7768:	f1c4 0220 	rsb	r2, r4, #32
   b776c:	fa20 f004 	lsr.w	r0, r0, r4
   b7770:	fa01 f302 	lsl.w	r3, r1, r2
   b7774:	ea40 0003 	orr.w	r0, r0, r3
   b7778:	fa21 f304 	lsr.w	r3, r1, r4
   b777c:	ea45 0103 	orr.w	r1, r5, r3
   b7780:	bd30      	pop	{r4, r5, pc}
   b7782:	f1c4 040c 	rsb	r4, r4, #12
   b7786:	f1c4 0220 	rsb	r2, r4, #32
   b778a:	fa20 f002 	lsr.w	r0, r0, r2
   b778e:	fa01 f304 	lsl.w	r3, r1, r4
   b7792:	ea40 0003 	orr.w	r0, r0, r3
   b7796:	4629      	mov	r1, r5
   b7798:	bd30      	pop	{r4, r5, pc}
   b779a:	fa21 f004 	lsr.w	r0, r1, r4
   b779e:	4629      	mov	r1, r5
   b77a0:	bd30      	pop	{r4, r5, pc}
   b77a2:	f094 0f00 	teq	r4, #0
   b77a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b77aa:	bf06      	itte	eq
   b77ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b77b0:	3401      	addeq	r4, #1
   b77b2:	3d01      	subne	r5, #1
   b77b4:	e74e      	b.n	b7654 <__adddf3+0x8c>
   b77b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b77ba:	bf18      	it	ne
   b77bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b77c0:	d029      	beq.n	b7816 <__adddf3+0x24e>
   b77c2:	ea94 0f05 	teq	r4, r5
   b77c6:	bf08      	it	eq
   b77c8:	ea90 0f02 	teqeq	r0, r2
   b77cc:	d005      	beq.n	b77da <__adddf3+0x212>
   b77ce:	ea54 0c00 	orrs.w	ip, r4, r0
   b77d2:	bf04      	itt	eq
   b77d4:	4619      	moveq	r1, r3
   b77d6:	4610      	moveq	r0, r2
   b77d8:	bd30      	pop	{r4, r5, pc}
   b77da:	ea91 0f03 	teq	r1, r3
   b77de:	bf1e      	ittt	ne
   b77e0:	2100      	movne	r1, #0
   b77e2:	2000      	movne	r0, #0
   b77e4:	bd30      	popne	{r4, r5, pc}
   b77e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b77ea:	d105      	bne.n	b77f8 <__adddf3+0x230>
   b77ec:	0040      	lsls	r0, r0, #1
   b77ee:	4149      	adcs	r1, r1
   b77f0:	bf28      	it	cs
   b77f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b77f6:	bd30      	pop	{r4, r5, pc}
   b77f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b77fc:	bf3c      	itt	cc
   b77fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7802:	bd30      	popcc	{r4, r5, pc}
   b7804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7808:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b780c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7810:	f04f 0000 	mov.w	r0, #0
   b7814:	bd30      	pop	{r4, r5, pc}
   b7816:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b781a:	bf1a      	itte	ne
   b781c:	4619      	movne	r1, r3
   b781e:	4610      	movne	r0, r2
   b7820:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7824:	bf1c      	itt	ne
   b7826:	460b      	movne	r3, r1
   b7828:	4602      	movne	r2, r0
   b782a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b782e:	bf06      	itte	eq
   b7830:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7834:	ea91 0f03 	teqeq	r1, r3
   b7838:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b783c:	bd30      	pop	{r4, r5, pc}
   b783e:	bf00      	nop

000b7840 <__aeabi_ui2d>:
   b7840:	f090 0f00 	teq	r0, #0
   b7844:	bf04      	itt	eq
   b7846:	2100      	moveq	r1, #0
   b7848:	4770      	bxeq	lr
   b784a:	b530      	push	{r4, r5, lr}
   b784c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7850:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7854:	f04f 0500 	mov.w	r5, #0
   b7858:	f04f 0100 	mov.w	r1, #0
   b785c:	e750      	b.n	b7700 <__adddf3+0x138>
   b785e:	bf00      	nop

000b7860 <__aeabi_i2d>:
   b7860:	f090 0f00 	teq	r0, #0
   b7864:	bf04      	itt	eq
   b7866:	2100      	moveq	r1, #0
   b7868:	4770      	bxeq	lr
   b786a:	b530      	push	{r4, r5, lr}
   b786c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7870:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7874:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7878:	bf48      	it	mi
   b787a:	4240      	negmi	r0, r0
   b787c:	f04f 0100 	mov.w	r1, #0
   b7880:	e73e      	b.n	b7700 <__adddf3+0x138>
   b7882:	bf00      	nop

000b7884 <__aeabi_f2d>:
   b7884:	0042      	lsls	r2, r0, #1
   b7886:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b788a:	ea4f 0131 	mov.w	r1, r1, rrx
   b788e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7892:	bf1f      	itttt	ne
   b7894:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7898:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b789c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b78a0:	4770      	bxne	lr
   b78a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b78a6:	bf08      	it	eq
   b78a8:	4770      	bxeq	lr
   b78aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b78ae:	bf04      	itt	eq
   b78b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b78b4:	4770      	bxeq	lr
   b78b6:	b530      	push	{r4, r5, lr}
   b78b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b78bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b78c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b78c4:	e71c      	b.n	b7700 <__adddf3+0x138>
   b78c6:	bf00      	nop

000b78c8 <__aeabi_ul2d>:
   b78c8:	ea50 0201 	orrs.w	r2, r0, r1
   b78cc:	bf08      	it	eq
   b78ce:	4770      	bxeq	lr
   b78d0:	b530      	push	{r4, r5, lr}
   b78d2:	f04f 0500 	mov.w	r5, #0
   b78d6:	e00a      	b.n	b78ee <__aeabi_l2d+0x16>

000b78d8 <__aeabi_l2d>:
   b78d8:	ea50 0201 	orrs.w	r2, r0, r1
   b78dc:	bf08      	it	eq
   b78de:	4770      	bxeq	lr
   b78e0:	b530      	push	{r4, r5, lr}
   b78e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b78e6:	d502      	bpl.n	b78ee <__aeabi_l2d+0x16>
   b78e8:	4240      	negs	r0, r0
   b78ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b78ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b78f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b78f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b78fa:	f43f aed8 	beq.w	b76ae <__adddf3+0xe6>
   b78fe:	f04f 0203 	mov.w	r2, #3
   b7902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7906:	bf18      	it	ne
   b7908:	3203      	addne	r2, #3
   b790a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b790e:	bf18      	it	ne
   b7910:	3203      	addne	r2, #3
   b7912:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7916:	f1c2 0320 	rsb	r3, r2, #32
   b791a:	fa00 fc03 	lsl.w	ip, r0, r3
   b791e:	fa20 f002 	lsr.w	r0, r0, r2
   b7922:	fa01 fe03 	lsl.w	lr, r1, r3
   b7926:	ea40 000e 	orr.w	r0, r0, lr
   b792a:	fa21 f102 	lsr.w	r1, r1, r2
   b792e:	4414      	add	r4, r2
   b7930:	e6bd      	b.n	b76ae <__adddf3+0xe6>
   b7932:	bf00      	nop

000b7934 <__aeabi_dmul>:
   b7934:	b570      	push	{r4, r5, r6, lr}
   b7936:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b793a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b793e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7942:	bf1d      	ittte	ne
   b7944:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7948:	ea94 0f0c 	teqne	r4, ip
   b794c:	ea95 0f0c 	teqne	r5, ip
   b7950:	f000 f8de 	bleq	b7b10 <__aeabi_dmul+0x1dc>
   b7954:	442c      	add	r4, r5
   b7956:	ea81 0603 	eor.w	r6, r1, r3
   b795a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b795e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7962:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7966:	bf18      	it	ne
   b7968:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b796c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7974:	d038      	beq.n	b79e8 <__aeabi_dmul+0xb4>
   b7976:	fba0 ce02 	umull	ip, lr, r0, r2
   b797a:	f04f 0500 	mov.w	r5, #0
   b797e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7982:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7986:	fbe0 e503 	umlal	lr, r5, r0, r3
   b798a:	f04f 0600 	mov.w	r6, #0
   b798e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7992:	f09c 0f00 	teq	ip, #0
   b7996:	bf18      	it	ne
   b7998:	f04e 0e01 	orrne.w	lr, lr, #1
   b799c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b79a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b79a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b79a8:	d204      	bcs.n	b79b4 <__aeabi_dmul+0x80>
   b79aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b79ae:	416d      	adcs	r5, r5
   b79b0:	eb46 0606 	adc.w	r6, r6, r6
   b79b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b79b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b79bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b79c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b79c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b79c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b79cc:	bf88      	it	hi
   b79ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b79d2:	d81e      	bhi.n	b7a12 <__aeabi_dmul+0xde>
   b79d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b79d8:	bf08      	it	eq
   b79da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b79de:	f150 0000 	adcs.w	r0, r0, #0
   b79e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b79e6:	bd70      	pop	{r4, r5, r6, pc}
   b79e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b79ec:	ea46 0101 	orr.w	r1, r6, r1
   b79f0:	ea40 0002 	orr.w	r0, r0, r2
   b79f4:	ea81 0103 	eor.w	r1, r1, r3
   b79f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b79fc:	bfc2      	ittt	gt
   b79fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7a06:	bd70      	popgt	{r4, r5, r6, pc}
   b7a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7a0c:	f04f 0e00 	mov.w	lr, #0
   b7a10:	3c01      	subs	r4, #1
   b7a12:	f300 80ab 	bgt.w	b7b6c <__aeabi_dmul+0x238>
   b7a16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7a1a:	bfde      	ittt	le
   b7a1c:	2000      	movle	r0, #0
   b7a1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7a22:	bd70      	pople	{r4, r5, r6, pc}
   b7a24:	f1c4 0400 	rsb	r4, r4, #0
   b7a28:	3c20      	subs	r4, #32
   b7a2a:	da35      	bge.n	b7a98 <__aeabi_dmul+0x164>
   b7a2c:	340c      	adds	r4, #12
   b7a2e:	dc1b      	bgt.n	b7a68 <__aeabi_dmul+0x134>
   b7a30:	f104 0414 	add.w	r4, r4, #20
   b7a34:	f1c4 0520 	rsb	r5, r4, #32
   b7a38:	fa00 f305 	lsl.w	r3, r0, r5
   b7a3c:	fa20 f004 	lsr.w	r0, r0, r4
   b7a40:	fa01 f205 	lsl.w	r2, r1, r5
   b7a44:	ea40 0002 	orr.w	r0, r0, r2
   b7a48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7a4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7a50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7a54:	fa21 f604 	lsr.w	r6, r1, r4
   b7a58:	eb42 0106 	adc.w	r1, r2, r6
   b7a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7a60:	bf08      	it	eq
   b7a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7a66:	bd70      	pop	{r4, r5, r6, pc}
   b7a68:	f1c4 040c 	rsb	r4, r4, #12
   b7a6c:	f1c4 0520 	rsb	r5, r4, #32
   b7a70:	fa00 f304 	lsl.w	r3, r0, r4
   b7a74:	fa20 f005 	lsr.w	r0, r0, r5
   b7a78:	fa01 f204 	lsl.w	r2, r1, r4
   b7a7c:	ea40 0002 	orr.w	r0, r0, r2
   b7a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7a84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7a88:	f141 0100 	adc.w	r1, r1, #0
   b7a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7a90:	bf08      	it	eq
   b7a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7a96:	bd70      	pop	{r4, r5, r6, pc}
   b7a98:	f1c4 0520 	rsb	r5, r4, #32
   b7a9c:	fa00 f205 	lsl.w	r2, r0, r5
   b7aa0:	ea4e 0e02 	orr.w	lr, lr, r2
   b7aa4:	fa20 f304 	lsr.w	r3, r0, r4
   b7aa8:	fa01 f205 	lsl.w	r2, r1, r5
   b7aac:	ea43 0302 	orr.w	r3, r3, r2
   b7ab0:	fa21 f004 	lsr.w	r0, r1, r4
   b7ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7ab8:	fa21 f204 	lsr.w	r2, r1, r4
   b7abc:	ea20 0002 	bic.w	r0, r0, r2
   b7ac0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ac8:	bf08      	it	eq
   b7aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7ace:	bd70      	pop	{r4, r5, r6, pc}
   b7ad0:	f094 0f00 	teq	r4, #0
   b7ad4:	d10f      	bne.n	b7af6 <__aeabi_dmul+0x1c2>
   b7ad6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7ada:	0040      	lsls	r0, r0, #1
   b7adc:	eb41 0101 	adc.w	r1, r1, r1
   b7ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ae4:	bf08      	it	eq
   b7ae6:	3c01      	subeq	r4, #1
   b7ae8:	d0f7      	beq.n	b7ada <__aeabi_dmul+0x1a6>
   b7aea:	ea41 0106 	orr.w	r1, r1, r6
   b7aee:	f095 0f00 	teq	r5, #0
   b7af2:	bf18      	it	ne
   b7af4:	4770      	bxne	lr
   b7af6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7afa:	0052      	lsls	r2, r2, #1
   b7afc:	eb43 0303 	adc.w	r3, r3, r3
   b7b00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7b04:	bf08      	it	eq
   b7b06:	3d01      	subeq	r5, #1
   b7b08:	d0f7      	beq.n	b7afa <__aeabi_dmul+0x1c6>
   b7b0a:	ea43 0306 	orr.w	r3, r3, r6
   b7b0e:	4770      	bx	lr
   b7b10:	ea94 0f0c 	teq	r4, ip
   b7b14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7b18:	bf18      	it	ne
   b7b1a:	ea95 0f0c 	teqne	r5, ip
   b7b1e:	d00c      	beq.n	b7b3a <__aeabi_dmul+0x206>
   b7b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7b24:	bf18      	it	ne
   b7b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7b2a:	d1d1      	bne.n	b7ad0 <__aeabi_dmul+0x19c>
   b7b2c:	ea81 0103 	eor.w	r1, r1, r3
   b7b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7b34:	f04f 0000 	mov.w	r0, #0
   b7b38:	bd70      	pop	{r4, r5, r6, pc}
   b7b3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7b3e:	bf06      	itte	eq
   b7b40:	4610      	moveq	r0, r2
   b7b42:	4619      	moveq	r1, r3
   b7b44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7b48:	d019      	beq.n	b7b7e <__aeabi_dmul+0x24a>
   b7b4a:	ea94 0f0c 	teq	r4, ip
   b7b4e:	d102      	bne.n	b7b56 <__aeabi_dmul+0x222>
   b7b50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7b54:	d113      	bne.n	b7b7e <__aeabi_dmul+0x24a>
   b7b56:	ea95 0f0c 	teq	r5, ip
   b7b5a:	d105      	bne.n	b7b68 <__aeabi_dmul+0x234>
   b7b5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7b60:	bf1c      	itt	ne
   b7b62:	4610      	movne	r0, r2
   b7b64:	4619      	movne	r1, r3
   b7b66:	d10a      	bne.n	b7b7e <__aeabi_dmul+0x24a>
   b7b68:	ea81 0103 	eor.w	r1, r1, r3
   b7b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7b70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7b74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7b78:	f04f 0000 	mov.w	r0, #0
   b7b7c:	bd70      	pop	{r4, r5, r6, pc}
   b7b7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7b82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7b86:	bd70      	pop	{r4, r5, r6, pc}

000b7b88 <__aeabi_ddiv>:
   b7b88:	b570      	push	{r4, r5, r6, lr}
   b7b8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7b8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7b92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7b96:	bf1d      	ittte	ne
   b7b98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7b9c:	ea94 0f0c 	teqne	r4, ip
   b7ba0:	ea95 0f0c 	teqne	r5, ip
   b7ba4:	f000 f8a7 	bleq	b7cf6 <__aeabi_ddiv+0x16e>
   b7ba8:	eba4 0405 	sub.w	r4, r4, r5
   b7bac:	ea81 0e03 	eor.w	lr, r1, r3
   b7bb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7bb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7bb8:	f000 8088 	beq.w	b7ccc <__aeabi_ddiv+0x144>
   b7bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7bc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7bc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7bc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7bcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7bd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7bd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7bd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7bdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7be0:	429d      	cmp	r5, r3
   b7be2:	bf08      	it	eq
   b7be4:	4296      	cmpeq	r6, r2
   b7be6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7bea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7bee:	d202      	bcs.n	b7bf6 <__aeabi_ddiv+0x6e>
   b7bf0:	085b      	lsrs	r3, r3, #1
   b7bf2:	ea4f 0232 	mov.w	r2, r2, rrx
   b7bf6:	1ab6      	subs	r6, r6, r2
   b7bf8:	eb65 0503 	sbc.w	r5, r5, r3
   b7bfc:	085b      	lsrs	r3, r3, #1
   b7bfe:	ea4f 0232 	mov.w	r2, r2, rrx
   b7c02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7c06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7c0a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7c12:	bf22      	ittt	cs
   b7c14:	1ab6      	subcs	r6, r6, r2
   b7c16:	4675      	movcs	r5, lr
   b7c18:	ea40 000c 	orrcs.w	r0, r0, ip
   b7c1c:	085b      	lsrs	r3, r3, #1
   b7c1e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7c22:	ebb6 0e02 	subs.w	lr, r6, r2
   b7c26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7c2a:	bf22      	ittt	cs
   b7c2c:	1ab6      	subcs	r6, r6, r2
   b7c2e:	4675      	movcs	r5, lr
   b7c30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7c34:	085b      	lsrs	r3, r3, #1
   b7c36:	ea4f 0232 	mov.w	r2, r2, rrx
   b7c3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7c42:	bf22      	ittt	cs
   b7c44:	1ab6      	subcs	r6, r6, r2
   b7c46:	4675      	movcs	r5, lr
   b7c48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7c4c:	085b      	lsrs	r3, r3, #1
   b7c4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7c52:	ebb6 0e02 	subs.w	lr, r6, r2
   b7c56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7c5a:	bf22      	ittt	cs
   b7c5c:	1ab6      	subcs	r6, r6, r2
   b7c5e:	4675      	movcs	r5, lr
   b7c60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7c64:	ea55 0e06 	orrs.w	lr, r5, r6
   b7c68:	d018      	beq.n	b7c9c <__aeabi_ddiv+0x114>
   b7c6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7c6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7c72:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7c76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7c7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7c7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7c82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7c86:	d1c0      	bne.n	b7c0a <__aeabi_ddiv+0x82>
   b7c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7c8c:	d10b      	bne.n	b7ca6 <__aeabi_ddiv+0x11e>
   b7c8e:	ea41 0100 	orr.w	r1, r1, r0
   b7c92:	f04f 0000 	mov.w	r0, #0
   b7c96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7c9a:	e7b6      	b.n	b7c0a <__aeabi_ddiv+0x82>
   b7c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ca0:	bf04      	itt	eq
   b7ca2:	4301      	orreq	r1, r0
   b7ca4:	2000      	moveq	r0, #0
   b7ca6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7caa:	bf88      	it	hi
   b7cac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7cb0:	f63f aeaf 	bhi.w	b7a12 <__aeabi_dmul+0xde>
   b7cb4:	ebb5 0c03 	subs.w	ip, r5, r3
   b7cb8:	bf04      	itt	eq
   b7cba:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7cc2:	f150 0000 	adcs.w	r0, r0, #0
   b7cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7cca:	bd70      	pop	{r4, r5, r6, pc}
   b7ccc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7cd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7cd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7cd8:	bfc2      	ittt	gt
   b7cda:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7cde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7ce2:	bd70      	popgt	{r4, r5, r6, pc}
   b7ce4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7ce8:	f04f 0e00 	mov.w	lr, #0
   b7cec:	3c01      	subs	r4, #1
   b7cee:	e690      	b.n	b7a12 <__aeabi_dmul+0xde>
   b7cf0:	ea45 0e06 	orr.w	lr, r5, r6
   b7cf4:	e68d      	b.n	b7a12 <__aeabi_dmul+0xde>
   b7cf6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7cfa:	ea94 0f0c 	teq	r4, ip
   b7cfe:	bf08      	it	eq
   b7d00:	ea95 0f0c 	teqeq	r5, ip
   b7d04:	f43f af3b 	beq.w	b7b7e <__aeabi_dmul+0x24a>
   b7d08:	ea94 0f0c 	teq	r4, ip
   b7d0c:	d10a      	bne.n	b7d24 <__aeabi_ddiv+0x19c>
   b7d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7d12:	f47f af34 	bne.w	b7b7e <__aeabi_dmul+0x24a>
   b7d16:	ea95 0f0c 	teq	r5, ip
   b7d1a:	f47f af25 	bne.w	b7b68 <__aeabi_dmul+0x234>
   b7d1e:	4610      	mov	r0, r2
   b7d20:	4619      	mov	r1, r3
   b7d22:	e72c      	b.n	b7b7e <__aeabi_dmul+0x24a>
   b7d24:	ea95 0f0c 	teq	r5, ip
   b7d28:	d106      	bne.n	b7d38 <__aeabi_ddiv+0x1b0>
   b7d2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7d2e:	f43f aefd 	beq.w	b7b2c <__aeabi_dmul+0x1f8>
   b7d32:	4610      	mov	r0, r2
   b7d34:	4619      	mov	r1, r3
   b7d36:	e722      	b.n	b7b7e <__aeabi_dmul+0x24a>
   b7d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7d3c:	bf18      	it	ne
   b7d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7d42:	f47f aec5 	bne.w	b7ad0 <__aeabi_dmul+0x19c>
   b7d46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7d4a:	f47f af0d 	bne.w	b7b68 <__aeabi_dmul+0x234>
   b7d4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7d52:	f47f aeeb 	bne.w	b7b2c <__aeabi_dmul+0x1f8>
   b7d56:	e712      	b.n	b7b7e <__aeabi_dmul+0x24a>

000b7d58 <__gedf2>:
   b7d58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7d5c:	e006      	b.n	b7d6c <__cmpdf2+0x4>
   b7d5e:	bf00      	nop

000b7d60 <__ledf2>:
   b7d60:	f04f 0c01 	mov.w	ip, #1
   b7d64:	e002      	b.n	b7d6c <__cmpdf2+0x4>
   b7d66:	bf00      	nop

000b7d68 <__cmpdf2>:
   b7d68:	f04f 0c01 	mov.w	ip, #1
   b7d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7d70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7d78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7d7c:	bf18      	it	ne
   b7d7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7d82:	d01b      	beq.n	b7dbc <__cmpdf2+0x54>
   b7d84:	b001      	add	sp, #4
   b7d86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7d8a:	bf0c      	ite	eq
   b7d8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7d90:	ea91 0f03 	teqne	r1, r3
   b7d94:	bf02      	ittt	eq
   b7d96:	ea90 0f02 	teqeq	r0, r2
   b7d9a:	2000      	moveq	r0, #0
   b7d9c:	4770      	bxeq	lr
   b7d9e:	f110 0f00 	cmn.w	r0, #0
   b7da2:	ea91 0f03 	teq	r1, r3
   b7da6:	bf58      	it	pl
   b7da8:	4299      	cmppl	r1, r3
   b7daa:	bf08      	it	eq
   b7dac:	4290      	cmpeq	r0, r2
   b7dae:	bf2c      	ite	cs
   b7db0:	17d8      	asrcs	r0, r3, #31
   b7db2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7db6:	f040 0001 	orr.w	r0, r0, #1
   b7dba:	4770      	bx	lr
   b7dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7dc4:	d102      	bne.n	b7dcc <__cmpdf2+0x64>
   b7dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7dca:	d107      	bne.n	b7ddc <__cmpdf2+0x74>
   b7dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7dd4:	d1d6      	bne.n	b7d84 <__cmpdf2+0x1c>
   b7dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7dda:	d0d3      	beq.n	b7d84 <__cmpdf2+0x1c>
   b7ddc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7de0:	4770      	bx	lr
   b7de2:	bf00      	nop

000b7de4 <__aeabi_cdrcmple>:
   b7de4:	4684      	mov	ip, r0
   b7de6:	4610      	mov	r0, r2
   b7de8:	4662      	mov	r2, ip
   b7dea:	468c      	mov	ip, r1
   b7dec:	4619      	mov	r1, r3
   b7dee:	4663      	mov	r3, ip
   b7df0:	e000      	b.n	b7df4 <__aeabi_cdcmpeq>
   b7df2:	bf00      	nop

000b7df4 <__aeabi_cdcmpeq>:
   b7df4:	b501      	push	{r0, lr}
   b7df6:	f7ff ffb7 	bl	b7d68 <__cmpdf2>
   b7dfa:	2800      	cmp	r0, #0
   b7dfc:	bf48      	it	mi
   b7dfe:	f110 0f00 	cmnmi.w	r0, #0
   b7e02:	bd01      	pop	{r0, pc}

000b7e04 <__aeabi_dcmpeq>:
   b7e04:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7e08:	f7ff fff4 	bl	b7df4 <__aeabi_cdcmpeq>
   b7e0c:	bf0c      	ite	eq
   b7e0e:	2001      	moveq	r0, #1
   b7e10:	2000      	movne	r0, #0
   b7e12:	f85d fb08 	ldr.w	pc, [sp], #8
   b7e16:	bf00      	nop

000b7e18 <__aeabi_dcmplt>:
   b7e18:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7e1c:	f7ff ffea 	bl	b7df4 <__aeabi_cdcmpeq>
   b7e20:	bf34      	ite	cc
   b7e22:	2001      	movcc	r0, #1
   b7e24:	2000      	movcs	r0, #0
   b7e26:	f85d fb08 	ldr.w	pc, [sp], #8
   b7e2a:	bf00      	nop

000b7e2c <__aeabi_dcmple>:
   b7e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7e30:	f7ff ffe0 	bl	b7df4 <__aeabi_cdcmpeq>
   b7e34:	bf94      	ite	ls
   b7e36:	2001      	movls	r0, #1
   b7e38:	2000      	movhi	r0, #0
   b7e3a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7e3e:	bf00      	nop

000b7e40 <__aeabi_dcmpge>:
   b7e40:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7e44:	f7ff ffce 	bl	b7de4 <__aeabi_cdrcmple>
   b7e48:	bf94      	ite	ls
   b7e4a:	2001      	movls	r0, #1
   b7e4c:	2000      	movhi	r0, #0
   b7e4e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7e52:	bf00      	nop

000b7e54 <__aeabi_dcmpgt>:
   b7e54:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7e58:	f7ff ffc4 	bl	b7de4 <__aeabi_cdrcmple>
   b7e5c:	bf34      	ite	cc
   b7e5e:	2001      	movcc	r0, #1
   b7e60:	2000      	movcs	r0, #0
   b7e62:	f85d fb08 	ldr.w	pc, [sp], #8
   b7e66:	bf00      	nop

000b7e68 <__aeabi_d2iz>:
   b7e68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7e6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7e70:	d215      	bcs.n	b7e9e <__aeabi_d2iz+0x36>
   b7e72:	d511      	bpl.n	b7e98 <__aeabi_d2iz+0x30>
   b7e74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7e78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7e7c:	d912      	bls.n	b7ea4 <__aeabi_d2iz+0x3c>
   b7e7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7e86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7e8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7e8e:	fa23 f002 	lsr.w	r0, r3, r2
   b7e92:	bf18      	it	ne
   b7e94:	4240      	negne	r0, r0
   b7e96:	4770      	bx	lr
   b7e98:	f04f 0000 	mov.w	r0, #0
   b7e9c:	4770      	bx	lr
   b7e9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7ea2:	d105      	bne.n	b7eb0 <__aeabi_d2iz+0x48>
   b7ea4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b7ea8:	bf08      	it	eq
   b7eaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b7eae:	4770      	bx	lr
   b7eb0:	f04f 0000 	mov.w	r0, #0
   b7eb4:	4770      	bx	lr
   b7eb6:	bf00      	nop

000b7eb8 <__aeabi_d2f>:
   b7eb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7ebc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7ec0:	bf24      	itt	cs
   b7ec2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7ec6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7eca:	d90d      	bls.n	b7ee8 <__aeabi_d2f+0x30>
   b7ecc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7ed0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7ed4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7ed8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7edc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7ee0:	bf08      	it	eq
   b7ee2:	f020 0001 	biceq.w	r0, r0, #1
   b7ee6:	4770      	bx	lr
   b7ee8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7eec:	d121      	bne.n	b7f32 <__aeabi_d2f+0x7a>
   b7eee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7ef2:	bfbc      	itt	lt
   b7ef4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7ef8:	4770      	bxlt	lr
   b7efa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7efe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7f02:	f1c2 0218 	rsb	r2, r2, #24
   b7f06:	f1c2 0c20 	rsb	ip, r2, #32
   b7f0a:	fa10 f30c 	lsls.w	r3, r0, ip
   b7f0e:	fa20 f002 	lsr.w	r0, r0, r2
   b7f12:	bf18      	it	ne
   b7f14:	f040 0001 	orrne.w	r0, r0, #1
   b7f18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7f1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7f20:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7f24:	ea40 000c 	orr.w	r0, r0, ip
   b7f28:	fa23 f302 	lsr.w	r3, r3, r2
   b7f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7f30:	e7cc      	b.n	b7ecc <__aeabi_d2f+0x14>
   b7f32:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7f36:	d107      	bne.n	b7f48 <__aeabi_d2f+0x90>
   b7f38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7f3c:	bf1e      	ittt	ne
   b7f3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7f42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7f46:	4770      	bxne	lr
   b7f48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7f4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7f50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7f54:	4770      	bx	lr
   b7f56:	bf00      	nop

000b7f58 <atexit>:
   b7f58:	2300      	movs	r3, #0
   b7f5a:	4601      	mov	r1, r0
   b7f5c:	461a      	mov	r2, r3
   b7f5e:	4618      	mov	r0, r3
   b7f60:	f000 b85e 	b.w	b8020 <__register_exitproc>

000b7f64 <memcpy>:
   b7f64:	440a      	add	r2, r1
   b7f66:	4291      	cmp	r1, r2
   b7f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7f6c:	d100      	bne.n	b7f70 <memcpy+0xc>
   b7f6e:	4770      	bx	lr
   b7f70:	b510      	push	{r4, lr}
   b7f72:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7f76:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7f7a:	4291      	cmp	r1, r2
   b7f7c:	d1f9      	bne.n	b7f72 <memcpy+0xe>
   b7f7e:	bd10      	pop	{r4, pc}

000b7f80 <memset>:
   b7f80:	4402      	add	r2, r0
   b7f82:	4603      	mov	r3, r0
   b7f84:	4293      	cmp	r3, r2
   b7f86:	d100      	bne.n	b7f8a <memset+0xa>
   b7f88:	4770      	bx	lr
   b7f8a:	f803 1b01 	strb.w	r1, [r3], #1
   b7f8e:	e7f9      	b.n	b7f84 <memset+0x4>

000b7f90 <srand>:
   b7f90:	b538      	push	{r3, r4, r5, lr}
   b7f92:	4b10      	ldr	r3, [pc, #64]	; (b7fd4 <srand+0x44>)
   b7f94:	681d      	ldr	r5, [r3, #0]
   b7f96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f98:	4604      	mov	r4, r0
   b7f9a:	b9b3      	cbnz	r3, b7fca <srand+0x3a>
   b7f9c:	2018      	movs	r0, #24
   b7f9e:	f7fc fe0d 	bl	b4bbc <malloc>
   b7fa2:	4602      	mov	r2, r0
   b7fa4:	63a8      	str	r0, [r5, #56]	; 0x38
   b7fa6:	b920      	cbnz	r0, b7fb2 <srand+0x22>
   b7fa8:	4b0b      	ldr	r3, [pc, #44]	; (b7fd8 <srand+0x48>)
   b7faa:	480c      	ldr	r0, [pc, #48]	; (b7fdc <srand+0x4c>)
   b7fac:	2142      	movs	r1, #66	; 0x42
   b7fae:	f7fc fe2d 	bl	b4c0c <__assert_func>
   b7fb2:	490b      	ldr	r1, [pc, #44]	; (b7fe0 <srand+0x50>)
   b7fb4:	4b0b      	ldr	r3, [pc, #44]	; (b7fe4 <srand+0x54>)
   b7fb6:	e9c0 1300 	strd	r1, r3, [r0]
   b7fba:	4b0b      	ldr	r3, [pc, #44]	; (b7fe8 <srand+0x58>)
   b7fbc:	6083      	str	r3, [r0, #8]
   b7fbe:	230b      	movs	r3, #11
   b7fc0:	8183      	strh	r3, [r0, #12]
   b7fc2:	2100      	movs	r1, #0
   b7fc4:	2001      	movs	r0, #1
   b7fc6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7fca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7fcc:	2200      	movs	r2, #0
   b7fce:	611c      	str	r4, [r3, #16]
   b7fd0:	615a      	str	r2, [r3, #20]
   b7fd2:	bd38      	pop	{r3, r4, r5, pc}
   b7fd4:	2003e598 	.word	0x2003e598
   b7fd8:	000b8730 	.word	0x000b8730
   b7fdc:	000b8747 	.word	0x000b8747
   b7fe0:	abcd330e 	.word	0xabcd330e
   b7fe4:	e66d1234 	.word	0xe66d1234
   b7fe8:	0005deec 	.word	0x0005deec

000b7fec <strcmp>:
   b7fec:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7ff4:	2a01      	cmp	r2, #1
   b7ff6:	bf28      	it	cs
   b7ff8:	429a      	cmpcs	r2, r3
   b7ffa:	d0f7      	beq.n	b7fec <strcmp>
   b7ffc:	1ad0      	subs	r0, r2, r3
   b7ffe:	4770      	bx	lr

000b8000 <strcpy>:
   b8000:	4603      	mov	r3, r0
   b8002:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8006:	f803 2b01 	strb.w	r2, [r3], #1
   b800a:	2a00      	cmp	r2, #0
   b800c:	d1f9      	bne.n	b8002 <strcpy+0x2>
   b800e:	4770      	bx	lr

000b8010 <strlen>:
   b8010:	4603      	mov	r3, r0
   b8012:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8016:	2a00      	cmp	r2, #0
   b8018:	d1fb      	bne.n	b8012 <strlen+0x2>
   b801a:	1a18      	subs	r0, r3, r0
   b801c:	3801      	subs	r0, #1
   b801e:	4770      	bx	lr

000b8020 <__register_exitproc>:
   b8020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8024:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b80e0 <__register_exitproc+0xc0>
   b8028:	4606      	mov	r6, r0
   b802a:	f8d8 0000 	ldr.w	r0, [r8]
   b802e:	461f      	mov	r7, r3
   b8030:	460d      	mov	r5, r1
   b8032:	4691      	mov	r9, r2
   b8034:	f000 f856 	bl	b80e4 <__retarget_lock_acquire_recursive>
   b8038:	4b25      	ldr	r3, [pc, #148]	; (b80d0 <__register_exitproc+0xb0>)
   b803a:	681c      	ldr	r4, [r3, #0]
   b803c:	b934      	cbnz	r4, b804c <__register_exitproc+0x2c>
   b803e:	4c25      	ldr	r4, [pc, #148]	; (b80d4 <__register_exitproc+0xb4>)
   b8040:	601c      	str	r4, [r3, #0]
   b8042:	4b25      	ldr	r3, [pc, #148]	; (b80d8 <__register_exitproc+0xb8>)
   b8044:	b113      	cbz	r3, b804c <__register_exitproc+0x2c>
   b8046:	681b      	ldr	r3, [r3, #0]
   b8048:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b804c:	6863      	ldr	r3, [r4, #4]
   b804e:	2b1f      	cmp	r3, #31
   b8050:	dd07      	ble.n	b8062 <__register_exitproc+0x42>
   b8052:	f8d8 0000 	ldr.w	r0, [r8]
   b8056:	f000 f847 	bl	b80e8 <__retarget_lock_release_recursive>
   b805a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8062:	b34e      	cbz	r6, b80b8 <__register_exitproc+0x98>
   b8064:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8068:	b988      	cbnz	r0, b808e <__register_exitproc+0x6e>
   b806a:	4b1c      	ldr	r3, [pc, #112]	; (b80dc <__register_exitproc+0xbc>)
   b806c:	b923      	cbnz	r3, b8078 <__register_exitproc+0x58>
   b806e:	f8d8 0000 	ldr.w	r0, [r8]
   b8072:	f000 f838 	bl	b80e6 <__retarget_lock_release>
   b8076:	e7f0      	b.n	b805a <__register_exitproc+0x3a>
   b8078:	f44f 7084 	mov.w	r0, #264	; 0x108
   b807c:	f7fc fd9e 	bl	b4bbc <malloc>
   b8080:	2800      	cmp	r0, #0
   b8082:	d0f4      	beq.n	b806e <__register_exitproc+0x4e>
   b8084:	2300      	movs	r3, #0
   b8086:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b808a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b808e:	6863      	ldr	r3, [r4, #4]
   b8090:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8094:	2201      	movs	r2, #1
   b8096:	409a      	lsls	r2, r3
   b8098:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b809c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b80a0:	4313      	orrs	r3, r2
   b80a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b80a6:	2e02      	cmp	r6, #2
   b80a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b80ac:	bf02      	ittt	eq
   b80ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b80b2:	4313      	orreq	r3, r2
   b80b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b80b8:	6863      	ldr	r3, [r4, #4]
   b80ba:	f8d8 0000 	ldr.w	r0, [r8]
   b80be:	1c5a      	adds	r2, r3, #1
   b80c0:	3302      	adds	r3, #2
   b80c2:	6062      	str	r2, [r4, #4]
   b80c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b80c8:	f000 f80e 	bl	b80e8 <__retarget_lock_release_recursive>
   b80cc:	2000      	movs	r0, #0
   b80ce:	e7c6      	b.n	b805e <__register_exitproc+0x3e>
   b80d0:	2003e7e8 	.word	0x2003e7e8
   b80d4:	2003e75c 	.word	0x2003e75c
   b80d8:	00000000 	.word	0x00000000
   b80dc:	000b4bbd 	.word	0x000b4bbd
   b80e0:	2003e5fc 	.word	0x2003e5fc

000b80e4 <__retarget_lock_acquire_recursive>:
   b80e4:	4770      	bx	lr

000b80e6 <__retarget_lock_release>:
   b80e6:	4770      	bx	lr

000b80e8 <__retarget_lock_release_recursive>:
   b80e8:	4770      	bx	lr

000b80ea <link_code_end>:
	...

000b80ec <dynalib_user>:
   b80ec:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b80fc:	0000 0000 6f4e 4320 6168 676e 2065 202d     ....No Change - 
   b810c:	6143 636e 6c65 696c 676e 4320 444d 000a     Cancelling CMD..
   b811c:	227b 6e6f 3a22 7274 6575 222c 6173 2274     {"on":true,"sat"
   b812c:	003a 222c 7262 2269 003a 222c 7568 2265     :.,"bri":.,"hue"
   b813c:	003a 227b 6e6f 3a22 6166 736c 7d65 5300     :.{"on":false}.S
   b814c:	6e65 6964 676e 4320 6d6f 616d 646e 7420     ending Command t
   b815c:	206f 7548 0065 5550 2054 612f 6970 002f     o Hue.PUT /api/.
   b816c:	6c2f 6769 7468 2f73 2f00 7473 7461 2065     /lights/./state 
   b817c:	5448 5054 312f 312e 6b00 6565 2d70 6c61     HTTP/1.1.keep-al
   b818c:	7669 0065 6f48 7473 203a 4300 6e6f 6574     ive.Host: .Conte
   b819c:	746e 4c2d 6e65 7467 3a68 0020 6f43 746e     nt-Length: .Cont
   b81ac:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
   b81bc:	616c 6e69 633b 6168 7372 7465 553d 4654     lain;charset=UTF
   b81cc:	382d 4600 6f72 206d 7548 0065 6f49 4e54     -8.From Hue.IoTN
   b81dc:	7465 6f77 6b72 2e00 7300 6e65 6f73 7272     etwork...sensorr
   b81ec:	6165 0064 0a0a 700a 6f68 6f74 6964 646f     ead....photodiod
   b81fc:	5665 6c61 6575 253d 0a69 622c 6972 6867     eValue=%i.,brigh
   b820c:	6e74 7365 3d73 6925 0a0a 000a 6157 6574     tness=%i....Wate
   b821c:	2072 656c 6576 206c 6176 756c 2065 203d     r level value = 
   b822c:	6425 000a                                   %d..

000b8230 <_ZL11hueUsername>:
   b8230:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b8240:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b8250:	7438 334d 4637 5433                          8tM37F3T.

000b8259 <_ZL8hueHubIP>:
   b8259:	3931 2e32 3631 2e38 2e31 0035 0000           192.168.1.5....

000b8268 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8270 <_ZTVN5spark13EthernetClassE>:
	...
   b8278:	4cbb 000b 4cb1 000b 4ca7 000b 4c9d 000b     .L...L...L...L..
   b8288:	4c91 000b 4c85 000b 4ed9 000b 4ee1 000b     .L...L...N...N..
   b8298:	4c79 000b 4c71 000b 4c67 000b 4c5d 000b     yL..qL..gL..]L..
   b82a8:	4f11 000b                                   .O..

000b82ac <_ZTV7TwoWire>:
	...
   b82b4:	4cd9 000b 4d23 000b 4cfb 000b 4cdb 000b     .L..#M...L...L..
   b82c4:	4d03 000b 4d0b 000b 4d13 000b 4d1b 000b     .M...M...M...M..

000b82d4 <_ZTV9IPAddress>:
	...
   b82dc:	4d7d 000b 4d6d 000b 4d6f 000b 7061 0070     }M..mM..oM..app.

000b82ec <_ZTVN5spark12NetworkClassE>:
	...
   b82f4:	4e99 000b 4ea3 000b 4ead 000b 4eb7 000b     .N...N...N...N..
   b8304:	4ec1 000b 4ecd 000b 4ed9 000b 4ee1 000b     .N...N...N...N..
   b8314:	4ee9 000b 4ef5 000b 4efd 000b 4f07 000b     .N...N...N...O..
   b8324:	4f11 000b 6977 6972 676e 7200 6365 2076     .O..wiring.recv 
   b8334:	7265 6f72 2072 203d 6425 0000               error = %d..

000b8340 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8348:	54f9 000b 551d 000b 5a07 000b 552b 000b     .T...U...Z..+U..
   b8358:	54fd 000b                                   .T..

000b835c <_ZTV9TCPClient>:
	...
   b8364:	40f5 000b 4129 000b 5475 000b 548f 000b     .@..)A..uT...T..
   b8374:	589d 000b 54b9 000b 5713 000b 54ed 000b     .X...T...W...T..
   b8384:	57a5 000b 55e5 000b 5741 000b 5951 000b     .W...U..AW..QY..
   b8394:	56e1 000b 54ef 000b 54a1 000b 5531 000b     .V...T...T..1U..
   b83a4:	55c5 000b 5925 252d 2d6d 6425 2554 3a48     .U..%Y-%m-%dT%H:
   b83b4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b83c4 <_ZTV11USARTSerial>:
	...
   b83cc:	5a21 000b 5a8d 000b 5a65 000b 4ffd 000b     !Z...Z..eZ...O..
   b83dc:	5a35 000b 5a51 000b 5a43 000b 5a5f 000b     5Z..QZ..CZ.._Z..
   b83ec:	5a23 000b 5a27 000b                         #Z..'Z..

000b83f4 <_ZTV9USBSerial>:
	...
   b83fc:	5acb 000b 5b33 000b 5b09 000b 4ffd 000b     .Z..3[...[...O..
   b840c:	5afb 000b 5acd 000b 5add 000b 5b2d 000b     .Z...Z...Z..-[..
   b841c:	5aed 000b 5ac5 000b                         .Z...Z..

000b8424 <_ZTVN5spark9WiFiClassE>:
	...
   b842c:	5c33 000b 5c29 000b 5c1f 000b 5bd5 000b     3\..)\...\...[..
   b843c:	5c13 000b 5c07 000b 4ed9 000b 4ee1 000b     .\...\...N...N..
   b844c:	5bfb 000b 5bf3 000b 5be9 000b 5bdf 000b     .[...[...[...[..
   b845c:	4f11 000b                                   .O..

000b8460 <_ZSt7nothrow>:
	...

000b8461 <_ZTSSt19_Sp_make_shared_tag>:
   b8461:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8471:	6572 5f64 6174 0067 0000                     red_tag....

000b847c <_ZTISt19_Sp_make_shared_tag>:
   b847c:	84bc 000b 8461 000b                         ....a...

000b8484 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8484:	851c 000b 8490 000b 8540 000b               ........@...

000b8490 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8490:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b84a0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b84b0:	0045 0000                                   E...

000b84b4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b84b4:	0000 0000 8484 000b 6071 000b 6085 000b     ........q`...`..
   b84c4:	6219 000b 6219 000b 60ef 000b 6031 000b     .b...b...`..1`..
   b84d4:	60d7 000b 6099 000b 6063 000b               .`...`..c`..

000b84e0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b84e0:	851c 000b 84ec 000b 8484 000b               ............

000b84ec <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b84ec:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b84fc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b850c:	666e 456f 0000 0000                         nfoE....

000b8514 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8514:	0000 0000 84e0 000b 6119 000b 612d 000b     .........a..-a..
   b8524:	6219 000b 6219 000b 60ef 000b 6031 000b     .b...b...`..1`..
   b8534:	61ed 000b 6179 000b 6141 000b               .a..ya..Aa..

000b8540 <_ZTISt9type_info>:
   b8540:	84bc 000b 8548 000b                         ....H...

000b8548 <_ZTSSt9type_info>:
   b8548:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000b8558 <npio2_hw>:
   b8558:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   b8568:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   b8578:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   b8588:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   b8598:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   b85a8:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   b85b8:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   b85c8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000b85d8 <two_over_pi>:
   b85d8:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   b85e8:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   b85f8:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   b8608:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   b8618:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   b8628:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   b8638:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   b8648:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   b8658:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   b8668:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   b8678:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   b8688:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   b8698:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   b86a8:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   b86b8:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   b86c8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   b86d8:	e27b 0060 8c6b 00c0                         {.`.k...

000b86e0 <PIo2>:
   b86e0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   b86f0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   b8700:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   b8710:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000b8720 <init_jk>:
   b8720:	0002 0000 0003 0000 0004 0000 0006 0000     ................
   b8730:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8740:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8750:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b8760:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b8770:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b8780:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b8790:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b87a0 <link_const_variable_data_end>:
   b87a0:	000b46bd 	.word	0x000b46bd
   b87a4:	000b4c4d 	.word	0x000b4c4d
   b87a8:	000b4cc5 	.word	0x000b4cc5
   b87ac:	000b4e89 	.word	0x000b4e89
   b87b0:	000b4fe9 	.word	0x000b4fe9
   b87b4:	000b5125 	.word	0x000b5125
   b87b8:	000b5451 	.word	0x000b5451
   b87bc:	000b5a0d 	.word	0x000b5a0d
   b87c0:	000b5c3d 	.word	0x000b5c3d

000b87c4 <link_constructors_end>:
	...
