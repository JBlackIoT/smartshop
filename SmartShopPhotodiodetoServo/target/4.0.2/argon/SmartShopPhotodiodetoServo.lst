
/Users/jamesblack/Documents/IoT/smartshop/SmartShopPhotodiodetoServo/target/4.0.2/argon/SmartShopPhotodiodetoServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000033d0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b73f0  000b73f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7414  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e61c  000b7418  0001e61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2003e68c  2003e68c  0002e68c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7488  000b7488  00027488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b74b0  000b74b0  000274b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f48aa  00000000  00000000  000274b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ffe6  00000000  00000000  0011bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000309fb  00000000  00000000  0012bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  0015c73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009038  00000000  00000000  0015edaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000358dc  00000000  00000000  00167de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003637e  00000000  00000000  0019d6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012dcc1  00000000  00000000  001d3a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006d38  00000000  00000000  00301704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 ff1b 	bl	b6e6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 ff23 	bl	b6e88 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e61c 	.word	0x2003e61c
   b404c:	000b7418 	.word	0x000b7418
   b4050:	2003e68c 	.word	0x2003e68c
   b4054:	2003e68c 	.word	0x2003e68c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 ff33 	bl	b4ecc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b73c8 	.word	0x000b73c8
   b4080:	000b73ec 	.word	0x000b73ec

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f83d 	bl	b4108 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bed3 	b.w	b4e3c <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 ba79 	b.w	b458c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 ba7f 	b.w	b459c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fcb1 	bl	b4a22 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:
float signal; // variable that will be outputted
float freq = 0.2; // frequency for sin-wave. freq = 1/period

Servo myservo; // create servo object to control a servo
SYSTEM_MODE (SEMI_AUTOMATIC);
void setup() {
   b40cc:	b507      	push	{r0, r1, r2, lr}
  Serial.begin (9600);
   b40ce:	f000 fe2f 	bl	b4d30 <_Z16_fetch_usbserialv>
   b40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d6:	f000 fe1f 	bl	b4d18 <_ZN9USBSerial5beginEl>
  pinMode(photodiodePin, INPUT_PULLUP);
   b40da:	2102      	movs	r1, #2
   b40dc:	2012      	movs	r0, #18
   b40de:	f000 ff65 	bl	b4fac <pinMode>
  myservo.attach(servoPin); // attached to pin D6
   b40e2:	2300      	movs	r3, #0
   b40e4:	22b4      	movs	r2, #180	; 0xb4
   b40e6:	e9cd 3200 	strd	r3, r2, [sp]
   b40ea:	2107      	movs	r1, #7
   b40ec:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b40f0:	f44f 7208 	mov.w	r2, #544	; 0x220
   b40f4:	4802      	ldr	r0, [pc, #8]	; (b4100 <setup+0x34>)
   b40f6:	f000 fd19 	bl	b4b2c <_ZN5Servo6attachEtttss>
  
}
   b40fa:	b003      	add	sp, #12
   b40fc:	f85d fb04 	ldr.w	pc, [sp], #4
   b4100:	2003e69c 	.word	0x2003e69c
   b4104:	00000000 	.word	0x00000000

000b4108 <loop>:

void loop() {
   b4108:	b570      	push	{r4, r5, r6, lr}
  photodiodeValue = analogRead(photodiodePin);
   b410a:	2012      	movs	r0, #18
   b410c:	f000 ff5f 	bl	b4fce <analogRead>
   b4110:	4c2d      	ldr	r4, [pc, #180]	; (b41c8 <loop+0xc0>)
  brightness = 255 - (photodiodeValue / 16);
   b4112:	4d2e      	ldr	r5, [pc, #184]	; (b41cc <loop+0xc4>)
  photodiodeValue = analogRead(photodiodePin);
   b4114:	6020      	str	r0, [r4, #0]
  brightness = 255 - (photodiodeValue / 16);
   b4116:	2800      	cmp	r0, #0
   b4118:	bfb8      	it	lt
   b411a:	300f      	addlt	r0, #15
   b411c:	1100      	asrs	r0, r0, #4
   b411e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
   b4122:	6028      	str	r0, [r5, #0]
  Serial.printf("photodiodeValue=%i\n,brightness=%i\n",photodiodeValue,brightness);
   b4124:	f000 fe04 	bl	b4d30 <_Z16_fetch_usbserialv>
   b4128:	682b      	ldr	r3, [r5, #0]
   b412a:	6822      	ldr	r2, [r4, #0]
   b412c:	4928      	ldr	r1, [pc, #160]	; (b41d0 <loop+0xc8>)
   b412e:	f7ff ffbe 	bl	b40ae <_ZN5Print6printfEPKcz>
  
  analogWrite(servoPin, brightness);
   b4132:	6829      	ldr	r1, [r5, #0]
   b4134:	2007      	movs	r0, #7
   b4136:	f000 ff61 	bl	b4ffc <_Z11analogWritetm>

  if (photodiodeValue < 4000) { // check if it is dark
   b413a:	6823      	ldr	r3, [r4, #0]
   b413c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   b4140:	da3a      	bge.n	b41b8 <loop+0xb0>
    signal = AMP * sin(2 * M_PI * freq * t) + OFFSET; //sine wave
   b4142:	4b24      	ldr	r3, [pc, #144]	; (b41d4 <loop+0xcc>)
   b4144:	4e24      	ldr	r6, [pc, #144]	; (b41d8 <loop+0xd0>)
   b4146:	6818      	ldr	r0, [r3, #0]
   b4148:	f002 fb20 	bl	b678c <__aeabi_f2d>
   b414c:	a31c      	add	r3, pc, #112	; (adr r3, b41c0 <loop+0xb8>)
   b414e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4152:	f002 fb73 	bl	b683c <__aeabi_dmul>
   b4156:	4604      	mov	r4, r0
   b4158:	6830      	ldr	r0, [r6, #0]
   b415a:	460d      	mov	r5, r1
   b415c:	f002 fb16 	bl	b678c <__aeabi_f2d>
   b4160:	4602      	mov	r2, r0
   b4162:	460b      	mov	r3, r1
   b4164:	4620      	mov	r0, r4
   b4166:	4629      	mov	r1, r5
   b4168:	f002 fb68 	bl	b683c <__aeabi_dmul>
   b416c:	ec41 0b10 	vmov	d0, r0, r1
   b4170:	f000 ffee 	bl	b5150 <sin>
   b4174:	4b19      	ldr	r3, [pc, #100]	; (b41dc <loop+0xd4>)
   b4176:	ec51 0b10 	vmov	r0, r1, d0
   b417a:	2200      	movs	r2, #0
   b417c:	f002 fb5e 	bl	b683c <__aeabi_dmul>
   b4180:	2200      	movs	r2, #0
   b4182:	4b16      	ldr	r3, [pc, #88]	; (b41dc <loop+0xd4>)
   b4184:	f002 f9a4 	bl	b64d0 <__adddf3>
   b4188:	f002 fe1a 	bl	b6dc0 <__aeabi_d2f>
   b418c:	ee07 0a90 	vmov	s15, r0
   b4190:	4b13      	ldr	r3, [pc, #76]	; (b41e0 <loop+0xd8>)
    myservo.write(signal); //send via my servo
   b4192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    signal = AMP * sin(2 * M_PI * freq * t) + OFFSET; //sine wave
   b4196:	6018      	str	r0, [r3, #0]
    myservo.write(signal); //send via my servo
   b4198:	ee17 1a90 	vmov	r1, s15
   b419c:	4811      	ldr	r0, [pc, #68]	; (b41e4 <loop+0xdc>)
   b419e:	f000 fc88 	bl	b4ab2 <_ZN5Servo5writeEi>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41a2:	f000 f847 	bl	b4234 <HAL_Timer_Get_Milli_Seconds>
    t = millis() / 1000.0; //time in milliseconds
   b41a6:	f002 facf 	bl	b6748 <__aeabi_ui2d>
   b41aa:	4b0f      	ldr	r3, [pc, #60]	; (b41e8 <loop+0xe0>)
   b41ac:	2200      	movs	r2, #0
   b41ae:	f002 fc6f 	bl	b6a90 <__aeabi_ddiv>
   b41b2:	f002 fe05 	bl	b6dc0 <__aeabi_d2f>
   b41b6:	6030      	str	r0, [r6, #0]
  }
}
   b41b8:	bd70      	pop	{r4, r5, r6, pc}
   b41ba:	bf00      	nop
   b41bc:	f3af 8000 	nop.w
   b41c0:	54442d18 	.word	0x54442d18
   b41c4:	401921fb 	.word	0x401921fb
   b41c8:	2003e6ac 	.word	0x2003e6ac
   b41cc:	2003e698 	.word	0x2003e698
   b41d0:	000b6fe4 	.word	0x000b6fe4
   b41d4:	2003e61c 	.word	0x2003e61c
   b41d8:	2003e6b4 	.word	0x2003e6b4
   b41dc:	40568000 	.word	0x40568000
   b41e0:	2003e6b0 	.word	0x2003e6b0
   b41e4:	2003e69c 	.word	0x2003e69c
   b41e8:	408f4000 	.word	0x408f4000

000b41ec <_GLOBAL__sub_I_photodiodeValue>:
   b41ec:	b508      	push	{r3, lr}
Servo myservo; // create servo object to control a servo
   b41ee:	4807      	ldr	r0, [pc, #28]	; (b420c <_GLOBAL__sub_I_photodiodeValue+0x20>)
   b41f0:	f000 fc88 	bl	b4b04 <_ZN5ServoC1Ev>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b41f4:	4b06      	ldr	r3, [pc, #24]	; (b4210 <_GLOBAL__sub_I_photodiodeValue+0x24>)
   b41f6:	2200      	movs	r2, #0
   b41f8:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b41fc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4200:	609a      	str	r2, [r3, #8]
}
   b4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4206:	2002      	movs	r0, #2
   b4208:	f000 b93c 	b.w	b4484 <set_system_mode>
   b420c:	2003e69c 	.word	0x2003e69c
   b4210:	2003e68c 	.word	0x2003e68c

000b4214 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4214:	b508      	push	{r3, lr}
   b4216:	4b02      	ldr	r3, [pc, #8]	; (b4220 <os_mutex_recursive_create+0xc>)
   b4218:	681b      	ldr	r3, [r3, #0]
   b421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b421c:	9301      	str	r3, [sp, #4]
   b421e:	bd08      	pop	{r3, pc}
   b4220:	00030248 	.word	0x00030248

000b4224 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4224:	b508      	push	{r3, lr}
   b4226:	4b02      	ldr	r3, [pc, #8]	; (b4230 <HAL_RNG_GetRandomNumber+0xc>)
   b4228:	681b      	ldr	r3, [r3, #0]
   b422a:	685b      	ldr	r3, [r3, #4]
   b422c:	9301      	str	r3, [sp, #4]
   b422e:	bd08      	pop	{r3, pc}
   b4230:	00030218 	.word	0x00030218

000b4234 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4234:	b508      	push	{r3, lr}
   b4236:	4b02      	ldr	r3, [pc, #8]	; (b4240 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4238:	681b      	ldr	r3, [r3, #0]
   b423a:	695b      	ldr	r3, [r3, #20]
   b423c:	9301      	str	r3, [sp, #4]
   b423e:	bd08      	pop	{r3, pc}
   b4240:	00030218 	.word	0x00030218

000b4244 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4244:	b508      	push	{r3, lr}
   b4246:	4b02      	ldr	r3, [pc, #8]	; (b4250 <HAL_Validate_Pin_Function+0xc>)
   b4248:	681b      	ldr	r3, [r3, #0]
   b424a:	685b      	ldr	r3, [r3, #4]
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	bd08      	pop	{r3, pc}
   b4250:	0003022c 	.word	0x0003022c

000b4254 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4254:	b508      	push	{r3, lr}
   b4256:	4b02      	ldr	r3, [pc, #8]	; (b4260 <HAL_Pin_Mode+0xc>)
   b4258:	681b      	ldr	r3, [r3, #0]
   b425a:	689b      	ldr	r3, [r3, #8]
   b425c:	9301      	str	r3, [sp, #4]
   b425e:	bd08      	pop	{r3, pc}
   b4260:	0003022c 	.word	0x0003022c

000b4264 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <HAL_Get_Pin_Mode+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	68db      	ldr	r3, [r3, #12]
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	0003022c 	.word	0x0003022c

000b4274 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <HAL_DAC_Write+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	0003022c 	.word	0x0003022c

000b4284 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <hal_adc_read+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	0003022c 	.word	0x0003022c

000b4294 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <hal_pwm_write_ext+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	0003022c 	.word	0x0003022c

000b42a4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <hal_i2c_write+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	6a1b      	ldr	r3, [r3, #32]
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	00030228 	.word	0x00030228

000b42b4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <hal_i2c_available+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	00030228 	.word	0x00030228

000b42c4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <hal_i2c_read+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	00030228 	.word	0x00030228

000b42d4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_i2c_peek+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	00030228 	.word	0x00030228

000b42e4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_i2c_flush+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	00030228 	.word	0x00030228

000b42f4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <hal_i2c_is_enabled+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	00030228 	.word	0x00030228

000b4304 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <hal_i2c_init+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	00030228 	.word	0x00030228

000b4314 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <inet_inet_ntop+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	695b      	ldr	r3, [r3, #20]
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	00030264 	.word	0x00030264

000b4324 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <netdb_freeaddrinfo+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	689b      	ldr	r3, [r3, #8]
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	00030268 	.word	0x00030268

000b4334 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <netdb_getaddrinfo+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	68db      	ldr	r3, [r3, #12]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	00030268 	.word	0x00030268

000b4344 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_Servo_Attach+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	691b      	ldr	r3, [r3, #16]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	00030224 	.word	0x00030224

000b4354 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <HAL_Servo_Detach+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	695b      	ldr	r3, [r3, #20]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	00030224 	.word	0x00030224

000b4364 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_Servo_Write_Pulse_Width+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	699b      	ldr	r3, [r3, #24]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	00030224 	.word	0x00030224

000b4374 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <hal_spi_init+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	69db      	ldr	r3, [r3, #28]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	00030230 	.word	0x00030230

000b4384 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <hal_spi_is_enabled+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	6a1b      	ldr	r3, [r3, #32]
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	00030230 	.word	0x00030230

000b4394 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <hal_usart_write+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	68db      	ldr	r3, [r3, #12]
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	0003023c 	.word	0x0003023c

000b43a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <hal_usart_available+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	691b      	ldr	r3, [r3, #16]
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	0003023c 	.word	0x0003023c

000b43b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <hal_usart_read+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	695b      	ldr	r3, [r3, #20]
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	0003023c 	.word	0x0003023c

000b43c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b02      	ldr	r3, [pc, #8]	; (b43d0 <hal_usart_peek+0xc>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	699b      	ldr	r3, [r3, #24]
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	bd08      	pop	{r3, pc}
   b43d0:	0003023c 	.word	0x0003023c

000b43d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <hal_usart_flush+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	69db      	ldr	r3, [r3, #28]
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	0003023c 	.word	0x0003023c

000b43e4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <hal_usart_is_enabled+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	6a1b      	ldr	r3, [r3, #32]
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	0003023c 	.word	0x0003023c

000b43f4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <hal_usart_available_data_for_write+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	0003023c 	.word	0x0003023c

000b4404 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <hal_usart_init_ex+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	0003023c 	.word	0x0003023c

000b4414 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <HAL_USB_USART_Init+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	681b      	ldr	r3, [r3, #0]
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	0003024c 	.word	0x0003024c

000b4424 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <HAL_USB_USART_Begin+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	685b      	ldr	r3, [r3, #4]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	0003024c 	.word	0x0003024c

000b4434 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <HAL_USB_USART_Available_Data+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	691b      	ldr	r3, [r3, #16]
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	0003024c 	.word	0x0003024c

000b4444 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	695b      	ldr	r3, [r3, #20]
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	0003024c 	.word	0x0003024c

000b4454 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <HAL_USB_USART_Receive_Data+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	699b      	ldr	r3, [r3, #24]
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	0003024c 	.word	0x0003024c

000b4464 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <HAL_USB_USART_Send_Data+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	69db      	ldr	r3, [r3, #28]
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	0003024c 	.word	0x0003024c

000b4474 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <HAL_USB_USART_Flush_Data+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	6a1b      	ldr	r3, [r3, #32]
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	0003024c 	.word	0x0003024c

000b4484 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <set_system_mode+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	685b      	ldr	r3, [r3, #4]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	00030220 	.word	0x00030220

000b4494 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b03      	ldr	r3, [pc, #12]	; (b44a4 <system_ctrl_set_app_request_handler+0x10>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b449e:	9301      	str	r3, [sp, #4]
   b44a0:	bd08      	pop	{r3, pc}
   b44a2:	0000      	.short	0x0000
   b44a4:	00030220 	.word	0x00030220

000b44a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b03      	ldr	r3, [pc, #12]	; (b44b8 <system_ctrl_set_result+0x10>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b44b2:	9301      	str	r3, [sp, #4]
   b44b4:	bd08      	pop	{r3, pc}
   b44b6:	0000      	.short	0x0000
   b44b8:	00030220 	.word	0x00030220

000b44bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030244 	.word	0x00030244

000b44cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <network_connect+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	685b      	ldr	r3, [r3, #4]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030240 	.word	0x00030240

000b44dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <network_connecting+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	689b      	ldr	r3, [r3, #8]
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030240 	.word	0x00030240

000b44ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <network_disconnect+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	68db      	ldr	r3, [r3, #12]
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030240 	.word	0x00030240

000b44fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <network_ready+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	691b      	ldr	r3, [r3, #16]
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030240 	.word	0x00030240

000b450c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <network_on+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	695b      	ldr	r3, [r3, #20]
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	00030240 	.word	0x00030240

000b451c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <network_off+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	699b      	ldr	r3, [r3, #24]
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	00030240 	.word	0x00030240

000b452c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <network_listen+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	69db      	ldr	r3, [r3, #28]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030240 	.word	0x00030240

000b453c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <network_listening+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	6a1b      	ldr	r3, [r3, #32]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030240 	.word	0x00030240

000b454c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <network_set_listen_timeout+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	00030240 	.word	0x00030240

000b455c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <network_get_listen_timeout+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	00030240 	.word	0x00030240

000b456c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <network_is_on+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	00030240 	.word	0x00030240

000b457c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <network_is_off+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	00030240 	.word	0x00030240

000b458c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <malloc+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	681b      	ldr	r3, [r3, #0]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003021c 	.word	0x0003021c

000b459c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <free+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	685b      	ldr	r3, [r3, #4]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003021c 	.word	0x0003021c

000b45ac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <vsnprintf+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	0003021c 	.word	0x0003021c

000b45bc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <__assert_func+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	0003021c 	.word	0x0003021c

000b45cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <newlib_impure_ptr_callback+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	0003021c 	.word	0x0003021c

000b45dc <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b45dc:	428a      	cmp	r2, r1
{
   b45de:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b45e0:	d007      	beq.n	b45f2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b45e2:	1a44      	subs	r4, r0, r1
   b45e4:	9802      	ldr	r0, [sp, #8]
   b45e6:	1ac0      	subs	r0, r0, r3
   b45e8:	4344      	muls	r4, r0
   b45ea:	1a50      	subs	r0, r2, r1
   b45ec:	fb94 f0f0 	sdiv	r0, r4, r0
   b45f0:	4418      	add	r0, r3
}
   b45f2:	bd10      	pop	{r4, pc}

000b45f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b45f4:	4802      	ldr	r0, [pc, #8]	; (b4600 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b45f6:	2300      	movs	r3, #0
   b45f8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b45fa:	f7ff be0b 	b.w	b4214 <os_mutex_recursive_create>
   b45fe:	bf00      	nop
   b4600:	2003e6b8 	.word	0x2003e6b8

000b4604 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4604:	2200      	movs	r2, #0
   b4606:	6840      	ldr	r0, [r0, #4]
   b4608:	4611      	mov	r1, r2
   b460a:	f7ff bf97 	b.w	b453c <network_listening>

000b460e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b460e:	2200      	movs	r2, #0
   b4610:	6840      	ldr	r0, [r0, #4]
   b4612:	4611      	mov	r1, r2
   b4614:	f7ff bfa2 	b.w	b455c <network_get_listen_timeout>

000b4618 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4618:	6840      	ldr	r0, [r0, #4]
   b461a:	2200      	movs	r2, #0
   b461c:	f7ff bf96 	b.w	b454c <network_set_listen_timeout>

000b4620 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4620:	6840      	ldr	r0, [r0, #4]
   b4622:	2200      	movs	r2, #0
   b4624:	f081 0101 	eor.w	r1, r1, #1
   b4628:	f7ff bf80 	b.w	b452c <network_listen>

000b462c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b462c:	2300      	movs	r3, #0
   b462e:	6840      	ldr	r0, [r0, #4]
   b4630:	461a      	mov	r2, r3
   b4632:	4619      	mov	r1, r3
   b4634:	f7ff bf72 	b.w	b451c <network_off>

000b4638 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4638:	2300      	movs	r3, #0
   b463a:	6840      	ldr	r0, [r0, #4]
   b463c:	461a      	mov	r2, r3
   b463e:	4619      	mov	r1, r3
   b4640:	f7ff bf64 	b.w	b450c <network_on>

000b4644 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4644:	2200      	movs	r2, #0
   b4646:	6840      	ldr	r0, [r0, #4]
   b4648:	4611      	mov	r1, r2
   b464a:	f7ff bf57 	b.w	b44fc <network_ready>

000b464e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b464e:	2200      	movs	r2, #0
   b4650:	6840      	ldr	r0, [r0, #4]
   b4652:	4611      	mov	r1, r2
   b4654:	f7ff bf42 	b.w	b44dc <network_connecting>

000b4658 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4658:	6840      	ldr	r0, [r0, #4]
   b465a:	2200      	movs	r2, #0
   b465c:	2102      	movs	r1, #2
   b465e:	f7ff bf45 	b.w	b44ec <network_disconnect>

000b4662 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4662:	2300      	movs	r3, #0
   b4664:	6840      	ldr	r0, [r0, #4]
   b4666:	461a      	mov	r2, r3
   b4668:	f7ff bf30 	b.w	b44cc <network_connect>

000b466c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b466c:	4b02      	ldr	r3, [pc, #8]	; (b4678 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b466e:	2203      	movs	r2, #3
   b4670:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4672:	4a02      	ldr	r2, [pc, #8]	; (b467c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4674:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4676:	4770      	bx	lr
   b4678:	2003e6bc 	.word	0x2003e6bc
   b467c:	000b7010 	.word	0x000b7010

000b4680 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4680:	4770      	bx	lr

000b4682 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4684:	4606      	mov	r6, r0
   b4686:	4615      	mov	r5, r2
   b4688:	460c      	mov	r4, r1
   b468a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b468c:	42bc      	cmp	r4, r7
   b468e:	d006      	beq.n	b469e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4690:	6833      	ldr	r3, [r6, #0]
   b4692:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4696:	689b      	ldr	r3, [r3, #8]
   b4698:	4630      	mov	r0, r6
   b469a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b469c:	e7f6      	b.n	b468c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b469e:	4628      	mov	r0, r5
   b46a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b46a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b46a2:	7c00      	ldrb	r0, [r0, #16]
   b46a4:	2200      	movs	r2, #0
   b46a6:	f7ff bdfd 	b.w	b42a4 <hal_i2c_write>

000b46aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b46aa:	7c00      	ldrb	r0, [r0, #16]
   b46ac:	2100      	movs	r1, #0
   b46ae:	f7ff be01 	b.w	b42b4 <hal_i2c_available>

000b46b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b46b2:	7c00      	ldrb	r0, [r0, #16]
   b46b4:	2100      	movs	r1, #0
   b46b6:	f7ff be05 	b.w	b42c4 <hal_i2c_read>

000b46ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b46ba:	7c00      	ldrb	r0, [r0, #16]
   b46bc:	2100      	movs	r1, #0
   b46be:	f7ff be09 	b.w	b42d4 <hal_i2c_peek>

000b46c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b46c2:	7c00      	ldrb	r0, [r0, #16]
   b46c4:	2100      	movs	r1, #0
   b46c6:	f7ff be0d 	b.w	b42e4 <hal_i2c_flush>

000b46ca <_ZN7TwoWireD0Ev>:
   b46ca:	b510      	push	{r4, lr}
   b46cc:	2114      	movs	r1, #20
   b46ce:	4604      	mov	r4, r0
   b46d0:	f7ff fce3 	bl	b409a <_ZdlPvj>
   b46d4:	4620      	mov	r0, r4
   b46d6:	bd10      	pop	{r4, pc}

000b46d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b46d8:	b538      	push	{r3, r4, r5, lr}
   b46da:	4604      	mov	r4, r0
   b46dc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b46de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b46e2:	2200      	movs	r2, #0
   b46e4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b46e8:	4b09      	ldr	r3, [pc, #36]	; (b4710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b46ea:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b46ec:	4608      	mov	r0, r1
   b46ee:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b46f0:	4629      	mov	r1, r5
   b46f2:	f7ff fe07 	bl	b4304 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b46f6:	30bf      	adds	r0, #191	; 0xbf
   b46f8:	d108      	bne.n	b470c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b46fa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b46fc:	07db      	lsls	r3, r3, #31
   b46fe:	d505      	bpl.n	b470c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4700:	6868      	ldr	r0, [r5, #4]
   b4702:	f7ff ff4b 	bl	b459c <free>
    free(conf.tx_buffer);
   b4706:	68e8      	ldr	r0, [r5, #12]
   b4708:	f7ff ff48 	bl	b459c <free>
}
   b470c:	4620      	mov	r0, r4
   b470e:	bd38      	pop	{r3, r4, r5, pc}
   b4710:	000b704c 	.word	0x000b704c

000b4714 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4714:	4770      	bx	lr

000b4716 <_ZN9IPAddressD0Ev>:
   b4716:	b510      	push	{r4, lr}
   b4718:	2118      	movs	r1, #24
   b471a:	4604      	mov	r4, r0
   b471c:	f7ff fcbd 	bl	b409a <_ZdlPvj>
   b4720:	4620      	mov	r0, r4
   b4722:	bd10      	pop	{r4, pc}

000b4724 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4724:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4726:	7d03      	ldrb	r3, [r0, #20]
   b4728:	2b06      	cmp	r3, #6
{
   b472a:	b08d      	sub	sp, #52	; 0x34
   b472c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b472e:	f100 0704 	add.w	r7, r0, #4
   b4732:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4736:	d012      	beq.n	b475e <_ZNK9IPAddress7printToER5Print+0x3a>
   b4738:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b473c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4740:	220a      	movs	r2, #10
   b4742:	4630      	mov	r0, r6
   b4744:	f000 f94f 	bl	b49e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4748:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b474a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b474c:	d019      	beq.n	b4782 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b474e:	2c00      	cmp	r4, #0
   b4750:	d0f4      	beq.n	b473c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4752:	212e      	movs	r1, #46	; 0x2e
   b4754:	4630      	mov	r0, r6
   b4756:	f000 f937 	bl	b49c8 <_ZN5Print5printEc>
   b475a:	4404      	add	r4, r0
   b475c:	e7ee      	b.n	b473c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b475e:	232f      	movs	r3, #47	; 0x2f
   b4760:	466a      	mov	r2, sp
   b4762:	4639      	mov	r1, r7
   b4764:	200a      	movs	r0, #10
		buf[0] = 0;
   b4766:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b476a:	f7ff fdd3 	bl	b4314 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b476e:	4668      	mov	r0, sp
   b4770:	f002 fbc0 	bl	b6ef4 <strlen>
   b4774:	6833      	ldr	r3, [r6, #0]
   b4776:	4602      	mov	r2, r0
   b4778:	68db      	ldr	r3, [r3, #12]
   b477a:	4669      	mov	r1, sp
   b477c:	4630      	mov	r0, r6
   b477e:	4798      	blx	r3
   b4780:	4604      	mov	r4, r0
    }
    return n;
}
   b4782:	4620      	mov	r0, r4
   b4784:	b00d      	add	sp, #52	; 0x34
   b4786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4788 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4788:	b510      	push	{r4, lr}
   b478a:	4b05      	ldr	r3, [pc, #20]	; (b47a0 <_ZN9IPAddressC1Ev+0x18>)
   b478c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b478e:	2211      	movs	r2, #17
   b4790:	f840 3b04 	str.w	r3, [r0], #4
   b4794:	2100      	movs	r1, #0
   b4796:	f002 fb77 	bl	b6e88 <memset>
}
   b479a:	4620      	mov	r0, r4
   b479c:	bd10      	pop	{r4, pc}
   b479e:	bf00      	nop
   b47a0:	000b7074 	.word	0x000b7074

000b47a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b47a4:	4603      	mov	r3, r0
   b47a6:	4a07      	ldr	r2, [pc, #28]	; (b47c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b47a8:	b510      	push	{r4, lr}
   b47aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b47ae:	f101 0210 	add.w	r2, r1, #16
   b47b2:	f851 4b04 	ldr.w	r4, [r1], #4
   b47b6:	f843 4b04 	str.w	r4, [r3], #4
   b47ba:	4291      	cmp	r1, r2
   b47bc:	d1f9      	bne.n	b47b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b47be:	780a      	ldrb	r2, [r1, #0]
   b47c0:	701a      	strb	r2, [r3, #0]
}
   b47c2:	bd10      	pop	{r4, pc}
   b47c4:	000b7074 	.word	0x000b7074

000b47c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b47c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b47ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b47ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b47d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b47d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b47da:	2304      	movs	r3, #4
   b47dc:	6041      	str	r1, [r0, #4]
   b47de:	7503      	strb	r3, [r0, #20]
}
   b47e0:	bd10      	pop	{r4, pc}
	...

000b47e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b47e4:	b507      	push	{r0, r1, r2, lr}
   b47e6:	4b06      	ldr	r3, [pc, #24]	; (b4800 <_ZN9IPAddressC1EPKh+0x1c>)
   b47e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b47ea:	78cb      	ldrb	r3, [r1, #3]
   b47ec:	9300      	str	r3, [sp, #0]
   b47ee:	788b      	ldrb	r3, [r1, #2]
   b47f0:	784a      	ldrb	r2, [r1, #1]
   b47f2:	7809      	ldrb	r1, [r1, #0]
   b47f4:	f7ff ffe8 	bl	b47c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b47f8:	b003      	add	sp, #12
   b47fa:	f85d fb04 	ldr.w	pc, [sp], #4
   b47fe:	bf00      	nop
   b4800:	000b7074 	.word	0x000b7074

000b4804 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4804:	4b01      	ldr	r3, [pc, #4]	; (b480c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4806:	4a02      	ldr	r2, [pc, #8]	; (b4810 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4808:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b480a:	4770      	bx	lr
   b480c:	2003e6c4 	.word	0x2003e6c4
   b4810:	000b7080 	.word	0x000b7080

000b4814 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4814:	2300      	movs	r3, #0
   b4816:	6840      	ldr	r0, [r0, #4]
   b4818:	461a      	mov	r2, r3
   b481a:	f7ff be57 	b.w	b44cc <network_connect>

000b481e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b481e:	6840      	ldr	r0, [r0, #4]
   b4820:	2200      	movs	r2, #0
   b4822:	2102      	movs	r1, #2
   b4824:	f7ff be62 	b.w	b44ec <network_disconnect>

000b4828 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4828:	2200      	movs	r2, #0
   b482a:	6840      	ldr	r0, [r0, #4]
   b482c:	4611      	mov	r1, r2
   b482e:	f7ff be55 	b.w	b44dc <network_connecting>

000b4832 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4832:	2200      	movs	r2, #0
   b4834:	6840      	ldr	r0, [r0, #4]
   b4836:	4611      	mov	r1, r2
   b4838:	f7ff be60 	b.w	b44fc <network_ready>

000b483c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b483c:	2300      	movs	r3, #0
   b483e:	6840      	ldr	r0, [r0, #4]
   b4840:	461a      	mov	r2, r3
   b4842:	4619      	mov	r1, r3
   b4844:	f7ff be62 	b.w	b450c <network_on>

000b4848 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4848:	2300      	movs	r3, #0
   b484a:	6840      	ldr	r0, [r0, #4]
   b484c:	461a      	mov	r2, r3
   b484e:	4619      	mov	r1, r3
   b4850:	f7ff be64 	b.w	b451c <network_off>

000b4854 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4854:	6840      	ldr	r0, [r0, #4]
   b4856:	2100      	movs	r1, #0
   b4858:	f7ff be88 	b.w	b456c <network_is_on>

000b485c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b485c:	6840      	ldr	r0, [r0, #4]
   b485e:	2100      	movs	r1, #0
   b4860:	f7ff be8c 	b.w	b457c <network_is_off>

000b4864 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4864:	6840      	ldr	r0, [r0, #4]
   b4866:	2200      	movs	r2, #0
   b4868:	f081 0101 	eor.w	r1, r1, #1
   b486c:	f7ff be5e 	b.w	b452c <network_listen>

000b4870 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4870:	6840      	ldr	r0, [r0, #4]
   b4872:	2200      	movs	r2, #0
   b4874:	f7ff be6a 	b.w	b454c <network_set_listen_timeout>

000b4878 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4878:	2200      	movs	r2, #0
   b487a:	6840      	ldr	r0, [r0, #4]
   b487c:	4611      	mov	r1, r2
   b487e:	f7ff be6d 	b.w	b455c <network_get_listen_timeout>

000b4882 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4882:	2200      	movs	r2, #0
   b4884:	6840      	ldr	r0, [r0, #4]
   b4886:	4611      	mov	r1, r2
   b4888:	f7ff be58 	b.w	b453c <network_listening>

000b488c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b488c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4890:	b095      	sub	sp, #84	; 0x54
   b4892:	4614      	mov	r4, r2
   b4894:	460d      	mov	r5, r1
   b4896:	4607      	mov	r7, r0
    IPAddress addr;
   b4898:	f7ff ff76 	bl	b4788 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b489c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b489e:	221c      	movs	r2, #28
   b48a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b48a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b48a4:	f002 faf0 	bl	b6e88 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b48a8:	2340      	movs	r3, #64	; 0x40
   b48aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b48ac:	4620      	mov	r0, r4
   b48ae:	466b      	mov	r3, sp
   b48b0:	aa0c      	add	r2, sp, #48	; 0x30
   b48b2:	2100      	movs	r1, #0
   b48b4:	f7ff fd3e 	bl	b4334 <netdb_getaddrinfo>
    if (!r) {
   b48b8:	4604      	mov	r4, r0
   b48ba:	2800      	cmp	r0, #0
   b48bc:	d14b      	bne.n	b4956 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48be:	4602      	mov	r2, r0
   b48c0:	2101      	movs	r1, #1
   b48c2:	6868      	ldr	r0, [r5, #4]
   b48c4:	f7ff fe1a 	bl	b44fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b48ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48cc:	4622      	mov	r2, r4
   b48ce:	6868      	ldr	r0, [r5, #4]
   b48d0:	f7ff fe14 	bl	b44fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b48d6:	4681      	mov	r9, r0
        bool ok = false;
   b48d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48da:	2e00      	cmp	r6, #0
   b48dc:	d03b      	beq.n	b4956 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b48de:	2900      	cmp	r1, #0
   b48e0:	d139      	bne.n	b4956 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b48e2:	6873      	ldr	r3, [r6, #4]
   b48e4:	2b02      	cmp	r3, #2
   b48e6:	d003      	beq.n	b48f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b48e8:	2b0a      	cmp	r3, #10
   b48ea:	d011      	beq.n	b4910 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b48ec:	69f6      	ldr	r6, [r6, #28]
   b48ee:	e7f4      	b.n	b48da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b48f0:	f1b8 0f00 	cmp.w	r8, #0
   b48f4:	d0fa      	beq.n	b48ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b48f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b48f8:	a806      	add	r0, sp, #24
   b48fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b48fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b48fe:	f7ff ff71 	bl	b47e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4904:	1d3c      	adds	r4, r7, #4
   b4906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4908:	682b      	ldr	r3, [r5, #0]
   b490a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b490c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b490e:	e7ed      	b.n	b48ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4910:	f1b9 0f00 	cmp.w	r9, #0
   b4914:	d0ea      	beq.n	b48ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4916:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4918:	2210      	movs	r2, #16
   b491a:	a801      	add	r0, sp, #4
   b491c:	f002 fab4 	bl	b6e88 <memset>
                    a.v = 6;
   b4920:	2306      	movs	r3, #6
   b4922:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4926:	ad01      	add	r5, sp, #4
   b4928:	f104 0308 	add.w	r3, r4, #8
   b492c:	3418      	adds	r4, #24
   b492e:	6818      	ldr	r0, [r3, #0]
   b4930:	6859      	ldr	r1, [r3, #4]
   b4932:	462a      	mov	r2, r5
   b4934:	c203      	stmia	r2!, {r0, r1}
   b4936:	3308      	adds	r3, #8
   b4938:	42a3      	cmp	r3, r4
   b493a:	4615      	mov	r5, r2
   b493c:	d1f7      	bne.n	b492e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b493e:	a901      	add	r1, sp, #4
   b4940:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4942:	ad07      	add	r5, sp, #28
   b4944:	f7ff ff2e 	bl	b47a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b494a:	1d3c      	adds	r4, r7, #4
   b494c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b494e:	682b      	ldr	r3, [r5, #0]
   b4950:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4952:	4649      	mov	r1, r9
   b4954:	e7ca      	b.n	b48ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4956:	9800      	ldr	r0, [sp, #0]
   b4958:	f7ff fce4 	bl	b4324 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b495c:	4638      	mov	r0, r7
   b495e:	b015      	add	sp, #84	; 0x54
   b4960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4964 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4964:	4b02      	ldr	r3, [pc, #8]	; (b4970 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4966:	4a03      	ldr	r2, [pc, #12]	; (b4974 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4968:	601a      	str	r2, [r3, #0]
   b496a:	2200      	movs	r2, #0
   b496c:	605a      	str	r2, [r3, #4]

} // spark
   b496e:	4770      	bx	lr
   b4970:	2003e6c8 	.word	0x2003e6c8
   b4974:	000b708c 	.word	0x000b708c

000b4978 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b497a:	4606      	mov	r6, r0
   b497c:	460d      	mov	r5, r1
  size_t n = 0;
   b497e:	188f      	adds	r7, r1, r2
   b4980:	2400      	movs	r4, #0
  while (size--) {
   b4982:	42bd      	cmp	r5, r7
   b4984:	d00c      	beq.n	b49a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4986:	6833      	ldr	r3, [r6, #0]
   b4988:	f815 1b01 	ldrb.w	r1, [r5], #1
   b498c:	689b      	ldr	r3, [r3, #8]
   b498e:	4630      	mov	r0, r6
   b4990:	4798      	blx	r3
     if (chunk>=0)
   b4992:	1e03      	subs	r3, r0, #0
   b4994:	db01      	blt.n	b499a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4996:	441c      	add	r4, r3
  while (size--) {
   b4998:	e7f3      	b.n	b4982 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b499a:	2c00      	cmp	r4, #0
   b499c:	bf08      	it	eq
   b499e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b49a0:	4620      	mov	r0, r4
   b49a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b49a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b49a4:	b513      	push	{r0, r1, r4, lr}
   b49a6:	4604      	mov	r4, r0
    }
   b49a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b49aa:	b159      	cbz	r1, b49c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b49ac:	9101      	str	r1, [sp, #4]
   b49ae:	f002 faa1 	bl	b6ef4 <strlen>
   b49b2:	6823      	ldr	r3, [r4, #0]
   b49b4:	9901      	ldr	r1, [sp, #4]
   b49b6:	68db      	ldr	r3, [r3, #12]
   b49b8:	4602      	mov	r2, r0
   b49ba:	4620      	mov	r0, r4
    }
   b49bc:	b002      	add	sp, #8
   b49be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b49c2:	4718      	bx	r3
    }
   b49c4:	b002      	add	sp, #8
   b49c6:	bd10      	pop	{r4, pc}

000b49c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b49c8:	6803      	ldr	r3, [r0, #0]
   b49ca:	689b      	ldr	r3, [r3, #8]
   b49cc:	4718      	bx	r3

000b49ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b49ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b49d0:	210d      	movs	r1, #13
{
   b49d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b49d4:	f7ff fff8 	bl	b49c8 <_ZN5Print5printEc>
  n += print('\n');
   b49d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b49da:	4604      	mov	r4, r0
  n += print('\n');
   b49dc:	4628      	mov	r0, r5
   b49de:	f7ff fff3 	bl	b49c8 <_ZN5Print5printEc>
  return n;
}
   b49e2:	4420      	add	r0, r4
   b49e4:	bd38      	pop	{r3, r4, r5, pc}

000b49e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b49e6:	b530      	push	{r4, r5, lr}
   b49e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b49ea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b49ec:	2a01      	cmp	r2, #1
  *str = '\0';
   b49ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b49f2:	bf98      	it	ls
   b49f4:	220a      	movls	r2, #10
   b49f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b49f8:	460d      	mov	r5, r1
   b49fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b49fe:	fb01 5312 	mls	r3, r1, r2, r5
   b4a02:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a06:	2b09      	cmp	r3, #9
   b4a08:	bf94      	ite	ls
   b4a0a:	3330      	addls	r3, #48	; 0x30
   b4a0c:	3337      	addhi	r3, #55	; 0x37
   b4a0e:	b2db      	uxtb	r3, r3
  } while(n);
   b4a10:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4a12:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4a16:	d9ef      	bls.n	b49f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4a18:	4621      	mov	r1, r4
   b4a1a:	f7ff ffc3 	bl	b49a4 <_ZN5Print5writeEPKc>
}
   b4a1e:	b00b      	add	sp, #44	; 0x2c
   b4a20:	bd30      	pop	{r4, r5, pc}

000b4a22 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a26:	b086      	sub	sp, #24
   b4a28:	af00      	add	r7, sp, #0
   b4a2a:	4605      	mov	r5, r0
   b4a2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4a2e:	1d38      	adds	r0, r7, #4
   b4a30:	2114      	movs	r1, #20
{
   b4a32:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4a34:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4a36:	f7ff fdb9 	bl	b45ac <vsnprintf>

    if (n<bufsize)
   b4a3a:	2813      	cmp	r0, #19
   b4a3c:	d80e      	bhi.n	b4a5c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4a3e:	1d39      	adds	r1, r7, #4
   b4a40:	4628      	mov	r0, r5
   b4a42:	f7ff ffaf 	bl	b49a4 <_ZN5Print5writeEPKc>
   b4a46:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4a48:	b11e      	cbz	r6, b4a52 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4a4a:	4628      	mov	r0, r5
   b4a4c:	f7ff ffbf 	bl	b49ce <_ZN5Print7printlnEv>
   b4a50:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4a52:	4620      	mov	r0, r4
   b4a54:	3718      	adds	r7, #24
   b4a56:	46bd      	mov	sp, r7
   b4a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4a5c:	f100 0308 	add.w	r3, r0, #8
   b4a60:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4a64:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4a66:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4a6a:	4622      	mov	r2, r4
   b4a6c:	1c41      	adds	r1, r0, #1
   b4a6e:	683b      	ldr	r3, [r7, #0]
   b4a70:	4668      	mov	r0, sp
   b4a72:	f7ff fd9b 	bl	b45ac <vsnprintf>
  return write(str);
   b4a76:	4669      	mov	r1, sp
   b4a78:	4628      	mov	r0, r5
   b4a7a:	f7ff ff93 	bl	b49a4 <_ZN5Print5writeEPKc>
   b4a7e:	4604      	mov	r4, r0
   b4a80:	46c5      	mov	sp, r8
   b4a82:	e7e1      	b.n	b4a48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4a84 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4a84:	4b01      	ldr	r3, [pc, #4]	; (b4a8c <_GLOBAL__sub_I_RGB+0x8>)
   b4a86:	2200      	movs	r2, #0
   b4a88:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4a8a:	4770      	bx	lr
   b4a8c:	2003e6d0 	.word	0x2003e6d0

000b4a90 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b4a90:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b4a94:	1c53      	adds	r3, r2, #1
   b4a96:	d00b      	beq.n	b4ab0 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b4a98:	8843      	ldrh	r3, [r0, #2]
   b4a9a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b4a9c:	428b      	cmp	r3, r1
   b4a9e:	d803      	bhi.n	b4aa8 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b4aa0:	4288      	cmp	r0, r1
   b4aa2:	4603      	mov	r3, r0
   b4aa4:	bf28      	it	cs
   b4aa6:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b4aa8:	4619      	mov	r1, r3
   b4aaa:	b290      	uxth	r0, r2
   b4aac:	f7ff bc5a 	b.w	b4364 <HAL_Servo_Write_Pulse_Width>
}
   b4ab0:	4770      	bx	lr

000b4ab2 <_ZN5Servo5writeEi>:
{
   b4ab2:	b513      	push	{r0, r1, r4, lr}
   b4ab4:	4604      	mov	r4, r0
   b4ab6:	4608      	mov	r0, r1
   b4ab8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b4abc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b4ac0:	4288      	cmp	r0, r1
   b4ac2:	db10      	blt.n	b4ae6 <_ZN5Servo5writeEi+0x34>
   b4ac4:	4290      	cmp	r0, r2
   b4ac6:	bfa8      	it	ge
   b4ac8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b4aca:	88a3      	ldrh	r3, [r4, #4]
   b4acc:	9300      	str	r3, [sp, #0]
   b4ace:	8863      	ldrh	r3, [r4, #2]
   b4ad0:	f7ff fd84 	bl	b45dc <_Z3mapiiiii>
   b4ad4:	68e1      	ldr	r1, [r4, #12]
   b4ad6:	4401      	add	r1, r0
   b4ad8:	b289      	uxth	r1, r1
   b4ada:	4620      	mov	r0, r4
}
   b4adc:	b002      	add	sp, #8
   b4ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b4ae2:	f7ff bfd5 	b.w	b4a90 <_ZN5Servo17writeMicrosecondsEt>
   b4ae6:	4608      	mov	r0, r1
   b4ae8:	e7ef      	b.n	b4aca <_ZN5Servo5writeEi+0x18>
	...

000b4aec <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b4aec:	4a04      	ldr	r2, [pc, #16]	; (b4b00 <_ZN5Servo11resetFieldsEv+0x14>)
   b4aee:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b4af2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b4af6:	23b4      	movs	r3, #180	; 0xb4
   b4af8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b4afa:	2300      	movs	r3, #0
   b4afc:	60c3      	str	r3, [r0, #12]
}
   b4afe:	4770      	bx	lr
   b4b00:	0220ffff 	.word	0x0220ffff

000b4b04 <_ZN5ServoC1Ev>:
Servo::Servo()
   b4b04:	b508      	push	{r3, lr}
  this->resetFields();
   b4b06:	f7ff fff1 	bl	b4aec <_ZN5Servo11resetFieldsEv>
}
   b4b0a:	bd08      	pop	{r3, pc}

000b4b0c <_ZN5Servo6detachEv>:
{
   b4b0c:	b510      	push	{r4, lr}
   b4b0e:	4604      	mov	r4, r0
   b4b10:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b4b14:	1c43      	adds	r3, r0, #1
   b4b16:	d007      	beq.n	b4b28 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b4b18:	b280      	uxth	r0, r0
   b4b1a:	f7ff fc1b 	bl	b4354 <HAL_Servo_Detach>
  this->resetFields();
   b4b1e:	4620      	mov	r0, r4
   b4b20:	f7ff ffe4 	bl	b4aec <_ZN5Servo11resetFieldsEv>
  return true;
   b4b24:	2001      	movs	r0, #1
}
   b4b26:	bd10      	pop	{r4, pc}
    return false;
   b4b28:	2000      	movs	r0, #0
   b4b2a:	e7fc      	b.n	b4b26 <_ZN5Servo6detachEv+0x1a>

000b4b2c <_ZN5Servo6attachEtttss>:
{
   b4b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b30:	460d      	mov	r5, r1
   b4b32:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b4b34:	2102      	movs	r1, #2
   b4b36:	4628      	mov	r0, r5
{
   b4b38:	4690      	mov	r8, r2
   b4b3a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b4b3c:	f7ff fb82 	bl	b4244 <HAL_Validate_Pin_Function>
   b4b40:	2802      	cmp	r0, #2
   b4b42:	d003      	beq.n	b4b4c <_ZN5Servo6attachEtttss+0x20>
    return false;
   b4b44:	2600      	movs	r6, #0
}
   b4b46:	4630      	mov	r0, r6
   b4b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b4b4c:	4628      	mov	r0, r5
   b4b4e:	f000 f9ef 	bl	b4f30 <pinAvailable>
   b4b52:	4606      	mov	r6, r0
   b4b54:	2800      	cmp	r0, #0
   b4b56:	d0f5      	beq.n	b4b44 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b4b58:	f9b4 3000 	ldrsh.w	r3, [r4]
   b4b5c:	3301      	adds	r3, #1
   b4b5e:	d002      	beq.n	b4b66 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b4b60:	4620      	mov	r0, r4
   b4b62:	f7ff ffd3 	bl	b4b0c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b4b66:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b4b6a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b4b6c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b4b70:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b4b72:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b4b76:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b4b78:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b4b7a:	4628      	mov	r0, r5
   b4b7c:	f7ff fbe2 	bl	b4344 <HAL_Servo_Attach>
  return true;
   b4b80:	e7e1      	b.n	b4b46 <_ZN5Servo6attachEtttss+0x1a>

000b4b82 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b82:	b510      	push	{r4, lr}
   b4b84:	4604      	mov	r4, r0
   b4b86:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b88:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b8a:	f7ff fbf3 	bl	b4374 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b8e:	2300      	movs	r3, #0
   b4b90:	6063      	str	r3, [r4, #4]
}
   b4b92:	4620      	mov	r0, r4
   b4b94:	bd10      	pop	{r4, pc}
	...

000b4b98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b98:	4b05      	ldr	r3, [pc, #20]	; (b4bb0 <_GLOBAL__sub_I_System+0x18>)
   b4b9a:	2202      	movs	r2, #2
   b4b9c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b9e:	4b05      	ldr	r3, [pc, #20]	; (b4bb4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ba0:	4a05      	ldr	r2, [pc, #20]	; (b4bb8 <_GLOBAL__sub_I_System+0x20>)
   b4ba2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ba4:	2000      	movs	r0, #0
   b4ba6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4baa:	f7ff bc6b 	b.w	b4484 <set_system_mode>
   b4bae:	bf00      	nop
   b4bb0:	2003e6ec 	.word	0x2003e6ec
   b4bb4:	2003e6e0 	.word	0x2003e6e0
   b4bb8:	ffff0000 	.word	0xffff0000

000b4bbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4bbc:	4b02      	ldr	r3, [pc, #8]	; (b4bc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4bbe:	681a      	ldr	r2, [r3, #0]
   b4bc0:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4bc2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4bc4:	4770      	bx	lr
   b4bc6:	bf00      	nop
   b4bc8:	2003e620 	.word	0x2003e620
   b4bcc:	2003e6f0 	.word	0x2003e6f0

000b4bd0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4bd0:	4770      	bx	lr

000b4bd2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4bd2:	7441      	strb	r1, [r0, #17]
}
   b4bd4:	4770      	bx	lr

000b4bd6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4bd6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4bd8:	7c00      	ldrb	r0, [r0, #16]
   b4bda:	f7ff fc0b 	bl	b43f4 <hal_usart_available_data_for_write>
}
   b4bde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4be2:	bd08      	pop	{r3, pc}

000b4be4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4be4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4be6:	7c00      	ldrb	r0, [r0, #16]
   b4be8:	f7ff fbdc 	bl	b43a4 <hal_usart_available>
}
   b4bec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bf0:	bd08      	pop	{r3, pc}

000b4bf2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4bf2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4bf4:	7c00      	ldrb	r0, [r0, #16]
   b4bf6:	f7ff fbe5 	bl	b43c4 <hal_usart_peek>
}
   b4bfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4bfe:	bd08      	pop	{r3, pc}

000b4c00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4c00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4c02:	7c00      	ldrb	r0, [r0, #16]
   b4c04:	f7ff fbd6 	bl	b43b4 <hal_usart_read>
}
   b4c08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c0c:	bd08      	pop	{r3, pc}

000b4c0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c0e:	7c00      	ldrb	r0, [r0, #16]
   b4c10:	f7ff bbe0 	b.w	b43d4 <hal_usart_flush>

000b4c14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c16:	7c45      	ldrb	r5, [r0, #17]
{
   b4c18:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c1a:	b12d      	cbz	r5, b4c28 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c1e:	b003      	add	sp, #12
   b4c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c24:	f7ff bbb6 	b.w	b4394 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c28:	7c00      	ldrb	r0, [r0, #16]
   b4c2a:	9101      	str	r1, [sp, #4]
   b4c2c:	f7ff fbe2 	bl	b43f4 <hal_usart_available_data_for_write>
   b4c30:	2800      	cmp	r0, #0
   b4c32:	9901      	ldr	r1, [sp, #4]
   b4c34:	dcf2      	bgt.n	b4c1c <_ZN11USARTSerial5writeEh+0x8>
}
   b4c36:	4628      	mov	r0, r5
   b4c38:	b003      	add	sp, #12
   b4c3a:	bd30      	pop	{r4, r5, pc}

000b4c3c <_ZN11USARTSerialD0Ev>:
   b4c3c:	b510      	push	{r4, lr}
   b4c3e:	2114      	movs	r1, #20
   b4c40:	4604      	mov	r4, r0
   b4c42:	f7ff fa2a 	bl	b409a <_ZdlPvj>
   b4c46:	4620      	mov	r0, r4
   b4c48:	bd10      	pop	{r4, pc}
	...

000b4c4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4c4c:	b510      	push	{r4, lr}
   b4c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4c52:	4604      	mov	r4, r0
   b4c54:	4608      	mov	r0, r1
   b4c56:	4611      	mov	r1, r2
   b4c58:	2200      	movs	r2, #0
   b4c5a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4c5e:	4b04      	ldr	r3, [pc, #16]	; (b4c70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4c60:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4c62:	2301      	movs	r3, #1
  _serial = serial;
   b4c64:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c66:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4c68:	f7ff fbcc 	bl	b4404 <hal_usart_init_ex>
}
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	bd10      	pop	{r4, pc}
   b4c70:	000b70e4 	.word	0x000b70e4

000b4c74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4c74:	7441      	strb	r1, [r0, #17]
}
   b4c76:	4770      	bx	lr

000b4c78 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4c78:	4770      	bx	lr

000b4c7a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4c7a:	4770      	bx	lr

000b4c7c <_ZN9USBSerial4readEv>:
{
   b4c7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4c7e:	2100      	movs	r1, #0
   b4c80:	7c00      	ldrb	r0, [r0, #16]
   b4c82:	f7ff fbe7 	bl	b4454 <HAL_USB_USART_Receive_Data>
}
   b4c86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c8a:	bd08      	pop	{r3, pc}

000b4c8c <_ZN9USBSerial4peekEv>:
{
   b4c8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4c8e:	2101      	movs	r1, #1
   b4c90:	7c00      	ldrb	r0, [r0, #16]
   b4c92:	f7ff fbdf 	bl	b4454 <HAL_USB_USART_Receive_Data>
}
   b4c96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c9a:	bd08      	pop	{r3, pc}

000b4c9c <_ZN9USBSerial17availableForWriteEv>:
{
   b4c9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4c9e:	7c00      	ldrb	r0, [r0, #16]
   b4ca0:	f7ff fbd0 	bl	b4444 <HAL_USB_USART_Available_Data_For_Write>
}
   b4ca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ca8:	bd08      	pop	{r3, pc}

000b4caa <_ZN9USBSerial9availableEv>:
{
   b4caa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4cac:	7c00      	ldrb	r0, [r0, #16]
   b4cae:	f7ff fbc1 	bl	b4434 <HAL_USB_USART_Available_Data>
}
   b4cb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4cb6:	bd08      	pop	{r3, pc}

000b4cb8 <_ZN9USBSerial5writeEh>:
{
   b4cb8:	b513      	push	{r0, r1, r4, lr}
   b4cba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cbc:	7c00      	ldrb	r0, [r0, #16]
{
   b4cbe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4cc0:	f7ff fbc0 	bl	b4444 <HAL_USB_USART_Available_Data_For_Write>
   b4cc4:	2800      	cmp	r0, #0
   b4cc6:	9901      	ldr	r1, [sp, #4]
   b4cc8:	dc01      	bgt.n	b4cce <_ZN9USBSerial5writeEh+0x16>
   b4cca:	7c60      	ldrb	r0, [r4, #17]
   b4ccc:	b120      	cbz	r0, b4cd8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4cce:	7c20      	ldrb	r0, [r4, #16]
   b4cd0:	f7ff fbc8 	bl	b4464 <HAL_USB_USART_Send_Data>
   b4cd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4cd8:	b002      	add	sp, #8
   b4cda:	bd10      	pop	{r4, pc}

000b4cdc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4cdc:	7c00      	ldrb	r0, [r0, #16]
   b4cde:	f7ff bbc9 	b.w	b4474 <HAL_USB_USART_Flush_Data>

000b4ce2 <_ZN9USBSerialD0Ev>:
   b4ce2:	b510      	push	{r4, lr}
   b4ce4:	2114      	movs	r1, #20
   b4ce6:	4604      	mov	r4, r0
   b4ce8:	f7ff f9d7 	bl	b409a <_ZdlPvj>
   b4cec:	4620      	mov	r0, r4
   b4cee:	bd10      	pop	{r4, pc}

000b4cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4cf0:	b510      	push	{r4, lr}
   b4cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cf6:	4604      	mov	r4, r0
   b4cf8:	4608      	mov	r0, r1
   b4cfa:	2100      	movs	r1, #0
   b4cfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d00:	4b04      	ldr	r3, [pc, #16]	; (b4d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4d02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4d04:	2301      	movs	r3, #1
  _serial = serial;
   b4d06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4d08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4d0a:	4611      	mov	r1, r2
   b4d0c:	f7ff fb82 	bl	b4414 <HAL_USB_USART_Init>
}
   b4d10:	4620      	mov	r0, r4
   b4d12:	bd10      	pop	{r4, pc}
   b4d14:	000b7114 	.word	0x000b7114

000b4d18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4d18:	7c00      	ldrb	r0, [r0, #16]
   b4d1a:	2200      	movs	r2, #0
   b4d1c:	f7ff bb82 	b.w	b4424 <HAL_USB_USART_Begin>

000b4d20 <_Z19acquireSerialBufferv>:
{
   b4d20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4d22:	2214      	movs	r2, #20
{
   b4d24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4d26:	2100      	movs	r1, #0
   b4d28:	f002 f8ae 	bl	b6e88 <memset>
}
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	bd10      	pop	{r4, pc}

000b4d30 <_Z16_fetch_usbserialv>:
{
   b4d30:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d32:	4c0f      	ldr	r4, [pc, #60]	; (b4d70 <_Z16_fetch_usbserialv+0x40>)
{
   b4d34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4d36:	a803      	add	r0, sp, #12
   b4d38:	f7ff fff2 	bl	b4d20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4d3c:	7821      	ldrb	r1, [r4, #0]
   b4d3e:	f3bf 8f5b 	dmb	ish
   b4d42:	f011 0101 	ands.w	r1, r1, #1
   b4d46:	d10f      	bne.n	b4d68 <_Z16_fetch_usbserialv+0x38>
   b4d48:	4620      	mov	r0, r4
   b4d4a:	9101      	str	r1, [sp, #4]
   b4d4c:	f7ff f9a7 	bl	b409e <__cxa_guard_acquire>
   b4d50:	9901      	ldr	r1, [sp, #4]
   b4d52:	b148      	cbz	r0, b4d68 <_Z16_fetch_usbserialv+0x38>
   b4d54:	aa03      	add	r2, sp, #12
   b4d56:	4807      	ldr	r0, [pc, #28]	; (b4d74 <_Z16_fetch_usbserialv+0x44>)
   b4d58:	f7ff ffca 	bl	b4cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4d5c:	4620      	mov	r0, r4
   b4d5e:	f7ff f9a3 	bl	b40a8 <__cxa_guard_release>
   b4d62:	4805      	ldr	r0, [pc, #20]	; (b4d78 <_Z16_fetch_usbserialv+0x48>)
   b4d64:	f002 f87c 	bl	b6e60 <atexit>
	return _usbserial;
}
   b4d68:	4802      	ldr	r0, [pc, #8]	; (b4d74 <_Z16_fetch_usbserialv+0x44>)
   b4d6a:	b008      	add	sp, #32
   b4d6c:	bd10      	pop	{r4, pc}
   b4d6e:	bf00      	nop
   b4d70:	2003e6f4 	.word	0x2003e6f4
   b4d74:	2003e6f8 	.word	0x2003e6f8
   b4d78:	000b4c79 	.word	0x000b4c79

000b4d7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4d7c:	2200      	movs	r2, #0
   b4d7e:	6840      	ldr	r0, [r0, #4]
   b4d80:	4611      	mov	r1, r2
   b4d82:	f7ff bbbb 	b.w	b44fc <network_ready>

000b4d86 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d86:	2200      	movs	r2, #0
   b4d88:	6840      	ldr	r0, [r0, #4]
   b4d8a:	4611      	mov	r1, r2
   b4d8c:	f7ff bbd6 	b.w	b453c <network_listening>

000b4d90 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d90:	2200      	movs	r2, #0
   b4d92:	6840      	ldr	r0, [r0, #4]
   b4d94:	4611      	mov	r1, r2
   b4d96:	f7ff bbe1 	b.w	b455c <network_get_listen_timeout>

000b4d9a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d9a:	6840      	ldr	r0, [r0, #4]
   b4d9c:	2200      	movs	r2, #0
   b4d9e:	f7ff bbd5 	b.w	b454c <network_set_listen_timeout>

000b4da2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4da2:	6840      	ldr	r0, [r0, #4]
   b4da4:	2200      	movs	r2, #0
   b4da6:	f081 0101 	eor.w	r1, r1, #1
   b4daa:	f7ff bbbf 	b.w	b452c <network_listen>

000b4dae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4dae:	2300      	movs	r3, #0
   b4db0:	6840      	ldr	r0, [r0, #4]
   b4db2:	461a      	mov	r2, r3
   b4db4:	4619      	mov	r1, r3
   b4db6:	f7ff bbb1 	b.w	b451c <network_off>

000b4dba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4dba:	2300      	movs	r3, #0
   b4dbc:	6840      	ldr	r0, [r0, #4]
   b4dbe:	461a      	mov	r2, r3
   b4dc0:	4619      	mov	r1, r3
   b4dc2:	f7ff bba3 	b.w	b450c <network_on>

000b4dc6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dc6:	2200      	movs	r2, #0
   b4dc8:	6840      	ldr	r0, [r0, #4]
   b4dca:	4611      	mov	r1, r2
   b4dcc:	f7ff bb86 	b.w	b44dc <network_connecting>

000b4dd0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dd0:	6840      	ldr	r0, [r0, #4]
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	2102      	movs	r1, #2
   b4dd6:	f7ff bb89 	b.w	b44ec <network_disconnect>

000b4dda <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dda:	2300      	movs	r3, #0
   b4ddc:	6840      	ldr	r0, [r0, #4]
   b4dde:	461a      	mov	r2, r3
   b4de0:	f7ff bb74 	b.w	b44cc <network_connect>

000b4de4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4de4:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4de6:	2204      	movs	r2, #4
   b4de8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4dea:	4a02      	ldr	r2, [pc, #8]	; (b4df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4dec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4dee:	4770      	bx	lr
   b4df0:	2003e70c 	.word	0x2003e70c
   b4df4:	000b7144 	.word	0x000b7144

000b4df8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4df8:	4b01      	ldr	r3, [pc, #4]	; (b4e00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4dfa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4dfc:	4770      	bx	lr
   b4dfe:	bf00      	nop
   b4e00:	2003e624 	.word	0x2003e624

000b4e04 <serialEventRun>:
{
   b4e04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4e06:	4b0b      	ldr	r3, [pc, #44]	; (b4e34 <serialEventRun+0x30>)
   b4e08:	b143      	cbz	r3, b4e1c <serialEventRun+0x18>
   b4e0a:	f7ff ff91 	bl	b4d30 <_Z16_fetch_usbserialv>
   b4e0e:	6803      	ldr	r3, [r0, #0]
   b4e10:	691b      	ldr	r3, [r3, #16]
   b4e12:	4798      	blx	r3
   b4e14:	2800      	cmp	r0, #0
   b4e16:	dd01      	ble.n	b4e1c <serialEventRun+0x18>
        serialEvent();
   b4e18:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4e1c:	4b06      	ldr	r3, [pc, #24]	; (b4e38 <serialEventRun+0x34>)
   b4e1e:	b143      	cbz	r3, b4e32 <serialEventRun+0x2e>
   b4e20:	f000 f96e 	bl	b5100 <_Z22__fetch_global_Serial1v>
   b4e24:	6803      	ldr	r3, [r0, #0]
   b4e26:	691b      	ldr	r3, [r3, #16]
   b4e28:	4798      	blx	r3
   b4e2a:	2800      	cmp	r0, #0
   b4e2c:	dd01      	ble.n	b4e32 <serialEventRun+0x2e>
        serialEvent1();
   b4e2e:	f3af 8000 	nop.w
}
   b4e32:	bd08      	pop	{r3, pc}
	...

000b4e3c <_post_loop>:
{
   b4e3c:	b508      	push	{r3, lr}
	serialEventRun();
   b4e3e:	f7ff ffe1 	bl	b4e04 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4e42:	f7ff f9f7 	bl	b4234 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4e46:	4b01      	ldr	r3, [pc, #4]	; (b4e4c <_post_loop+0x10>)
   b4e48:	6018      	str	r0, [r3, #0]
}
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	2003e728 	.word	0x2003e728

000b4e50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e50:	4805      	ldr	r0, [pc, #20]	; (b4e68 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4e52:	4a06      	ldr	r2, [pc, #24]	; (b4e6c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4e54:	4906      	ldr	r1, [pc, #24]	; (b4e70 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4e56:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4e58:	1a12      	subs	r2, r2, r0
   b4e5a:	f002 f807 	bl	b6e6c <memcpy>
    __backup_sram_signature = signature;
   b4e5e:	4b05      	ldr	r3, [pc, #20]	; (b4e74 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4e60:	4a05      	ldr	r2, [pc, #20]	; (b4e78 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4e62:	601a      	str	r2, [r3, #0]
}
   b4e64:	bd08      	pop	{r3, pc}
   b4e66:	bf00      	nop
   b4e68:	2003f400 	.word	0x2003f400
   b4e6c:	2003f404 	.word	0x2003f404
   b4e70:	000b7414 	.word	0x000b7414
   b4e74:	2003f400 	.word	0x2003f400
   b4e78:	9a271c1e 	.word	0x9a271c1e

000b4e7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4e7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4e7e:	2300      	movs	r3, #0
   b4e80:	9300      	str	r3, [sp, #0]
   b4e82:	461a      	mov	r2, r3
   b4e84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4e88:	f7ff fb0e 	bl	b44a8 <system_ctrl_set_result>
}
   b4e8c:	b003      	add	sp, #12
   b4e8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4e94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4e94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4e96:	8843      	ldrh	r3, [r0, #2]
   b4e98:	2b0a      	cmp	r3, #10
   b4e9a:	d008      	beq.n	b4eae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4e9c:	2b50      	cmp	r3, #80	; 0x50
   b4e9e:	d10b      	bne.n	b4eb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4ea0:	4b09      	ldr	r3, [pc, #36]	; (b4ec8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4ea2:	681b      	ldr	r3, [r3, #0]
   b4ea4:	b14b      	cbz	r3, b4eba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4ea6:	b003      	add	sp, #12
   b4ea8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4eac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4eae:	f7ff ffe5 	bl	b4e7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4eb2:	b003      	add	sp, #12
   b4eb4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4eb8:	2300      	movs	r3, #0
   b4eba:	9300      	str	r3, [sp, #0]
   b4ebc:	461a      	mov	r2, r3
   b4ebe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4ec2:	f7ff faf1 	bl	b44a8 <system_ctrl_set_result>
}
   b4ec6:	e7f4      	b.n	b4eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4ec8:	2003e718 	.word	0x2003e718

000b4ecc <module_user_init_hook>:
{
   b4ecc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4ece:	4812      	ldr	r0, [pc, #72]	; (b4f18 <module_user_init_hook+0x4c>)
   b4ed0:	2100      	movs	r1, #0
   b4ed2:	f7ff fb7b 	bl	b45cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4ed6:	4b11      	ldr	r3, [pc, #68]	; (b4f1c <module_user_init_hook+0x50>)
   b4ed8:	681a      	ldr	r2, [r3, #0]
   b4eda:	4b11      	ldr	r3, [pc, #68]	; (b4f20 <module_user_init_hook+0x54>)
   b4edc:	429a      	cmp	r2, r3
   b4ede:	4b11      	ldr	r3, [pc, #68]	; (b4f24 <module_user_init_hook+0x58>)
   b4ee0:	bf0c      	ite	eq
   b4ee2:	2201      	moveq	r2, #1
   b4ee4:	2200      	movne	r2, #0
   b4ee6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4ee8:	d001      	beq.n	b4eee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4eea:	f7ff ffb1 	bl	b4e50 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4eee:	f7ff f999 	bl	b4224 <HAL_RNG_GetRandomNumber>
   b4ef2:	4604      	mov	r4, r0
    srand(seed);
   b4ef4:	f001 ffd0 	bl	b6e98 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4ef8:	4b0b      	ldr	r3, [pc, #44]	; (b4f28 <module_user_init_hook+0x5c>)
   b4efa:	b113      	cbz	r3, b4f02 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4efc:	4620      	mov	r0, r4
   b4efe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4f02:	2100      	movs	r1, #0
   b4f04:	4808      	ldr	r0, [pc, #32]	; (b4f28 <module_user_init_hook+0x5c>)
   b4f06:	f7ff fad9 	bl	b44bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4f0e:	4807      	ldr	r0, [pc, #28]	; (b4f2c <module_user_init_hook+0x60>)
   b4f10:	2100      	movs	r1, #0
   b4f12:	f7ff babf 	b.w	b4494 <system_ctrl_set_app_request_handler>
   b4f16:	bf00      	nop
   b4f18:	000b4df9 	.word	0x000b4df9
   b4f1c:	2003f400 	.word	0x2003f400
   b4f20:	9a271c1e 	.word	0x9a271c1e
   b4f24:	2003e714 	.word	0x2003e714
   b4f28:	00000000 	.word	0x00000000
   b4f2c:	000b4e95 	.word	0x000b4e95

000b4f30 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4f30:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4f32:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4f34:	d902      	bls.n	b4f3c <pinAvailable+0xc>
    return false;
   b4f36:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4f38:	b002      	add	sp, #8
   b4f3a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4f3c:	f1a0 030b 	sub.w	r3, r0, #11
   b4f40:	2b02      	cmp	r3, #2
   b4f42:	d81a      	bhi.n	b4f7a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f44:	4c17      	ldr	r4, [pc, #92]	; (b4fa4 <pinAvailable+0x74>)
   b4f46:	7821      	ldrb	r1, [r4, #0]
   b4f48:	f3bf 8f5b 	dmb	ish
   b4f4c:	f011 0101 	ands.w	r1, r1, #1
   b4f50:	d10b      	bne.n	b4f6a <pinAvailable+0x3a>
   b4f52:	4620      	mov	r0, r4
   b4f54:	9101      	str	r1, [sp, #4]
   b4f56:	f7ff f8a2 	bl	b409e <__cxa_guard_acquire>
   b4f5a:	9901      	ldr	r1, [sp, #4]
   b4f5c:	b128      	cbz	r0, b4f6a <pinAvailable+0x3a>
   b4f5e:	4812      	ldr	r0, [pc, #72]	; (b4fa8 <pinAvailable+0x78>)
   b4f60:	f7ff fe0f 	bl	b4b82 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f64:	4620      	mov	r0, r4
   b4f66:	f7ff f89f 	bl	b40a8 <__cxa_guard_release>
   b4f6a:	4b0f      	ldr	r3, [pc, #60]	; (b4fa8 <pinAvailable+0x78>)
   b4f6c:	7818      	ldrb	r0, [r3, #0]
   b4f6e:	f7ff fa09 	bl	b4384 <hal_spi_is_enabled>
   b4f72:	2800      	cmp	r0, #0
   b4f74:	d1df      	bne.n	b4f36 <pinAvailable+0x6>
  return true; // 'pin' is available
   b4f76:	2001      	movs	r0, #1
   b4f78:	e7de      	b.n	b4f38 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4f7a:	2801      	cmp	r0, #1
   b4f7c:	d809      	bhi.n	b4f92 <pinAvailable+0x62>
   b4f7e:	f000 f87f 	bl	b5080 <_Z19__fetch_global_Wirev>
   b4f82:	2100      	movs	r1, #0
   b4f84:	7c00      	ldrb	r0, [r0, #16]
   b4f86:	f7ff f9b5 	bl	b42f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4f8a:	f080 0001 	eor.w	r0, r0, #1
   b4f8e:	b2c0      	uxtb	r0, r0
   b4f90:	e7d2      	b.n	b4f38 <pinAvailable+0x8>
   b4f92:	3809      	subs	r0, #9
   b4f94:	2801      	cmp	r0, #1
   b4f96:	d8ee      	bhi.n	b4f76 <pinAvailable+0x46>
   b4f98:	f000 f8b2 	bl	b5100 <_Z22__fetch_global_Serial1v>
   b4f9c:	7c00      	ldrb	r0, [r0, #16]
   b4f9e:	f7ff fa21 	bl	b43e4 <hal_usart_is_enabled>
   b4fa2:	e7f2      	b.n	b4f8a <pinAvailable+0x5a>
   b4fa4:	2003e71c 	.word	0x2003e71c
   b4fa8:	2003e720 	.word	0x2003e720

000b4fac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fac:	2823      	cmp	r0, #35	; 0x23
{
   b4fae:	b538      	push	{r3, r4, r5, lr}
   b4fb0:	4604      	mov	r4, r0
   b4fb2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4fb4:	d80a      	bhi.n	b4fcc <pinMode+0x20>
   b4fb6:	29ff      	cmp	r1, #255	; 0xff
   b4fb8:	d008      	beq.n	b4fcc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4fba:	f7ff ffb9 	bl	b4f30 <pinAvailable>
   b4fbe:	b128      	cbz	r0, b4fcc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b4fc0:	4629      	mov	r1, r5
   b4fc2:	4620      	mov	r0, r4
}
   b4fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b4fc8:	f7ff b944 	b.w	b4254 <HAL_Pin_Mode>
}
   b4fcc:	bd38      	pop	{r3, r4, r5, pc}

000b4fce <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b4fce:	280d      	cmp	r0, #13
{
   b4fd0:	b510      	push	{r4, lr}
   b4fd2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b4fd4:	bf9c      	itt	ls
   b4fd6:	340e      	addls	r4, #14
   b4fd8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b4fda:	4620      	mov	r0, r4
   b4fdc:	f7ff ffa8 	bl	b4f30 <pinAvailable>
   b4fe0:	b150      	cbz	r0, b4ff8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b4fe2:	2103      	movs	r1, #3
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	f7ff f92d 	bl	b4244 <HAL_Validate_Pin_Function>
   b4fea:	2803      	cmp	r0, #3
   b4fec:	d104      	bne.n	b4ff8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b4fee:	4620      	mov	r0, r4
}
   b4ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b4ff4:	f7ff b946 	b.w	b4284 <hal_adc_read>
}
   b4ff8:	2000      	movs	r0, #0
   b4ffa:	bd10      	pop	{r4, pc}

000b4ffc <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b4ffc:	b538      	push	{r3, r4, r5, lr}
   b4ffe:	4604      	mov	r4, r0
   b5000:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b5002:	f7ff ff95 	bl	b4f30 <pinAvailable>
   b5006:	b1f0      	cbz	r0, b5046 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b5008:	2104      	movs	r1, #4
   b500a:	4620      	mov	r0, r4
   b500c:	f7ff f91a 	bl	b4244 <HAL_Validate_Pin_Function>
   b5010:	2804      	cmp	r0, #4
   b5012:	d105      	bne.n	b5020 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b5014:	b2a9      	uxth	r1, r5
   b5016:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b5018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b501c:	f7ff b92a 	b.w	b4274 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b5020:	2102      	movs	r1, #2
   b5022:	4620      	mov	r0, r4
   b5024:	f7ff f90e 	bl	b4244 <HAL_Validate_Pin_Function>
   b5028:	2802      	cmp	r0, #2
   b502a:	d10c      	bne.n	b5046 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b502c:	4620      	mov	r0, r4
   b502e:	f7ff f919 	bl	b4264 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b5032:	2801      	cmp	r0, #1
   b5034:	d001      	beq.n	b503a <_Z11analogWritetm+0x3e>
   b5036:	2804      	cmp	r0, #4
   b5038:	d105      	bne.n	b5046 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b503a:	4629      	mov	r1, r5
   b503c:	4620      	mov	r0, r4
}
   b503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b5042:	f7ff b927 	b.w	b4294 <hal_pwm_write_ext>
}
   b5046:	bd38      	pop	{r3, r4, r5, pc}

000b5048 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5048:	4770      	bx	lr
	...

000b504c <_Z17acquireWireBufferv>:
{
   b504c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b504e:	4b0a      	ldr	r3, [pc, #40]	; (b5078 <_Z17acquireWireBufferv+0x2c>)
   b5050:	6003      	str	r3, [r0, #0]
   b5052:	2301      	movs	r3, #1
{
   b5054:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5056:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5058:	4908      	ldr	r1, [pc, #32]	; (b507c <_Z17acquireWireBufferv+0x30>)
   b505a:	2020      	movs	r0, #32
   b505c:	f000 f874 	bl	b5148 <_ZnajRKSt9nothrow_t>
	};
   b5060:	2520      	movs	r5, #32
   b5062:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5064:	4905      	ldr	r1, [pc, #20]	; (b507c <_Z17acquireWireBufferv+0x30>)
	};
   b5066:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5068:	4628      	mov	r0, r5
   b506a:	f000 f86d 	bl	b5148 <_ZnajRKSt9nothrow_t>
	};
   b506e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5072:	4620      	mov	r0, r4
   b5074:	bd38      	pop	{r3, r4, r5, pc}
   b5076:	bf00      	nop
   b5078:	00010018 	.word	0x00010018
   b507c:	000b7178 	.word	0x000b7178

000b5080 <_Z19__fetch_global_Wirev>:
{
   b5080:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5082:	4d0e      	ldr	r5, [pc, #56]	; (b50bc <_Z19__fetch_global_Wirev+0x3c>)
   b5084:	7829      	ldrb	r1, [r5, #0]
   b5086:	f3bf 8f5b 	dmb	ish
   b508a:	f011 0401 	ands.w	r4, r1, #1
{
   b508e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5090:	d111      	bne.n	b50b6 <_Z19__fetch_global_Wirev+0x36>
   b5092:	4628      	mov	r0, r5
   b5094:	f7ff f803 	bl	b409e <__cxa_guard_acquire>
   b5098:	b168      	cbz	r0, b50b6 <_Z19__fetch_global_Wirev+0x36>
   b509a:	4668      	mov	r0, sp
   b509c:	f7ff ffd6 	bl	b504c <_Z17acquireWireBufferv>
   b50a0:	466a      	mov	r2, sp
   b50a2:	4621      	mov	r1, r4
   b50a4:	4806      	ldr	r0, [pc, #24]	; (b50c0 <_Z19__fetch_global_Wirev+0x40>)
   b50a6:	f7ff fb17 	bl	b46d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b50aa:	4628      	mov	r0, r5
   b50ac:	f7fe fffc 	bl	b40a8 <__cxa_guard_release>
   b50b0:	4804      	ldr	r0, [pc, #16]	; (b50c4 <_Z19__fetch_global_Wirev+0x44>)
   b50b2:	f001 fed5 	bl	b6e60 <atexit>
	return wire;
}
   b50b6:	4802      	ldr	r0, [pc, #8]	; (b50c0 <_Z19__fetch_global_Wirev+0x40>)
   b50b8:	b007      	add	sp, #28
   b50ba:	bd30      	pop	{r4, r5, pc}
   b50bc:	2003e72c 	.word	0x2003e72c
   b50c0:	2003e730 	.word	0x2003e730
   b50c4:	000b5049 	.word	0x000b5049

000b50c8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b50c8:	4770      	bx	lr
	...

000b50cc <_Z20acquireSerial1Bufferv>:
{
   b50cc:	b538      	push	{r3, r4, r5, lr}
   b50ce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b50d0:	2514      	movs	r5, #20
   b50d2:	462a      	mov	r2, r5
   b50d4:	2100      	movs	r1, #0
   b50d6:	f001 fed7 	bl	b6e88 <memset>
   b50da:	8025      	strh	r5, [r4, #0]
   b50dc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50de:	4907      	ldr	r1, [pc, #28]	; (b50fc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b50e0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50e2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b50e4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50e6:	f000 f82f 	bl	b5148 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ea:	4904      	ldr	r1, [pc, #16]	; (b50fc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b50ec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b50ee:	4628      	mov	r0, r5
   b50f0:	f000 f82a 	bl	b5148 <_ZnajRKSt9nothrow_t>
    };
   b50f4:	60e0      	str	r0, [r4, #12]
}
   b50f6:	4620      	mov	r0, r4
   b50f8:	bd38      	pop	{r3, r4, r5, pc}
   b50fa:	bf00      	nop
   b50fc:	000b7178 	.word	0x000b7178

000b5100 <_Z22__fetch_global_Serial1v>:
{
   b5100:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5102:	4d0e      	ldr	r5, [pc, #56]	; (b513c <_Z22__fetch_global_Serial1v+0x3c>)
   b5104:	7829      	ldrb	r1, [r5, #0]
   b5106:	f3bf 8f5b 	dmb	ish
   b510a:	f011 0401 	ands.w	r4, r1, #1
{
   b510e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5110:	d111      	bne.n	b5136 <_Z22__fetch_global_Serial1v+0x36>
   b5112:	4628      	mov	r0, r5
   b5114:	f7fe ffc3 	bl	b409e <__cxa_guard_acquire>
   b5118:	b168      	cbz	r0, b5136 <_Z22__fetch_global_Serial1v+0x36>
   b511a:	a801      	add	r0, sp, #4
   b511c:	f7ff ffd6 	bl	b50cc <_Z20acquireSerial1Bufferv>
   b5120:	aa01      	add	r2, sp, #4
   b5122:	4621      	mov	r1, r4
   b5124:	4806      	ldr	r0, [pc, #24]	; (b5140 <_Z22__fetch_global_Serial1v+0x40>)
   b5126:	f7ff fd91 	bl	b4c4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b512a:	4628      	mov	r0, r5
   b512c:	f7fe ffbc 	bl	b40a8 <__cxa_guard_release>
   b5130:	4804      	ldr	r0, [pc, #16]	; (b5144 <_Z22__fetch_global_Serial1v+0x44>)
   b5132:	f001 fe95 	bl	b6e60 <atexit>
    return serial1;
}
   b5136:	4802      	ldr	r0, [pc, #8]	; (b5140 <_Z22__fetch_global_Serial1v+0x40>)
   b5138:	b007      	add	sp, #28
   b513a:	bd30      	pop	{r4, r5, pc}
   b513c:	2003e744 	.word	0x2003e744
   b5140:	2003e748 	.word	0x2003e748
   b5144:	000b50c9 	.word	0x000b50c9

000b5148 <_ZnajRKSt9nothrow_t>:
   b5148:	f7fe bfa5 	b.w	b4096 <_Znaj>
   b514c:	0000      	movs	r0, r0
	...

000b5150 <sin>:
   b5150:	ec51 0b10 	vmov	r0, r1, d0
   b5154:	4a20      	ldr	r2, [pc, #128]	; (b51d8 <sin+0x88>)
   b5156:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b515a:	4293      	cmp	r3, r2
   b515c:	dd27      	ble.n	b51ae <sin+0x5e>
   b515e:	b500      	push	{lr}
   b5160:	4a1e      	ldr	r2, [pc, #120]	; (b51dc <sin+0x8c>)
   b5162:	4293      	cmp	r3, r2
   b5164:	b085      	sub	sp, #20
   b5166:	dd09      	ble.n	b517c <sin+0x2c>
   b5168:	ee10 2a10 	vmov	r2, s0
   b516c:	460b      	mov	r3, r1
   b516e:	f001 f9ad 	bl	b64cc <__aeabi_dsub>
   b5172:	ec41 0b10 	vmov	d0, r0, r1
   b5176:	b005      	add	sp, #20
   b5178:	f85d fb04 	ldr.w	pc, [sp], #4
   b517c:	4668      	mov	r0, sp
   b517e:	f000 f82f 	bl	b51e0 <__ieee754_rem_pio2>
   b5182:	f000 0003 	and.w	r0, r0, #3
   b5186:	2801      	cmp	r0, #1
   b5188:	ed9d 1b02 	vldr	d1, [sp, #8]
   b518c:	ed9d 0b00 	vldr	d0, [sp]
   b5190:	d012      	beq.n	b51b8 <sin+0x68>
   b5192:	2802      	cmp	r0, #2
   b5194:	d017      	beq.n	b51c6 <sin+0x76>
   b5196:	b190      	cbz	r0, b51be <sin+0x6e>
   b5198:	f000 fa4a 	bl	b5630 <__kernel_cos>
   b519c:	ec53 2b10 	vmov	r2, r3, d0
   b51a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   b51a4:	ee00 3a90 	vmov	s1, r3
   b51a8:	b005      	add	sp, #20
   b51aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b51ae:	ed9f 1b08 	vldr	d1, [pc, #32]	; b51d0 <sin+0x80>
   b51b2:	2000      	movs	r0, #0
   b51b4:	f000 bfa8 	b.w	b6108 <__kernel_sin>
   b51b8:	f000 fa3a 	bl	b5630 <__kernel_cos>
   b51bc:	e7db      	b.n	b5176 <sin+0x26>
   b51be:	2001      	movs	r0, #1
   b51c0:	f000 ffa2 	bl	b6108 <__kernel_sin>
   b51c4:	e7d7      	b.n	b5176 <sin+0x26>
   b51c6:	2001      	movs	r0, #1
   b51c8:	f000 ff9e 	bl	b6108 <__kernel_sin>
   b51cc:	e7e6      	b.n	b519c <sin+0x4c>
   b51ce:	bf00      	nop
	...
   b51d8:	3fe921fb 	.word	0x3fe921fb
   b51dc:	7fefffff 	.word	0x7fefffff

000b51e0 <__ieee754_rem_pio2>:
   b51e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51e4:	ec53 2b10 	vmov	r2, r3, d0
   b51e8:	ed2d 8b04 	vpush	{d8-d9}
   b51ec:	4990      	ldr	r1, [pc, #576]	; (b5430 <__ieee754_rem_pio2+0x250>)
   b51ee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   b51f2:	428d      	cmp	r5, r1
   b51f4:	b08b      	sub	sp, #44	; 0x2c
   b51f6:	4604      	mov	r4, r0
   b51f8:	f340 808c 	ble.w	b5314 <__ieee754_rem_pio2+0x134>
   b51fc:	498d      	ldr	r1, [pc, #564]	; (b5434 <__ieee754_rem_pio2+0x254>)
   b51fe:	428d      	cmp	r5, r1
   b5200:	461f      	mov	r7, r3
   b5202:	dc2b      	bgt.n	b525c <__ieee754_rem_pio2+0x7c>
   b5204:	2f00      	cmp	r7, #0
   b5206:	4619      	mov	r1, r3
   b5208:	ee10 0a10 	vmov	r0, s0
   b520c:	a37e      	add	r3, pc, #504	; (adr r3, b5408 <__ieee754_rem_pio2+0x228>)
   b520e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5212:	f340 81b6 	ble.w	b5582 <__ieee754_rem_pio2+0x3a2>
   b5216:	f001 f959 	bl	b64cc <__aeabi_dsub>
   b521a:	4b87      	ldr	r3, [pc, #540]	; (b5438 <__ieee754_rem_pio2+0x258>)
   b521c:	429d      	cmp	r5, r3
   b521e:	4680      	mov	r8, r0
   b5220:	4689      	mov	r9, r1
   b5222:	f000 808f 	beq.w	b5344 <__ieee754_rem_pio2+0x164>
   b5226:	a37a      	add	r3, pc, #488	; (adr r3, b5410 <__ieee754_rem_pio2+0x230>)
   b5228:	e9d3 2300 	ldrd	r2, r3, [r3]
   b522c:	f001 f94e 	bl	b64cc <__aeabi_dsub>
   b5230:	4602      	mov	r2, r0
   b5232:	460b      	mov	r3, r1
   b5234:	e9c4 2300 	strd	r2, r3, [r4]
   b5238:	4640      	mov	r0, r8
   b523a:	4649      	mov	r1, r9
   b523c:	f001 f946 	bl	b64cc <__aeabi_dsub>
   b5240:	a373      	add	r3, pc, #460	; (adr r3, b5410 <__ieee754_rem_pio2+0x230>)
   b5242:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5246:	f001 f941 	bl	b64cc <__aeabi_dsub>
   b524a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b524e:	2601      	movs	r6, #1
   b5250:	4630      	mov	r0, r6
   b5252:	b00b      	add	sp, #44	; 0x2c
   b5254:	ecbd 8b04 	vpop	{d8-d9}
   b5258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b525c:	4977      	ldr	r1, [pc, #476]	; (b543c <__ieee754_rem_pio2+0x25c>)
   b525e:	428d      	cmp	r5, r1
   b5260:	f340 8092 	ble.w	b5388 <__ieee754_rem_pio2+0x1a8>
   b5264:	4976      	ldr	r1, [pc, #472]	; (b5440 <__ieee754_rem_pio2+0x260>)
   b5266:	428d      	cmp	r5, r1
   b5268:	dc61      	bgt.n	b532e <__ieee754_rem_pio2+0x14e>
   b526a:	152e      	asrs	r6, r5, #20
   b526c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   b5270:	ee10 0a10 	vmov	r0, s0
   b5274:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   b5278:	4690      	mov	r8, r2
   b527a:	4689      	mov	r9, r1
   b527c:	f001 fd78 	bl	b6d70 <__aeabi_d2iz>
   b5280:	f001 fa72 	bl	b6768 <__aeabi_i2d>
   b5284:	4602      	mov	r2, r0
   b5286:	460b      	mov	r3, r1
   b5288:	4640      	mov	r0, r8
   b528a:	4649      	mov	r1, r9
   b528c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b5290:	f001 f91c 	bl	b64cc <__aeabi_dsub>
   b5294:	4b6b      	ldr	r3, [pc, #428]	; (b5444 <__ieee754_rem_pio2+0x264>)
   b5296:	2200      	movs	r2, #0
   b5298:	f001 fad0 	bl	b683c <__aeabi_dmul>
   b529c:	4689      	mov	r9, r1
   b529e:	4680      	mov	r8, r0
   b52a0:	f001 fd66 	bl	b6d70 <__aeabi_d2iz>
   b52a4:	4605      	mov	r5, r0
   b52a6:	f001 fa5f 	bl	b6768 <__aeabi_i2d>
   b52aa:	4602      	mov	r2, r0
   b52ac:	460b      	mov	r3, r1
   b52ae:	4640      	mov	r0, r8
   b52b0:	4649      	mov	r1, r9
   b52b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b52b6:	f001 f909 	bl	b64cc <__aeabi_dsub>
   b52ba:	4b62      	ldr	r3, [pc, #392]	; (b5444 <__ieee754_rem_pio2+0x264>)
   b52bc:	2200      	movs	r2, #0
   b52be:	f001 fabd 	bl	b683c <__aeabi_dmul>
   b52c2:	4602      	mov	r2, r0
   b52c4:	460b      	mov	r3, r1
   b52c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b52ca:	2200      	movs	r2, #0
   b52cc:	2300      	movs	r3, #0
   b52ce:	f001 fd1d 	bl	b6d0c <__aeabi_dcmpeq>
   b52d2:	2800      	cmp	r0, #0
   b52d4:	f000 8153 	beq.w	b557e <__ieee754_rem_pio2+0x39e>
   b52d8:	2d00      	cmp	r5, #0
   b52da:	bf0c      	ite	eq
   b52dc:	2301      	moveq	r3, #1
   b52de:	2302      	movne	r3, #2
   b52e0:	4a59      	ldr	r2, [pc, #356]	; (b5448 <__ieee754_rem_pio2+0x268>)
   b52e2:	9201      	str	r2, [sp, #4]
   b52e4:	2202      	movs	r2, #2
   b52e6:	9200      	str	r2, [sp, #0]
   b52e8:	4621      	mov	r1, r4
   b52ea:	4632      	mov	r2, r6
   b52ec:	a804      	add	r0, sp, #16
   b52ee:	f000 fadf 	bl	b58b0 <__kernel_rem_pio2>
   b52f2:	2f00      	cmp	r7, #0
   b52f4:	4606      	mov	r6, r0
   b52f6:	daab      	bge.n	b5250 <__ieee754_rem_pio2+0x70>
   b52f8:	6861      	ldr	r1, [r4, #4]
   b52fa:	6822      	ldr	r2, [r4, #0]
   b52fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5300:	68e1      	ldr	r1, [r4, #12]
   b5302:	e9c4 2300 	strd	r2, r3, [r4]
   b5306:	68a2      	ldr	r2, [r4, #8]
   b5308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b530c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b5310:	4246      	negs	r6, r0
   b5312:	e79d      	b.n	b5250 <__ieee754_rem_pio2+0x70>
   b5314:	2000      	movs	r0, #0
   b5316:	2100      	movs	r1, #0
   b5318:	2600      	movs	r6, #0
   b531a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b531e:	4630      	mov	r0, r6
   b5320:	ed84 0b00 	vstr	d0, [r4]
   b5324:	b00b      	add	sp, #44	; 0x2c
   b5326:	ecbd 8b04 	vpop	{d8-d9}
   b532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b532e:	ee10 0a10 	vmov	r0, s0
   b5332:	4619      	mov	r1, r3
   b5334:	f001 f8ca 	bl	b64cc <__aeabi_dsub>
   b5338:	2600      	movs	r6, #0
   b533a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b533e:	e9c4 0100 	strd	r0, r1, [r4]
   b5342:	e785      	b.n	b5250 <__ieee754_rem_pio2+0x70>
   b5344:	a334      	add	r3, pc, #208	; (adr r3, b5418 <__ieee754_rem_pio2+0x238>)
   b5346:	e9d3 2300 	ldrd	r2, r3, [r3]
   b534a:	f001 f8bf 	bl	b64cc <__aeabi_dsub>
   b534e:	a334      	add	r3, pc, #208	; (adr r3, b5420 <__ieee754_rem_pio2+0x240>)
   b5350:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5354:	4680      	mov	r8, r0
   b5356:	4689      	mov	r9, r1
   b5358:	f001 f8b8 	bl	b64cc <__aeabi_dsub>
   b535c:	4602      	mov	r2, r0
   b535e:	460b      	mov	r3, r1
   b5360:	e9c4 2300 	strd	r2, r3, [r4]
   b5364:	4640      	mov	r0, r8
   b5366:	4649      	mov	r1, r9
   b5368:	f001 f8b0 	bl	b64cc <__aeabi_dsub>
   b536c:	a32c      	add	r3, pc, #176	; (adr r3, b5420 <__ieee754_rem_pio2+0x240>)
   b536e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5372:	f001 f8ab 	bl	b64cc <__aeabi_dsub>
   b5376:	2601      	movs	r6, #1
   b5378:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b537c:	4630      	mov	r0, r6
   b537e:	b00b      	add	sp, #44	; 0x2c
   b5380:	ecbd 8b04 	vpop	{d8-d9}
   b5384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5388:	f000 ff7c 	bl	b6284 <fabs>
   b538c:	ec59 8b10 	vmov	r8, r9, d0
   b5390:	ee10 0a10 	vmov	r0, s0
   b5394:	a324      	add	r3, pc, #144	; (adr r3, b5428 <__ieee754_rem_pio2+0x248>)
   b5396:	e9d3 2300 	ldrd	r2, r3, [r3]
   b539a:	4649      	mov	r1, r9
   b539c:	f001 fa4e 	bl	b683c <__aeabi_dmul>
   b53a0:	4b2a      	ldr	r3, [pc, #168]	; (b544c <__ieee754_rem_pio2+0x26c>)
   b53a2:	2200      	movs	r2, #0
   b53a4:	f001 f894 	bl	b64d0 <__adddf3>
   b53a8:	f001 fce2 	bl	b6d70 <__aeabi_d2iz>
   b53ac:	4606      	mov	r6, r0
   b53ae:	f001 f9db 	bl	b6768 <__aeabi_i2d>
   b53b2:	4602      	mov	r2, r0
   b53b4:	460b      	mov	r3, r1
   b53b6:	ec43 2b18 	vmov	d8, r2, r3
   b53ba:	a313      	add	r3, pc, #76	; (adr r3, b5408 <__ieee754_rem_pio2+0x228>)
   b53bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53c0:	eeb0 9a48 	vmov.f32	s18, s16
   b53c4:	eef0 9a68 	vmov.f32	s19, s17
   b53c8:	f001 fa38 	bl	b683c <__aeabi_dmul>
   b53cc:	4602      	mov	r2, r0
   b53ce:	460b      	mov	r3, r1
   b53d0:	4640      	mov	r0, r8
   b53d2:	4649      	mov	r1, r9
   b53d4:	f001 f87a 	bl	b64cc <__aeabi_dsub>
   b53d8:	a30d      	add	r3, pc, #52	; (adr r3, b5410 <__ieee754_rem_pio2+0x230>)
   b53da:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53de:	4682      	mov	sl, r0
   b53e0:	468b      	mov	fp, r1
   b53e2:	ec51 0b18 	vmov	r0, r1, d8
   b53e6:	f001 fa29 	bl	b683c <__aeabi_dmul>
   b53ea:	2e1f      	cmp	r6, #31
   b53ec:	ec41 0b18 	vmov	d8, r0, r1
   b53f0:	dc30      	bgt.n	b5454 <__ieee754_rem_pio2+0x274>
   b53f2:	4b17      	ldr	r3, [pc, #92]	; (b5450 <__ieee754_rem_pio2+0x270>)
   b53f4:	1e72      	subs	r2, r6, #1
   b53f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b53fa:	42ab      	cmp	r3, r5
   b53fc:	d02a      	beq.n	b5454 <__ieee754_rem_pio2+0x274>
   b53fe:	4602      	mov	r2, r0
   b5400:	460b      	mov	r3, r1
   b5402:	e09b      	b.n	b553c <__ieee754_rem_pio2+0x35c>
   b5404:	f3af 8000 	nop.w
   b5408:	54400000 	.word	0x54400000
   b540c:	3ff921fb 	.word	0x3ff921fb
   b5410:	1a626331 	.word	0x1a626331
   b5414:	3dd0b461 	.word	0x3dd0b461
   b5418:	1a600000 	.word	0x1a600000
   b541c:	3dd0b461 	.word	0x3dd0b461
   b5420:	2e037073 	.word	0x2e037073
   b5424:	3ba3198a 	.word	0x3ba3198a
   b5428:	6dc9c883 	.word	0x6dc9c883
   b542c:	3fe45f30 	.word	0x3fe45f30
   b5430:	3fe921fb 	.word	0x3fe921fb
   b5434:	4002d97b 	.word	0x4002d97b
   b5438:	3ff921fb 	.word	0x3ff921fb
   b543c:	413921fb 	.word	0x413921fb
   b5440:	7fefffff 	.word	0x7fefffff
   b5444:	41700000 	.word	0x41700000
   b5448:	000b71fc 	.word	0x000b71fc
   b544c:	3fe00000 	.word	0x3fe00000
   b5450:	000b717c 	.word	0x000b717c
   b5454:	152b      	asrs	r3, r5, #20
   b5456:	9303      	str	r3, [sp, #12]
   b5458:	4650      	mov	r0, sl
   b545a:	ec53 2b18 	vmov	r2, r3, d8
   b545e:	4659      	mov	r1, fp
   b5460:	f001 f834 	bl	b64cc <__aeabi_dsub>
   b5464:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b5468:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   b546c:	2d10      	cmp	r5, #16
   b546e:	4680      	mov	r8, r0
   b5470:	4689      	mov	r9, r1
   b5472:	dd69      	ble.n	b5548 <__ieee754_rem_pio2+0x368>
   b5474:	a364      	add	r3, pc, #400	; (adr r3, b5608 <__ieee754_rem_pio2+0x428>)
   b5476:	e9d3 2300 	ldrd	r2, r3, [r3]
   b547a:	ec51 0b19 	vmov	r0, r1, d9
   b547e:	f001 f9dd 	bl	b683c <__aeabi_dmul>
   b5482:	4680      	mov	r8, r0
   b5484:	4689      	mov	r9, r1
   b5486:	4642      	mov	r2, r8
   b5488:	464b      	mov	r3, r9
   b548a:	4650      	mov	r0, sl
   b548c:	4659      	mov	r1, fp
   b548e:	f001 f81d 	bl	b64cc <__aeabi_dsub>
   b5492:	4602      	mov	r2, r0
   b5494:	460b      	mov	r3, r1
   b5496:	4650      	mov	r0, sl
   b5498:	4659      	mov	r1, fp
   b549a:	4692      	mov	sl, r2
   b549c:	469b      	mov	fp, r3
   b549e:	f001 f815 	bl	b64cc <__aeabi_dsub>
   b54a2:	4642      	mov	r2, r8
   b54a4:	464b      	mov	r3, r9
   b54a6:	f001 f811 	bl	b64cc <__aeabi_dsub>
   b54aa:	a359      	add	r3, pc, #356	; (adr r3, b5610 <__ieee754_rem_pio2+0x430>)
   b54ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54b0:	4680      	mov	r8, r0
   b54b2:	4689      	mov	r9, r1
   b54b4:	ec51 0b19 	vmov	r0, r1, d9
   b54b8:	f001 f9c0 	bl	b683c <__aeabi_dmul>
   b54bc:	4642      	mov	r2, r8
   b54be:	464b      	mov	r3, r9
   b54c0:	f001 f804 	bl	b64cc <__aeabi_dsub>
   b54c4:	4602      	mov	r2, r0
   b54c6:	460b      	mov	r3, r1
   b54c8:	4650      	mov	r0, sl
   b54ca:	4659      	mov	r1, fp
   b54cc:	ec43 2b18 	vmov	d8, r2, r3
   b54d0:	f000 fffc 	bl	b64cc <__aeabi_dsub>
   b54d4:	9a03      	ldr	r2, [sp, #12]
   b54d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b54da:	1ad3      	subs	r3, r2, r3
   b54dc:	2b31      	cmp	r3, #49	; 0x31
   b54de:	4680      	mov	r8, r0
   b54e0:	4689      	mov	r9, r1
   b54e2:	dd31      	ble.n	b5548 <__ieee754_rem_pio2+0x368>
   b54e4:	a34d      	add	r3, pc, #308	; (adr r3, b561c <__ieee754_rem_pio2+0x43c>)
   b54e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54ea:	ec51 0b19 	vmov	r0, r1, d9
   b54ee:	f001 f9a5 	bl	b683c <__aeabi_dmul>
   b54f2:	4680      	mov	r8, r0
   b54f4:	4689      	mov	r9, r1
   b54f6:	4642      	mov	r2, r8
   b54f8:	464b      	mov	r3, r9
   b54fa:	4650      	mov	r0, sl
   b54fc:	4659      	mov	r1, fp
   b54fe:	f000 ffe5 	bl	b64cc <__aeabi_dsub>
   b5502:	4602      	mov	r2, r0
   b5504:	460b      	mov	r3, r1
   b5506:	4650      	mov	r0, sl
   b5508:	4659      	mov	r1, fp
   b550a:	4692      	mov	sl, r2
   b550c:	469b      	mov	fp, r3
   b550e:	f000 ffdd 	bl	b64cc <__aeabi_dsub>
   b5512:	4642      	mov	r2, r8
   b5514:	464b      	mov	r3, r9
   b5516:	f000 ffd9 	bl	b64cc <__aeabi_dsub>
   b551a:	a342      	add	r3, pc, #264	; (adr r3, b5624 <__ieee754_rem_pio2+0x444>)
   b551c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5520:	4680      	mov	r8, r0
   b5522:	4689      	mov	r9, r1
   b5524:	ec51 0b19 	vmov	r0, r1, d9
   b5528:	f001 f988 	bl	b683c <__aeabi_dmul>
   b552c:	4642      	mov	r2, r8
   b552e:	464b      	mov	r3, r9
   b5530:	f000 ffcc 	bl	b64cc <__aeabi_dsub>
   b5534:	4602      	mov	r2, r0
   b5536:	460b      	mov	r3, r1
   b5538:	ec43 2b18 	vmov	d8, r2, r3
   b553c:	4650      	mov	r0, sl
   b553e:	4659      	mov	r1, fp
   b5540:	f000 ffc4 	bl	b64cc <__aeabi_dsub>
   b5544:	4680      	mov	r8, r0
   b5546:	4689      	mov	r9, r1
   b5548:	4642      	mov	r2, r8
   b554a:	464b      	mov	r3, r9
   b554c:	e9c4 8900 	strd	r8, r9, [r4]
   b5550:	4650      	mov	r0, sl
   b5552:	4659      	mov	r1, fp
   b5554:	f000 ffba 	bl	b64cc <__aeabi_dsub>
   b5558:	ec53 2b18 	vmov	r2, r3, d8
   b555c:	f000 ffb6 	bl	b64cc <__aeabi_dsub>
   b5560:	2f00      	cmp	r7, #0
   b5562:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b5566:	f6bf ae73 	bge.w	b5250 <__ieee754_rem_pio2+0x70>
   b556a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b556e:	e9c4 8300 	strd	r8, r3, [r4]
   b5572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5576:	e9c4 0302 	strd	r0, r3, [r4, #8]
   b557a:	4276      	negs	r6, r6
   b557c:	e668      	b.n	b5250 <__ieee754_rem_pio2+0x70>
   b557e:	2303      	movs	r3, #3
   b5580:	e6ae      	b.n	b52e0 <__ieee754_rem_pio2+0x100>
   b5582:	f000 ffa5 	bl	b64d0 <__adddf3>
   b5586:	4b24      	ldr	r3, [pc, #144]	; (b5618 <__ieee754_rem_pio2+0x438>)
   b5588:	429d      	cmp	r5, r3
   b558a:	4680      	mov	r8, r0
   b558c:	4689      	mov	r9, r1
   b558e:	d016      	beq.n	b55be <__ieee754_rem_pio2+0x3de>
   b5590:	a31b      	add	r3, pc, #108	; (adr r3, b5600 <__ieee754_rem_pio2+0x420>)
   b5592:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5596:	f000 ff9b 	bl	b64d0 <__adddf3>
   b559a:	4602      	mov	r2, r0
   b559c:	460b      	mov	r3, r1
   b559e:	e9c4 2300 	strd	r2, r3, [r4]
   b55a2:	4640      	mov	r0, r8
   b55a4:	4649      	mov	r1, r9
   b55a6:	f000 ff91 	bl	b64cc <__aeabi_dsub>
   b55aa:	a315      	add	r3, pc, #84	; (adr r3, b5600 <__ieee754_rem_pio2+0x420>)
   b55ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55b0:	f000 ff8e 	bl	b64d0 <__adddf3>
   b55b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   b55b8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b55bc:	e648      	b.n	b5250 <__ieee754_rem_pio2+0x70>
   b55be:	a312      	add	r3, pc, #72	; (adr r3, b5608 <__ieee754_rem_pio2+0x428>)
   b55c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55c4:	f000 ff84 	bl	b64d0 <__adddf3>
   b55c8:	a311      	add	r3, pc, #68	; (adr r3, b5610 <__ieee754_rem_pio2+0x430>)
   b55ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55ce:	4680      	mov	r8, r0
   b55d0:	4689      	mov	r9, r1
   b55d2:	f000 ff7d 	bl	b64d0 <__adddf3>
   b55d6:	4602      	mov	r2, r0
   b55d8:	460b      	mov	r3, r1
   b55da:	e9c4 2300 	strd	r2, r3, [r4]
   b55de:	4640      	mov	r0, r8
   b55e0:	4649      	mov	r1, r9
   b55e2:	f000 ff73 	bl	b64cc <__aeabi_dsub>
   b55e6:	a30a      	add	r3, pc, #40	; (adr r3, b5610 <__ieee754_rem_pio2+0x430>)
   b55e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55ec:	f000 ff70 	bl	b64d0 <__adddf3>
   b55f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   b55f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
   b55f8:	e62a      	b.n	b5250 <__ieee754_rem_pio2+0x70>
   b55fa:	bf00      	nop
   b55fc:	f3af 8000 	nop.w
   b5600:	1a626331 	.word	0x1a626331
   b5604:	3dd0b461 	.word	0x3dd0b461
   b5608:	1a600000 	.word	0x1a600000
   b560c:	3dd0b461 	.word	0x3dd0b461
   b5610:	2e037073 	.word	0x2e037073
   b5614:	3ba3198a 	.word	0x3ba3198a
   b5618:	3ff921fb 	.word	0x3ff921fb
   b561c:	2e000000 	.word	0x2e000000
   b5620:	3ba3198a 	.word	0x3ba3198a
   b5624:	252049c1 	.word	0x252049c1
   b5628:	397b839a 	.word	0x397b839a
   b562c:	00000000 	.word	0x00000000

000b5630 <__kernel_cos>:
   b5630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5634:	ec57 6b10 	vmov	r6, r7, d0
   b5638:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   b563c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   b5640:	ed2d 8b04 	vpush	{d8-d9}
   b5644:	ec5b ab11 	vmov	sl, fp, d1
   b5648:	da71      	bge.n	b572e <__kernel_cos+0xfe>
   b564a:	ee10 0a10 	vmov	r0, s0
   b564e:	4639      	mov	r1, r7
   b5650:	f001 fb8e 	bl	b6d70 <__aeabi_d2iz>
   b5654:	2800      	cmp	r0, #0
   b5656:	f000 80f6 	beq.w	b5846 <__kernel_cos+0x216>
   b565a:	4632      	mov	r2, r6
   b565c:	463b      	mov	r3, r7
   b565e:	4630      	mov	r0, r6
   b5660:	4639      	mov	r1, r7
   b5662:	f001 f8eb 	bl	b683c <__aeabi_dmul>
   b5666:	a37c      	add	r3, pc, #496	; (adr r3, b5858 <__kernel_cos+0x228>)
   b5668:	e9d3 2300 	ldrd	r2, r3, [r3]
   b566c:	4604      	mov	r4, r0
   b566e:	460d      	mov	r5, r1
   b5670:	f001 f8e4 	bl	b683c <__aeabi_dmul>
   b5674:	a37a      	add	r3, pc, #488	; (adr r3, b5860 <__kernel_cos+0x230>)
   b5676:	e9d3 2300 	ldrd	r2, r3, [r3]
   b567a:	f000 ff29 	bl	b64d0 <__adddf3>
   b567e:	4622      	mov	r2, r4
   b5680:	462b      	mov	r3, r5
   b5682:	f001 f8db 	bl	b683c <__aeabi_dmul>
   b5686:	a378      	add	r3, pc, #480	; (adr r3, b5868 <__kernel_cos+0x238>)
   b5688:	e9d3 2300 	ldrd	r2, r3, [r3]
   b568c:	f000 ff1e 	bl	b64cc <__aeabi_dsub>
   b5690:	4622      	mov	r2, r4
   b5692:	462b      	mov	r3, r5
   b5694:	f001 f8d2 	bl	b683c <__aeabi_dmul>
   b5698:	a375      	add	r3, pc, #468	; (adr r3, b5870 <__kernel_cos+0x240>)
   b569a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b569e:	f000 ff17 	bl	b64d0 <__adddf3>
   b56a2:	4622      	mov	r2, r4
   b56a4:	462b      	mov	r3, r5
   b56a6:	f001 f8c9 	bl	b683c <__aeabi_dmul>
   b56aa:	a373      	add	r3, pc, #460	; (adr r3, b5878 <__kernel_cos+0x248>)
   b56ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56b0:	f000 ff0c 	bl	b64cc <__aeabi_dsub>
   b56b4:	4622      	mov	r2, r4
   b56b6:	462b      	mov	r3, r5
   b56b8:	f001 f8c0 	bl	b683c <__aeabi_dmul>
   b56bc:	a370      	add	r3, pc, #448	; (adr r3, b5880 <__kernel_cos+0x250>)
   b56be:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56c2:	f000 ff05 	bl	b64d0 <__adddf3>
   b56c6:	4622      	mov	r2, r4
   b56c8:	462b      	mov	r3, r5
   b56ca:	f001 f8b7 	bl	b683c <__aeabi_dmul>
   b56ce:	ec41 0b18 	vmov	d8, r0, r1
   b56d2:	4b71      	ldr	r3, [pc, #452]	; (b5898 <__kernel_cos+0x268>)
   b56d4:	2200      	movs	r2, #0
   b56d6:	4620      	mov	r0, r4
   b56d8:	4629      	mov	r1, r5
   b56da:	f001 f8af 	bl	b683c <__aeabi_dmul>
   b56de:	ec53 2b18 	vmov	r2, r3, d8
   b56e2:	4680      	mov	r8, r0
   b56e4:	4689      	mov	r9, r1
   b56e6:	4620      	mov	r0, r4
   b56e8:	4629      	mov	r1, r5
   b56ea:	f001 f8a7 	bl	b683c <__aeabi_dmul>
   b56ee:	4652      	mov	r2, sl
   b56f0:	465b      	mov	r3, fp
   b56f2:	4604      	mov	r4, r0
   b56f4:	460d      	mov	r5, r1
   b56f6:	4630      	mov	r0, r6
   b56f8:	4639      	mov	r1, r7
   b56fa:	f001 f89f 	bl	b683c <__aeabi_dmul>
   b56fe:	4602      	mov	r2, r0
   b5700:	460b      	mov	r3, r1
   b5702:	4620      	mov	r0, r4
   b5704:	4629      	mov	r1, r5
   b5706:	f000 fee1 	bl	b64cc <__aeabi_dsub>
   b570a:	4602      	mov	r2, r0
   b570c:	460b      	mov	r3, r1
   b570e:	4640      	mov	r0, r8
   b5710:	4649      	mov	r1, r9
   b5712:	f000 fedb 	bl	b64cc <__aeabi_dsub>
   b5716:	4602      	mov	r2, r0
   b5718:	460b      	mov	r3, r1
   b571a:	2000      	movs	r0, #0
   b571c:	495f      	ldr	r1, [pc, #380]	; (b589c <__kernel_cos+0x26c>)
   b571e:	f000 fed5 	bl	b64cc <__aeabi_dsub>
   b5722:	ecbd 8b04 	vpop	{d8-d9}
   b5726:	ec41 0b10 	vmov	d0, r0, r1
   b572a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b572e:	ee10 2a10 	vmov	r2, s0
   b5732:	ee10 0a10 	vmov	r0, s0
   b5736:	463b      	mov	r3, r7
   b5738:	4639      	mov	r1, r7
   b573a:	f001 f87f 	bl	b683c <__aeabi_dmul>
   b573e:	a346      	add	r3, pc, #280	; (adr r3, b5858 <__kernel_cos+0x228>)
   b5740:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5744:	4604      	mov	r4, r0
   b5746:	460d      	mov	r5, r1
   b5748:	f001 f878 	bl	b683c <__aeabi_dmul>
   b574c:	a344      	add	r3, pc, #272	; (adr r3, b5860 <__kernel_cos+0x230>)
   b574e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5752:	f000 febd 	bl	b64d0 <__adddf3>
   b5756:	4622      	mov	r2, r4
   b5758:	462b      	mov	r3, r5
   b575a:	f001 f86f 	bl	b683c <__aeabi_dmul>
   b575e:	a342      	add	r3, pc, #264	; (adr r3, b5868 <__kernel_cos+0x238>)
   b5760:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5764:	f000 feb2 	bl	b64cc <__aeabi_dsub>
   b5768:	4622      	mov	r2, r4
   b576a:	462b      	mov	r3, r5
   b576c:	f001 f866 	bl	b683c <__aeabi_dmul>
   b5770:	a33f      	add	r3, pc, #252	; (adr r3, b5870 <__kernel_cos+0x240>)
   b5772:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5776:	f000 feab 	bl	b64d0 <__adddf3>
   b577a:	4622      	mov	r2, r4
   b577c:	462b      	mov	r3, r5
   b577e:	f001 f85d 	bl	b683c <__aeabi_dmul>
   b5782:	a33d      	add	r3, pc, #244	; (adr r3, b5878 <__kernel_cos+0x248>)
   b5784:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5788:	f000 fea0 	bl	b64cc <__aeabi_dsub>
   b578c:	4622      	mov	r2, r4
   b578e:	462b      	mov	r3, r5
   b5790:	f001 f854 	bl	b683c <__aeabi_dmul>
   b5794:	a33a      	add	r3, pc, #232	; (adr r3, b5880 <__kernel_cos+0x250>)
   b5796:	e9d3 2300 	ldrd	r2, r3, [r3]
   b579a:	f000 fe99 	bl	b64d0 <__adddf3>
   b579e:	462b      	mov	r3, r5
   b57a0:	4622      	mov	r2, r4
   b57a2:	f001 f84b 	bl	b683c <__aeabi_dmul>
   b57a6:	4b3e      	ldr	r3, [pc, #248]	; (b58a0 <__kernel_cos+0x270>)
   b57a8:	4599      	cmp	r9, r3
   b57aa:	ec41 0b18 	vmov	d8, r0, r1
   b57ae:	dd90      	ble.n	b56d2 <__kernel_cos+0xa2>
   b57b0:	4b3c      	ldr	r3, [pc, #240]	; (b58a4 <__kernel_cos+0x274>)
   b57b2:	4599      	cmp	r9, r3
   b57b4:	dc3c      	bgt.n	b5830 <__kernel_cos+0x200>
   b57b6:	2200      	movs	r2, #0
   b57b8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   b57bc:	4937      	ldr	r1, [pc, #220]	; (b589c <__kernel_cos+0x26c>)
   b57be:	2000      	movs	r0, #0
   b57c0:	4690      	mov	r8, r2
   b57c2:	4699      	mov	r9, r3
   b57c4:	f000 fe82 	bl	b64cc <__aeabi_dsub>
   b57c8:	ec41 0b19 	vmov	d9, r0, r1
   b57cc:	4b32      	ldr	r3, [pc, #200]	; (b5898 <__kernel_cos+0x268>)
   b57ce:	2200      	movs	r2, #0
   b57d0:	4620      	mov	r0, r4
   b57d2:	4629      	mov	r1, r5
   b57d4:	f001 f832 	bl	b683c <__aeabi_dmul>
   b57d8:	4642      	mov	r2, r8
   b57da:	464b      	mov	r3, r9
   b57dc:	f000 fe76 	bl	b64cc <__aeabi_dsub>
   b57e0:	ec53 2b18 	vmov	r2, r3, d8
   b57e4:	4680      	mov	r8, r0
   b57e6:	4689      	mov	r9, r1
   b57e8:	4620      	mov	r0, r4
   b57ea:	4629      	mov	r1, r5
   b57ec:	f001 f826 	bl	b683c <__aeabi_dmul>
   b57f0:	4652      	mov	r2, sl
   b57f2:	465b      	mov	r3, fp
   b57f4:	4604      	mov	r4, r0
   b57f6:	460d      	mov	r5, r1
   b57f8:	4630      	mov	r0, r6
   b57fa:	4639      	mov	r1, r7
   b57fc:	f001 f81e 	bl	b683c <__aeabi_dmul>
   b5800:	4602      	mov	r2, r0
   b5802:	460b      	mov	r3, r1
   b5804:	4620      	mov	r0, r4
   b5806:	4629      	mov	r1, r5
   b5808:	f000 fe60 	bl	b64cc <__aeabi_dsub>
   b580c:	4602      	mov	r2, r0
   b580e:	460b      	mov	r3, r1
   b5810:	4640      	mov	r0, r8
   b5812:	4649      	mov	r1, r9
   b5814:	f000 fe5a 	bl	b64cc <__aeabi_dsub>
   b5818:	4602      	mov	r2, r0
   b581a:	460b      	mov	r3, r1
   b581c:	ec51 0b19 	vmov	r0, r1, d9
   b5820:	f000 fe54 	bl	b64cc <__aeabi_dsub>
   b5824:	ecbd 8b04 	vpop	{d8-d9}
   b5828:	ec41 0b10 	vmov	d0, r0, r1
   b582c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5830:	ed9f 7b15 	vldr	d7, [pc, #84]	; b5888 <__kernel_cos+0x258>
   b5834:	f8df 9070 	ldr.w	r9, [pc, #112]	; b58a8 <__kernel_cos+0x278>
   b5838:	eeb0 9a47 	vmov.f32	s18, s14
   b583c:	eef0 9a67 	vmov.f32	s19, s15
   b5840:	f04f 0800 	mov.w	r8, #0
   b5844:	e7c2      	b.n	b57cc <__kernel_cos+0x19c>
   b5846:	ecbd 8b04 	vpop	{d8-d9}
   b584a:	ed9f 0b11 	vldr	d0, [pc, #68]	; b5890 <__kernel_cos+0x260>
   b584e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5852:	bf00      	nop
   b5854:	f3af 8000 	nop.w
   b5858:	be8838d4 	.word	0xbe8838d4
   b585c:	bda8fae9 	.word	0xbda8fae9
   b5860:	bdb4b1c4 	.word	0xbdb4b1c4
   b5864:	3e21ee9e 	.word	0x3e21ee9e
   b5868:	809c52ad 	.word	0x809c52ad
   b586c:	3e927e4f 	.word	0x3e927e4f
   b5870:	19cb1590 	.word	0x19cb1590
   b5874:	3efa01a0 	.word	0x3efa01a0
   b5878:	16c15177 	.word	0x16c15177
   b587c:	3f56c16c 	.word	0x3f56c16c
   b5880:	5555554c 	.word	0x5555554c
   b5884:	3fa55555 	.word	0x3fa55555
   b5888:	00000000 	.word	0x00000000
   b588c:	3fe70000 	.word	0x3fe70000
   b5890:	00000000 	.word	0x00000000
   b5894:	3ff00000 	.word	0x3ff00000
   b5898:	3fe00000 	.word	0x3fe00000
   b589c:	3ff00000 	.word	0x3ff00000
   b58a0:	3fd33332 	.word	0x3fd33332
   b58a4:	3fe90000 	.word	0x3fe90000
   b58a8:	3fd20000 	.word	0x3fd20000
   b58ac:	00000000 	.word	0x00000000

000b58b0 <__kernel_rem_pio2>:
   b58b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58b4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   b58b8:	461c      	mov	r4, r3
   b58ba:	9308      	str	r3, [sp, #32]
   b58bc:	910b      	str	r1, [sp, #44]	; 0x2c
   b58be:	4bbb      	ldr	r3, [pc, #748]	; (b5bac <__kernel_rem_pio2+0x2fc>)
   b58c0:	99a2      	ldr	r1, [sp, #648]	; 0x288
   b58c2:	9004      	str	r0, [sp, #16]
   b58c4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   b58c8:	9105      	str	r1, [sp, #20]
   b58ca:	1e63      	subs	r3, r4, #1
   b58cc:	f112 0f14 	cmn.w	r2, #20
   b58d0:	9303      	str	r3, [sp, #12]
   b58d2:	f2c0 834b 	blt.w	b5f6c <__kernel_rem_pio2+0x6bc>
   b58d6:	49b6      	ldr	r1, [pc, #728]	; (b5bb0 <__kernel_rem_pio2+0x300>)
   b58d8:	1ed3      	subs	r3, r2, #3
   b58da:	fb81 0103 	smull	r0, r1, r1, r3
   b58de:	17db      	asrs	r3, r3, #31
   b58e0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   b58e4:	9307      	str	r3, [sp, #28]
   b58e6:	3301      	adds	r3, #1
   b58e8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b58ec:	00db      	lsls	r3, r3, #3
   b58ee:	18d3      	adds	r3, r2, r3
   b58f0:	9306      	str	r3, [sp, #24]
   b58f2:	9a07      	ldr	r2, [sp, #28]
   b58f4:	9b03      	ldr	r3, [sp, #12]
   b58f6:	1ad4      	subs	r4, r2, r3
   b58f8:	9a05      	ldr	r2, [sp, #20]
   b58fa:	18d6      	adds	r6, r2, r3
   b58fc:	d41a      	bmi.n	b5934 <__kernel_rem_pio2+0x84>
   b58fe:	3601      	adds	r6, #1
   b5900:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   b5902:	4426      	add	r6, r4
   b5904:	ad20      	add	r5, sp, #128	; 0x80
   b5906:	f04f 0800 	mov.w	r8, #0
   b590a:	f04f 0900 	mov.w	r9, #0
   b590e:	e008      	b.n	b5922 <__kernel_rem_pio2+0x72>
   b5910:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b5914:	f000 ff28 	bl	b6768 <__aeabi_i2d>
   b5918:	3401      	adds	r4, #1
   b591a:	42b4      	cmp	r4, r6
   b591c:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5920:	d008      	beq.n	b5934 <__kernel_rem_pio2+0x84>
   b5922:	2c00      	cmp	r4, #0
   b5924:	daf4      	bge.n	b5910 <__kernel_rem_pio2+0x60>
   b5926:	3401      	adds	r4, #1
   b5928:	4640      	mov	r0, r8
   b592a:	4649      	mov	r1, r9
   b592c:	42b4      	cmp	r4, r6
   b592e:	e8e5 0102 	strd	r0, r1, [r5], #8
   b5932:	d1f6      	bne.n	b5922 <__kernel_rem_pio2+0x72>
   b5934:	9b05      	ldr	r3, [sp, #20]
   b5936:	2b00      	cmp	r3, #0
   b5938:	f2c0 83c8 	blt.w	b60cc <__kernel_rem_pio2+0x81c>
   b593c:	9b08      	ldr	r3, [sp, #32]
   b593e:	f8dd 900c 	ldr.w	r9, [sp, #12]
   b5942:	00da      	lsls	r2, r3, #3
   b5944:	9202      	str	r2, [sp, #8]
   b5946:	9a05      	ldr	r2, [sp, #20]
   b5948:	441a      	add	r2, r3
   b594a:	9201      	str	r2, [sp, #4]
   b594c:	9a04      	ldr	r2, [sp, #16]
   b594e:	a920      	add	r1, sp, #128	; 0x80
   b5950:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   b5954:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   b5958:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   b595c:	9b03      	ldr	r3, [sp, #12]
   b595e:	2b00      	cmp	r3, #0
   b5960:	f2c0 81a9 	blt.w	b5cb6 <__kernel_rem_pio2+0x406>
   b5964:	9e04      	ldr	r6, [sp, #16]
   b5966:	4657      	mov	r7, sl
   b5968:	2400      	movs	r4, #0
   b596a:	2500      	movs	r5, #0
   b596c:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b5970:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b5974:	f000 ff62 	bl	b683c <__aeabi_dmul>
   b5978:	4602      	mov	r2, r0
   b597a:	460b      	mov	r3, r1
   b597c:	4620      	mov	r0, r4
   b597e:	4629      	mov	r1, r5
   b5980:	f000 fda6 	bl	b64d0 <__adddf3>
   b5984:	4546      	cmp	r6, r8
   b5986:	4604      	mov	r4, r0
   b5988:	460d      	mov	r5, r1
   b598a:	d1ef      	bne.n	b596c <__kernel_rem_pio2+0xbc>
   b598c:	9b01      	ldr	r3, [sp, #4]
   b598e:	f109 0901 	add.w	r9, r9, #1
   b5992:	4599      	cmp	r9, r3
   b5994:	e8eb 4502 	strd	r4, r5, [fp], #8
   b5998:	f10a 0a08 	add.w	sl, sl, #8
   b599c:	d1de      	bne.n	b595c <__kernel_rem_pio2+0xac>
   b599e:	9a04      	ldr	r2, [sp, #16]
   b59a0:	9b02      	ldr	r3, [sp, #8]
   b59a2:	4413      	add	r3, r2
   b59a4:	469b      	mov	fp, r3
   b59a6:	9b05      	ldr	r3, [sp, #20]
   b59a8:	a90b      	add	r1, sp, #44	; 0x2c
   b59aa:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   b59ae:	a90c      	add	r1, sp, #48	; 0x30
   b59b0:	920a      	str	r2, [sp, #40]	; 0x28
   b59b2:	461a      	mov	r2, r3
   b59b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b59b8:	3b08      	subs	r3, #8
   b59ba:	9309      	str	r3, [sp, #36]	; 0x24
   b59bc:	9201      	str	r2, [sp, #4]
   b59be:	9a01      	ldr	r2, [sp, #4]
   b59c0:	a998      	add	r1, sp, #608	; 0x260
   b59c2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   b59c6:	2a00      	cmp	r2, #0
   b59c8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   b59cc:	dd29      	ble.n	b5a22 <__kernel_rem_pio2+0x172>
   b59ce:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   b59d2:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   b59d6:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   b59da:	4b76      	ldr	r3, [pc, #472]	; (b5bb4 <__kernel_rem_pio2+0x304>)
   b59dc:	2200      	movs	r2, #0
   b59de:	4620      	mov	r0, r4
   b59e0:	4629      	mov	r1, r5
   b59e2:	f000 ff2b 	bl	b683c <__aeabi_dmul>
   b59e6:	f001 f9c3 	bl	b6d70 <__aeabi_d2iz>
   b59ea:	f000 febd 	bl	b6768 <__aeabi_i2d>
   b59ee:	4b72      	ldr	r3, [pc, #456]	; (b5bb8 <__kernel_rem_pio2+0x308>)
   b59f0:	2200      	movs	r2, #0
   b59f2:	4606      	mov	r6, r0
   b59f4:	460f      	mov	r7, r1
   b59f6:	f000 ff21 	bl	b683c <__aeabi_dmul>
   b59fa:	4602      	mov	r2, r0
   b59fc:	460b      	mov	r3, r1
   b59fe:	4620      	mov	r0, r4
   b5a00:	4629      	mov	r1, r5
   b5a02:	f000 fd63 	bl	b64cc <__aeabi_dsub>
   b5a06:	f001 f9b3 	bl	b6d70 <__aeabi_d2iz>
   b5a0a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   b5a0e:	f849 0b04 	str.w	r0, [r9], #4
   b5a12:	4639      	mov	r1, r7
   b5a14:	4630      	mov	r0, r6
   b5a16:	f000 fd5b 	bl	b64d0 <__adddf3>
   b5a1a:	45d0      	cmp	r8, sl
   b5a1c:	4604      	mov	r4, r0
   b5a1e:	460d      	mov	r5, r1
   b5a20:	d1db      	bne.n	b59da <__kernel_rem_pio2+0x12a>
   b5a22:	f8dd 9018 	ldr.w	r9, [sp, #24]
   b5a26:	ec45 4b10 	vmov	d0, r4, r5
   b5a2a:	4648      	mov	r0, r9
   b5a2c:	f000 fcb8 	bl	b63a0 <scalbn>
   b5a30:	ec55 4b10 	vmov	r4, r5, d0
   b5a34:	2200      	movs	r2, #0
   b5a36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   b5a3a:	ee10 0a10 	vmov	r0, s0
   b5a3e:	4629      	mov	r1, r5
   b5a40:	f000 fefc 	bl	b683c <__aeabi_dmul>
   b5a44:	ec41 0b10 	vmov	d0, r0, r1
   b5a48:	f000 fc26 	bl	b6298 <floor>
   b5a4c:	4b5b      	ldr	r3, [pc, #364]	; (b5bbc <__kernel_rem_pio2+0x30c>)
   b5a4e:	ec51 0b10 	vmov	r0, r1, d0
   b5a52:	2200      	movs	r2, #0
   b5a54:	f000 fef2 	bl	b683c <__aeabi_dmul>
   b5a58:	4602      	mov	r2, r0
   b5a5a:	460b      	mov	r3, r1
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	4629      	mov	r1, r5
   b5a60:	f000 fd34 	bl	b64cc <__aeabi_dsub>
   b5a64:	460d      	mov	r5, r1
   b5a66:	4604      	mov	r4, r0
   b5a68:	f001 f982 	bl	b6d70 <__aeabi_d2iz>
   b5a6c:	4680      	mov	r8, r0
   b5a6e:	f000 fe7b 	bl	b6768 <__aeabi_i2d>
   b5a72:	460b      	mov	r3, r1
   b5a74:	4602      	mov	r2, r0
   b5a76:	4629      	mov	r1, r5
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f000 fd27 	bl	b64cc <__aeabi_dsub>
   b5a7e:	464b      	mov	r3, r9
   b5a80:	2b00      	cmp	r3, #0
   b5a82:	4606      	mov	r6, r0
   b5a84:	460f      	mov	r7, r1
   b5a86:	f340 809b 	ble.w	b5bc0 <__kernel_rem_pio2+0x310>
   b5a8a:	9a01      	ldr	r2, [sp, #4]
   b5a8c:	1e51      	subs	r1, r2, #1
   b5a8e:	aa0c      	add	r2, sp, #48	; 0x30
   b5a90:	f1c9 0318 	rsb	r3, r9, #24
   b5a94:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b5a98:	fa42 f003 	asr.w	r0, r2, r3
   b5a9c:	fa00 f303 	lsl.w	r3, r0, r3
   b5aa0:	1ad3      	subs	r3, r2, r3
   b5aa2:	f1c9 0517 	rsb	r5, r9, #23
   b5aa6:	aa0c      	add	r2, sp, #48	; 0x30
   b5aa8:	fa43 f505 	asr.w	r5, r3, r5
   b5aac:	2d00      	cmp	r5, #0
   b5aae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   b5ab2:	4480      	add	r8, r0
   b5ab4:	f300 808e 	bgt.w	b5bd4 <__kernel_rem_pio2+0x324>
   b5ab8:	2200      	movs	r2, #0
   b5aba:	2300      	movs	r3, #0
   b5abc:	4630      	mov	r0, r6
   b5abe:	4639      	mov	r1, r7
   b5ac0:	f001 f924 	bl	b6d0c <__aeabi_dcmpeq>
   b5ac4:	2800      	cmp	r0, #0
   b5ac6:	f000 8258 	beq.w	b5f7a <__kernel_rem_pio2+0x6ca>
   b5aca:	9b01      	ldr	r3, [sp, #4]
   b5acc:	9a05      	ldr	r2, [sp, #20]
   b5ace:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   b5ad2:	4552      	cmp	r2, sl
   b5ad4:	dc10      	bgt.n	b5af8 <__kernel_rem_pio2+0x248>
   b5ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b5ada:	aa0c      	add	r2, sp, #48	; 0x30
   b5adc:	3b01      	subs	r3, #1
   b5ade:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5ae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b5ae4:	2200      	movs	r2, #0
   b5ae6:	f853 1904 	ldr.w	r1, [r3], #-4
   b5aea:	4283      	cmp	r3, r0
   b5aec:	ea42 0201 	orr.w	r2, r2, r1
   b5af0:	d1f9      	bne.n	b5ae6 <__kernel_rem_pio2+0x236>
   b5af2:	2a00      	cmp	r2, #0
   b5af4:	f040 80e2 	bne.w	b5cbc <__kernel_rem_pio2+0x40c>
   b5af8:	9b05      	ldr	r3, [sp, #20]
   b5afa:	aa0c      	add	r2, sp, #48	; 0x30
   b5afc:	3b01      	subs	r3, #1
   b5afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   b5b02:	2b00      	cmp	r3, #0
   b5b04:	f040 80d2 	bne.w	b5cac <__kernel_rem_pio2+0x3fc>
   b5b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5b0a:	2301      	movs	r3, #1
   b5b0c:	f852 1904 	ldr.w	r1, [r2], #-4
   b5b10:	3301      	adds	r3, #1
   b5b12:	2900      	cmp	r1, #0
   b5b14:	d0fa      	beq.n	b5b0c <__kernel_rem_pio2+0x25c>
   b5b16:	9a01      	ldr	r2, [sp, #4]
   b5b18:	18d3      	adds	r3, r2, r3
   b5b1a:	9302      	str	r3, [sp, #8]
   b5b1c:	1c53      	adds	r3, r2, #1
   b5b1e:	4699      	mov	r9, r3
   b5b20:	9a01      	ldr	r2, [sp, #4]
   b5b22:	9908      	ldr	r1, [sp, #32]
   b5b24:	440a      	add	r2, r1
   b5b26:	4690      	mov	r8, r2
   b5b28:	9a07      	ldr	r2, [sp, #28]
   b5b2a:	eb02 0a03 	add.w	sl, r2, r3
   b5b2e:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   b5b32:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   b5b34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b5b38:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   b5b3c:	aa20      	add	r2, sp, #128	; 0x80
   b5b3e:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   b5b42:	aa70      	add	r2, sp, #448	; 0x1c0
   b5b44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   b5b4e:	f000 fe0b 	bl	b6768 <__aeabi_i2d>
   b5b52:	460b      	mov	r3, r1
   b5b54:	9903      	ldr	r1, [sp, #12]
   b5b56:	4602      	mov	r2, r0
   b5b58:	2900      	cmp	r1, #0
   b5b5a:	e9c8 2300 	strd	r2, r3, [r8]
   b5b5e:	4647      	mov	r7, r8
   b5b60:	f108 0808 	add.w	r8, r8, #8
   b5b64:	db1e      	blt.n	b5ba4 <__kernel_rem_pio2+0x2f4>
   b5b66:	9e04      	ldr	r6, [sp, #16]
   b5b68:	2400      	movs	r4, #0
   b5b6a:	2500      	movs	r5, #0
   b5b6c:	e001      	b.n	b5b72 <__kernel_rem_pio2+0x2c2>
   b5b6e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   b5b72:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   b5b76:	f000 fe61 	bl	b683c <__aeabi_dmul>
   b5b7a:	4602      	mov	r2, r0
   b5b7c:	460b      	mov	r3, r1
   b5b7e:	4620      	mov	r0, r4
   b5b80:	4629      	mov	r1, r5
   b5b82:	f000 fca5 	bl	b64d0 <__adddf3>
   b5b86:	455e      	cmp	r6, fp
   b5b88:	4604      	mov	r4, r0
   b5b8a:	460d      	mov	r5, r1
   b5b8c:	d1ef      	bne.n	b5b6e <__kernel_rem_pio2+0x2be>
   b5b8e:	9b01      	ldr	r3, [sp, #4]
   b5b90:	e8e3 4502 	strd	r4, r5, [r3], #8
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	9b02      	ldr	r3, [sp, #8]
   b5b98:	f109 0901 	add.w	r9, r9, #1
   b5b9c:	4599      	cmp	r9, r3
   b5b9e:	ddd4      	ble.n	b5b4a <__kernel_rem_pio2+0x29a>
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	e70c      	b.n	b59be <__kernel_rem_pio2+0x10e>
   b5ba4:	2400      	movs	r4, #0
   b5ba6:	2500      	movs	r5, #0
   b5ba8:	e7f1      	b.n	b5b8e <__kernel_rem_pio2+0x2de>
   b5baa:	bf00      	nop
   b5bac:	000b7348 	.word	0x000b7348
   b5bb0:	2aaaaaab 	.word	0x2aaaaaab
   b5bb4:	3e700000 	.word	0x3e700000
   b5bb8:	41700000 	.word	0x41700000
   b5bbc:	40200000 	.word	0x40200000
   b5bc0:	d16b      	bne.n	b5c9a <__kernel_rem_pio2+0x3ea>
   b5bc2:	9b01      	ldr	r3, [sp, #4]
   b5bc4:	aa0c      	add	r2, sp, #48	; 0x30
   b5bc6:	3b01      	subs	r3, #1
   b5bc8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   b5bcc:	15ed      	asrs	r5, r5, #23
   b5bce:	2d00      	cmp	r5, #0
   b5bd0:	f77f af72 	ble.w	b5ab8 <__kernel_rem_pio2+0x208>
   b5bd4:	9b01      	ldr	r3, [sp, #4]
   b5bd6:	2b00      	cmp	r3, #0
   b5bd8:	f108 0801 	add.w	r8, r8, #1
   b5bdc:	f340 81cb 	ble.w	b5f76 <__kernel_rem_pio2+0x6c6>
   b5be0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5be2:	2c00      	cmp	r4, #0
   b5be4:	d151      	bne.n	b5c8a <__kernel_rem_pio2+0x3da>
   b5be6:	9b01      	ldr	r3, [sp, #4]
   b5be8:	2b01      	cmp	r3, #1
   b5bea:	d020      	beq.n	b5c2e <__kernel_rem_pio2+0x37e>
   b5bec:	ab0c      	add	r3, sp, #48	; 0x30
   b5bee:	2201      	movs	r2, #1
   b5bf0:	f853 4f04 	ldr.w	r4, [r3, #4]!
   b5bf4:	2c00      	cmp	r4, #0
   b5bf6:	d04b      	beq.n	b5c90 <__kernel_rem_pio2+0x3e0>
   b5bf8:	1c53      	adds	r3, r2, #1
   b5bfa:	a90c      	add	r1, sp, #48	; 0x30
   b5bfc:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   b5c00:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   b5c04:	9901      	ldr	r1, [sp, #4]
   b5c06:	4299      	cmp	r1, r3
   b5c08:	dd10      	ble.n	b5c2c <__kernel_rem_pio2+0x37c>
   b5c0a:	aa0c      	add	r2, sp, #48	; 0x30
   b5c0c:	a80c      	add	r0, sp, #48	; 0x30
   b5c0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5c12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   b5c16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   b5c1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5c1e:	e000      	b.n	b5c22 <__kernel_rem_pio2+0x372>
   b5c20:	681a      	ldr	r2, [r3, #0]
   b5c22:	1a8a      	subs	r2, r1, r2
   b5c24:	f843 2b04 	str.w	r2, [r3], #4
   b5c28:	4283      	cmp	r3, r0
   b5c2a:	d1f9      	bne.n	b5c20 <__kernel_rem_pio2+0x370>
   b5c2c:	2401      	movs	r4, #1
   b5c2e:	9b06      	ldr	r3, [sp, #24]
   b5c30:	2b00      	cmp	r3, #0
   b5c32:	dd0e      	ble.n	b5c52 <__kernel_rem_pio2+0x3a2>
   b5c34:	2b01      	cmp	r3, #1
   b5c36:	f000 816c 	beq.w	b5f12 <__kernel_rem_pio2+0x662>
   b5c3a:	2b02      	cmp	r3, #2
   b5c3c:	d109      	bne.n	b5c52 <__kernel_rem_pio2+0x3a2>
   b5c3e:	9b01      	ldr	r3, [sp, #4]
   b5c40:	1e5a      	subs	r2, r3, #1
   b5c42:	ab0c      	add	r3, sp, #48	; 0x30
   b5c44:	a90c      	add	r1, sp, #48	; 0x30
   b5c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b5c4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
   b5c4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b5c52:	2d02      	cmp	r5, #2
   b5c54:	f47f af30 	bne.w	b5ab8 <__kernel_rem_pio2+0x208>
   b5c58:	4632      	mov	r2, r6
   b5c5a:	463b      	mov	r3, r7
   b5c5c:	49b6      	ldr	r1, [pc, #728]	; (b5f38 <__kernel_rem_pio2+0x688>)
   b5c5e:	2000      	movs	r0, #0
   b5c60:	f000 fc34 	bl	b64cc <__aeabi_dsub>
   b5c64:	4606      	mov	r6, r0
   b5c66:	460f      	mov	r7, r1
   b5c68:	2c00      	cmp	r4, #0
   b5c6a:	f43f af25 	beq.w	b5ab8 <__kernel_rem_pio2+0x208>
   b5c6e:	9806      	ldr	r0, [sp, #24]
   b5c70:	ed9f 0bad 	vldr	d0, [pc, #692]	; b5f28 <__kernel_rem_pio2+0x678>
   b5c74:	f000 fb94 	bl	b63a0 <scalbn>
   b5c78:	4630      	mov	r0, r6
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	ec53 2b10 	vmov	r2, r3, d0
   b5c80:	f000 fc24 	bl	b64cc <__aeabi_dsub>
   b5c84:	4606      	mov	r6, r0
   b5c86:	460f      	mov	r7, r1
   b5c88:	e716      	b.n	b5ab8 <__kernel_rem_pio2+0x208>
   b5c8a:	2301      	movs	r3, #1
   b5c8c:	2200      	movs	r2, #0
   b5c8e:	e7b4      	b.n	b5bfa <__kernel_rem_pio2+0x34a>
   b5c90:	9901      	ldr	r1, [sp, #4]
   b5c92:	3201      	adds	r2, #1
   b5c94:	428a      	cmp	r2, r1
   b5c96:	d1ab      	bne.n	b5bf0 <__kernel_rem_pio2+0x340>
   b5c98:	e7c9      	b.n	b5c2e <__kernel_rem_pio2+0x37e>
   b5c9a:	4ba8      	ldr	r3, [pc, #672]	; (b5f3c <__kernel_rem_pio2+0x68c>)
   b5c9c:	2200      	movs	r2, #0
   b5c9e:	f001 f853 	bl	b6d48 <__aeabi_dcmpge>
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	f040 8150 	bne.w	b5f48 <__kernel_rem_pio2+0x698>
   b5ca8:	4605      	mov	r5, r0
   b5caa:	e705      	b.n	b5ab8 <__kernel_rem_pio2+0x208>
   b5cac:	9b01      	ldr	r3, [sp, #4]
   b5cae:	3301      	adds	r3, #1
   b5cb0:	4699      	mov	r9, r3
   b5cb2:	9302      	str	r3, [sp, #8]
   b5cb4:	e734      	b.n	b5b20 <__kernel_rem_pio2+0x270>
   b5cb6:	2400      	movs	r4, #0
   b5cb8:	2500      	movs	r5, #0
   b5cba:	e667      	b.n	b598c <__kernel_rem_pio2+0xdc>
   b5cbc:	9b06      	ldr	r3, [sp, #24]
   b5cbe:	9503      	str	r5, [sp, #12]
   b5cc0:	f1a3 0218 	sub.w	r2, r3, #24
   b5cc4:	ab0c      	add	r3, sp, #48	; 0x30
   b5cc6:	f8cd 801c 	str.w	r8, [sp, #28]
   b5cca:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   b5cce:	9206      	str	r2, [sp, #24]
   b5cd0:	b973      	cbnz	r3, b5cf0 <__kernel_rem_pio2+0x440>
   b5cd2:	9b01      	ldr	r3, [sp, #4]
   b5cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   b5cd8:	3b02      	subs	r3, #2
   b5cda:	a90c      	add	r1, sp, #48	; 0x30
   b5cdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b5ce0:	f853 1904 	ldr.w	r1, [r3], #-4
   b5ce4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b5ce8:	3a18      	subs	r2, #24
   b5cea:	2900      	cmp	r1, #0
   b5cec:	d0f8      	beq.n	b5ce0 <__kernel_rem_pio2+0x430>
   b5cee:	9206      	str	r2, [sp, #24]
   b5cf0:	ed9f 0b8d 	vldr	d0, [pc, #564]	; b5f28 <__kernel_rem_pio2+0x678>
   b5cf4:	9806      	ldr	r0, [sp, #24]
   b5cf6:	f000 fb53 	bl	b63a0 <scalbn>
   b5cfa:	f1ba 0f00 	cmp.w	sl, #0
   b5cfe:	ec55 4b10 	vmov	r4, r5, d0
   b5d02:	f2c0 81d9 	blt.w	b60b8 <__kernel_rem_pio2+0x808>
   b5d06:	ab70      	add	r3, sp, #448	; 0x1c0
   b5d08:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   b5d0c:	aa0c      	add	r2, sp, #48	; 0x30
   b5d0e:	f10a 0301 	add.w	r3, sl, #1
   b5d12:	9306      	str	r3, [sp, #24]
   b5d14:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   b5d18:	f8df 9224 	ldr.w	r9, [pc, #548]	; b5f40 <__kernel_rem_pio2+0x690>
   b5d1c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   b5d20:	9304      	str	r3, [sp, #16]
   b5d22:	f10b 0708 	add.w	r7, fp, #8
   b5d26:	f04f 0800 	mov.w	r8, #0
   b5d2a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   b5d2e:	f000 fd1b 	bl	b6768 <__aeabi_i2d>
   b5d32:	4622      	mov	r2, r4
   b5d34:	462b      	mov	r3, r5
   b5d36:	f000 fd81 	bl	b683c <__aeabi_dmul>
   b5d3a:	464b      	mov	r3, r9
   b5d3c:	e967 0102 	strd	r0, r1, [r7, #-8]!
   b5d40:	4642      	mov	r2, r8
   b5d42:	4620      	mov	r0, r4
   b5d44:	4629      	mov	r1, r5
   b5d46:	f000 fd79 	bl	b683c <__aeabi_dmul>
   b5d4a:	ab0c      	add	r3, sp, #48	; 0x30
   b5d4c:	429e      	cmp	r6, r3
   b5d4e:	4604      	mov	r4, r0
   b5d50:	460d      	mov	r5, r1
   b5d52:	d1ea      	bne.n	b5d2a <__kernel_rem_pio2+0x47a>
   b5d54:	ab48      	add	r3, sp, #288	; 0x120
   b5d56:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   b5d5a:	f8dd a014 	ldr.w	sl, [sp, #20]
   b5d5e:	f1ba 0f00 	cmp.w	sl, #0
   b5d62:	f04f 0900 	mov.w	r9, #0
   b5d66:	db2c      	blt.n	b5dc2 <__kernel_rem_pio2+0x512>
   b5d68:	a371      	add	r3, pc, #452	; (adr r3, b5f30 <__kernel_rem_pio2+0x680>)
   b5d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d6e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b5f44 <__kernel_rem_pio2+0x694>
   b5d72:	465f      	mov	r7, fp
   b5d74:	2600      	movs	r6, #0
   b5d76:	2400      	movs	r4, #0
   b5d78:	2500      	movs	r5, #0
   b5d7a:	e003      	b.n	b5d84 <__kernel_rem_pio2+0x4d4>
   b5d7c:	45b1      	cmp	r9, r6
   b5d7e:	db10      	blt.n	b5da2 <__kernel_rem_pio2+0x4f2>
   b5d80:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   b5d84:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   b5d88:	f000 fd58 	bl	b683c <__aeabi_dmul>
   b5d8c:	4602      	mov	r2, r0
   b5d8e:	460b      	mov	r3, r1
   b5d90:	4620      	mov	r0, r4
   b5d92:	4629      	mov	r1, r5
   b5d94:	f000 fb9c 	bl	b64d0 <__adddf3>
   b5d98:	3601      	adds	r6, #1
   b5d9a:	45b2      	cmp	sl, r6
   b5d9c:	4604      	mov	r4, r0
   b5d9e:	460d      	mov	r5, r1
   b5da0:	daec      	bge.n	b5d7c <__kernel_rem_pio2+0x4cc>
   b5da2:	9b01      	ldr	r3, [sp, #4]
   b5da4:	9a02      	ldr	r2, [sp, #8]
   b5da6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   b5daa:	454a      	cmp	r2, r9
   b5dac:	e9c3 4500 	strd	r4, r5, [r3]
   b5db0:	f1ab 0b08 	sub.w	fp, fp, #8
   b5db4:	f109 0301 	add.w	r3, r9, #1
   b5db8:	d006      	beq.n	b5dc8 <__kernel_rem_pio2+0x518>
   b5dba:	f1ba 0f00 	cmp.w	sl, #0
   b5dbe:	4699      	mov	r9, r3
   b5dc0:	dad2      	bge.n	b5d68 <__kernel_rem_pio2+0x4b8>
   b5dc2:	2400      	movs	r4, #0
   b5dc4:	2500      	movs	r5, #0
   b5dc6:	e7ec      	b.n	b5da2 <__kernel_rem_pio2+0x4f2>
   b5dc8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5dca:	f8dd a008 	ldr.w	sl, [sp, #8]
   b5dce:	2b02      	cmp	r3, #2
   b5dd0:	dc1e      	bgt.n	b5e10 <__kernel_rem_pio2+0x560>
   b5dd2:	2b00      	cmp	r3, #0
   b5dd4:	f300 8107 	bgt.w	b5fe6 <__kernel_rem_pio2+0x736>
   b5dd8:	d113      	bne.n	b5e02 <__kernel_rem_pio2+0x552>
   b5dda:	9c04      	ldr	r4, [sp, #16]
   b5ddc:	9d01      	ldr	r5, [sp, #4]
   b5dde:	3408      	adds	r4, #8
   b5de0:	442c      	add	r4, r5
   b5de2:	2000      	movs	r0, #0
   b5de4:	2100      	movs	r1, #0
   b5de6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5dea:	f000 fb71 	bl	b64d0 <__adddf3>
   b5dee:	42a5      	cmp	r5, r4
   b5df0:	d1f9      	bne.n	b5de6 <__kernel_rem_pio2+0x536>
   b5df2:	9b03      	ldr	r3, [sp, #12]
   b5df4:	b113      	cbz	r3, b5dfc <__kernel_rem_pio2+0x54c>
   b5df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b5dfa:	4619      	mov	r1, r3
   b5dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5dfe:	e9c3 0100 	strd	r0, r1, [r3]
   b5e02:	9b07      	ldr	r3, [sp, #28]
   b5e04:	f003 0007 	and.w	r0, r3, #7
   b5e08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b5e12:	2b03      	cmp	r3, #3
   b5e14:	d1f5      	bne.n	b5e02 <__kernel_rem_pio2+0x552>
   b5e16:	f1ba 0f00 	cmp.w	sl, #0
   b5e1a:	f000 8169 	beq.w	b60f0 <__kernel_rem_pio2+0x840>
   b5e1e:	9a01      	ldr	r2, [sp, #4]
   b5e20:	9b04      	ldr	r3, [sp, #16]
   b5e22:	18d3      	adds	r3, r2, r3
   b5e24:	e9d3 4500 	ldrd	r4, r5, [r3]
   b5e28:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   b5e2c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   b5e30:	4620      	mov	r0, r4
   b5e32:	4629      	mov	r1, r5
   b5e34:	4632      	mov	r2, r6
   b5e36:	463b      	mov	r3, r7
   b5e38:	f000 fb4a 	bl	b64d0 <__adddf3>
   b5e3c:	46a0      	mov	r8, r4
   b5e3e:	46a9      	mov	r9, r5
   b5e40:	4604      	mov	r4, r0
   b5e42:	460d      	mov	r5, r1
   b5e44:	4622      	mov	r2, r4
   b5e46:	462b      	mov	r3, r5
   b5e48:	4630      	mov	r0, r6
   b5e4a:	4639      	mov	r1, r7
   b5e4c:	f000 fb3e 	bl	b64cc <__aeabi_dsub>
   b5e50:	464b      	mov	r3, r9
   b5e52:	4642      	mov	r2, r8
   b5e54:	f000 fb3c 	bl	b64d0 <__adddf3>
   b5e58:	9b01      	ldr	r3, [sp, #4]
   b5e5a:	455b      	cmp	r3, fp
   b5e5c:	e9cb 0102 	strd	r0, r1, [fp, #8]
   b5e60:	e9cb 4500 	strd	r4, r5, [fp]
   b5e64:	d1e2      	bne.n	b5e2c <__kernel_rem_pio2+0x57c>
   b5e66:	f1ba 0f01 	cmp.w	sl, #1
   b5e6a:	f340 8141 	ble.w	b60f0 <__kernel_rem_pio2+0x840>
   b5e6e:	9a01      	ldr	r2, [sp, #4]
   b5e70:	9b04      	ldr	r3, [sp, #16]
   b5e72:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   b5e76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b5e7a:	4413      	add	r3, r2
   b5e7c:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   b5e80:	e9d3 4500 	ldrd	r4, r5, [r3]
   b5e84:	f101 0a08 	add.w	sl, r1, #8
   b5e88:	9102      	str	r1, [sp, #8]
   b5e8a:	4492      	add	sl, r2
   b5e8c:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   b5e90:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   b5e94:	4620      	mov	r0, r4
   b5e96:	4629      	mov	r1, r5
   b5e98:	4632      	mov	r2, r6
   b5e9a:	463b      	mov	r3, r7
   b5e9c:	f000 fb18 	bl	b64d0 <__adddf3>
   b5ea0:	46a0      	mov	r8, r4
   b5ea2:	46a9      	mov	r9, r5
   b5ea4:	4604      	mov	r4, r0
   b5ea6:	460d      	mov	r5, r1
   b5ea8:	4622      	mov	r2, r4
   b5eaa:	462b      	mov	r3, r5
   b5eac:	4630      	mov	r0, r6
   b5eae:	4639      	mov	r1, r7
   b5eb0:	f000 fb0c 	bl	b64cc <__aeabi_dsub>
   b5eb4:	4642      	mov	r2, r8
   b5eb6:	464b      	mov	r3, r9
   b5eb8:	f000 fb0a 	bl	b64d0 <__adddf3>
   b5ebc:	45d3      	cmp	fp, sl
   b5ebe:	e9ca 0102 	strd	r0, r1, [sl, #8]
   b5ec2:	e9ca 4500 	strd	r4, r5, [sl]
   b5ec6:	d1e3      	bne.n	b5e90 <__kernel_rem_pio2+0x5e0>
   b5ec8:	9c02      	ldr	r4, [sp, #8]
   b5eca:	9b01      	ldr	r3, [sp, #4]
   b5ecc:	3410      	adds	r4, #16
   b5ece:	441c      	add	r4, r3
   b5ed0:	f103 0510 	add.w	r5, r3, #16
   b5ed4:	2000      	movs	r0, #0
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5edc:	f000 faf8 	bl	b64d0 <__adddf3>
   b5ee0:	42a5      	cmp	r5, r4
   b5ee2:	d1f9      	bne.n	b5ed8 <__kernel_rem_pio2+0x628>
   b5ee4:	9b03      	ldr	r3, [sp, #12]
   b5ee6:	2b00      	cmp	r3, #0
   b5ee8:	f040 80bb 	bne.w	b6062 <__kernel_rem_pio2+0x7b2>
   b5eec:	9d01      	ldr	r5, [sp, #4]
   b5eee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   b5ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
   b5ef4:	e9c4 2300 	strd	r2, r3, [r4]
   b5ef8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   b5efc:	e9c4 2302 	strd	r2, r3, [r4, #8]
   b5f00:	9b07      	ldr	r3, [sp, #28]
   b5f02:	e9c4 0104 	strd	r0, r1, [r4, #16]
   b5f06:	f003 0007 	and.w	r0, r3, #7
   b5f0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b5f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f12:	9b01      	ldr	r3, [sp, #4]
   b5f14:	1e5a      	subs	r2, r3, #1
   b5f16:	ab0c      	add	r3, sp, #48	; 0x30
   b5f18:	a90c      	add	r1, sp, #48	; 0x30
   b5f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b5f1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   b5f22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   b5f26:	e694      	b.n	b5c52 <__kernel_rem_pio2+0x3a2>
   b5f28:	00000000 	.word	0x00000000
   b5f2c:	3ff00000 	.word	0x3ff00000
   b5f30:	40000000 	.word	0x40000000
   b5f34:	3ff921fb 	.word	0x3ff921fb
   b5f38:	3ff00000 	.word	0x3ff00000
   b5f3c:	3fe00000 	.word	0x3fe00000
   b5f40:	3e700000 	.word	0x3e700000
   b5f44:	000b7310 	.word	0x000b7310
   b5f48:	9b01      	ldr	r3, [sp, #4]
   b5f4a:	2b00      	cmp	r3, #0
   b5f4c:	f108 0801 	add.w	r8, r8, #1
   b5f50:	bfc8      	it	gt
   b5f52:	2502      	movgt	r5, #2
   b5f54:	f73f ae44 	bgt.w	b5be0 <__kernel_rem_pio2+0x330>
   b5f58:	4632      	mov	r2, r6
   b5f5a:	463b      	mov	r3, r7
   b5f5c:	4966      	ldr	r1, [pc, #408]	; (b60f8 <__kernel_rem_pio2+0x848>)
   b5f5e:	2000      	movs	r0, #0
   b5f60:	f000 fab4 	bl	b64cc <__aeabi_dsub>
   b5f64:	2502      	movs	r5, #2
   b5f66:	4606      	mov	r6, r0
   b5f68:	460f      	mov	r7, r1
   b5f6a:	e5a5      	b.n	b5ab8 <__kernel_rem_pio2+0x208>
   b5f6c:	2100      	movs	r1, #0
   b5f6e:	f06f 0317 	mvn.w	r3, #23
   b5f72:	9107      	str	r1, [sp, #28]
   b5f74:	e4bb      	b.n	b58ee <__kernel_rem_pio2+0x3e>
   b5f76:	2400      	movs	r4, #0
   b5f78:	e659      	b.n	b5c2e <__kernel_rem_pio2+0x37e>
   b5f7a:	ec47 6b10 	vmov	d0, r6, r7
   b5f7e:	9e06      	ldr	r6, [sp, #24]
   b5f80:	9503      	str	r5, [sp, #12]
   b5f82:	4270      	negs	r0, r6
   b5f84:	f8cd 801c 	str.w	r8, [sp, #28]
   b5f88:	f000 fa0a 	bl	b63a0 <scalbn>
   b5f8c:	ec55 4b10 	vmov	r4, r5, d0
   b5f90:	4b5a      	ldr	r3, [pc, #360]	; (b60fc <__kernel_rem_pio2+0x84c>)
   b5f92:	ee10 0a10 	vmov	r0, s0
   b5f96:	2200      	movs	r2, #0
   b5f98:	4629      	mov	r1, r5
   b5f9a:	f000 fed5 	bl	b6d48 <__aeabi_dcmpge>
   b5f9e:	2800      	cmp	r0, #0
   b5fa0:	d055      	beq.n	b604e <__kernel_rem_pio2+0x79e>
   b5fa2:	4b57      	ldr	r3, [pc, #348]	; (b6100 <__kernel_rem_pio2+0x850>)
   b5fa4:	9f01      	ldr	r7, [sp, #4]
   b5fa6:	2200      	movs	r2, #0
   b5fa8:	3618      	adds	r6, #24
   b5faa:	4620      	mov	r0, r4
   b5fac:	4629      	mov	r1, r5
   b5fae:	9606      	str	r6, [sp, #24]
   b5fb0:	f000 fc44 	bl	b683c <__aeabi_dmul>
   b5fb4:	f000 fedc 	bl	b6d70 <__aeabi_d2iz>
   b5fb8:	4606      	mov	r6, r0
   b5fba:	f000 fbd5 	bl	b6768 <__aeabi_i2d>
   b5fbe:	4b4f      	ldr	r3, [pc, #316]	; (b60fc <__kernel_rem_pio2+0x84c>)
   b5fc0:	2200      	movs	r2, #0
   b5fc2:	f000 fc3b 	bl	b683c <__aeabi_dmul>
   b5fc6:	460b      	mov	r3, r1
   b5fc8:	4602      	mov	r2, r0
   b5fca:	4629      	mov	r1, r5
   b5fcc:	4620      	mov	r0, r4
   b5fce:	f000 fa7d 	bl	b64cc <__aeabi_dsub>
   b5fd2:	f000 fecd 	bl	b6d70 <__aeabi_d2iz>
   b5fd6:	f107 0a01 	add.w	sl, r7, #1
   b5fda:	ab0c      	add	r3, sp, #48	; 0x30
   b5fdc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   b5fe0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   b5fe4:	e684      	b.n	b5cf0 <__kernel_rem_pio2+0x440>
   b5fe6:	9d01      	ldr	r5, [sp, #4]
   b5fe8:	9a06      	ldr	r2, [sp, #24]
   b5fea:	2000      	movs	r0, #0
   b5fec:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   b5ff0:	2100      	movs	r1, #0
   b5ff2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   b5ff6:	f000 fa6b 	bl	b64d0 <__adddf3>
   b5ffa:	42a5      	cmp	r5, r4
   b5ffc:	d1f9      	bne.n	b5ff2 <__kernel_rem_pio2+0x742>
   b5ffe:	9b03      	ldr	r3, [sp, #12]
   b6000:	2b00      	cmp	r3, #0
   b6002:	d149      	bne.n	b6098 <__kernel_rem_pio2+0x7e8>
   b6004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6006:	e9c3 0100 	strd	r0, r1, [r3]
   b600a:	460b      	mov	r3, r1
   b600c:	9901      	ldr	r1, [sp, #4]
   b600e:	4602      	mov	r2, r0
   b6010:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6014:	f000 fa5a 	bl	b64cc <__aeabi_dsub>
   b6018:	f1ba 0f00 	cmp.w	sl, #0
   b601c:	dd0d      	ble.n	b603a <__kernel_rem_pio2+0x78a>
   b601e:	ad4a      	add	r5, sp, #296	; 0x128
   b6020:	2401      	movs	r4, #1
   b6022:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   b6026:	3401      	adds	r4, #1
   b6028:	f000 fa52 	bl	b64d0 <__adddf3>
   b602c:	45a2      	cmp	sl, r4
   b602e:	daf8      	bge.n	b6022 <__kernel_rem_pio2+0x772>
   b6030:	9b03      	ldr	r3, [sp, #12]
   b6032:	b113      	cbz	r3, b603a <__kernel_rem_pio2+0x78a>
   b6034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6038:	4619      	mov	r1, r3
   b603a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b603c:	e9c3 0102 	strd	r0, r1, [r3, #8]
   b6040:	9b07      	ldr	r3, [sp, #28]
   b6042:	f003 0007 	and.w	r0, r3, #7
   b6046:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b604e:	4620      	mov	r0, r4
   b6050:	4629      	mov	r1, r5
   b6052:	f000 fe8d 	bl	b6d70 <__aeabi_d2iz>
   b6056:	9b01      	ldr	r3, [sp, #4]
   b6058:	aa0c      	add	r2, sp, #48	; 0x30
   b605a:	469a      	mov	sl, r3
   b605c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   b6060:	e646      	b.n	b5cf0 <__kernel_rem_pio2+0x440>
   b6062:	9b01      	ldr	r3, [sp, #4]
   b6064:	461e      	mov	r6, r3
   b6066:	685c      	ldr	r4, [r3, #4]
   b6068:	68dd      	ldr	r5, [r3, #12]
   b606a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b606e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b6070:	4602      	mov	r2, r0
   b6072:	e9c1 2304 	strd	r2, r3, [r1, #16]
   b6076:	6832      	ldr	r2, [r6, #0]
   b6078:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   b607c:	e9c1 2300 	strd	r2, r3, [r1]
   b6080:	68b2      	ldr	r2, [r6, #8]
   b6082:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   b6086:	e9c1 2302 	strd	r2, r3, [r1, #8]
   b608a:	9b07      	ldr	r3, [sp, #28]
   b608c:	f003 0007 	and.w	r0, r3, #7
   b6090:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   b6094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b609a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b609e:	6053      	str	r3, [r2, #4]
   b60a0:	460b      	mov	r3, r1
   b60a2:	9901      	ldr	r1, [sp, #4]
   b60a4:	6010      	str	r0, [r2, #0]
   b60a6:	4602      	mov	r2, r0
   b60a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b60ac:	f000 fa0e 	bl	b64cc <__aeabi_dsub>
   b60b0:	f1ba 0f00 	cmp.w	sl, #0
   b60b4:	dcb3      	bgt.n	b601e <__kernel_rem_pio2+0x76e>
   b60b6:	e7bd      	b.n	b6034 <__kernel_rem_pio2+0x784>
   b60b8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b60ba:	2b02      	cmp	r3, #2
   b60bc:	dc0a      	bgt.n	b60d4 <__kernel_rem_pio2+0x824>
   b60be:	2b00      	cmp	r3, #0
   b60c0:	dc11      	bgt.n	b60e6 <__kernel_rem_pio2+0x836>
   b60c2:	f47f ae9e 	bne.w	b5e02 <__kernel_rem_pio2+0x552>
   b60c6:	2000      	movs	r0, #0
   b60c8:	2100      	movs	r1, #0
   b60ca:	e692      	b.n	b5df2 <__kernel_rem_pio2+0x542>
   b60cc:	9b08      	ldr	r3, [sp, #32]
   b60ce:	00db      	lsls	r3, r3, #3
   b60d0:	9302      	str	r3, [sp, #8]
   b60d2:	e464      	b.n	b599e <__kernel_rem_pio2+0xee>
   b60d4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   b60d6:	2b03      	cmp	r3, #3
   b60d8:	f47f ae93 	bne.w	b5e02 <__kernel_rem_pio2+0x552>
   b60dc:	ab48      	add	r3, sp, #288	; 0x120
   b60de:	2000      	movs	r0, #0
   b60e0:	2100      	movs	r1, #0
   b60e2:	9301      	str	r3, [sp, #4]
   b60e4:	e6fe      	b.n	b5ee4 <__kernel_rem_pio2+0x634>
   b60e6:	ab48      	add	r3, sp, #288	; 0x120
   b60e8:	2000      	movs	r0, #0
   b60ea:	2100      	movs	r1, #0
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	e786      	b.n	b5ffe <__kernel_rem_pio2+0x74e>
   b60f0:	2000      	movs	r0, #0
   b60f2:	2100      	movs	r1, #0
   b60f4:	e6f6      	b.n	b5ee4 <__kernel_rem_pio2+0x634>
   b60f6:	bf00      	nop
   b60f8:	3ff00000 	.word	0x3ff00000
   b60fc:	41700000 	.word	0x41700000
   b6100:	3e700000 	.word	0x3e700000
   b6104:	00000000 	.word	0x00000000

000b6108 <__kernel_sin>:
   b6108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b610c:	ec55 4b10 	vmov	r4, r5, d0
   b6110:	b085      	sub	sp, #20
   b6112:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   b6116:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   b611a:	ed8d 1b00 	vstr	d1, [sp]
   b611e:	9003      	str	r0, [sp, #12]
   b6120:	da07      	bge.n	b6132 <__kernel_sin+0x2a>
   b6122:	ee10 0a10 	vmov	r0, s0
   b6126:	4629      	mov	r1, r5
   b6128:	f000 fe22 	bl	b6d70 <__aeabi_d2iz>
   b612c:	2800      	cmp	r0, #0
   b612e:	f000 8089 	beq.w	b6244 <__kernel_sin+0x13c>
   b6132:	4622      	mov	r2, r4
   b6134:	462b      	mov	r3, r5
   b6136:	4620      	mov	r0, r4
   b6138:	4629      	mov	r1, r5
   b613a:	f000 fb7f 	bl	b683c <__aeabi_dmul>
   b613e:	4606      	mov	r6, r0
   b6140:	460f      	mov	r7, r1
   b6142:	4632      	mov	r2, r6
   b6144:	463b      	mov	r3, r7
   b6146:	4620      	mov	r0, r4
   b6148:	4629      	mov	r1, r5
   b614a:	f000 fb77 	bl	b683c <__aeabi_dmul>
   b614e:	a343      	add	r3, pc, #268	; (adr r3, b625c <__kernel_sin+0x154>)
   b6150:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6154:	4682      	mov	sl, r0
   b6156:	468b      	mov	fp, r1
   b6158:	4630      	mov	r0, r6
   b615a:	4639      	mov	r1, r7
   b615c:	f000 fb6e 	bl	b683c <__aeabi_dmul>
   b6160:	a340      	add	r3, pc, #256	; (adr r3, b6264 <__kernel_sin+0x15c>)
   b6162:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6166:	f000 f9b1 	bl	b64cc <__aeabi_dsub>
   b616a:	4632      	mov	r2, r6
   b616c:	463b      	mov	r3, r7
   b616e:	f000 fb65 	bl	b683c <__aeabi_dmul>
   b6172:	a33e      	add	r3, pc, #248	; (adr r3, b626c <__kernel_sin+0x164>)
   b6174:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6178:	f000 f9aa 	bl	b64d0 <__adddf3>
   b617c:	4632      	mov	r2, r6
   b617e:	463b      	mov	r3, r7
   b6180:	f000 fb5c 	bl	b683c <__aeabi_dmul>
   b6184:	a33b      	add	r3, pc, #236	; (adr r3, b6274 <__kernel_sin+0x16c>)
   b6186:	e9d3 2300 	ldrd	r2, r3, [r3]
   b618a:	f000 f99f 	bl	b64cc <__aeabi_dsub>
   b618e:	4632      	mov	r2, r6
   b6190:	463b      	mov	r3, r7
   b6192:	f000 fb53 	bl	b683c <__aeabi_dmul>
   b6196:	a339      	add	r3, pc, #228	; (adr r3, b627c <__kernel_sin+0x174>)
   b6198:	e9d3 2300 	ldrd	r2, r3, [r3]
   b619c:	f000 f998 	bl	b64d0 <__adddf3>
   b61a0:	9b03      	ldr	r3, [sp, #12]
   b61a2:	4680      	mov	r8, r0
   b61a4:	4689      	mov	r9, r1
   b61a6:	b3ab      	cbz	r3, b6214 <__kernel_sin+0x10c>
   b61a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b61ac:	4b2a      	ldr	r3, [pc, #168]	; (b6258 <__kernel_sin+0x150>)
   b61ae:	2200      	movs	r2, #0
   b61b0:	f000 fb44 	bl	b683c <__aeabi_dmul>
   b61b4:	4642      	mov	r2, r8
   b61b6:	464b      	mov	r3, r9
   b61b8:	4680      	mov	r8, r0
   b61ba:	4689      	mov	r9, r1
   b61bc:	4650      	mov	r0, sl
   b61be:	4659      	mov	r1, fp
   b61c0:	f000 fb3c 	bl	b683c <__aeabi_dmul>
   b61c4:	4602      	mov	r2, r0
   b61c6:	460b      	mov	r3, r1
   b61c8:	4640      	mov	r0, r8
   b61ca:	4649      	mov	r1, r9
   b61cc:	f000 f97e 	bl	b64cc <__aeabi_dsub>
   b61d0:	4632      	mov	r2, r6
   b61d2:	463b      	mov	r3, r7
   b61d4:	f000 fb32 	bl	b683c <__aeabi_dmul>
   b61d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   b61dc:	f000 f976 	bl	b64cc <__aeabi_dsub>
   b61e0:	a31b      	add	r3, pc, #108	; (adr r3, b6250 <__kernel_sin+0x148>)
   b61e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b61e6:	4606      	mov	r6, r0
   b61e8:	460f      	mov	r7, r1
   b61ea:	4650      	mov	r0, sl
   b61ec:	4659      	mov	r1, fp
   b61ee:	f000 fb25 	bl	b683c <__aeabi_dmul>
   b61f2:	4602      	mov	r2, r0
   b61f4:	460b      	mov	r3, r1
   b61f6:	4630      	mov	r0, r6
   b61f8:	4639      	mov	r1, r7
   b61fa:	f000 f969 	bl	b64d0 <__adddf3>
   b61fe:	4602      	mov	r2, r0
   b6200:	460b      	mov	r3, r1
   b6202:	4620      	mov	r0, r4
   b6204:	4629      	mov	r1, r5
   b6206:	f000 f961 	bl	b64cc <__aeabi_dsub>
   b620a:	ec41 0b10 	vmov	d0, r0, r1
   b620e:	b005      	add	sp, #20
   b6210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6214:	4602      	mov	r2, r0
   b6216:	460b      	mov	r3, r1
   b6218:	4630      	mov	r0, r6
   b621a:	4639      	mov	r1, r7
   b621c:	f000 fb0e 	bl	b683c <__aeabi_dmul>
   b6220:	a30b      	add	r3, pc, #44	; (adr r3, b6250 <__kernel_sin+0x148>)
   b6222:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6226:	f000 f951 	bl	b64cc <__aeabi_dsub>
   b622a:	4652      	mov	r2, sl
   b622c:	465b      	mov	r3, fp
   b622e:	f000 fb05 	bl	b683c <__aeabi_dmul>
   b6232:	4622      	mov	r2, r4
   b6234:	462b      	mov	r3, r5
   b6236:	f000 f94b 	bl	b64d0 <__adddf3>
   b623a:	ec41 0b10 	vmov	d0, r0, r1
   b623e:	b005      	add	sp, #20
   b6240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6244:	ec45 4b10 	vmov	d0, r4, r5
   b6248:	b005      	add	sp, #20
   b624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b624e:	bf00      	nop
   b6250:	55555549 	.word	0x55555549
   b6254:	3fc55555 	.word	0x3fc55555
   b6258:	3fe00000 	.word	0x3fe00000
   b625c:	5acfd57c 	.word	0x5acfd57c
   b6260:	3de5d93a 	.word	0x3de5d93a
   b6264:	8a2b9ceb 	.word	0x8a2b9ceb
   b6268:	3e5ae5e6 	.word	0x3e5ae5e6
   b626c:	57b1fe7d 	.word	0x57b1fe7d
   b6270:	3ec71de3 	.word	0x3ec71de3
   b6274:	19c161d5 	.word	0x19c161d5
   b6278:	3f2a01a0 	.word	0x3f2a01a0
   b627c:	1110f8a6 	.word	0x1110f8a6
   b6280:	3f811111 	.word	0x3f811111

000b6284 <fabs>:
   b6284:	ec51 0b10 	vmov	r0, r1, d0
   b6288:	ee10 2a10 	vmov	r2, s0
   b628c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6290:	ec43 2b10 	vmov	d0, r2, r3
   b6294:	4770      	bx	lr
   b6296:	bf00      	nop

000b6298 <floor>:
   b6298:	ec51 0b10 	vmov	r0, r1, d0
   b629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b629e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   b62a2:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   b62a6:	2d13      	cmp	r5, #19
   b62a8:	ee10 6a10 	vmov	r6, s0
   b62ac:	460c      	mov	r4, r1
   b62ae:	dc30      	bgt.n	b6312 <floor+0x7a>
   b62b0:	2d00      	cmp	r5, #0
   b62b2:	db1e      	blt.n	b62f2 <floor+0x5a>
   b62b4:	4f38      	ldr	r7, [pc, #224]	; (b6398 <floor+0x100>)
   b62b6:	412f      	asrs	r7, r5
   b62b8:	ea01 0307 	and.w	r3, r1, r7
   b62bc:	4303      	orrs	r3, r0
   b62be:	d02d      	beq.n	b631c <floor+0x84>
   b62c0:	a333      	add	r3, pc, #204	; (adr r3, b6390 <floor+0xf8>)
   b62c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62c6:	f000 f903 	bl	b64d0 <__adddf3>
   b62ca:	2200      	movs	r2, #0
   b62cc:	2300      	movs	r3, #0
   b62ce:	f000 fd45 	bl	b6d5c <__aeabi_dcmpgt>
   b62d2:	b148      	cbz	r0, b62e8 <floor+0x50>
   b62d4:	2c00      	cmp	r4, #0
   b62d6:	da04      	bge.n	b62e2 <floor+0x4a>
   b62d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b62dc:	fa43 f505 	asr.w	r5, r3, r5
   b62e0:	442c      	add	r4, r5
   b62e2:	ea24 0407 	bic.w	r4, r4, r7
   b62e6:	2600      	movs	r6, #0
   b62e8:	4623      	mov	r3, r4
   b62ea:	4632      	mov	r2, r6
   b62ec:	ec43 2b10 	vmov	d0, r2, r3
   b62f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b62f2:	a327      	add	r3, pc, #156	; (adr r3, b6390 <floor+0xf8>)
   b62f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b62f8:	f000 f8ea 	bl	b64d0 <__adddf3>
   b62fc:	2200      	movs	r2, #0
   b62fe:	2300      	movs	r3, #0
   b6300:	f000 fd2c 	bl	b6d5c <__aeabi_dcmpgt>
   b6304:	2800      	cmp	r0, #0
   b6306:	d0ef      	beq.n	b62e8 <floor+0x50>
   b6308:	2c00      	cmp	r4, #0
   b630a:	db29      	blt.n	b6360 <floor+0xc8>
   b630c:	2600      	movs	r6, #0
   b630e:	4634      	mov	r4, r6
   b6310:	e7ea      	b.n	b62e8 <floor+0x50>
   b6312:	2d33      	cmp	r5, #51	; 0x33
   b6314:	dd05      	ble.n	b6322 <floor+0x8a>
   b6316:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   b631a:	d019      	beq.n	b6350 <floor+0xb8>
   b631c:	ec41 0b10 	vmov	d0, r0, r1
   b6320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6322:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   b6326:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   b632a:	40df      	lsrs	r7, r3
   b632c:	4207      	tst	r7, r0
   b632e:	d0f5      	beq.n	b631c <floor+0x84>
   b6330:	a317      	add	r3, pc, #92	; (adr r3, b6390 <floor+0xf8>)
   b6332:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6336:	f000 f8cb 	bl	b64d0 <__adddf3>
   b633a:	2200      	movs	r2, #0
   b633c:	2300      	movs	r3, #0
   b633e:	f000 fd0d 	bl	b6d5c <__aeabi_dcmpgt>
   b6342:	2800      	cmp	r0, #0
   b6344:	d0d0      	beq.n	b62e8 <floor+0x50>
   b6346:	2c00      	cmp	r4, #0
   b6348:	db13      	blt.n	b6372 <floor+0xda>
   b634a:	ea26 0607 	bic.w	r6, r6, r7
   b634e:	e7cb      	b.n	b62e8 <floor+0x50>
   b6350:	ee10 2a10 	vmov	r2, s0
   b6354:	460b      	mov	r3, r1
   b6356:	f000 f8bb 	bl	b64d0 <__adddf3>
   b635a:	ec41 0b10 	vmov	d0, r0, r1
   b635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6360:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   b6364:	4a0d      	ldr	r2, [pc, #52]	; (b639c <floor+0x104>)
   b6366:	431e      	orrs	r6, r3
   b6368:	2e00      	cmp	r6, #0
   b636a:	bf18      	it	ne
   b636c:	4614      	movne	r4, r2
   b636e:	2600      	movs	r6, #0
   b6370:	e7ba      	b.n	b62e8 <floor+0x50>
   b6372:	2d14      	cmp	r5, #20
   b6374:	d008      	beq.n	b6388 <floor+0xf0>
   b6376:	2301      	movs	r3, #1
   b6378:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   b637c:	fa03 f505 	lsl.w	r5, r3, r5
   b6380:	19ae      	adds	r6, r5, r6
   b6382:	bf28      	it	cs
   b6384:	18e4      	addcs	r4, r4, r3
   b6386:	e7e0      	b.n	b634a <floor+0xb2>
   b6388:	3401      	adds	r4, #1
   b638a:	e7de      	b.n	b634a <floor+0xb2>
   b638c:	f3af 8000 	nop.w
   b6390:	8800759c 	.word	0x8800759c
   b6394:	7e37e43c 	.word	0x7e37e43c
   b6398:	000fffff 	.word	0x000fffff
   b639c:	bff00000 	.word	0xbff00000

000b63a0 <scalbn>:
   b63a0:	b538      	push	{r3, r4, r5, lr}
   b63a2:	ec53 2b10 	vmov	r2, r3, d0
   b63a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b63aa:	4604      	mov	r4, r0
   b63ac:	469c      	mov	ip, r3
   b63ae:	bb89      	cbnz	r1, b6414 <scalbn+0x74>
   b63b0:	ee10 1a10 	vmov	r1, s0
   b63b4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b63b8:	ea5c 0101 	orrs.w	r1, ip, r1
   b63bc:	d029      	beq.n	b6412 <scalbn+0x72>
   b63be:	4619      	mov	r1, r3
   b63c0:	2200      	movs	r2, #0
   b63c2:	4b3d      	ldr	r3, [pc, #244]	; (b64b8 <scalbn+0x118>)
   b63c4:	4d3d      	ldr	r5, [pc, #244]	; (b64bc <scalbn+0x11c>)
   b63c6:	ee10 0a10 	vmov	r0, s0
   b63ca:	f000 fa37 	bl	b683c <__aeabi_dmul>
   b63ce:	42ac      	cmp	r4, r5
   b63d0:	4602      	mov	r2, r0
   b63d2:	460b      	mov	r3, r1
   b63d4:	db16      	blt.n	b6404 <scalbn+0x64>
   b63d6:	468c      	mov	ip, r1
   b63d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b63dc:	3936      	subs	r1, #54	; 0x36
   b63de:	4421      	add	r1, r4
   b63e0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b63e4:	4281      	cmp	r1, r0
   b63e6:	dc21      	bgt.n	b642c <scalbn+0x8c>
   b63e8:	2900      	cmp	r1, #0
   b63ea:	dc47      	bgt.n	b647c <scalbn+0xdc>
   b63ec:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b63f0:	da34      	bge.n	b645c <scalbn+0xbc>
   b63f2:	f24c 3150 	movw	r1, #50000	; 0xc350
   b63f6:	428c      	cmp	r4, r1
   b63f8:	dc18      	bgt.n	b642c <scalbn+0x8c>
   b63fa:	2b00      	cmp	r3, #0
   b63fc:	a126      	add	r1, pc, #152	; (adr r1, b6498 <scalbn+0xf8>)
   b63fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6402:	db44      	blt.n	b648e <scalbn+0xee>
   b6404:	a324      	add	r3, pc, #144	; (adr r3, b6498 <scalbn+0xf8>)
   b6406:	e9d3 2300 	ldrd	r2, r3, [r3]
   b640a:	f000 fa17 	bl	b683c <__aeabi_dmul>
   b640e:	ec41 0b10 	vmov	d0, r0, r1
   b6412:	bd38      	pop	{r3, r4, r5, pc}
   b6414:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b6418:	4281      	cmp	r1, r0
   b641a:	d1e0      	bne.n	b63de <scalbn+0x3e>
   b641c:	ee10 0a10 	vmov	r0, s0
   b6420:	4619      	mov	r1, r3
   b6422:	f000 f855 	bl	b64d0 <__adddf3>
   b6426:	ec41 0b10 	vmov	d0, r0, r1
   b642a:	bd38      	pop	{r3, r4, r5, pc}
   b642c:	2b00      	cmp	r3, #0
   b642e:	a11c      	add	r1, pc, #112	; (adr r1, b64a0 <scalbn+0x100>)
   b6430:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6434:	db07      	blt.n	b6446 <scalbn+0xa6>
   b6436:	a31a      	add	r3, pc, #104	; (adr r3, b64a0 <scalbn+0x100>)
   b6438:	e9d3 2300 	ldrd	r2, r3, [r3]
   b643c:	f000 f9fe 	bl	b683c <__aeabi_dmul>
   b6440:	ec41 0b10 	vmov	d0, r0, r1
   b6444:	bd38      	pop	{r3, r4, r5, pc}
   b6446:	a118      	add	r1, pc, #96	; (adr r1, b64a8 <scalbn+0x108>)
   b6448:	e9d1 0100 	ldrd	r0, r1, [r1]
   b644c:	a314      	add	r3, pc, #80	; (adr r3, b64a0 <scalbn+0x100>)
   b644e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6452:	f000 f9f3 	bl	b683c <__aeabi_dmul>
   b6456:	ec41 0b10 	vmov	d0, r0, r1
   b645a:	e7f3      	b.n	b6444 <scalbn+0xa4>
   b645c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6460:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6464:	3136      	adds	r1, #54	; 0x36
   b6466:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b646a:	4610      	mov	r0, r2
   b646c:	4619      	mov	r1, r3
   b646e:	2200      	movs	r2, #0
   b6470:	4b13      	ldr	r3, [pc, #76]	; (b64c0 <scalbn+0x120>)
   b6472:	f000 f9e3 	bl	b683c <__aeabi_dmul>
   b6476:	ec41 0b10 	vmov	d0, r0, r1
   b647a:	bd38      	pop	{r3, r4, r5, pc}
   b647c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b6480:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b6484:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b6488:	ec43 2b10 	vmov	d0, r2, r3
   b648c:	bd38      	pop	{r3, r4, r5, pc}
   b648e:	a108      	add	r1, pc, #32	; (adr r1, b64b0 <scalbn+0x110>)
   b6490:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6494:	e7b6      	b.n	b6404 <scalbn+0x64>
   b6496:	bf00      	nop
   b6498:	c2f8f359 	.word	0xc2f8f359
   b649c:	01a56e1f 	.word	0x01a56e1f
   b64a0:	8800759c 	.word	0x8800759c
   b64a4:	7e37e43c 	.word	0x7e37e43c
   b64a8:	8800759c 	.word	0x8800759c
   b64ac:	fe37e43c 	.word	0xfe37e43c
   b64b0:	c2f8f359 	.word	0xc2f8f359
   b64b4:	81a56e1f 	.word	0x81a56e1f
   b64b8:	43500000 	.word	0x43500000
   b64bc:	ffff3cb0 	.word	0xffff3cb0
   b64c0:	3c900000 	.word	0x3c900000

000b64c4 <__aeabi_drsub>:
   b64c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b64c8:	e002      	b.n	b64d0 <__adddf3>
   b64ca:	bf00      	nop

000b64cc <__aeabi_dsub>:
   b64cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b64d0 <__adddf3>:
   b64d0:	b530      	push	{r4, r5, lr}
   b64d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b64d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b64da:	ea94 0f05 	teq	r4, r5
   b64de:	bf08      	it	eq
   b64e0:	ea90 0f02 	teqeq	r0, r2
   b64e4:	bf1f      	itttt	ne
   b64e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b64ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   b64ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b64f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b64f6:	f000 80e2 	beq.w	b66be <__adddf3+0x1ee>
   b64fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b64fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6502:	bfb8      	it	lt
   b6504:	426d      	neglt	r5, r5
   b6506:	dd0c      	ble.n	b6522 <__adddf3+0x52>
   b6508:	442c      	add	r4, r5
   b650a:	ea80 0202 	eor.w	r2, r0, r2
   b650e:	ea81 0303 	eor.w	r3, r1, r3
   b6512:	ea82 0000 	eor.w	r0, r2, r0
   b6516:	ea83 0101 	eor.w	r1, r3, r1
   b651a:	ea80 0202 	eor.w	r2, r0, r2
   b651e:	ea81 0303 	eor.w	r3, r1, r3
   b6522:	2d36      	cmp	r5, #54	; 0x36
   b6524:	bf88      	it	hi
   b6526:	bd30      	pophi	{r4, r5, pc}
   b6528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b652c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6538:	d002      	beq.n	b6540 <__adddf3+0x70>
   b653a:	4240      	negs	r0, r0
   b653c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6544:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b654c:	d002      	beq.n	b6554 <__adddf3+0x84>
   b654e:	4252      	negs	r2, r2
   b6550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6554:	ea94 0f05 	teq	r4, r5
   b6558:	f000 80a7 	beq.w	b66aa <__adddf3+0x1da>
   b655c:	f1a4 0401 	sub.w	r4, r4, #1
   b6560:	f1d5 0e20 	rsbs	lr, r5, #32
   b6564:	db0d      	blt.n	b6582 <__adddf3+0xb2>
   b6566:	fa02 fc0e 	lsl.w	ip, r2, lr
   b656a:	fa22 f205 	lsr.w	r2, r2, r5
   b656e:	1880      	adds	r0, r0, r2
   b6570:	f141 0100 	adc.w	r1, r1, #0
   b6574:	fa03 f20e 	lsl.w	r2, r3, lr
   b6578:	1880      	adds	r0, r0, r2
   b657a:	fa43 f305 	asr.w	r3, r3, r5
   b657e:	4159      	adcs	r1, r3
   b6580:	e00e      	b.n	b65a0 <__adddf3+0xd0>
   b6582:	f1a5 0520 	sub.w	r5, r5, #32
   b6586:	f10e 0e20 	add.w	lr, lr, #32
   b658a:	2a01      	cmp	r2, #1
   b658c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6590:	bf28      	it	cs
   b6592:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6596:	fa43 f305 	asr.w	r3, r3, r5
   b659a:	18c0      	adds	r0, r0, r3
   b659c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b65a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b65a4:	d507      	bpl.n	b65b6 <__adddf3+0xe6>
   b65a6:	f04f 0e00 	mov.w	lr, #0
   b65aa:	f1dc 0c00 	rsbs	ip, ip, #0
   b65ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   b65b2:	eb6e 0101 	sbc.w	r1, lr, r1
   b65b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b65ba:	d31b      	bcc.n	b65f4 <__adddf3+0x124>
   b65bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b65c0:	d30c      	bcc.n	b65dc <__adddf3+0x10c>
   b65c2:	0849      	lsrs	r1, r1, #1
   b65c4:	ea5f 0030 	movs.w	r0, r0, rrx
   b65c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b65cc:	f104 0401 	add.w	r4, r4, #1
   b65d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b65d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b65d8:	f080 809a 	bcs.w	b6710 <__adddf3+0x240>
   b65dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b65e0:	bf08      	it	eq
   b65e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b65e6:	f150 0000 	adcs.w	r0, r0, #0
   b65ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b65ee:	ea41 0105 	orr.w	r1, r1, r5
   b65f2:	bd30      	pop	{r4, r5, pc}
   b65f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b65f8:	4140      	adcs	r0, r0
   b65fa:	eb41 0101 	adc.w	r1, r1, r1
   b65fe:	3c01      	subs	r4, #1
   b6600:	bf28      	it	cs
   b6602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6606:	d2e9      	bcs.n	b65dc <__adddf3+0x10c>
   b6608:	f091 0f00 	teq	r1, #0
   b660c:	bf04      	itt	eq
   b660e:	4601      	moveq	r1, r0
   b6610:	2000      	moveq	r0, #0
   b6612:	fab1 f381 	clz	r3, r1
   b6616:	bf08      	it	eq
   b6618:	3320      	addeq	r3, #32
   b661a:	f1a3 030b 	sub.w	r3, r3, #11
   b661e:	f1b3 0220 	subs.w	r2, r3, #32
   b6622:	da0c      	bge.n	b663e <__adddf3+0x16e>
   b6624:	320c      	adds	r2, #12
   b6626:	dd08      	ble.n	b663a <__adddf3+0x16a>
   b6628:	f102 0c14 	add.w	ip, r2, #20
   b662c:	f1c2 020c 	rsb	r2, r2, #12
   b6630:	fa01 f00c 	lsl.w	r0, r1, ip
   b6634:	fa21 f102 	lsr.w	r1, r1, r2
   b6638:	e00c      	b.n	b6654 <__adddf3+0x184>
   b663a:	f102 0214 	add.w	r2, r2, #20
   b663e:	bfd8      	it	le
   b6640:	f1c2 0c20 	rsble	ip, r2, #32
   b6644:	fa01 f102 	lsl.w	r1, r1, r2
   b6648:	fa20 fc0c 	lsr.w	ip, r0, ip
   b664c:	bfdc      	itt	le
   b664e:	ea41 010c 	orrle.w	r1, r1, ip
   b6652:	4090      	lslle	r0, r2
   b6654:	1ae4      	subs	r4, r4, r3
   b6656:	bfa2      	ittt	ge
   b6658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b665c:	4329      	orrge	r1, r5
   b665e:	bd30      	popge	{r4, r5, pc}
   b6660:	ea6f 0404 	mvn.w	r4, r4
   b6664:	3c1f      	subs	r4, #31
   b6666:	da1c      	bge.n	b66a2 <__adddf3+0x1d2>
   b6668:	340c      	adds	r4, #12
   b666a:	dc0e      	bgt.n	b668a <__adddf3+0x1ba>
   b666c:	f104 0414 	add.w	r4, r4, #20
   b6670:	f1c4 0220 	rsb	r2, r4, #32
   b6674:	fa20 f004 	lsr.w	r0, r0, r4
   b6678:	fa01 f302 	lsl.w	r3, r1, r2
   b667c:	ea40 0003 	orr.w	r0, r0, r3
   b6680:	fa21 f304 	lsr.w	r3, r1, r4
   b6684:	ea45 0103 	orr.w	r1, r5, r3
   b6688:	bd30      	pop	{r4, r5, pc}
   b668a:	f1c4 040c 	rsb	r4, r4, #12
   b668e:	f1c4 0220 	rsb	r2, r4, #32
   b6692:	fa20 f002 	lsr.w	r0, r0, r2
   b6696:	fa01 f304 	lsl.w	r3, r1, r4
   b669a:	ea40 0003 	orr.w	r0, r0, r3
   b669e:	4629      	mov	r1, r5
   b66a0:	bd30      	pop	{r4, r5, pc}
   b66a2:	fa21 f004 	lsr.w	r0, r1, r4
   b66a6:	4629      	mov	r1, r5
   b66a8:	bd30      	pop	{r4, r5, pc}
   b66aa:	f094 0f00 	teq	r4, #0
   b66ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b66b2:	bf06      	itte	eq
   b66b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b66b8:	3401      	addeq	r4, #1
   b66ba:	3d01      	subne	r5, #1
   b66bc:	e74e      	b.n	b655c <__adddf3+0x8c>
   b66be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b66c2:	bf18      	it	ne
   b66c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b66c8:	d029      	beq.n	b671e <__adddf3+0x24e>
   b66ca:	ea94 0f05 	teq	r4, r5
   b66ce:	bf08      	it	eq
   b66d0:	ea90 0f02 	teqeq	r0, r2
   b66d4:	d005      	beq.n	b66e2 <__adddf3+0x212>
   b66d6:	ea54 0c00 	orrs.w	ip, r4, r0
   b66da:	bf04      	itt	eq
   b66dc:	4619      	moveq	r1, r3
   b66de:	4610      	moveq	r0, r2
   b66e0:	bd30      	pop	{r4, r5, pc}
   b66e2:	ea91 0f03 	teq	r1, r3
   b66e6:	bf1e      	ittt	ne
   b66e8:	2100      	movne	r1, #0
   b66ea:	2000      	movne	r0, #0
   b66ec:	bd30      	popne	{r4, r5, pc}
   b66ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b66f2:	d105      	bne.n	b6700 <__adddf3+0x230>
   b66f4:	0040      	lsls	r0, r0, #1
   b66f6:	4149      	adcs	r1, r1
   b66f8:	bf28      	it	cs
   b66fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b66fe:	bd30      	pop	{r4, r5, pc}
   b6700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6704:	bf3c      	itt	cc
   b6706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b670a:	bd30      	popcc	{r4, r5, pc}
   b670c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6718:	f04f 0000 	mov.w	r0, #0
   b671c:	bd30      	pop	{r4, r5, pc}
   b671e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6722:	bf1a      	itte	ne
   b6724:	4619      	movne	r1, r3
   b6726:	4610      	movne	r0, r2
   b6728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b672c:	bf1c      	itt	ne
   b672e:	460b      	movne	r3, r1
   b6730:	4602      	movne	r2, r0
   b6732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6736:	bf06      	itte	eq
   b6738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b673c:	ea91 0f03 	teqeq	r1, r3
   b6740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6744:	bd30      	pop	{r4, r5, pc}
   b6746:	bf00      	nop

000b6748 <__aeabi_ui2d>:
   b6748:	f090 0f00 	teq	r0, #0
   b674c:	bf04      	itt	eq
   b674e:	2100      	moveq	r1, #0
   b6750:	4770      	bxeq	lr
   b6752:	b530      	push	{r4, r5, lr}
   b6754:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6758:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b675c:	f04f 0500 	mov.w	r5, #0
   b6760:	f04f 0100 	mov.w	r1, #0
   b6764:	e750      	b.n	b6608 <__adddf3+0x138>
   b6766:	bf00      	nop

000b6768 <__aeabi_i2d>:
   b6768:	f090 0f00 	teq	r0, #0
   b676c:	bf04      	itt	eq
   b676e:	2100      	moveq	r1, #0
   b6770:	4770      	bxeq	lr
   b6772:	b530      	push	{r4, r5, lr}
   b6774:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6778:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b677c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6780:	bf48      	it	mi
   b6782:	4240      	negmi	r0, r0
   b6784:	f04f 0100 	mov.w	r1, #0
   b6788:	e73e      	b.n	b6608 <__adddf3+0x138>
   b678a:	bf00      	nop

000b678c <__aeabi_f2d>:
   b678c:	0042      	lsls	r2, r0, #1
   b678e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6792:	ea4f 0131 	mov.w	r1, r1, rrx
   b6796:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b679a:	bf1f      	itttt	ne
   b679c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b67a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b67a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b67a8:	4770      	bxne	lr
   b67aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b67ae:	bf08      	it	eq
   b67b0:	4770      	bxeq	lr
   b67b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b67b6:	bf04      	itt	eq
   b67b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b67bc:	4770      	bxeq	lr
   b67be:	b530      	push	{r4, r5, lr}
   b67c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b67c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b67c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b67cc:	e71c      	b.n	b6608 <__adddf3+0x138>
   b67ce:	bf00      	nop

000b67d0 <__aeabi_ul2d>:
   b67d0:	ea50 0201 	orrs.w	r2, r0, r1
   b67d4:	bf08      	it	eq
   b67d6:	4770      	bxeq	lr
   b67d8:	b530      	push	{r4, r5, lr}
   b67da:	f04f 0500 	mov.w	r5, #0
   b67de:	e00a      	b.n	b67f6 <__aeabi_l2d+0x16>

000b67e0 <__aeabi_l2d>:
   b67e0:	ea50 0201 	orrs.w	r2, r0, r1
   b67e4:	bf08      	it	eq
   b67e6:	4770      	bxeq	lr
   b67e8:	b530      	push	{r4, r5, lr}
   b67ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b67ee:	d502      	bpl.n	b67f6 <__aeabi_l2d+0x16>
   b67f0:	4240      	negs	r0, r0
   b67f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b67f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b67fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b67fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6802:	f43f aed8 	beq.w	b65b6 <__adddf3+0xe6>
   b6806:	f04f 0203 	mov.w	r2, #3
   b680a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b680e:	bf18      	it	ne
   b6810:	3203      	addne	r2, #3
   b6812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6816:	bf18      	it	ne
   b6818:	3203      	addne	r2, #3
   b681a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b681e:	f1c2 0320 	rsb	r3, r2, #32
   b6822:	fa00 fc03 	lsl.w	ip, r0, r3
   b6826:	fa20 f002 	lsr.w	r0, r0, r2
   b682a:	fa01 fe03 	lsl.w	lr, r1, r3
   b682e:	ea40 000e 	orr.w	r0, r0, lr
   b6832:	fa21 f102 	lsr.w	r1, r1, r2
   b6836:	4414      	add	r4, r2
   b6838:	e6bd      	b.n	b65b6 <__adddf3+0xe6>
   b683a:	bf00      	nop

000b683c <__aeabi_dmul>:
   b683c:	b570      	push	{r4, r5, r6, lr}
   b683e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b684a:	bf1d      	ittte	ne
   b684c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6850:	ea94 0f0c 	teqne	r4, ip
   b6854:	ea95 0f0c 	teqne	r5, ip
   b6858:	f000 f8de 	bleq	b6a18 <__aeabi_dmul+0x1dc>
   b685c:	442c      	add	r4, r5
   b685e:	ea81 0603 	eor.w	r6, r1, r3
   b6862:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6866:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b686a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b686e:	bf18      	it	ne
   b6870:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b687c:	d038      	beq.n	b68f0 <__aeabi_dmul+0xb4>
   b687e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6882:	f04f 0500 	mov.w	r5, #0
   b6886:	fbe1 e502 	umlal	lr, r5, r1, r2
   b688a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b688e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6892:	f04f 0600 	mov.w	r6, #0
   b6896:	fbe1 5603 	umlal	r5, r6, r1, r3
   b689a:	f09c 0f00 	teq	ip, #0
   b689e:	bf18      	it	ne
   b68a0:	f04e 0e01 	orrne.w	lr, lr, #1
   b68a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b68a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b68ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b68b0:	d204      	bcs.n	b68bc <__aeabi_dmul+0x80>
   b68b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b68b6:	416d      	adcs	r5, r5
   b68b8:	eb46 0606 	adc.w	r6, r6, r6
   b68bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b68c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b68c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b68c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b68cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b68d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b68d4:	bf88      	it	hi
   b68d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b68da:	d81e      	bhi.n	b691a <__aeabi_dmul+0xde>
   b68dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b68e0:	bf08      	it	eq
   b68e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b68e6:	f150 0000 	adcs.w	r0, r0, #0
   b68ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b68ee:	bd70      	pop	{r4, r5, r6, pc}
   b68f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b68f4:	ea46 0101 	orr.w	r1, r6, r1
   b68f8:	ea40 0002 	orr.w	r0, r0, r2
   b68fc:	ea81 0103 	eor.w	r1, r1, r3
   b6900:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6904:	bfc2      	ittt	gt
   b6906:	ebd4 050c 	rsbsgt	r5, r4, ip
   b690a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b690e:	bd70      	popgt	{r4, r5, r6, pc}
   b6910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6914:	f04f 0e00 	mov.w	lr, #0
   b6918:	3c01      	subs	r4, #1
   b691a:	f300 80ab 	bgt.w	b6a74 <__aeabi_dmul+0x238>
   b691e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6922:	bfde      	ittt	le
   b6924:	2000      	movle	r0, #0
   b6926:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b692a:	bd70      	pople	{r4, r5, r6, pc}
   b692c:	f1c4 0400 	rsb	r4, r4, #0
   b6930:	3c20      	subs	r4, #32
   b6932:	da35      	bge.n	b69a0 <__aeabi_dmul+0x164>
   b6934:	340c      	adds	r4, #12
   b6936:	dc1b      	bgt.n	b6970 <__aeabi_dmul+0x134>
   b6938:	f104 0414 	add.w	r4, r4, #20
   b693c:	f1c4 0520 	rsb	r5, r4, #32
   b6940:	fa00 f305 	lsl.w	r3, r0, r5
   b6944:	fa20 f004 	lsr.w	r0, r0, r4
   b6948:	fa01 f205 	lsl.w	r2, r1, r5
   b694c:	ea40 0002 	orr.w	r0, r0, r2
   b6950:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6958:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b695c:	fa21 f604 	lsr.w	r6, r1, r4
   b6960:	eb42 0106 	adc.w	r1, r2, r6
   b6964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6968:	bf08      	it	eq
   b696a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b696e:	bd70      	pop	{r4, r5, r6, pc}
   b6970:	f1c4 040c 	rsb	r4, r4, #12
   b6974:	f1c4 0520 	rsb	r5, r4, #32
   b6978:	fa00 f304 	lsl.w	r3, r0, r4
   b697c:	fa20 f005 	lsr.w	r0, r0, r5
   b6980:	fa01 f204 	lsl.w	r2, r1, r4
   b6984:	ea40 0002 	orr.w	r0, r0, r2
   b6988:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b698c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6990:	f141 0100 	adc.w	r1, r1, #0
   b6994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6998:	bf08      	it	eq
   b699a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b699e:	bd70      	pop	{r4, r5, r6, pc}
   b69a0:	f1c4 0520 	rsb	r5, r4, #32
   b69a4:	fa00 f205 	lsl.w	r2, r0, r5
   b69a8:	ea4e 0e02 	orr.w	lr, lr, r2
   b69ac:	fa20 f304 	lsr.w	r3, r0, r4
   b69b0:	fa01 f205 	lsl.w	r2, r1, r5
   b69b4:	ea43 0302 	orr.w	r3, r3, r2
   b69b8:	fa21 f004 	lsr.w	r0, r1, r4
   b69bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69c0:	fa21 f204 	lsr.w	r2, r1, r4
   b69c4:	ea20 0002 	bic.w	r0, r0, r2
   b69c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b69cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b69d0:	bf08      	it	eq
   b69d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b69d6:	bd70      	pop	{r4, r5, r6, pc}
   b69d8:	f094 0f00 	teq	r4, #0
   b69dc:	d10f      	bne.n	b69fe <__aeabi_dmul+0x1c2>
   b69de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b69e2:	0040      	lsls	r0, r0, #1
   b69e4:	eb41 0101 	adc.w	r1, r1, r1
   b69e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b69ec:	bf08      	it	eq
   b69ee:	3c01      	subeq	r4, #1
   b69f0:	d0f7      	beq.n	b69e2 <__aeabi_dmul+0x1a6>
   b69f2:	ea41 0106 	orr.w	r1, r1, r6
   b69f6:	f095 0f00 	teq	r5, #0
   b69fa:	bf18      	it	ne
   b69fc:	4770      	bxne	lr
   b69fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6a02:	0052      	lsls	r2, r2, #1
   b6a04:	eb43 0303 	adc.w	r3, r3, r3
   b6a08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6a0c:	bf08      	it	eq
   b6a0e:	3d01      	subeq	r5, #1
   b6a10:	d0f7      	beq.n	b6a02 <__aeabi_dmul+0x1c6>
   b6a12:	ea43 0306 	orr.w	r3, r3, r6
   b6a16:	4770      	bx	lr
   b6a18:	ea94 0f0c 	teq	r4, ip
   b6a1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6a20:	bf18      	it	ne
   b6a22:	ea95 0f0c 	teqne	r5, ip
   b6a26:	d00c      	beq.n	b6a42 <__aeabi_dmul+0x206>
   b6a28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a2c:	bf18      	it	ne
   b6a2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a32:	d1d1      	bne.n	b69d8 <__aeabi_dmul+0x19c>
   b6a34:	ea81 0103 	eor.w	r1, r1, r3
   b6a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a3c:	f04f 0000 	mov.w	r0, #0
   b6a40:	bd70      	pop	{r4, r5, r6, pc}
   b6a42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a46:	bf06      	itte	eq
   b6a48:	4610      	moveq	r0, r2
   b6a4a:	4619      	moveq	r1, r3
   b6a4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a50:	d019      	beq.n	b6a86 <__aeabi_dmul+0x24a>
   b6a52:	ea94 0f0c 	teq	r4, ip
   b6a56:	d102      	bne.n	b6a5e <__aeabi_dmul+0x222>
   b6a58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6a5c:	d113      	bne.n	b6a86 <__aeabi_dmul+0x24a>
   b6a5e:	ea95 0f0c 	teq	r5, ip
   b6a62:	d105      	bne.n	b6a70 <__aeabi_dmul+0x234>
   b6a64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6a68:	bf1c      	itt	ne
   b6a6a:	4610      	movne	r0, r2
   b6a6c:	4619      	movne	r1, r3
   b6a6e:	d10a      	bne.n	b6a86 <__aeabi_dmul+0x24a>
   b6a70:	ea81 0103 	eor.w	r1, r1, r3
   b6a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6a80:	f04f 0000 	mov.w	r0, #0
   b6a84:	bd70      	pop	{r4, r5, r6, pc}
   b6a86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6a8e:	bd70      	pop	{r4, r5, r6, pc}

000b6a90 <__aeabi_ddiv>:
   b6a90:	b570      	push	{r4, r5, r6, lr}
   b6a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6a9e:	bf1d      	ittte	ne
   b6aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6aa4:	ea94 0f0c 	teqne	r4, ip
   b6aa8:	ea95 0f0c 	teqne	r5, ip
   b6aac:	f000 f8a7 	bleq	b6bfe <__aeabi_ddiv+0x16e>
   b6ab0:	eba4 0405 	sub.w	r4, r4, r5
   b6ab4:	ea81 0e03 	eor.w	lr, r1, r3
   b6ab8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6abc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ac0:	f000 8088 	beq.w	b6bd4 <__aeabi_ddiv+0x144>
   b6ac4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ac8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6acc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6ad0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6ad4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6ad8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6adc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6ae0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6ae4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6ae8:	429d      	cmp	r5, r3
   b6aea:	bf08      	it	eq
   b6aec:	4296      	cmpeq	r6, r2
   b6aee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6af2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6af6:	d202      	bcs.n	b6afe <__aeabi_ddiv+0x6e>
   b6af8:	085b      	lsrs	r3, r3, #1
   b6afa:	ea4f 0232 	mov.w	r2, r2, rrx
   b6afe:	1ab6      	subs	r6, r6, r2
   b6b00:	eb65 0503 	sbc.w	r5, r5, r3
   b6b04:	085b      	lsrs	r3, r3, #1
   b6b06:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6b0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6b12:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b1a:	bf22      	ittt	cs
   b6b1c:	1ab6      	subcs	r6, r6, r2
   b6b1e:	4675      	movcs	r5, lr
   b6b20:	ea40 000c 	orrcs.w	r0, r0, ip
   b6b24:	085b      	lsrs	r3, r3, #1
   b6b26:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b32:	bf22      	ittt	cs
   b6b34:	1ab6      	subcs	r6, r6, r2
   b6b36:	4675      	movcs	r5, lr
   b6b38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6b3c:	085b      	lsrs	r3, r3, #1
   b6b3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b42:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b4a:	bf22      	ittt	cs
   b6b4c:	1ab6      	subcs	r6, r6, r2
   b6b4e:	4675      	movcs	r5, lr
   b6b50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6b54:	085b      	lsrs	r3, r3, #1
   b6b56:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b62:	bf22      	ittt	cs
   b6b64:	1ab6      	subcs	r6, r6, r2
   b6b66:	4675      	movcs	r5, lr
   b6b68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6b6c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6b70:	d018      	beq.n	b6ba4 <__aeabi_ddiv+0x114>
   b6b72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6b76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6b7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6b7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6b82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6b86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6b8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6b8e:	d1c0      	bne.n	b6b12 <__aeabi_ddiv+0x82>
   b6b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6b94:	d10b      	bne.n	b6bae <__aeabi_ddiv+0x11e>
   b6b96:	ea41 0100 	orr.w	r1, r1, r0
   b6b9a:	f04f 0000 	mov.w	r0, #0
   b6b9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6ba2:	e7b6      	b.n	b6b12 <__aeabi_ddiv+0x82>
   b6ba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6ba8:	bf04      	itt	eq
   b6baa:	4301      	orreq	r1, r0
   b6bac:	2000      	moveq	r0, #0
   b6bae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6bb2:	bf88      	it	hi
   b6bb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6bb8:	f63f aeaf 	bhi.w	b691a <__aeabi_dmul+0xde>
   b6bbc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6bc0:	bf04      	itt	eq
   b6bc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6bc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6bca:	f150 0000 	adcs.w	r0, r0, #0
   b6bce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6bd2:	bd70      	pop	{r4, r5, r6, pc}
   b6bd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6bd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6bdc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6be0:	bfc2      	ittt	gt
   b6be2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6be6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6bea:	bd70      	popgt	{r4, r5, r6, pc}
   b6bec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6bf0:	f04f 0e00 	mov.w	lr, #0
   b6bf4:	3c01      	subs	r4, #1
   b6bf6:	e690      	b.n	b691a <__aeabi_dmul+0xde>
   b6bf8:	ea45 0e06 	orr.w	lr, r5, r6
   b6bfc:	e68d      	b.n	b691a <__aeabi_dmul+0xde>
   b6bfe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6c02:	ea94 0f0c 	teq	r4, ip
   b6c06:	bf08      	it	eq
   b6c08:	ea95 0f0c 	teqeq	r5, ip
   b6c0c:	f43f af3b 	beq.w	b6a86 <__aeabi_dmul+0x24a>
   b6c10:	ea94 0f0c 	teq	r4, ip
   b6c14:	d10a      	bne.n	b6c2c <__aeabi_ddiv+0x19c>
   b6c16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6c1a:	f47f af34 	bne.w	b6a86 <__aeabi_dmul+0x24a>
   b6c1e:	ea95 0f0c 	teq	r5, ip
   b6c22:	f47f af25 	bne.w	b6a70 <__aeabi_dmul+0x234>
   b6c26:	4610      	mov	r0, r2
   b6c28:	4619      	mov	r1, r3
   b6c2a:	e72c      	b.n	b6a86 <__aeabi_dmul+0x24a>
   b6c2c:	ea95 0f0c 	teq	r5, ip
   b6c30:	d106      	bne.n	b6c40 <__aeabi_ddiv+0x1b0>
   b6c32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6c36:	f43f aefd 	beq.w	b6a34 <__aeabi_dmul+0x1f8>
   b6c3a:	4610      	mov	r0, r2
   b6c3c:	4619      	mov	r1, r3
   b6c3e:	e722      	b.n	b6a86 <__aeabi_dmul+0x24a>
   b6c40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c44:	bf18      	it	ne
   b6c46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c4a:	f47f aec5 	bne.w	b69d8 <__aeabi_dmul+0x19c>
   b6c4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6c52:	f47f af0d 	bne.w	b6a70 <__aeabi_dmul+0x234>
   b6c56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6c5a:	f47f aeeb 	bne.w	b6a34 <__aeabi_dmul+0x1f8>
   b6c5e:	e712      	b.n	b6a86 <__aeabi_dmul+0x24a>

000b6c60 <__gedf2>:
   b6c60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6c64:	e006      	b.n	b6c74 <__cmpdf2+0x4>
   b6c66:	bf00      	nop

000b6c68 <__ledf2>:
   b6c68:	f04f 0c01 	mov.w	ip, #1
   b6c6c:	e002      	b.n	b6c74 <__cmpdf2+0x4>
   b6c6e:	bf00      	nop

000b6c70 <__cmpdf2>:
   b6c70:	f04f 0c01 	mov.w	ip, #1
   b6c74:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6c84:	bf18      	it	ne
   b6c86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6c8a:	d01b      	beq.n	b6cc4 <__cmpdf2+0x54>
   b6c8c:	b001      	add	sp, #4
   b6c8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6c92:	bf0c      	ite	eq
   b6c94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6c98:	ea91 0f03 	teqne	r1, r3
   b6c9c:	bf02      	ittt	eq
   b6c9e:	ea90 0f02 	teqeq	r0, r2
   b6ca2:	2000      	moveq	r0, #0
   b6ca4:	4770      	bxeq	lr
   b6ca6:	f110 0f00 	cmn.w	r0, #0
   b6caa:	ea91 0f03 	teq	r1, r3
   b6cae:	bf58      	it	pl
   b6cb0:	4299      	cmppl	r1, r3
   b6cb2:	bf08      	it	eq
   b6cb4:	4290      	cmpeq	r0, r2
   b6cb6:	bf2c      	ite	cs
   b6cb8:	17d8      	asrcs	r0, r3, #31
   b6cba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6cbe:	f040 0001 	orr.w	r0, r0, #1
   b6cc2:	4770      	bx	lr
   b6cc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6cc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ccc:	d102      	bne.n	b6cd4 <__cmpdf2+0x64>
   b6cce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6cd2:	d107      	bne.n	b6ce4 <__cmpdf2+0x74>
   b6cd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6cdc:	d1d6      	bne.n	b6c8c <__cmpdf2+0x1c>
   b6cde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6ce2:	d0d3      	beq.n	b6c8c <__cmpdf2+0x1c>
   b6ce4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6ce8:	4770      	bx	lr
   b6cea:	bf00      	nop

000b6cec <__aeabi_cdrcmple>:
   b6cec:	4684      	mov	ip, r0
   b6cee:	4610      	mov	r0, r2
   b6cf0:	4662      	mov	r2, ip
   b6cf2:	468c      	mov	ip, r1
   b6cf4:	4619      	mov	r1, r3
   b6cf6:	4663      	mov	r3, ip
   b6cf8:	e000      	b.n	b6cfc <__aeabi_cdcmpeq>
   b6cfa:	bf00      	nop

000b6cfc <__aeabi_cdcmpeq>:
   b6cfc:	b501      	push	{r0, lr}
   b6cfe:	f7ff ffb7 	bl	b6c70 <__cmpdf2>
   b6d02:	2800      	cmp	r0, #0
   b6d04:	bf48      	it	mi
   b6d06:	f110 0f00 	cmnmi.w	r0, #0
   b6d0a:	bd01      	pop	{r0, pc}

000b6d0c <__aeabi_dcmpeq>:
   b6d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d10:	f7ff fff4 	bl	b6cfc <__aeabi_cdcmpeq>
   b6d14:	bf0c      	ite	eq
   b6d16:	2001      	moveq	r0, #1
   b6d18:	2000      	movne	r0, #0
   b6d1a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d1e:	bf00      	nop

000b6d20 <__aeabi_dcmplt>:
   b6d20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d24:	f7ff ffea 	bl	b6cfc <__aeabi_cdcmpeq>
   b6d28:	bf34      	ite	cc
   b6d2a:	2001      	movcc	r0, #1
   b6d2c:	2000      	movcs	r0, #0
   b6d2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d32:	bf00      	nop

000b6d34 <__aeabi_dcmple>:
   b6d34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d38:	f7ff ffe0 	bl	b6cfc <__aeabi_cdcmpeq>
   b6d3c:	bf94      	ite	ls
   b6d3e:	2001      	movls	r0, #1
   b6d40:	2000      	movhi	r0, #0
   b6d42:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d46:	bf00      	nop

000b6d48 <__aeabi_dcmpge>:
   b6d48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d4c:	f7ff ffce 	bl	b6cec <__aeabi_cdrcmple>
   b6d50:	bf94      	ite	ls
   b6d52:	2001      	movls	r0, #1
   b6d54:	2000      	movhi	r0, #0
   b6d56:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d5a:	bf00      	nop

000b6d5c <__aeabi_dcmpgt>:
   b6d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d60:	f7ff ffc4 	bl	b6cec <__aeabi_cdrcmple>
   b6d64:	bf34      	ite	cc
   b6d66:	2001      	movcc	r0, #1
   b6d68:	2000      	movcs	r0, #0
   b6d6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d6e:	bf00      	nop

000b6d70 <__aeabi_d2iz>:
   b6d70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6d74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6d78:	d215      	bcs.n	b6da6 <__aeabi_d2iz+0x36>
   b6d7a:	d511      	bpl.n	b6da0 <__aeabi_d2iz+0x30>
   b6d7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6d80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6d84:	d912      	bls.n	b6dac <__aeabi_d2iz+0x3c>
   b6d86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6d8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6d92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6d96:	fa23 f002 	lsr.w	r0, r3, r2
   b6d9a:	bf18      	it	ne
   b6d9c:	4240      	negne	r0, r0
   b6d9e:	4770      	bx	lr
   b6da0:	f04f 0000 	mov.w	r0, #0
   b6da4:	4770      	bx	lr
   b6da6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6daa:	d105      	bne.n	b6db8 <__aeabi_d2iz+0x48>
   b6dac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6db0:	bf08      	it	eq
   b6db2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6db6:	4770      	bx	lr
   b6db8:	f04f 0000 	mov.w	r0, #0
   b6dbc:	4770      	bx	lr
   b6dbe:	bf00      	nop

000b6dc0 <__aeabi_d2f>:
   b6dc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6dc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6dc8:	bf24      	itt	cs
   b6dca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6dce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6dd2:	d90d      	bls.n	b6df0 <__aeabi_d2f+0x30>
   b6dd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6dd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6ddc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6de0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6de4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6de8:	bf08      	it	eq
   b6dea:	f020 0001 	biceq.w	r0, r0, #1
   b6dee:	4770      	bx	lr
   b6df0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6df4:	d121      	bne.n	b6e3a <__aeabi_d2f+0x7a>
   b6df6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6dfa:	bfbc      	itt	lt
   b6dfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6e00:	4770      	bxlt	lr
   b6e02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e06:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6e0a:	f1c2 0218 	rsb	r2, r2, #24
   b6e0e:	f1c2 0c20 	rsb	ip, r2, #32
   b6e12:	fa10 f30c 	lsls.w	r3, r0, ip
   b6e16:	fa20 f002 	lsr.w	r0, r0, r2
   b6e1a:	bf18      	it	ne
   b6e1c:	f040 0001 	orrne.w	r0, r0, #1
   b6e20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6e24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6e28:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6e2c:	ea40 000c 	orr.w	r0, r0, ip
   b6e30:	fa23 f302 	lsr.w	r3, r3, r2
   b6e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6e38:	e7cc      	b.n	b6dd4 <__aeabi_d2f+0x14>
   b6e3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6e3e:	d107      	bne.n	b6e50 <__aeabi_d2f+0x90>
   b6e40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6e44:	bf1e      	ittt	ne
   b6e46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6e4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6e4e:	4770      	bxne	lr
   b6e50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6e54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6e58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6e5c:	4770      	bx	lr
   b6e5e:	bf00      	nop

000b6e60 <atexit>:
   b6e60:	2300      	movs	r3, #0
   b6e62:	4601      	mov	r1, r0
   b6e64:	461a      	mov	r2, r3
   b6e66:	4618      	mov	r0, r3
   b6e68:	f000 b84c 	b.w	b6f04 <__register_exitproc>

000b6e6c <memcpy>:
   b6e6c:	440a      	add	r2, r1
   b6e6e:	4291      	cmp	r1, r2
   b6e70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6e74:	d100      	bne.n	b6e78 <memcpy+0xc>
   b6e76:	4770      	bx	lr
   b6e78:	b510      	push	{r4, lr}
   b6e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6e82:	4291      	cmp	r1, r2
   b6e84:	d1f9      	bne.n	b6e7a <memcpy+0xe>
   b6e86:	bd10      	pop	{r4, pc}

000b6e88 <memset>:
   b6e88:	4402      	add	r2, r0
   b6e8a:	4603      	mov	r3, r0
   b6e8c:	4293      	cmp	r3, r2
   b6e8e:	d100      	bne.n	b6e92 <memset+0xa>
   b6e90:	4770      	bx	lr
   b6e92:	f803 1b01 	strb.w	r1, [r3], #1
   b6e96:	e7f9      	b.n	b6e8c <memset+0x4>

000b6e98 <srand>:
   b6e98:	b538      	push	{r3, r4, r5, lr}
   b6e9a:	4b10      	ldr	r3, [pc, #64]	; (b6edc <srand+0x44>)
   b6e9c:	681d      	ldr	r5, [r3, #0]
   b6e9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ea0:	4604      	mov	r4, r0
   b6ea2:	b9b3      	cbnz	r3, b6ed2 <srand+0x3a>
   b6ea4:	2018      	movs	r0, #24
   b6ea6:	f7fd fb71 	bl	b458c <malloc>
   b6eaa:	4602      	mov	r2, r0
   b6eac:	63a8      	str	r0, [r5, #56]	; 0x38
   b6eae:	b920      	cbnz	r0, b6eba <srand+0x22>
   b6eb0:	4b0b      	ldr	r3, [pc, #44]	; (b6ee0 <srand+0x48>)
   b6eb2:	480c      	ldr	r0, [pc, #48]	; (b6ee4 <srand+0x4c>)
   b6eb4:	2142      	movs	r1, #66	; 0x42
   b6eb6:	f7fd fb81 	bl	b45bc <__assert_func>
   b6eba:	490b      	ldr	r1, [pc, #44]	; (b6ee8 <srand+0x50>)
   b6ebc:	4b0b      	ldr	r3, [pc, #44]	; (b6eec <srand+0x54>)
   b6ebe:	e9c0 1300 	strd	r1, r3, [r0]
   b6ec2:	4b0b      	ldr	r3, [pc, #44]	; (b6ef0 <srand+0x58>)
   b6ec4:	6083      	str	r3, [r0, #8]
   b6ec6:	230b      	movs	r3, #11
   b6ec8:	8183      	strh	r3, [r0, #12]
   b6eca:	2100      	movs	r1, #0
   b6ecc:	2001      	movs	r0, #1
   b6ece:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6ed2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6ed4:	2200      	movs	r2, #0
   b6ed6:	611c      	str	r4, [r3, #16]
   b6ed8:	615a      	str	r2, [r3, #20]
   b6eda:	bd38      	pop	{r3, r4, r5, pc}
   b6edc:	2003e624 	.word	0x2003e624
   b6ee0:	000b7358 	.word	0x000b7358
   b6ee4:	000b736f 	.word	0x000b736f
   b6ee8:	abcd330e 	.word	0xabcd330e
   b6eec:	e66d1234 	.word	0xe66d1234
   b6ef0:	0005deec 	.word	0x0005deec

000b6ef4 <strlen>:
   b6ef4:	4603      	mov	r3, r0
   b6ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6efa:	2a00      	cmp	r2, #0
   b6efc:	d1fb      	bne.n	b6ef6 <strlen+0x2>
   b6efe:	1a18      	subs	r0, r3, r0
   b6f00:	3801      	subs	r0, #1
   b6f02:	4770      	bx	lr

000b6f04 <__register_exitproc>:
   b6f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6f08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6fc4 <__register_exitproc+0xc0>
   b6f0c:	4606      	mov	r6, r0
   b6f0e:	f8d8 0000 	ldr.w	r0, [r8]
   b6f12:	461f      	mov	r7, r3
   b6f14:	460d      	mov	r5, r1
   b6f16:	4691      	mov	r9, r2
   b6f18:	f000 f856 	bl	b6fc8 <__retarget_lock_acquire_recursive>
   b6f1c:	4b25      	ldr	r3, [pc, #148]	; (b6fb4 <__register_exitproc+0xb0>)
   b6f1e:	681c      	ldr	r4, [r3, #0]
   b6f20:	b934      	cbnz	r4, b6f30 <__register_exitproc+0x2c>
   b6f22:	4c25      	ldr	r4, [pc, #148]	; (b6fb8 <__register_exitproc+0xb4>)
   b6f24:	601c      	str	r4, [r3, #0]
   b6f26:	4b25      	ldr	r3, [pc, #148]	; (b6fbc <__register_exitproc+0xb8>)
   b6f28:	b113      	cbz	r3, b6f30 <__register_exitproc+0x2c>
   b6f2a:	681b      	ldr	r3, [r3, #0]
   b6f2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6f30:	6863      	ldr	r3, [r4, #4]
   b6f32:	2b1f      	cmp	r3, #31
   b6f34:	dd07      	ble.n	b6f46 <__register_exitproc+0x42>
   b6f36:	f8d8 0000 	ldr.w	r0, [r8]
   b6f3a:	f000 f847 	bl	b6fcc <__retarget_lock_release_recursive>
   b6f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6f46:	b34e      	cbz	r6, b6f9c <__register_exitproc+0x98>
   b6f48:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6f4c:	b988      	cbnz	r0, b6f72 <__register_exitproc+0x6e>
   b6f4e:	4b1c      	ldr	r3, [pc, #112]	; (b6fc0 <__register_exitproc+0xbc>)
   b6f50:	b923      	cbnz	r3, b6f5c <__register_exitproc+0x58>
   b6f52:	f8d8 0000 	ldr.w	r0, [r8]
   b6f56:	f000 f838 	bl	b6fca <__retarget_lock_release>
   b6f5a:	e7f0      	b.n	b6f3e <__register_exitproc+0x3a>
   b6f5c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6f60:	f7fd fb14 	bl	b458c <malloc>
   b6f64:	2800      	cmp	r0, #0
   b6f66:	d0f4      	beq.n	b6f52 <__register_exitproc+0x4e>
   b6f68:	2300      	movs	r3, #0
   b6f6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6f6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6f72:	6863      	ldr	r3, [r4, #4]
   b6f74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6f78:	2201      	movs	r2, #1
   b6f7a:	409a      	lsls	r2, r3
   b6f7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6f80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6f84:	4313      	orrs	r3, r2
   b6f86:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6f8a:	2e02      	cmp	r6, #2
   b6f8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6f90:	bf02      	ittt	eq
   b6f92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6f96:	4313      	orreq	r3, r2
   b6f98:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6f9c:	6863      	ldr	r3, [r4, #4]
   b6f9e:	f8d8 0000 	ldr.w	r0, [r8]
   b6fa2:	1c5a      	adds	r2, r3, #1
   b6fa4:	3302      	adds	r3, #2
   b6fa6:	6062      	str	r2, [r4, #4]
   b6fa8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6fac:	f000 f80e 	bl	b6fcc <__retarget_lock_release_recursive>
   b6fb0:	2000      	movs	r0, #0
   b6fb2:	e7c6      	b.n	b6f42 <__register_exitproc+0x3e>
   b6fb4:	2003e7e8 	.word	0x2003e7e8
   b6fb8:	2003e75c 	.word	0x2003e75c
   b6fbc:	00000000 	.word	0x00000000
   b6fc0:	000b458d 	.word	0x000b458d
   b6fc4:	2003e688 	.word	0x2003e688

000b6fc8 <__retarget_lock_acquire_recursive>:
   b6fc8:	4770      	bx	lr

000b6fca <__retarget_lock_release>:
   b6fca:	4770      	bx	lr

000b6fcc <__retarget_lock_release_recursive>:
   b6fcc:	4770      	bx	lr

000b6fce <link_code_end>:
	...

000b6fd0 <dynalib_user>:
   b6fd0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6fe0:	0000 0000 6870 746f 646f 6f69 6564 6156     ....photodiodeVa
   b6ff0:	756c 3d65 6925 2c0a 7262 6769 7468 656e     lue=%i.,brightne
   b7000:	7373 253d 0a69 0000                         ss=%i...

000b7008 <_ZTVN5spark13EthernetClassE>:
	...
   b7010:	4663 000b 4659 000b 464f 000b 4645 000b     cF..YF..OF..EF..
   b7020:	4639 000b 462d 000b 4855 000b 485d 000b     9F..-F..UH..]H..
   b7030:	4621 000b 4619 000b 460f 000b 4605 000b     !F...F...F...F..
   b7040:	488d 000b                                   .H..

000b7044 <_ZTV7TwoWire>:
	...
   b704c:	4681 000b 46cb 000b 46a3 000b 4683 000b     .F...F...F...F..
   b705c:	46ab 000b 46b3 000b 46bb 000b 46c3 000b     .F...F...F...F..

000b706c <_ZTV9IPAddress>:
	...
   b7074:	4725 000b 4715 000b 4717 000b 7061 0070     %G...G...G..app.

000b7084 <_ZTVN5spark12NetworkClassE>:
	...
   b708c:	4815 000b 481f 000b 4829 000b 4833 000b     .H...H..)H..3H..
   b709c:	483d 000b 4849 000b 4855 000b 485d 000b     =H..IH..UH..]H..
   b70ac:	4865 000b 4871 000b 4879 000b 4883 000b     eH..qH..yH...H..
   b70bc:	488d 000b 5925 252d 2d6d 6425 2554 3a48     .H..%Y-%m-%dT%H:
   b70cc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b70dc <_ZTV11USARTSerial>:
	...
   b70e4:	4bd1 000b 4c3d 000b 4c15 000b 4979 000b     .K..=L...L..yI..
   b70f4:	4be5 000b 4c01 000b 4bf3 000b 4c0f 000b     .K...L...K...L..
   b7104:	4bd3 000b 4bd7 000b                         .K...K..

000b710c <_ZTV9USBSerial>:
	...
   b7114:	4c7b 000b 4ce3 000b 4cb9 000b 4979 000b     {L...L...L..yI..
   b7124:	4cab 000b 4c7d 000b 4c8d 000b 4cdd 000b     .L..}L...L...L..
   b7134:	4c9d 000b 4c75 000b                         .L..uL..

000b713c <_ZTVN5spark9WiFiClassE>:
	...
   b7144:	4ddb 000b 4dd1 000b 4dc7 000b 4d7d 000b     .M...M...M..}M..
   b7154:	4dbb 000b 4daf 000b 4855 000b 485d 000b     .M...M..UH..]H..
   b7164:	4da3 000b 4d9b 000b 4d91 000b 4d87 000b     .M...M...M...M..
   b7174:	488d 000b                                   .H..

000b7178 <_ZSt7nothrow>:
   b7178:	0000 0000                                   ....

000b717c <npio2_hw>:
   b717c:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
   b718c:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
   b719c:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
   b71ac:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
   b71bc:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
   b71cc:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
   b71dc:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
   b71ec:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

000b71fc <two_over_pi>:
   b71fc:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
   b720c:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
   b721c:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
   b722c:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
   b723c:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
   b724c:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
   b725c:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
   b726c:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
   b727c:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
   b728c:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
   b729c:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
   b72ac:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
   b72bc:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
   b72cc:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
   b72dc:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
   b72ec:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
   b72fc:	e27b 0060 8c6b 00c0 0000 0000               {.`.k.......

000b7308 <PIo2>:
   b7308:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
   b7318:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
   b7328:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
   b7338:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

000b7348 <init_jk>:
   b7348:	0002 0000 0003 0000 0004 0000 0006 0000     ................
   b7358:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b7368:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b7378:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b7388:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b7398:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b73a8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b73b8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b73c8 <link_const_variable_data_end>:
   b73c8:	000b41ed 	.word	0x000b41ed
   b73cc:	000b45f5 	.word	0x000b45f5
   b73d0:	000b466d 	.word	0x000b466d
   b73d4:	000b4805 	.word	0x000b4805
   b73d8:	000b4965 	.word	0x000b4965
   b73dc:	000b4a85 	.word	0x000b4a85
   b73e0:	000b4b99 	.word	0x000b4b99
   b73e4:	000b4bbd 	.word	0x000b4bbd
   b73e8:	000b4de5 	.word	0x000b4de5

000b73ec <link_constructors_end>:
   b73ec:	00000000 	.word	0x00000000
