
/Users/jamesblack/Documents/IoT/smartshop/SmartShopSourceCode001/target/4.0.2/argon/SmartShopSourceCode001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005410  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9430  000b9430  00009430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9454  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004a0  2003e14c  000b9458  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b98f8  000b98f8  000298f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9920  000b9920  00029920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011d808  00000000  00000000  00029924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b87  00000000  00000000  0014712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003c640  00000000  00000000  0015acb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fe0  00000000  00000000  001972f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a7f0  00000000  00000000  0019a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a787  00000000  00000000  001a4ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000437ef  00000000  00000000  001df24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134baf  00000000  00000000  00222a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b7c  00000000  00000000  003575e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fc1d 	bl	b8870 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fc25 	bl	b888c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e14c 	.word	0x2003e14c
   b404c:	000b9458 	.word	0x000b9458
   b4050:	2003e5ec 	.word	0x2003e5ec
   b4054:	2003e5ec 	.word	0x2003e5ec
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fc57 	bl	b6914 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9400 	.word	0x000b9400
   b4080:	000b9428 	.word	0x000b9428

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b854 	b.w	b4130 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f88d 	bl	b41a8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bbf7 	b.w	b6884 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bc0f 	b.w	b58b8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bc0d 	b.w	b58b8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bc13 	b.w	b58c8 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fb68 	bl	b5780 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5411 	.word	0x000b5411
   b40b8:	000b89fc 	.word	0x000b89fc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b503      	push	{r0, r1, lr}
   b40d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40da:	f001 fe6a 	bl	b5db2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40de:	b002      	add	sp, #8
   b40e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e4:	b003      	add	sp, #12
   b40e6:	4770      	bx	lr

000b40e8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40e8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40ea:	6984      	ldr	r4, [r0, #24]
   b40ec:	4b0a      	ldr	r3, [pc, #40]	; (b4118 <_ZN9TCPClientD1Ev+0x30>)
   b40ee:	6003      	str	r3, [r0, #0]
   b40f0:	4605      	mov	r5, r0
   b40f2:	b17c      	cbz	r4, b4114 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40f4:	6863      	ldr	r3, [r4, #4]
   b40f6:	3b01      	subs	r3, #1
   b40f8:	6063      	str	r3, [r4, #4]
   b40fa:	b95b      	cbnz	r3, b4114 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b40fc:	6823      	ldr	r3, [r4, #0]
   b40fe:	4620      	mov	r0, r4
   b4100:	689b      	ldr	r3, [r3, #8]
   b4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4104:	68a3      	ldr	r3, [r4, #8]
   b4106:	3b01      	subs	r3, #1
   b4108:	60a3      	str	r3, [r4, #8]
   b410a:	b91b      	cbnz	r3, b4114 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b410c:	6823      	ldr	r3, [r4, #0]
   b410e:	4620      	mov	r0, r4
   b4110:	68db      	ldr	r3, [r3, #12]
   b4112:	4798      	blx	r3
   b4114:	4628      	mov	r0, r5
   b4116:	bd38      	pop	{r3, r4, r5, pc}
   b4118:	000b9188 	.word	0x000b9188

000b411c <_ZN9TCPClientD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	4604      	mov	r4, r0
   b4120:	f7ff ffe2 	bl	b40e8 <_ZN9TCPClientD1Ev>
   b4124:	4620      	mov	r0, r4
   b4126:	211c      	movs	r1, #28
   b4128:	f7ff ffb9 	bl	b409e <_ZdlPvj>
   b412c:	4620      	mov	r0, r4
   b412e:	bd10      	pop	{r4, pc}

000b4130 <setup>:
SYSTEM_MODE(SEMI_AUTOMATIC); // not online
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B); // exact pixel used

void pixelFill(int startPixel, int endPixel, int hexColor);

void setup() {  
   b4130:	b510      	push	{r4, lr}
  pixel.begin();      
   b4132:	4818      	ldr	r0, [pc, #96]	; (b4194 <setup+0x64>)
  pixel.show();
  pixel.setBrightness(30); // sets brightness on scale 1-255
  Wire.begin();

  // Initialize OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4134:	4c18      	ldr	r4, [pc, #96]	; (b4198 <setup+0x68>)
  pixel.begin();      
   b4136:	f000 fef4 	bl	b4f22 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   b413a:	4816      	ldr	r0, [pc, #88]	; (b4194 <setup+0x64>)
   b413c:	f000 ff2a 	bl	b4f94 <_ZN17Adafruit_NeoPixel4showEv>
  pixel.setBrightness(30); // sets brightness on scale 1-255
   b4140:	211e      	movs	r1, #30
   b4142:	4814      	ldr	r0, [pc, #80]	; (b4194 <setup+0x64>)
   b4144:	f001 f91f 	bl	b5386 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  Wire.begin();
   b4148:	f002 fcd0 	bl	b6aec <_Z19__fetch_global_Wirev>
   b414c:	f001 fc80 	bl	b5a50 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4150:	223c      	movs	r2, #60	; 0x3c
   b4152:	2102      	movs	r1, #2
   b4154:	4620      	mov	r0, r4
   b4156:	f000 fdef 	bl	b4d38 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b415a:	4620      	mov	r0, r4
   b415c:	f000 fd04 	bl	b4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4160:	4620      	mov	r0, r4
   b4162:	2101      	movs	r1, #1
   b4164:	f000 fb17 	bl	b4796 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b4168:	4620      	mov	r0, r4
   b416a:	2101      	movs	r1, #1
   b416c:	f000 fb18 	bl	b47a0 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0); // Set cursor position for text
   b4170:	2200      	movs	r2, #0
   b4172:	4611      	mov	r1, r2
   b4174:	4620      	mov	r0, r4
   b4176:	f000 fb0b 	bl	b4790 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("SMARTSHOP\n");
   b417a:	4908      	ldr	r1, [pc, #32]	; (b419c <setup+0x6c>)
   b417c:	4620      	mov	r0, r4
   b417e:	f7ff ffa5 	bl	b40cc <_ZN5Print6printfEPKcz>
  display.printf("Smoke detected!\n");
   b4182:	4620      	mov	r0, r4
   b4184:	4906      	ldr	r1, [pc, #24]	; (b41a0 <setup+0x70>)
   b4186:	f7ff ffa1 	bl	b40cc <_ZN5Print6printfEPKcz>
  display.display();
   b418a:	4620      	mov	r0, r4
}
   b418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4190:	f000 bd62 	b.w	b4c58 <_ZN16Adafruit_SSD13067displayEv>
   b4194:	2003e694 	.word	0x2003e694
   b4198:	2003e658 	.word	0x2003e658
   b419c:	000b8ae9 	.word	0x000b8ae9
   b41a0:	000b8af4 	.word	0x000b8af4
   b41a4:	00000000 	.word	0x00000000

000b41a8 <loop>:

void loop() {  // command that begins the "function" loop is called for repeatedly AFTER set up has executed, main code goes here
   b41a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b41ac:	ed2d 8b02 	vpush	{d8}
  previousButtonState = buttonState;
   b41b0:	4d69      	ldr	r5, [pc, #420]	; (b4358 <loop+0x1b0>)
   b41b2:	4e6a      	ldr	r6, [pc, #424]	; (b435c <loop+0x1b4>)
   b41b4:	782b      	ldrb	r3, [r5, #0]
   b41b6:	7033      	strb	r3, [r6, #0]
  buttonState = digitalRead(BUTTONPIN);
   b41b8:	2004      	movs	r0, #4
   b41ba:	f002 fc45 	bl	b6a48 <digitalRead>
  
  duration = pulseIn(pin, LOW);
   b41be:	4b68      	ldr	r3, [pc, #416]	; (b4360 <loop+0x1b8>)
  lowpulseoccupancy += duration; // Increment low pulse occupancy with each reading
   b41c0:	4c68      	ldr	r4, [pc, #416]	; (b4364 <loop+0x1bc>)
  buttonState = digitalRead(BUTTONPIN);
   b41c2:	3800      	subs	r0, #0
   b41c4:	bf18      	it	ne
   b41c6:	2001      	movne	r0, #1
   b41c8:	7028      	strb	r0, [r5, #0]
  duration = pulseIn(pin, LOW);
   b41ca:	2100      	movs	r1, #0
   b41cc:	8818      	ldrh	r0, [r3, #0]
   b41ce:	f002 fc70 	bl	b6ab2 <pulseIn>
   b41d2:	4b65      	ldr	r3, [pc, #404]	; (b4368 <loop+0x1c0>)
   b41d4:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy += duration; // Increment low pulse occupancy with each reading
   b41d6:	6823      	ldr	r3, [r4, #0]
   b41d8:	4418      	add	r0, r3

  if (buttonState && !previousButtonState) {  // check if button has just been pressed
   b41da:	782b      	ldrb	r3, [r5, #0]
  lowpulseoccupancy += duration; // Increment low pulse occupancy with each reading
   b41dc:	6020      	str	r0, [r4, #0]
  if (buttonState && !previousButtonState) {  // check if button has just been pressed
   b41de:	2b00      	cmp	r3, #0
   b41e0:	f000 80a5 	beq.w	b432e <loop+0x186>
   b41e4:	7835      	ldrb	r5, [r6, #0]
   b41e6:	2d00      	cmp	r5, #0
   b41e8:	f040 80a1 	bne.w	b432e <loop+0x186>
    if (pixel.getPixelColor(0) == 0) {  // check if pixels are currently off
   b41ec:	485f      	ldr	r0, [pc, #380]	; (b436c <loop+0x1c4>)
   b41ee:	4629      	mov	r1, r5
   b41f0:	f001 f87c 	bl	b52ec <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
   b41f4:	2800      	cmp	r0, #0
   b41f6:	f000 809a 	beq.w	b432e <loop+0x186>
      pixelFill(0, 46,0x008000);  // selecting what pixels on track will be filled , selecting the color
    } else {
      pixel.clear(); // turn off pixels
   b41fa:	485c      	ldr	r0, [pc, #368]	; (b436c <loop+0x1c4>)
      pixel.show();

      if ((millis() - starttime) > sampletime_ms) {
   b41fc:	f8df a190 	ldr.w	sl, [pc, #400]	; b4390 <loop+0x1e8>
      pixel.clear(); // turn off pixels
   b4200:	f001 f8e8 	bl	b53d4 <_ZN17Adafruit_NeoPixel5clearEv>
      pixel.show();
   b4204:	4859      	ldr	r0, [pc, #356]	; (b436c <loop+0x1c4>)
   b4206:	f000 fec5 	bl	b4f94 <_ZN17Adafruit_NeoPixel4showEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b420a:	f001 f911 	bl	b5430 <HAL_Timer_Get_Milli_Seconds>
      if ((millis() - starttime) > sampletime_ms) {
   b420e:	4b58      	ldr	r3, [pc, #352]	; (b4370 <loop+0x1c8>)
   b4210:	f8d3 8000 	ldr.w	r8, [r3]
   b4214:	f8da 3000 	ldr.w	r3, [sl]
   b4218:	1ac0      	subs	r0, r0, r3
   b421a:	4540      	cmp	r0, r8
   b421c:	f240 8087 	bls.w	b432e <loop+0x186>
        ratio = lowpulseoccupancy / (sampletime_ms * 10.0); // Calculate ratio
   b4220:	6820      	ldr	r0, [r4, #0]
   b4222:	f003 ffa5 	bl	b8170 <__aeabi_ui2d>
   b4226:	4606      	mov	r6, r0
   b4228:	4640      	mov	r0, r8
   b422a:	460f      	mov	r7, r1
   b422c:	f003 ffa0 	bl	b8170 <__aeabi_ui2d>
   b4230:	4b50      	ldr	r3, [pc, #320]	; (b4374 <loop+0x1cc>)
   b4232:	f8df 8160 	ldr.w	r8, [pc, #352]	; b4394 <loop+0x1ec>
   b4236:	2200      	movs	r2, #0
   b4238:	f004 f814 	bl	b8264 <__aeabi_dmul>
   b423c:	4602      	mov	r2, r0
   b423e:	460b      	mov	r3, r1
   b4240:	4630      	mov	r0, r6
   b4242:	4639      	mov	r1, r7
   b4244:	f004 f938 	bl	b84b8 <__aeabi_ddiv>
   b4248:	f004 fabc 	bl	b87c4 <__aeabi_d2f>
   b424c:	f8c8 0000 	str.w	r0, [r8]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4250:	f003 ffb0 	bl	b81b4 <__aeabi_f2d>
   b4254:	ed9f 1b38 	vldr	d1, [pc, #224]	; b4338 <loop+0x190>
   b4258:	ec41 0b10 	vmov	d0, r0, r1
   b425c:	f002 fdc0 	bl	b6de0 <pow>
        concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b4260:	ed98 8a00 	vldr	s16, [r8]
   b4264:	ee18 0a10 	vmov	r0, s16
   b4268:	ec57 6b10 	vmov	r6, r7, d0
   b426c:	f003 ffa2 	bl	b81b4 <__aeabi_f2d>
   b4270:	a333      	add	r3, pc, #204	; (adr r3, b4340 <loop+0x198>)
   b4272:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4276:	4680      	mov	r8, r0
   b4278:	4689      	mov	r9, r1
   b427a:	4630      	mov	r0, r6
   b427c:	4639      	mov	r1, r7
   b427e:	f003 fff1 	bl	b8264 <__aeabi_dmul>
   b4282:	4642      	mov	r2, r8
   b4284:	4606      	mov	r6, r0
   b4286:	460f      	mov	r7, r1
   b4288:	464b      	mov	r3, r9
   b428a:	4640      	mov	r0, r8
   b428c:	4649      	mov	r1, r9
   b428e:	f003 ffe9 	bl	b8264 <__aeabi_dmul>
   b4292:	a32d      	add	r3, pc, #180	; (adr r3, b4348 <loop+0x1a0>)
   b4294:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4298:	f003 ffe4 	bl	b8264 <__aeabi_dmul>
   b429c:	4602      	mov	r2, r0
   b429e:	460b      	mov	r3, r1
   b42a0:	4630      	mov	r0, r6
   b42a2:	4639      	mov	r1, r7
   b42a4:	f003 fe26 	bl	b7ef4 <__aeabi_dsub>
   b42a8:	eddf 7a33 	vldr	s15, [pc, #204]	; b4378 <loop+0x1d0>
   b42ac:	ee68 7a27 	vmul.f32	s15, s16, s15
   b42b0:	4606      	mov	r6, r0
   b42b2:	ee17 0a90 	vmov	r0, s15
   b42b6:	460f      	mov	r7, r1
   b42b8:	f003 ff7c 	bl	b81b4 <__aeabi_f2d>
   b42bc:	4602      	mov	r2, r0
   b42be:	460b      	mov	r3, r1
   b42c0:	4630      	mov	r0, r6
   b42c2:	4639      	mov	r1, r7
   b42c4:	f003 fe18 	bl	b7ef8 <__adddf3>
   b42c8:	a321      	add	r3, pc, #132	; (adr r3, b4350 <loop+0x1a8>)
   b42ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b42ce:	f003 fe13 	bl	b7ef8 <__adddf3>
   b42d2:	f004 fa77 	bl	b87c4 <__aeabi_d2f>
        // If concentration is greater than or equal to 3000, display message on OLED screen
        if (concentration >= 3000) {
   b42d6:	ed9f 7a29 	vldr	s14, [pc, #164]	; b437c <loop+0x1d4>
        concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b42da:	4b29      	ldr	r3, [pc, #164]	; (b4380 <loop+0x1d8>)
   b42dc:	ee07 0a90 	vmov	s15, r0
        if (concentration >= 3000) {
   b42e0:	eef4 7ac7 	vcmpe.f32	s15, s14
   b42e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // Calculate concentration
   b42e8:	6018      	str	r0, [r3, #0]
        if (concentration >= 3000) {
   b42ea:	db1a      	blt.n	b4322 <loop+0x17a>
          display.clearDisplay();
   b42ec:	4825      	ldr	r0, [pc, #148]	; (b4384 <loop+0x1dc>)
   b42ee:	f000 fc3b 	bl	b4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>
          display.setTextSize(1);
   b42f2:	4824      	ldr	r0, [pc, #144]	; (b4384 <loop+0x1dc>)
   b42f4:	2101      	movs	r1, #1
   b42f6:	f000 fa4e 	bl	b4796 <_ZN12Adafruit_GFX11setTextSizeEh>
          display.setTextColor(WHITE);
   b42fa:	4822      	ldr	r0, [pc, #136]	; (b4384 <loop+0x1dc>)
   b42fc:	2101      	movs	r1, #1
   b42fe:	f000 fa4f 	bl	b47a0 <_ZN12Adafruit_GFX12setTextColorEt>
          display.setCursor(0,0);
   b4302:	462a      	mov	r2, r5
   b4304:	481f      	ldr	r0, [pc, #124]	; (b4384 <loop+0x1dc>)
   b4306:	4629      	mov	r1, r5
   b4308:	f000 fa42 	bl	b4790 <_ZN12Adafruit_GFX9setCursorEss>
          display.printf("SMARTSHOP\n");
   b430c:	491e      	ldr	r1, [pc, #120]	; (b4388 <loop+0x1e0>)
   b430e:	481d      	ldr	r0, [pc, #116]	; (b4384 <loop+0x1dc>)
   b4310:	f7ff fedc 	bl	b40cc <_ZN5Print6printfEPKcz>
          display.printf("Smoke detected!\n");
   b4314:	491d      	ldr	r1, [pc, #116]	; (b438c <loop+0x1e4>)
   b4316:	481b      	ldr	r0, [pc, #108]	; (b4384 <loop+0x1dc>)
   b4318:	f7ff fed8 	bl	b40cc <_ZN5Print6printfEPKcz>
          display.display();
   b431c:	4819      	ldr	r0, [pc, #100]	; (b4384 <loop+0x1dc>)
   b431e:	f000 fc9b 	bl	b4c58 <_ZN16Adafruit_SSD13067displayEv>
        }

        // Reset variables for next reading
        lowpulseoccupancy = 0;
   b4322:	2300      	movs	r3, #0
   b4324:	6023      	str	r3, [r4, #0]
   b4326:	f001 f883 	bl	b5430 <HAL_Timer_Get_Milli_Seconds>
        starttime = millis();
   b432a:	f8ca 0000 	str.w	r0, [sl]
      }
    }
  }
}
   b432e:	ecbd 8b02 	vpop	{d8}
   b4332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4336:	bf00      	nop
   b4338:	00000000 	.word	0x00000000
   b433c:	40080000 	.word	0x40080000
   b4340:	9999999a 	.word	0x9999999a
   b4344:	3ff19999 	.word	0x3ff19999
   b4348:	66666666 	.word	0x66666666
   b434c:	400e6666 	.word	0x400e6666
   b4350:	3d70a3d7 	.word	0x3d70a3d7
   b4354:	3fe3d70a 	.word	0x3fe3d70a
   b4358:	2003e650 	.word	0x2003e650
   b435c:	2003e6a8 	.word	0x2003e6a8
   b4360:	2003e164 	.word	0x2003e164
   b4364:	2003e690 	.word	0x2003e690
   b4368:	2003e67c 	.word	0x2003e67c
   b436c:	2003e694 	.word	0x2003e694
   b4370:	2003e168 	.word	0x2003e168
   b4374:	40240000 	.word	0x40240000
   b4378:	44020000 	.word	0x44020000
   b437c:	453b8000 	.word	0x453b8000
   b4380:	2003e654 	.word	0x2003e654
   b4384:	2003e658 	.word	0x2003e658
   b4388:	000b8ae9 	.word	0x000b8ae9
   b438c:	000b8af4 	.word	0x000b8af4
   b4390:	2003e6b0 	.word	0x2003e6b0
   b4394:	2003e6ac 	.word	0x2003e6ac

000b4398 <_GLOBAL__sub_I_hueOn>:

void pixelFill(int startPixel, int endPixel, int hexColor) {
  
   b4398:	b510      	push	{r4, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b439a:	491b      	ldr	r1, [pc, #108]	; (b4408 <_GLOBAL__sub_I_hueOn+0x70>)
   b439c:	481b      	ldr	r0, [pc, #108]	; (b440c <_GLOBAL__sub_I_hueOn+0x74>)
   b439e:	f001 fe43 	bl	b6028 <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43a2:	4a1b      	ldr	r2, [pc, #108]	; (b4410 <_GLOBAL__sub_I_hueOn+0x78>)
   b43a4:	4b1b      	ldr	r3, [pc, #108]	; (b4414 <_GLOBAL__sub_I_hueOn+0x7c>)
   b43a6:	6812      	ldr	r2, [r2, #0]
   b43a8:	601a      	str	r2, [r3, #0]
   b43aa:	4a1b      	ldr	r2, [pc, #108]	; (b4418 <_GLOBAL__sub_I_hueOn+0x80>)

TCPClient HueClient;
   b43ac:	481b      	ldr	r0, [pc, #108]	; (b441c <_GLOBAL__sub_I_hueOn+0x84>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43ae:	6812      	ldr	r2, [r2, #0]
   b43b0:	605a      	str	r2, [r3, #4]
   b43b2:	4a1b      	ldr	r2, [pc, #108]	; (b4420 <_GLOBAL__sub_I_hueOn+0x88>)
   b43b4:	6812      	ldr	r2, [r2, #0]
   b43b6:	609a      	str	r2, [r3, #8]
   b43b8:	4a1a      	ldr	r2, [pc, #104]	; (b4424 <_GLOBAL__sub_I_hueOn+0x8c>)
   b43ba:	6812      	ldr	r2, [r2, #0]
   b43bc:	60da      	str	r2, [r3, #12]
   b43be:	4a1a      	ldr	r2, [pc, #104]	; (b4428 <_GLOBAL__sub_I_hueOn+0x90>)
   b43c0:	6812      	ldr	r2, [r2, #0]
   b43c2:	611a      	str	r2, [r3, #16]
   b43c4:	4a19      	ldr	r2, [pc, #100]	; (b442c <_GLOBAL__sub_I_hueOn+0x94>)
   b43c6:	6812      	ldr	r2, [r2, #0]
   b43c8:	615a      	str	r2, [r3, #20]
   b43ca:	4a19      	ldr	r2, [pc, #100]	; (b4430 <_GLOBAL__sub_I_hueOn+0x98>)
   b43cc:	6812      	ldr	r2, [r2, #0]
   b43ce:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b43d0:	f002 f908 	bl	b65e4 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b43d4:	4817      	ldr	r0, [pc, #92]	; (b4434 <_GLOBAL__sub_I_hueOn+0x9c>)
   b43d6:	f002 f905 	bl	b65e4 <_ZN9TCPClientC1Ev>
Adafruit_SSD1306 display(OLED_RESET);
   b43da:	2100      	movs	r1, #0
   b43dc:	4816      	ldr	r0, [pc, #88]	; (b4438 <_GLOBAL__sub_I_hueOn+0xa0>)
   b43de:	f000 fbad 	bl	b4b3c <_ZN16Adafruit_SSD1306C1Ea>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b43e2:	4b16      	ldr	r3, [pc, #88]	; (b443c <_GLOBAL__sub_I_hueOn+0xa4>)
   b43e4:	2200      	movs	r2, #0
   b43e6:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b43ea:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b43ee:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b43f0:	2002      	movs	r0, #2
   b43f2:	f001 f9d5 	bl	b57a0 <set_system_mode>
   b43f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B); // exact pixel used
   b43fa:	4811      	ldr	r0, [pc, #68]	; (b4440 <_GLOBAL__sub_I_hueOn+0xa8>)
   b43fc:	2302      	movs	r3, #2
   b43fe:	2203      	movs	r2, #3
   b4400:	212e      	movs	r1, #46	; 0x2e
   b4402:	f000 bdb5 	b.w	b4f70 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4406:	bf00      	nop
   b4408:	000b8b04 	.word	0x000b8b04
   b440c:	2003e680 	.word	0x2003e680
   b4410:	2003e624 	.word	0x2003e624
   b4414:	2003e608 	.word	0x2003e608
   b4418:	2003e158 	.word	0x2003e158
   b441c:	2003e5ec 	.word	0x2003e5ec
   b4420:	2003e160 	.word	0x2003e160
   b4424:	2003e150 	.word	0x2003e150
   b4428:	2003e14c 	.word	0x2003e14c
   b442c:	2003e154 	.word	0x2003e154
   b4430:	2003e15c 	.word	0x2003e15c
   b4434:	2003e634 	.word	0x2003e634
   b4438:	2003e658 	.word	0x2003e658
   b443c:	2003e628 	.word	0x2003e628
   b4440:	2003e694 	.word	0x2003e694

000b4444 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4448:	b085      	sub	sp, #20
   b444a:	461f      	mov	r7, r3
   b444c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4450:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4454:	eba8 0902 	sub.w	r9, r8, r2
   b4458:	eba7 0a01 	sub.w	sl, r7, r1
   b445c:	f1b9 0f00 	cmp.w	r9, #0
   b4460:	bfb8      	it	lt
   b4462:	f1c9 0900 	rsblt	r9, r9, #0
   b4466:	f1ba 0f00 	cmp.w	sl, #0
   b446a:	bfb8      	it	lt
   b446c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4470:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4472:	4683      	mov	fp, r0
   b4474:	460c      	mov	r4, r1
   b4476:	4615      	mov	r5, r2
  if (steep) {
   b4478:	dd04      	ble.n	b4484 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b447a:	463a      	mov	r2, r7
    swap(x0, y0);
   b447c:	462c      	mov	r4, r5
    swap(x1, y1);
   b447e:	4647      	mov	r7, r8
    swap(x0, y0);
   b4480:	460d      	mov	r5, r1
    swap(x1, y1);
   b4482:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4484:	42bc      	cmp	r4, r7
   b4486:	dd05      	ble.n	b4494 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4488:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b448a:	4645      	mov	r5, r8
   b448c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b448e:	4622      	mov	r2, r4
   b4490:	463c      	mov	r4, r7
   b4492:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4494:	1b3e      	subs	r6, r7, r4
   b4496:	b2b2      	uxth	r2, r6
   b4498:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b449a:	eba8 0205 	sub.w	r2, r8, r5
   b449e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b44a2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b44a6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b44aa:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b44ae:	4545      	cmp	r5, r8
   b44b0:	bfb4      	ite	lt
   b44b2:	2201      	movlt	r2, #1
   b44b4:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b44b8:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b44ba:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b44bc:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b44be:	42bc      	cmp	r4, r7
   b44c0:	dc1c      	bgt.n	b44fc <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b44c2:	f8db 2000 	ldr.w	r2, [fp]
   b44c6:	9303      	str	r3, [sp, #12]
    if (steep) {
   b44c8:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b44ca:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b44ce:	bfc7      	ittee	gt
   b44d0:	4629      	movgt	r1, r5
   b44d2:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b44d4:	462a      	movle	r2, r5
   b44d6:	4621      	movle	r1, r4
   b44d8:	4658      	mov	r0, fp
   b44da:	47c0      	blx	r8
    }
    err -= dy;
   b44dc:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b44de:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b44e0:	1ab6      	subs	r6, r6, r2
   b44e2:	b2b1      	uxth	r1, r6
   b44e4:	b236      	sxth	r6, r6
    if (err < 0) {
   b44e6:	2e00      	cmp	r6, #0
   b44e8:	da05      	bge.n	b44f6 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b44ea:	9a02      	ldr	r2, [sp, #8]
   b44ec:	4415      	add	r5, r2
      err += dx;
   b44ee:	9a00      	ldr	r2, [sp, #0]
   b44f0:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b44f2:	b22d      	sxth	r5, r5
      err += dx;
   b44f4:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b44f6:	3401      	adds	r4, #1
   b44f8:	b224      	sxth	r4, r4
   b44fa:	e7e0      	b.n	b44be <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b44fc:	b005      	add	sp, #20
   b44fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4502 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4502:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4506:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b450a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b450c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4510:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4514:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4516:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4518:	4616      	mov	r6, r2
   b451a:	468a      	mov	sl, r1
   b451c:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b451e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4520:	6823      	ldr	r3, [r4, #0]
   b4522:	f8cd 8000 	str.w	r8, [sp]
   b4526:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b452a:	4432      	add	r2, r6
   b452c:	69df      	ldr	r7, [r3, #28]
   b452e:	4651      	mov	r1, sl
   b4530:	462b      	mov	r3, r5
   b4532:	4620      	mov	r0, r4
   b4534:	b212      	sxth	r2, r2
   b4536:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4538:	6823      	ldr	r3, [r4, #0]
   b453a:	f8cd 8000 	str.w	r8, [sp]
   b453e:	699f      	ldr	r7, [r3, #24]
   b4540:	4632      	mov	r2, r6
   b4542:	464b      	mov	r3, r9
   b4544:	4651      	mov	r1, sl
   b4546:	4620      	mov	r0, r4
   b4548:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b454a:	1e6b      	subs	r3, r5, #1
   b454c:	eb03 010a 	add.w	r1, r3, sl
   b4550:	6823      	ldr	r3, [r4, #0]
   b4552:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4556:	699d      	ldr	r5, [r3, #24]
   b4558:	4632      	mov	r2, r6
   b455a:	464b      	mov	r3, r9
   b455c:	b209      	sxth	r1, r1
   b455e:	4620      	mov	r0, r4
   b4560:	46ac      	mov	ip, r5
}
   b4562:	b002      	add	sp, #8
   b4564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4568:	4760      	bx	ip

000b456a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b456a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b456c:	3b01      	subs	r3, #1
   b456e:	4413      	add	r3, r2
   b4570:	6804      	ldr	r4, [r0, #0]
   b4572:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4576:	9501      	str	r5, [sp, #4]
   b4578:	b21b      	sxth	r3, r3
   b457a:	9300      	str	r3, [sp, #0]
   b457c:	6964      	ldr	r4, [r4, #20]
   b457e:	460b      	mov	r3, r1
   b4580:	47a0      	blx	r4
}
   b4582:	b003      	add	sp, #12
   b4584:	bd30      	pop	{r4, r5, pc}

000b4586 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4586:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4588:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b458c:	6804      	ldr	r4, [r0, #0]
   b458e:	e9cd 2500 	strd	r2, r5, [sp]
   b4592:	3b01      	subs	r3, #1
   b4594:	440b      	add	r3, r1
   b4596:	6964      	ldr	r4, [r4, #20]
   b4598:	b21b      	sxth	r3, r3
   b459a:	47a0      	blx	r4
}
   b459c:	b003      	add	sp, #12
   b459e:	bd30      	pop	{r4, r5, pc}

000b45a0 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b45a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b45a4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b45a8:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b45ac:	4605      	mov	r5, r0
   b45ae:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b45b0:	460c      	mov	r4, r1
   b45b2:	18ce      	adds	r6, r1, r3
   b45b4:	42b4      	cmp	r4, r6
   b45b6:	da0b      	bge.n	b45d0 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b45b8:	682b      	ldr	r3, [r5, #0]
   b45ba:	f8cd 8000 	str.w	r8, [sp]
   b45be:	699f      	ldr	r7, [r3, #24]
   b45c0:	4621      	mov	r1, r4
   b45c2:	464b      	mov	r3, r9
   b45c4:	4652      	mov	r2, sl
   b45c6:	4628      	mov	r0, r5
   b45c8:	3401      	adds	r4, #1
   b45ca:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b45cc:	b224      	sxth	r4, r4
   b45ce:	e7f1      	b.n	b45b4 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b45d0:	b002      	add	sp, #8
   b45d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b45d6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b45d6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b45d8:	6802      	ldr	r2, [r0, #0]
   b45da:	9101      	str	r1, [sp, #4]
   b45dc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b45e0:	9100      	str	r1, [sp, #0]
   b45e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b45e4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b45e8:	2200      	movs	r2, #0
   b45ea:	4611      	mov	r1, r2
   b45ec:	47a0      	blx	r4
}
   b45ee:	b002      	add	sp, #8
   b45f0:	bd10      	pop	{r4, pc}

000b45f2 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b45f2:	4770      	bx	lr

000b45f4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b45f4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b45f6:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b45f8:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b45fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b45fe:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4600:	4d05      	ldr	r5, [pc, #20]	; (b4618 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4602:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4604:	2201      	movs	r2, #1
   b4606:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4608:	6005      	str	r5, [r0, #0]
   b460a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b460c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b460e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4610:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4612:	7682      	strb	r2, [r0, #26]
}
   b4614:	bd30      	pop	{r4, r5, pc}
   b4616:	bf00      	nop
   b4618:	000b9008 	.word	0x000b9008

000b461c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4620:	ed2d 8b02 	vpush	{d8}
   b4624:	b08d      	sub	sp, #52	; 0x34
   b4626:	4607      	mov	r7, r0
   b4628:	9104      	str	r1, [sp, #16]
   b462a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b462e:	9105      	str	r1, [sp, #20]
   b4630:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4634:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4636:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b463a:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b463c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4640:	4281      	cmp	r1, r0
   b4642:	dd52      	ble.n	b46ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4644:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4648:	4291      	cmp	r1, r2
   b464a:	dd4e      	ble.n	b46ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b464c:	2106      	movs	r1, #6
   b464e:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4652:	2c00      	cmp	r4, #0
   b4654:	dd49      	ble.n	b46ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4656:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b465a:	2c00      	cmp	r4, #0
   b465c:	dd45      	ble.n	b46ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b465e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4662:	930b      	str	r3, [sp, #44]	; 0x2c
   b4664:	b293      	uxth	r3, r2
   b4666:	9307      	str	r3, [sp, #28]
   b4668:	3308      	adds	r3, #8
   b466a:	b29b      	uxth	r3, r3
   b466c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b466e:	2400      	movs	r4, #0
   b4670:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4672:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4674:	bf1c      	itt	ne
   b4676:	4b2c      	ldrne	r3, [pc, #176]	; (b4728 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4678:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b467a:	9e07      	ldr	r6, [sp, #28]
   b467c:	bf16      	itet	ne
   b467e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4680:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4682:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4684:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4686:	9a04      	ldr	r2, [sp, #16]
   b4688:	b2ab      	uxth	r3, r5
   b468a:	930a      	str	r3, [sp, #40]	; 0x28
   b468c:	fb04 f305 	mul.w	r3, r4, r5
   b4690:	fa13 f382 	uxtah	r3, r3, r2
   b4694:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4696:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b469a:	ee08 3a10 	vmov	s16, r3
   b469e:	46b0      	mov	r8, r6
   b46a0:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b46a4:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b46a8:	9b03      	ldr	r3, [sp, #12]
   b46aa:	07db      	lsls	r3, r3, #31
   b46ac:	d52f      	bpl.n	b470e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b46ae:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b46b0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b46b2:	d11f      	bne.n	b46f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b46b4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b46b8:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b46ba:	b232      	sxth	r2, r6
   b46bc:	4651      	mov	r1, sl
   b46be:	4638      	mov	r0, r7
   b46c0:	47d8      	blx	fp
      line >>= 1;
   b46c2:	9b03      	ldr	r3, [sp, #12]
   b46c4:	085b      	lsrs	r3, r3, #1
   b46c6:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b46c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b46ca:	3601      	adds	r6, #1
   b46cc:	4498      	add	r8, r3
   b46ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b46d0:	b2b6      	uxth	r6, r6
   b46d2:	42b3      	cmp	r3, r6
   b46d4:	fa1f f888 	uxth.w	r8, r8
   b46d8:	d1e6      	bne.n	b46a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b46da:	9b08      	ldr	r3, [sp, #32]
   b46dc:	3b01      	subs	r3, #1
   b46de:	3401      	adds	r4, #1
   b46e0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b46e4:	b264      	sxtb	r4, r4
   b46e6:	9308      	str	r3, [sp, #32]
   b46e8:	d1c3      	bne.n	b4672 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b46ea:	b00d      	add	sp, #52	; 0x34
   b46ec:	ecbd 8b02 	vpop	{d8}
   b46f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b46f4:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b46f6:	e9cd 9200 	strd	r9, r2, [sp]
   b46fa:	ee18 1a10 	vmov	r1, s16
   b46fe:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4702:	fa0f f288 	sxth.w	r2, r8
   b4706:	464b      	mov	r3, r9
   b4708:	4638      	mov	r0, r7
   b470a:	47d8      	blx	fp
   b470c:	e7d9      	b.n	b46c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b470e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4712:	4293      	cmp	r3, r2
   b4714:	d0d5      	beq.n	b46c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4716:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4718:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b471a:	d103      	bne.n	b4724 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b471c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4720:	9b06      	ldr	r3, [sp, #24]
   b4722:	e7ca      	b.n	b46ba <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4724:	9a06      	ldr	r2, [sp, #24]
   b4726:	e7e6      	b.n	b46f6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4728:	000b8b05 	.word	0x000b8b05

000b472c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b472c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b472e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4730:	b085      	sub	sp, #20
   b4732:	4604      	mov	r4, r0
  if (c == '\n') {
   b4734:	d107      	bne.n	b4746 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4736:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4738:	8a63      	ldrh	r3, [r4, #18]
   b473a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b473e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4740:	2300      	movs	r3, #0
   b4742:	8223      	strh	r3, [r4, #16]
   b4744:	e021      	b.n	b478a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4746:	290d      	cmp	r1, #13
   b4748:	d01f      	beq.n	b478a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b474a:	7e03      	ldrb	r3, [r0, #24]
   b474c:	9302      	str	r3, [sp, #8]
   b474e:	8ac3      	ldrh	r3, [r0, #22]
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	8a83      	ldrh	r3, [r0, #20]
   b4754:	9300      	str	r3, [sp, #0]
   b4756:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b475a:	460b      	mov	r3, r1
   b475c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4760:	f7ff ff5c 	bl	b461c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4764:	7e20      	ldrb	r0, [r4, #24]
   b4766:	8a23      	ldrh	r3, [r4, #16]
   b4768:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b476c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4770:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4772:	b21b      	sxth	r3, r3
   b4774:	4602      	mov	r2, r0
   b4776:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4778:	b139      	cbz	r1, b478a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b477a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b477e:	f06f 0505 	mvn.w	r5, #5
   b4782:	fb05 1100 	mla	r1, r5, r0, r1
   b4786:	428b      	cmp	r3, r1
   b4788:	dcd6      	bgt.n	b4738 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b478a:	2001      	movs	r0, #1
   b478c:	b005      	add	sp, #20
   b478e:	bd30      	pop	{r4, r5, pc}

000b4790 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4790:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4792:	8242      	strh	r2, [r0, #18]
}
   b4794:	4770      	bx	lr

000b4796 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b4796:	2901      	cmp	r1, #1
   b4798:	bf38      	it	cc
   b479a:	2101      	movcc	r1, #1
   b479c:	7601      	strb	r1, [r0, #24]
}
   b479e:	4770      	bx	lr

000b47a0 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b47a0:	82c1      	strh	r1, [r0, #22]
   b47a2:	8281      	strh	r1, [r0, #20]
}
   b47a4:	4770      	bx	lr

000b47a6 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b47a6:	7e40      	ldrb	r0, [r0, #25]
   b47a8:	4770      	bx	lr

000b47aa <_ZN12Adafruit_GFX5widthEv>:
}
   b47aa:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b47ae:	4770      	bx	lr

000b47b0 <_ZN12Adafruit_GFX6heightEv>:
}
   b47b0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b47b4:	4770      	bx	lr
	...

000b47b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b47ba:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b47bc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b47c0:	2d02      	cmp	r5, #2
   b47c2:	d069      	beq.n	b4898 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b47c4:	2d03      	cmp	r5, #3
   b47c6:	f000 8099 	beq.w	b48fc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b47ca:	2d01      	cmp	r5, #1
   b47cc:	d16c      	bne.n	b48a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b47ce:	8905      	ldrh	r5, [r0, #8]
   b47d0:	43d2      	mvns	r2, r2
   b47d2:	442a      	add	r2, r5
   b47d4:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b47d6:	2a00      	cmp	r2, #0
   b47d8:	db5d      	blt.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b47da:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b47de:	4295      	cmp	r5, r2
   b47e0:	dd59      	ble.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b47e2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b47e4:	bfbe      	ittt	lt
   b47e6:	185b      	addlt	r3, r3, r1
   b47e8:	b21b      	sxthlt	r3, r3
    __y = 0;
   b47ea:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b47ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b47f0:	18cd      	adds	r5, r1, r3
   b47f2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b47f4:	bfc4      	itt	gt
   b47f6:	1a43      	subgt	r3, r0, r1
   b47f8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b47fa:	2b00      	cmp	r3, #0
   b47fc:	dd4b      	ble.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b47fe:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4802:	f8df c120 	ldr.w	ip, [pc, #288]	; b4924 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4806:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b480a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b480e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4810:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4814:	d01a      	beq.n	b484c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4816:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b481a:	4e40      	ldr	r6, [pc, #256]	; (b491c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b481c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b481e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4820:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4822:	bf3f      	itttt	cc
   b4824:	eba5 0e03 	subcc.w	lr, r5, r3
   b4828:	26ff      	movcc	r6, #255	; 0xff
   b482a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b482e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4830:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4834:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4836:	bf0c      	ite	eq
   b4838:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b483a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b483c:	42ab      	cmp	r3, r5
   b483e:	f80c 6002 	strb.w	r6, [ip, r2]
   b4842:	d328      	bcc.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4844:	3908      	subs	r1, #8
   b4846:	440b      	add	r3, r1
   b4848:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b484a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b484c:	2b07      	cmp	r3, #7
   b484e:	d919      	bls.n	b4884 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4850:	2c01      	cmp	r4, #1
   b4852:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4856:	bf18      	it	ne
   b4858:	2500      	movne	r5, #0
   b485a:	b2ed      	uxtb	r5, r5
   b485c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4860:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4862:	3a08      	subs	r2, #8
   b4864:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4866:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4868:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b486c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4870:	d8f7      	bhi.n	b4862 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4872:	f1a3 0208 	sub.w	r2, r3, #8
   b4876:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b487a:	3201      	adds	r2, #1
   b487c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4880:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4884:	b13b      	cbz	r3, b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4886:	4a26      	ldr	r2, [pc, #152]	; (b4920 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4888:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b488a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b488c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b488e:	bf0c      	ite	eq
   b4890:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4892:	4393      	bicne	r3, r2
   b4894:	7003      	strb	r3, [r0, #0]
}
   b4896:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4898:	8945      	ldrh	r5, [r0, #10]
   b489a:	43d2      	mvns	r2, r2
   b489c:	442a      	add	r2, r5
      x -= (w-1);
   b489e:	18cd      	adds	r5, r1, r3
   b48a0:	8901      	ldrh	r1, [r0, #8]
   b48a2:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b48a4:	b212      	sxth	r2, r2
      x -= (w-1);
   b48a6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b48a8:	2a00      	cmp	r2, #0
   b48aa:	dbf4      	blt.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b48ac:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b48b0:	4295      	cmp	r5, r2
   b48b2:	ddf0      	ble.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b48b4:	2900      	cmp	r1, #0
    w += x;
   b48b6:	bfbe      	ittt	lt
   b48b8:	185b      	addlt	r3, r3, r1
   b48ba:	b21b      	sxthlt	r3, r3
    x = 0;
   b48bc:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b48be:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b48c2:	18ce      	adds	r6, r1, r3
   b48c4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b48c6:	bfc4      	itt	gt
   b48c8:	1a6b      	subgt	r3, r5, r1
   b48ca:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b48cc:	2b00      	cmp	r3, #0
   b48ce:	dde2      	ble.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b48d0:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b48d2:	2580      	movs	r5, #128	; 0x80
   b48d4:	fb10 1105 	smlabb	r1, r0, r5, r1
   b48d8:	4812      	ldr	r0, [pc, #72]	; (b4924 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b48da:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b48dc:	f002 0007 	and.w	r0, r2, #7
   b48e0:	2201      	movs	r2, #1
   b48e2:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b48e4:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b48e6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b48e8:	440b      	add	r3, r1
   b48ea:	d10c      	bne.n	b4906 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b48ec:	428b      	cmp	r3, r1
   b48ee:	d0d2      	beq.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b48f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b48f4:	4310      	orrs	r0, r2
   b48f6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b48fa:	e7f7      	b.n	b48ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b48fc:	18cd      	adds	r5, r1, r3
   b48fe:	8941      	ldrh	r1, [r0, #10]
   b4900:	1b49      	subs	r1, r1, r5
   b4902:	b209      	sxth	r1, r1
      break;
   b4904:	e767      	b.n	b47d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4906:	43d2      	mvns	r2, r2
   b4908:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b490a:	428b      	cmp	r3, r1
   b490c:	d0c3      	beq.n	b4896 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b490e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4912:	4010      	ands	r0, r2
   b4914:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4918:	e7f7      	b.n	b490a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b491a:	bf00      	nop
   b491c:	2003e174 	.word	0x2003e174
   b4920:	2003e16c 	.word	0x2003e16c
   b4924:	2003e17c 	.word	0x2003e17c

000b4928 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4928:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b492a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b492c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4930:	2d02      	cmp	r5, #2
   b4932:	d034      	beq.n	b499e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4934:	2d03      	cmp	r5, #3
   b4936:	f000 809b 	beq.w	b4a70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b493a:	2d01      	cmp	r5, #1
   b493c:	d137      	bne.n	b49ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b493e:	18d5      	adds	r5, r2, r3
   b4940:	8902      	ldrh	r2, [r0, #8]
   b4942:	1b52      	subs	r2, r2, r5
   b4944:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4946:	2900      	cmp	r1, #0
   b4948:	f2c0 8091 	blt.w	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b494c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4950:	428d      	cmp	r5, r1
   b4952:	f340 808c 	ble.w	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4956:	2a00      	cmp	r2, #0
    w += x;
   b4958:	bfbe      	ittt	lt
   b495a:	189b      	addlt	r3, r3, r2
   b495c:	b21b      	sxthlt	r3, r3
    x = 0;
   b495e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4960:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4964:	18d6      	adds	r6, r2, r3
   b4966:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4968:	bfc4      	itt	gt
   b496a:	1aab      	subgt	r3, r5, r2
   b496c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b496e:	2b00      	cmp	r3, #0
   b4970:	dd7d      	ble.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4972:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4974:	2580      	movs	r5, #128	; 0x80
   b4976:	fb10 2205 	smlabb	r2, r0, r5, r2
   b497a:	4845      	ldr	r0, [pc, #276]	; (b4a90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b497c:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b497e:	f001 0007 	and.w	r0, r1, #7
   b4982:	2101      	movs	r1, #1
   b4984:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4986:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4988:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b498a:	4413      	add	r3, r2
   b498c:	d175      	bne.n	b4a7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b498e:	429a      	cmp	r2, r3
   b4990:	d06d      	beq.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4992:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4996:	4308      	orrs	r0, r1
   b4998:	f802 0c01 	strb.w	r0, [r2, #-1]
   b499c:	e7f7      	b.n	b498e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b499e:	8905      	ldrh	r5, [r0, #8]
   b49a0:	43c9      	mvns	r1, r1
   b49a2:	4429      	add	r1, r5
      y -= (h-1);
   b49a4:	18d5      	adds	r5, r2, r3
   b49a6:	8942      	ldrh	r2, [r0, #10]
   b49a8:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b49aa:	b209      	sxth	r1, r1
      y -= (h-1);
   b49ac:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b49ae:	2900      	cmp	r1, #0
   b49b0:	db5d      	blt.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b49b2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b49b6:	428d      	cmp	r5, r1
   b49b8:	dd59      	ble.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b49ba:	2a00      	cmp	r2, #0
    __h += __y;
   b49bc:	bfbe      	ittt	lt
   b49be:	189b      	addlt	r3, r3, r2
   b49c0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b49c2:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b49c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b49c8:	18d5      	adds	r5, r2, r3
   b49ca:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b49cc:	bfc4      	itt	gt
   b49ce:	1a83      	subgt	r3, r0, r2
   b49d0:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b49d2:	2b00      	cmp	r3, #0
   b49d4:	dd4b      	ble.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b49d6:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b49da:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4a90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b49de:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b49e2:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b49e6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b49e8:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b49ec:	d01a      	beq.n	b4a24 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b49ee:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b49f2:	4e28      	ldr	r6, [pc, #160]	; (b4a94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b49f4:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b49f6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b49f8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b49fa:	bf3f      	itttt	cc
   b49fc:	eba5 0e03 	subcc.w	lr, r5, r3
   b4a00:	26ff      	movcc	r6, #255	; 0xff
   b4a02:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4a06:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4a08:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4a0c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4a0e:	bf0c      	ite	eq
   b4a10:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4a12:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4a14:	42ab      	cmp	r3, r5
   b4a16:	f80c 6001 	strb.w	r6, [ip, r1]
   b4a1a:	d328      	bcc.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4a1c:	3a08      	subs	r2, #8
   b4a1e:	4413      	add	r3, r2
   b4a20:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4a22:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4a24:	2b07      	cmp	r3, #7
   b4a26:	d919      	bls.n	b4a5c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4a28:	2c01      	cmp	r4, #1
   b4a2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4a2e:	bf18      	it	ne
   b4a30:	2500      	movne	r5, #0
   b4a32:	b2ed      	uxtb	r5, r5
   b4a34:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4a38:	461a      	mov	r2, r3
      h -= 8;
   b4a3a:	3a08      	subs	r2, #8
   b4a3c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4a3e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4a40:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4a44:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4a48:	d8f7      	bhi.n	b4a3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4a4a:	f1a3 0208 	sub.w	r2, r3, #8
   b4a4e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4a52:	3201      	adds	r2, #1
   b4a54:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4a58:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4a5c:	b13b      	cbz	r3, b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4a5e:	4a0e      	ldr	r2, [pc, #56]	; (b4a98 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4a60:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4a62:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4a64:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4a66:	bf0c      	ite	eq
   b4a68:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4a6a:	4393      	bicne	r3, r2
   b4a6c:	7003      	strb	r3, [r0, #0]
}
   b4a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4a70:	8945      	ldrh	r5, [r0, #10]
   b4a72:	43c9      	mvns	r1, r1
   b4a74:	4429      	add	r1, r5
   b4a76:	b209      	sxth	r1, r1
      break;
   b4a78:	e765      	b.n	b4946 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4a7a:	43c9      	mvns	r1, r1
   b4a7c:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4a7e:	429a      	cmp	r2, r3
   b4a80:	d0f5      	beq.n	b4a6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4a82:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4a86:	4008      	ands	r0, r1
   b4a88:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4a8c:	e7f7      	b.n	b4a7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4a8e:	bf00      	nop
   b4a90:	2003e17c 	.word	0x2003e17c
   b4a94:	2003e174 	.word	0x2003e174
   b4a98:	2003e16c 	.word	0x2003e16c

000b4a9c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4a9c:	4770      	bx	lr
	...

000b4aa0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4aa2:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4aa4:	4606      	mov	r6, r0
   b4aa6:	4614      	mov	r4, r2
   b4aa8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4aaa:	db2d      	blt.n	b4b08 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4aac:	f7ff fe7d 	bl	b47aa <_ZN12Adafruit_GFX5widthEv>
   b4ab0:	42a8      	cmp	r0, r5
   b4ab2:	dd29      	ble.n	b4b08 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ab4:	2c00      	cmp	r4, #0
   b4ab6:	db27      	blt.n	b4b08 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ab8:	4630      	mov	r0, r6
   b4aba:	f7ff fe79 	bl	b47b0 <_ZN12Adafruit_GFX6heightEv>
   b4abe:	42a0      	cmp	r0, r4
   b4ac0:	dd22      	ble.n	b4b08 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4ac2:	4630      	mov	r0, r6
   b4ac4:	f7ff fe6f 	bl	b47a6 <_ZN12Adafruit_GFX11getRotationEv>
   b4ac8:	2802      	cmp	r0, #2
   b4aca:	d01e      	beq.n	b4b0a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4acc:	2803      	cmp	r0, #3
   b4ace:	d025      	beq.n	b4b1c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4ad0:	2801      	cmp	r0, #1
   b4ad2:	d104      	bne.n	b4ade <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4ad4:	8933      	ldrh	r3, [r6, #8]
   b4ad6:	43e2      	mvns	r2, r4
   b4ad8:	441a      	add	r2, r3
    break;
   b4ada:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4adc:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4ade:	2c00      	cmp	r4, #0
   b4ae0:	4622      	mov	r2, r4
   b4ae2:	bfb8      	it	lt
   b4ae4:	1de2      	addlt	r2, r4, #7
   b4ae6:	10d2      	asrs	r2, r2, #3
   b4ae8:	2180      	movs	r1, #128	; 0x80
   b4aea:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4aee:	490e      	ldr	r1, [pc, #56]	; (b4b28 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4af0:	2201      	movs	r2, #1
   b4af2:	f004 0407 	and.w	r4, r4, #7
   b4af6:	574b      	ldrsb	r3, [r1, r5]
   b4af8:	fa02 f404 	lsl.w	r4, r2, r4
   b4afc:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4afe:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4b00:	bf0c      	ite	eq
   b4b02:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4b04:	43a3      	bicne	r3, r4
   b4b06:	554b      	strb	r3, [r1, r5]
}
   b4b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4b0a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4b0c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4b0e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4b10:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4b12:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4b14:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4b16:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4b18:	b224      	sxth	r4, r4
    break;
   b4b1a:	e7e0      	b.n	b4ade <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4b1c:	8973      	ldrh	r3, [r6, #10]
   b4b1e:	3b01      	subs	r3, #1
   b4b20:	1b5b      	subs	r3, r3, r5
    break;
   b4b22:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4b24:	b21c      	sxth	r4, r3
    break;
   b4b26:	e7da      	b.n	b4ade <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4b28:	2003e17c 	.word	0x2003e17c

000b4b2c <_ZN16Adafruit_SSD1306D0Ev>:
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	2124      	movs	r1, #36	; 0x24
   b4b30:	4604      	mov	r4, r0
   b4b32:	f7ff fab4 	bl	b409e <_ZdlPvj>
   b4b36:	4620      	mov	r0, r4
   b4b38:	bd10      	pop	{r4, pc}
	...

000b4b3c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4b3c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4b3e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4b40:	4604      	mov	r4, r0
   b4b42:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4b44:	2180      	movs	r1, #128	; 0x80
   b4b46:	f7ff fd55 	bl	b45f4 <_ZN12Adafruit_GFXC1Ess>
   b4b4a:	4b06      	ldr	r3, [pc, #24]	; (b4b64 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4b4c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4b4e:	23ff      	movs	r3, #255	; 0xff
   b4b50:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4b54:	7763      	strb	r3, [r4, #29]
   b4b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4b5a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4b5c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4b60:	4620      	mov	r0, r4
   b4b62:	bd38      	pop	{r3, r4, r5, pc}
   b4b64:	000b9040 	.word	0x000b9040

000b4b68 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4b68:	4802      	ldr	r0, [pc, #8]	; (b4b74 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4b6e:	2100      	movs	r1, #0
   b4b70:	f003 be8c 	b.w	b888c <memset>
   b4b74:	2003e17c 	.word	0x2003e17c

000b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4b78:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4b7a:	4c0b      	ldr	r4, [pc, #44]	; (b4ba8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4b7c:	7821      	ldrb	r1, [r4, #0]
   b4b7e:	f3bf 8f5b 	dmb	ish
   b4b82:	f011 0101 	ands.w	r1, r1, #1
   b4b86:	d10b      	bne.n	b4ba0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4b88:	4620      	mov	r0, r4
   b4b8a:	9101      	str	r1, [sp, #4]
   b4b8c:	f7ff fa96 	bl	b40bc <__cxa_guard_acquire>
   b4b90:	9901      	ldr	r1, [sp, #4]
   b4b92:	b128      	cbz	r0, b4ba0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4b94:	4805      	ldr	r0, [pc, #20]	; (b4bac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4b96:	f001 f949 	bl	b5e2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff fa93 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4ba0:	4802      	ldr	r0, [pc, #8]	; (b4bac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4ba2:	b002      	add	sp, #8
   b4ba4:	bd10      	pop	{r4, pc}
   b4ba6:	bf00      	nop
   b4ba8:	2003e6b4 	.word	0x2003e6b4
   b4bac:	2003e6b8 	.word	0x2003e6b8

000b4bb0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4bb0:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4bb2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4bb6:	b143      	cbz	r3, b4bca <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4bb8:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4bba:	f7ff ffdd 	bl	b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bbe:	9901      	ldr	r1, [sp, #4]
}
   b4bc0:	b003      	add	sp, #12
   b4bc2:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bc6:	f001 b9e5 	b.w	b5f94 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4bca:	460b      	mov	r3, r1
   b4bcc:	7f81      	ldrb	r1, [r0, #30]
   b4bce:	7f40      	ldrb	r0, [r0, #29]
   b4bd0:	2201      	movs	r2, #1
}
   b4bd2:	b003      	add	sp, #12
   b4bd4:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4bd8:	f001 bf49 	b.w	b6a6e <shiftOut>

000b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4bdc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4bde:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4be2:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4be4:	4604      	mov	r4, r0
   b4be6:	460d      	mov	r5, r1
  if (sid != -1)
   b4be8:	d01d      	beq.n	b4c26 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4bea:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4bee:	2101      	movs	r1, #1
   b4bf0:	b280      	uxth	r0, r0
   b4bf2:	f001 ff10 	bl	b6a16 <digitalWrite>
    digitalWrite(dc, LOW);
   b4bf6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4bfa:	2100      	movs	r1, #0
   b4bfc:	b280      	uxth	r0, r0
   b4bfe:	f001 ff0a 	bl	b6a16 <digitalWrite>
    digitalWrite(cs, LOW);
   b4c02:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4c06:	2100      	movs	r1, #0
   b4c08:	b280      	uxth	r0, r0
   b4c0a:	f001 ff04 	bl	b6a16 <digitalWrite>
    fastSPIwrite(c);
   b4c0e:	4629      	mov	r1, r5
   b4c10:	4620      	mov	r0, r4
   b4c12:	f7ff ffcd 	bl	b4bb0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4c16:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4c1a:	2101      	movs	r1, #1
}
   b4c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4c20:	b280      	uxth	r0, r0
   b4c22:	f001 bef8 	b.w	b6a16 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4c26:	f001 ff61 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4c2a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4c2e:	f000 ff19 	bl	b5a64 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4c32:	f001 ff5b 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4c36:	6803      	ldr	r3, [r0, #0]
   b4c38:	2100      	movs	r1, #0
   b4c3a:	689b      	ldr	r3, [r3, #8]
   b4c3c:	4798      	blx	r3
    Wire.write(c);
   b4c3e:	f001 ff55 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4c42:	6803      	ldr	r3, [r0, #0]
   b4c44:	4629      	mov	r1, r5
   b4c46:	689b      	ldr	r3, [r3, #8]
   b4c48:	4798      	blx	r3
    Wire.endTransmission();
   b4c4a:	f001 ff4f 	bl	b6aec <_Z19__fetch_global_Wirev>
}
   b4c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4c52:	f000 bf0e 	b.w	b5a72 <_ZN7TwoWire15endTransmissionEv>
	...

000b4c58 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4c5a:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4c5c:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4c5e:	f7ff ffbd 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4c62:	2100      	movs	r1, #0
   b4c64:	4620      	mov	r0, r4
   b4c66:	f7ff ffb9 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4c6a:	217f      	movs	r1, #127	; 0x7f
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	f7ff ffb5 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4c72:	2122      	movs	r1, #34	; 0x22
   b4c74:	4620      	mov	r0, r4
   b4c76:	f7ff ffb1 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4c7a:	2100      	movs	r1, #0
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f7ff ffad 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4c82:	2107      	movs	r1, #7
   b4c84:	4620      	mov	r0, r4
   b4c86:	f7ff ffa9 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4c8a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4c8e:	4f29      	ldr	r7, [pc, #164]	; (b4d34 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4c90:	3301      	adds	r3, #1
   b4c92:	d02a      	beq.n	b4cea <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4c94:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4c98:	2101      	movs	r1, #1
   b4c9a:	b280      	uxth	r0, r0
   b4c9c:	f001 febb 	bl	b6a16 <digitalWrite>
    digitalWrite(dc, HIGH);
   b4ca0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4ca4:	2101      	movs	r1, #1
   b4ca6:	b280      	uxth	r0, r0
   b4ca8:	f001 feb5 	bl	b6a16 <digitalWrite>
    digitalWrite(cs, LOW);
   b4cac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4cb0:	2100      	movs	r1, #0
   b4cb2:	b280      	uxth	r0, r0
   b4cb4:	f001 feaf 	bl	b6a16 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4cb8:	2001      	movs	r0, #1
   b4cba:	f000 fba9 	bl	b5410 <HAL_Delay_Microseconds>
   b4cbe:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4cc2:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4cc4:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4cc8:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4cca:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4ccc:	f7ff ff70 	bl	b4bb0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4cd0:	2d00      	cmp	r5, #0
   b4cd2:	d1f6      	bne.n	b4cc2 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4cd4:	2001      	movs	r0, #1
   b4cd6:	f000 fb9b 	bl	b5410 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4cda:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4cde:	2101      	movs	r1, #1
}
   b4ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4ce4:	b280      	uxth	r0, r0
   b4ce6:	f001 be96 	b.w	b6a16 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4cea:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4cec:	f001 fefe 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4cf0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4cf4:	f000 feb6 	bl	b5a64 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4cf8:	f001 fef8 	bl	b6aec <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4cfc:	6803      	ldr	r3, [r0, #0]
   b4cfe:	2140      	movs	r1, #64	; 0x40
   b4d00:	689b      	ldr	r3, [r3, #8]
   b4d02:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4d04:	f105 0610 	add.w	r6, r5, #16
   b4d08:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4d0a:	f001 feef 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4d0e:	6803      	ldr	r3, [r0, #0]
   b4d10:	5d79      	ldrb	r1, [r7, r5]
   b4d12:	689b      	ldr	r3, [r3, #8]
   b4d14:	4798      	blx	r3
		i++;
   b4d16:	1c6b      	adds	r3, r5, #1
   b4d18:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4d1a:	42ae      	cmp	r6, r5
   b4d1c:	d1f5      	bne.n	b4d0a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4d1e:	f001 fee5 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4d22:	f000 fea6 	bl	b5a72 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4d26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4d2a:	d100      	bne.n	b4d2e <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4d2e:	4635      	mov	r5, r6
   b4d30:	e7dc      	b.n	b4cec <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4d32:	bf00      	nop
   b4d34:	2003e17c 	.word	0x2003e17c

000b4d38 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4d38:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4d3a:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4d3e:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4d40:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4d42:	4604      	mov	r4, r0
   b4d44:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4d46:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4d48:	f000 80c9 	beq.w	b4ede <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4d4c:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4d50:	2101      	movs	r1, #1
   b4d52:	b280      	uxth	r0, r0
   b4d54:	f001 fe4e 	bl	b69f4 <pinMode>
    pinMode(cs, OUTPUT);
   b4d58:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4d5c:	2101      	movs	r1, #1
   b4d5e:	b280      	uxth	r0, r0
   b4d60:	f001 fe48 	bl	b69f4 <pinMode>
    if (!hwSPI){
   b4d64:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4d68:	2b00      	cmp	r3, #0
   b4d6a:	f000 80a6 	beq.w	b4eba <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4d6e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4d72:	2101      	movs	r1, #1
   b4d74:	b280      	uxth	r0, r0
   b4d76:	f001 fe4e 	bl	b6a16 <digitalWrite>
        instance().setBitOrder(order);
   b4d7a:	f7ff fefd 	bl	b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d7e:	2101      	movs	r1, #1
   b4d80:	f001 f872 	bl	b5e68 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4d84:	f7ff fef8 	bl	b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d88:	2110      	movs	r1, #16
   b4d8a:	f001 f8dd 	bl	b5f48 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4d8e:	f7ff fef3 	bl	b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d92:	2100      	movs	r1, #0
   b4d94:	f001 f87c 	bl	b5e90 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4d98:	f7ff feee 	bl	b4b78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4d9c:	f001 f850 	bl	b5e40 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4da0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4da4:	2101      	movs	r1, #1
   b4da6:	b280      	uxth	r0, r0
   b4da8:	f001 fe24 	bl	b69f4 <pinMode>
  digitalWrite(rst, HIGH);
   b4dac:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4db0:	2101      	movs	r1, #1
   b4db2:	b280      	uxth	r0, r0
   b4db4:	f001 fe2f 	bl	b6a16 <digitalWrite>
  delay(1);
   b4db8:	2001      	movs	r0, #1
   b4dba:	f000 fdb5 	bl	b5928 <delay>
  digitalWrite(rst, LOW);
   b4dbe:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4dc2:	2100      	movs	r1, #0
   b4dc4:	b280      	uxth	r0, r0
   b4dc6:	f001 fe26 	bl	b6a16 <digitalWrite>
  delay(10);
   b4dca:	200a      	movs	r0, #10
   b4dcc:	f000 fdac 	bl	b5928 <delay>
  digitalWrite(rst, HIGH);
   b4dd0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4dd4:	2101      	movs	r1, #1
   b4dd6:	b280      	uxth	r0, r0
   b4dd8:	f001 fe1d 	bl	b6a16 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b4ddc:	4620      	mov	r0, r4
   b4dde:	21ae      	movs	r1, #174	; 0xae
   b4de0:	f7ff fefc 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b4de4:	4620      	mov	r0, r4
   b4de6:	21d5      	movs	r1, #213	; 0xd5
   b4de8:	f7ff fef8 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b4dec:	4620      	mov	r0, r4
   b4dee:	2180      	movs	r1, #128	; 0x80
   b4df0:	f7ff fef4 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b4df4:	4620      	mov	r0, r4
   b4df6:	21a8      	movs	r1, #168	; 0xa8
   b4df8:	f7ff fef0 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	213f      	movs	r1, #63	; 0x3f
   b4e00:	f7ff feec 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b4e04:	4620      	mov	r0, r4
   b4e06:	21d3      	movs	r1, #211	; 0xd3
   b4e08:	f7ff fee8 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	2100      	movs	r1, #0
   b4e10:	f7ff fee4 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b4e14:	4620      	mov	r0, r4
   b4e16:	2140      	movs	r1, #64	; 0x40
   b4e18:	f7ff fee0 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b4e1c:	218d      	movs	r1, #141	; 0x8d
   b4e1e:	4620      	mov	r0, r4
   b4e20:	f7ff fedc 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4e24:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b4e26:	bf0c      	ite	eq
   b4e28:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b4e2a:	2114      	movne	r1, #20
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	f7ff fed5 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b4e32:	4620      	mov	r0, r4
   b4e34:	2120      	movs	r1, #32
   b4e36:	f7ff fed1 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	2100      	movs	r1, #0
   b4e3e:	f7ff fecd 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b4e42:	4620      	mov	r0, r4
   b4e44:	21a1      	movs	r1, #161	; 0xa1
   b4e46:	f7ff fec9 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b4e4a:	4620      	mov	r0, r4
   b4e4c:	21c8      	movs	r1, #200	; 0xc8
   b4e4e:	f7ff fec5 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b4e52:	4620      	mov	r0, r4
   b4e54:	21da      	movs	r1, #218	; 0xda
   b4e56:	f7ff fec1 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b4e5a:	4620      	mov	r0, r4
   b4e5c:	2112      	movs	r1, #18
   b4e5e:	f7ff febd 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b4e62:	2181      	movs	r1, #129	; 0x81
   b4e64:	4620      	mov	r0, r4
   b4e66:	f7ff feb9 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4e6a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b4e6c:	bf0c      	ite	eq
   b4e6e:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b4e70:	21cf      	movne	r1, #207	; 0xcf
   b4e72:	4620      	mov	r0, r4
   b4e74:	f7ff feb2 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b4e78:	21d9      	movs	r1, #217	; 0xd9
   b4e7a:	4620      	mov	r0, r4
   b4e7c:	f7ff feae 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b4e80:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b4e82:	bf0c      	ite	eq
   b4e84:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b4e86:	21f1      	movne	r1, #241	; 0xf1
   b4e88:	4620      	mov	r0, r4
   b4e8a:	f7ff fea7 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b4e8e:	4620      	mov	r0, r4
   b4e90:	21db      	movs	r1, #219	; 0xdb
   b4e92:	f7ff fea3 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b4e96:	4620      	mov	r0, r4
   b4e98:	2140      	movs	r1, #64	; 0x40
   b4e9a:	f7ff fe9f 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	21a4      	movs	r1, #164	; 0xa4
   b4ea2:	f7ff fe9b 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	21a6      	movs	r1, #166	; 0xa6
   b4eaa:	f7ff fe97 	bl	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4eae:	4620      	mov	r0, r4
   b4eb0:	21af      	movs	r1, #175	; 0xaf
}
   b4eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b4eb6:	f7ff be91 	b.w	b4bdc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b4eba:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b4ebe:	2101      	movs	r1, #1
   b4ec0:	b280      	uxth	r0, r0
   b4ec2:	f001 fd97 	bl	b69f4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b4ec6:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b4eca:	2101      	movs	r1, #1
   b4ecc:	b280      	uxth	r0, r0
   b4ece:	f001 fd91 	bl	b69f4 <pinMode>
    if (hwSPI){
   b4ed2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4ed6:	2b00      	cmp	r3, #0
   b4ed8:	f43f af62 	beq.w	b4da0 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b4edc:	e747      	b.n	b4d6e <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b4ede:	f001 fe05 	bl	b6aec <_Z19__fetch_global_Wirev>
   b4ee2:	f000 fdb5 	bl	b5a50 <_ZN7TwoWire5beginEv>
   b4ee6:	e75b      	b.n	b4da0 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b4ee8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4ee8:	b538      	push	{r3, r4, r5, lr}
   b4eea:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4eec:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4eee:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4ef0:	b108      	cbz	r0, b4ef6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4ef2:	f000 fce9 	bl	b58c8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4ef6:	79a3      	ldrb	r3, [r4, #6]
   b4ef8:	2b06      	cmp	r3, #6
   b4efa:	bf0c      	ite	eq
   b4efc:	2004      	moveq	r0, #4
   b4efe:	2003      	movne	r0, #3
   b4f00:	fb10 f005 	smulbb	r0, r0, r5
   b4f04:	b280      	uxth	r0, r0
   b4f06:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4f08:	f000 fcd6 	bl	b58b8 <malloc>
   b4f0c:	60e0      	str	r0, [r4, #12]
   b4f0e:	b128      	cbz	r0, b4f1c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4f10:	88a2      	ldrh	r2, [r4, #4]
   b4f12:	2100      	movs	r1, #0
   b4f14:	f003 fcba 	bl	b888c <memset>
    numLEDs = n;
   b4f18:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4f1a:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4f1c:	80a0      	strh	r0, [r4, #4]
   b4f1e:	8060      	strh	r0, [r4, #2]
}
   b4f20:	e7fb      	b.n	b4f1a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4f22 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4f22:	b510      	push	{r4, lr}
   b4f24:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4f26:	2101      	movs	r1, #1
   b4f28:	79c0      	ldrb	r0, [r0, #7]
   b4f2a:	f001 fd63 	bl	b69f4 <pinMode>
  digitalWrite(pin, LOW);
   b4f2e:	79e0      	ldrb	r0, [r4, #7]
   b4f30:	2100      	movs	r1, #0
   b4f32:	f001 fd70 	bl	b6a16 <digitalWrite>
  begun = true;
   b4f36:	2301      	movs	r3, #1
   b4f38:	7023      	strb	r3, [r4, #0]
}
   b4f3a:	bd10      	pop	{r4, pc}

000b4f3c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4f3e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4f40:	4605      	mov	r5, r0
   b4f42:	460c      	mov	r4, r1
    if (begun) {
   b4f44:	b11b      	cbz	r3, b4f4e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4f46:	79c0      	ldrb	r0, [r0, #7]
   b4f48:	2100      	movs	r1, #0
   b4f4a:	f001 fd53 	bl	b69f4 <pinMode>
    }
    pin = p;
    if (begun) {
   b4f4e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4f50:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4f52:	b15b      	cbz	r3, b4f6c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4f54:	b2a0      	uxth	r0, r4
   b4f56:	2101      	movs	r1, #1
   b4f58:	9001      	str	r0, [sp, #4]
   b4f5a:	f001 fd4b 	bl	b69f4 <pinMode>
        digitalWrite(p, LOW);
   b4f5e:	9801      	ldr	r0, [sp, #4]
   b4f60:	2100      	movs	r1, #0
    }
}
   b4f62:	b003      	add	sp, #12
   b4f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4f68:	f001 bd55 	b.w	b6a16 <digitalWrite>
}
   b4f6c:	b003      	add	sp, #12
   b4f6e:	bd30      	pop	{r4, r5, pc}

000b4f70 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4f70:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4f72:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4f74:	4604      	mov	r4, r0
   b4f76:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4f78:	7183      	strb	r3, [r0, #6]
   b4f7a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4f7e:	7005      	strb	r5, [r0, #0]
   b4f80:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4f82:	f7ff ffb1 	bl	b4ee8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4f86:	4620      	mov	r0, r4
   b4f88:	4631      	mov	r1, r6
   b4f8a:	f7ff ffd7 	bl	b4f3c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4f8e:	4620      	mov	r0, r4
   b4f90:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4f94 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4f94:	68c3      	ldr	r3, [r0, #12]
   b4f96:	2b00      	cmp	r3, #0
   b4f98:	f000 81a4 	beq.w	b52e4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fa0:	7983      	ldrb	r3, [r0, #6]
   b4fa2:	3b02      	subs	r3, #2
   b4fa4:	b2db      	uxtb	r3, r3
   b4fa6:	2b04      	cmp	r3, #4
   b4fa8:	bf9c      	itt	ls
   b4faa:	4abf      	ldrls	r2, [pc, #764]	; (b52a8 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4fac:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4fb0:	b085      	sub	sp, #20
   b4fb2:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4fb4:	bf88      	it	hi
   b4fb6:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4fb8:	f000 fa32 	bl	b5420 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4fbc:	692b      	ldr	r3, [r5, #16]
   b4fbe:	1ac0      	subs	r0, r0, r3
   b4fc0:	42a0      	cmp	r0, r4
   b4fc2:	d3f9      	bcc.n	b4fb8 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4fc4:	4cb9      	ldr	r4, [pc, #740]	; (b52ac <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4fc6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4fc8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4fcc:	b91b      	cbnz	r3, b4fd6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4fce:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4fd2:	2b00      	cmp	r3, #0
   b4fd4:	db7e      	blt.n	b50d4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4fd6:	4cb6      	ldr	r4, [pc, #728]	; (b52b0 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4fd8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4fdc:	b923      	cbnz	r3, b4fe8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4fde:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4fe2:	2b00      	cmp	r3, #0
   b4fe4:	f2c0 816e 	blt.w	b52c4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4fe8:	4cb2      	ldr	r4, [pc, #712]	; (b52b4 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4fea:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4fee:	2b00      	cmp	r3, #0
   b4ff0:	f000 8144 	beq.w	b527c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ff4:	79eb      	ldrb	r3, [r5, #7]
   b4ff6:	4ab0      	ldr	r2, [pc, #704]	; (b52b8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4ff8:	4cb0      	ldr	r4, [pc, #704]	; (b52bc <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ffa:	6812      	ldr	r2, [r2, #0]
   b4ffc:	0119      	lsls	r1, r3, #4
   b4ffe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5002:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5004:	49ae      	ldr	r1, [pc, #696]	; (b52c0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5006:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5008:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b500c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5010:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5014:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5016:	f003 031f 	and.w	r3, r3, #31
   b501a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b501e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5020:	433a      	orrs	r2, r7
   b5022:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5024:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5026:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b502a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b502e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5030:	2900      	cmp	r1, #0
   b5032:	d044      	beq.n	b50be <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5034:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5038:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b503a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b503e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5042:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5044:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5046:	6863      	ldr	r3, [r4, #4]
   b5048:	1a9b      	subs	r3, r3, r2
   b504a:	2b46      	cmp	r3, #70	; 0x46
   b504c:	d9fb      	bls.n	b5046 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b504e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5050:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5054:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5058:	ea43 0307 	orr.w	r3, r3, r7
   b505c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5060:	d02f      	beq.n	b50c2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5062:	6863      	ldr	r3, [r4, #4]
   b5064:	1a9b      	subs	r3, r3, r2
   b5066:	2b28      	cmp	r3, #40	; 0x28
   b5068:	d9fb      	bls.n	b5062 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b506a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b506e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5070:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5074:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5078:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b507c:	d1e3      	bne.n	b5046 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b507e:	88ab      	ldrh	r3, [r5, #4]
   b5080:	f10e 0e01 	add.w	lr, lr, #1
   b5084:	fa1f fe8e 	uxth.w	lr, lr
   b5088:	4573      	cmp	r3, lr
   b508a:	d8d8      	bhi.n	b503e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b508c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b5090:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5094:	6863      	ldr	r3, [r4, #4]
   b5096:	1a9b      	subs	r3, r3, r2
   b5098:	2b46      	cmp	r3, #70	; 0x46
   b509a:	d9fb      	bls.n	b5094 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b509c:	6863      	ldr	r3, [r4, #4]
   b509e:	eba3 0909 	sub.w	r9, r3, r9
   b50a2:	4589      	cmp	r9, r1
   b50a4:	f0c0 80e4 	bcc.w	b5270 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b50a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b50ac:	f000 f9b0 	bl	b5410 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b50b0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b50b2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b50b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b50ba:	2900      	cmp	r1, #0
   b50bc:	d1ba      	bne.n	b5034 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b50be:	460a      	mov	r2, r1
   b50c0:	e7e8      	b.n	b5094 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b50c2:	6863      	ldr	r3, [r4, #4]
   b50c4:	1a9b      	subs	r3, r3, r2
   b50c6:	2b11      	cmp	r3, #17
   b50c8:	d8cf      	bhi.n	b506a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b50ca:	6863      	ldr	r3, [r4, #4]
   b50cc:	1a9b      	subs	r3, r3, r2
   b50ce:	2b11      	cmp	r3, #17
   b50d0:	d9f7      	bls.n	b50c2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b50d2:	e7ca      	b.n	b506a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b50d4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b50d8:	2b00      	cmp	r3, #0
   b50da:	f6bf af7c 	bge.w	b4fd6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b50de:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b50e2:	2b00      	cmp	r3, #0
   b50e4:	f6bf af77 	bge.w	b4fd6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b50e8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b50ec:	2b00      	cmp	r3, #0
   b50ee:	f6bf af72 	bge.w	b4fd6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b50f2:	0136      	lsls	r6, r6, #4
   b50f4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b50f6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b50f8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b50fa:	f000 fbdd 	bl	b58b8 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b50fe:	2800      	cmp	r0, #0
   b5100:	f43f af78 	beq.w	b4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5104:	88ab      	ldrh	r3, [r5, #4]
   b5106:	2b00      	cmp	r3, #0
   b5108:	f000 80ed 	beq.w	b52e6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b510c:	68ea      	ldr	r2, [r5, #12]
   b510e:	3b01      	subs	r3, #1
   b5110:	fa12 f783 	uxtah	r7, r2, r3
   b5114:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b5118:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b511a:	f248 0206 	movw	r2, #32774	; 0x8006
   b511e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5122:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5126:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b512a:	bf0c      	ite	eq
   b512c:	4693      	moveq	fp, r2
   b512e:	468b      	movne	fp, r1
   b5130:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5134:	bf0c      	ite	eq
   b5136:	4616      	moveq	r6, r2
   b5138:	460e      	movne	r6, r1
   b513a:	f01c 0f20 	tst.w	ip, #32
   b513e:	bf0c      	ite	eq
   b5140:	4690      	moveq	r8, r2
   b5142:	4688      	movne	r8, r1
        pos++;
   b5144:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5148:	f8cd 8008 	str.w	r8, [sp, #8]
   b514c:	9601      	str	r6, [sp, #4]
        pos++;
   b514e:	f103 0802 	add.w	r8, r3, #2
   b5152:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5156:	9e01      	ldr	r6, [sp, #4]
   b5158:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b515c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5160:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5164:	9e02      	ldr	r6, [sp, #8]
   b5166:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b516a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b516e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5172:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5176:	bf0c      	ite	eq
   b5178:	4693      	moveq	fp, r2
   b517a:	468b      	movne	fp, r1
   b517c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5180:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5184:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5188:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b518c:	bf0c      	ite	eq
   b518e:	4693      	moveq	fp, r2
   b5190:	468b      	movne	fp, r1
   b5192:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5196:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b519a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b519e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b51a2:	bf0c      	ite	eq
   b51a4:	4693      	moveq	fp, r2
   b51a6:	468b      	movne	fp, r1
   b51a8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b51ac:	f103 0a08 	add.w	sl, r3, #8
   b51b0:	f103 0806 	add.w	r8, r3, #6
   b51b4:	3307      	adds	r3, #7
   b51b6:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b51b8:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b51bc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b51c0:	bf0c      	ite	eq
   b51c2:	4693      	moveq	fp, r2
   b51c4:	468b      	movne	fp, r1
        pos++;
   b51c6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b51ca:	f01c 0f01 	tst.w	ip, #1
   b51ce:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b51d2:	bf15      	itete	ne
   b51d4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b51d8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b51dc:	fa1f f38a 	uxthne.w	r3, sl
   b51e0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b51e4:	4577      	cmp	r7, lr
   b51e6:	d19c      	bne.n	b5122 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51e8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51ea:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51ec:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51ee:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51f0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51f2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51f4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b51f8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b51fa:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b51fc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b51fe:	4b2e      	ldr	r3, [pc, #184]	; (b52b8 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5200:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5202:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5204:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5206:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5208:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b520c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5210:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5214:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5218:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b521c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5220:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5224:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5228:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b522c:	79eb      	ldrb	r3, [r5, #7]
   b522e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5232:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5234:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5236:	5cfe      	ldrb	r6, [r7, r3]
   b5238:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b523c:	f003 031f 	and.w	r3, r3, #31
   b5240:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5244:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5248:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b524c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5250:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5252:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5256:	2b00      	cmp	r3, #0
   b5258:	d0fb      	beq.n	b5252 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b525a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b525c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b5260:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5264:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5268:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b526c:	f000 fb2c 	bl	b58c8 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5270:	f000 f8d6 	bl	b5420 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5274:	6128      	str	r0, [r5, #16]
}
   b5276:	b005      	add	sp, #20
   b5278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b527c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5280:	2b00      	cmp	r3, #0
   b5282:	f6bf aeb7 	bge.w	b4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5286:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b528a:	2b00      	cmp	r3, #0
   b528c:	f6bf aeb2 	bge.w	b4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5290:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5294:	2b00      	cmp	r3, #0
   b5296:	f6bf aead 	bge.w	b4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b529a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b529e:	2b00      	cmp	r3, #0
   b52a0:	f6bf aea8 	bge.w	b4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b52a4:	e725      	b.n	b50f2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b52a6:	bf00      	nop
   b52a8:	000b9070 	.word	0x000b9070
   b52ac:	4001c000 	.word	0x4001c000
   b52b0:	40021000 	.word	0x40021000
   b52b4:	40022000 	.word	0x40022000
   b52b8:	2003e6c0 	.word	0x2003e6c0
   b52bc:	e0001000 	.word	0xe0001000
   b52c0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52c4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52c8:	2b00      	cmp	r3, #0
   b52ca:	f6bf ae8d 	bge.w	b4fe8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52ce:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52d2:	2b00      	cmp	r3, #0
   b52d4:	f6bf ae88 	bge.w	b4fe8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b52d8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b52dc:	2b00      	cmp	r3, #0
   b52de:	f6bf ae83 	bge.w	b4fe8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b52e2:	e706      	b.n	b50f2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b52e4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b52e6:	2304      	movs	r3, #4
   b52e8:	2102      	movs	r1, #2
   b52ea:	e783      	b.n	b51f4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b52ec <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
   b52ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(n >= numLEDs) {
   b52ee:	8843      	ldrh	r3, [r0, #2]
   b52f0:	428b      	cmp	r3, r1
   b52f2:	d946      	bls.n	b5382 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x96>
    // Out of bounds, return no color.
    return 0;
  }

  uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b52f4:	7984      	ldrb	r4, [r0, #6]
   b52f6:	68c6      	ldr	r6, [r0, #12]
   b52f8:	2c06      	cmp	r4, #6
   b52fa:	bf0c      	ite	eq
   b52fc:	2504      	moveq	r5, #4
   b52fe:	2503      	movne	r5, #3
   b5300:	434d      	muls	r5, r1
   b5302:	1972      	adds	r2, r6, r5
  uint32_t c;

  switch(type) {
   b5304:	1ea7      	subs	r7, r4, #2
    case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
    case WS2812B_FAST:
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
   b5306:	7853      	ldrb	r3, [r2, #1]
   b5308:	5d71      	ldrb	r1, [r6, r5]
   b530a:	7892      	ldrb	r2, [r2, #2]
   b530c:	2f06      	cmp	r7, #6
   b530e:	d834      	bhi.n	b537a <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8e>
   b5310:	e8df f007 	tbb	[pc, r7]
   b5314:	04093304 	.word	0x04093304
   b5318:	040d      	.short	0x040d
   b531a:	04          	.byte	0x04
   b531b:	00          	.byte	0x00
   b531c:	0209      	lsls	r1, r1, #8
   b531e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
      } break;
    case WS2811: // WS2811 is RGB order
    case TM1803: // TM1803 is RGB order
    default: {   // default is RGB order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b5322:	4313      	orrs	r3, r2
   b5324:	e005      	b.n	b5332 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x46>
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
   b5326:	0212      	lsls	r2, r2, #8
   b5328:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   b532c:	e7f9      	b.n	b5322 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
   b532e:	5973      	ldr	r3, [r6, r5]
   b5330:	ba1b      	rev	r3, r3
      } break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
   b5332:	7a02      	ldrb	r2, [r0, #8]
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b5334:	9301      	str	r3, [sp, #4]
  if(brightness) { // See notes in setBrightness()
   b5336:	b1ea      	cbz	r2, b5374 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x88>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    if (type == SK6812RGBW) {
   b5338:	2c06      	cmp	r4, #6
      c_ptr[3] = (c_ptr[3] << 8)/brightness;
   b533a:	bf01      	itttt	eq
   b533c:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
   b5340:	021b      	lsleq	r3, r3, #8
   b5342:	fbb3 f3f2 	udiveq	r3, r3, r2
   b5346:	f88d 3007 	strbeq.w	r3, [sp, #7]
    }
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
   b534a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b534e:	021b      	lsls	r3, r3, #8
   b5350:	fbb3 f3f2 	udiv	r3, r3, r2
   b5354:	f88d 3004 	strb.w	r3, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
   b5358:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b535c:	021b      	lsls	r3, r3, #8
   b535e:	fbb3 f3f2 	udiv	r3, r3, r2
   b5362:	f88d 3005 	strb.w	r3, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
   b5366:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b536a:	021b      	lsls	r3, r3, #8
   b536c:	fbb3 f3f2 	udiv	r3, r3, r2
   b5370:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
   b5374:	9801      	ldr	r0, [sp, #4]
}
   b5376:	b003      	add	sp, #12
   b5378:	bdf0      	pop	{r4, r5, r6, r7, pc}
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b537a:	021b      	lsls	r3, r3, #8
   b537c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   b5380:	e7cf      	b.n	b5322 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
    return 0;
   b5382:	2000      	movs	r0, #0
   b5384:	e7f7      	b.n	b5376 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8a>

000b5386 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5386:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5388:	1c4a      	adds	r2, r1, #1
   b538a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b538c:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b538e:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5390:	d01f      	beq.n	b53d2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5392:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5394:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b5398:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b539a:	d00c      	beq.n	b53b6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b539c:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b539e:	bf1f      	itttt	ne
   b53a0:	0211      	lslne	r1, r2, #8
   b53a2:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b53a6:	fbb1 f3f3 	udivne	r3, r1, r3
   b53aa:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b53ac:	bf04      	itt	eq
   b53ae:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b53b2:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b53b6:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b53b8:	8886      	ldrh	r6, [r0, #4]
   b53ba:	1b29      	subs	r1, r5, r4
   b53bc:	b289      	uxth	r1, r1
   b53be:	428e      	cmp	r6, r1
   b53c0:	d906      	bls.n	b53d0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b53c2:	7829      	ldrb	r1, [r5, #0]
   b53c4:	4359      	muls	r1, r3
   b53c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b53ca:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b53ce:	e7f3      	b.n	b53b8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b53d0:	7202      	strb	r2, [r0, #8]
  }
}
   b53d2:	bd70      	pop	{r4, r5, r6, pc}

000b53d4 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b53d4:	8882      	ldrh	r2, [r0, #4]
   b53d6:	68c0      	ldr	r0, [r0, #12]
   b53d8:	2100      	movs	r1, #0
   b53da:	f003 ba57 	b.w	b888c <memset>
	...

000b53e0 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b53e0:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b53e2:	f000 f82d 	bl	b5440 <HAL_Pin_Map>
   b53e6:	4b01      	ldr	r3, [pc, #4]	; (b53ec <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b53e8:	6018      	str	r0, [r3, #0]
}
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	2003e6c0 	.word	0x2003e6c0

000b53f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <os_mutex_recursive_create+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030248 	.word	0x00030248

000b5400 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <HAL_RNG_GetRandomNumber+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	685b      	ldr	r3, [r3, #4]
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030218 	.word	0x00030218

000b5410 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <HAL_Delay_Microseconds+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	68db      	ldr	r3, [r3, #12]
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030218 	.word	0x00030218

000b5420 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	691b      	ldr	r3, [r3, #16]
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030218 	.word	0x00030218

000b5430 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	695b      	ldr	r3, [r3, #20]
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	00030218 	.word	0x00030218

000b5440 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <HAL_Pin_Map+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	681b      	ldr	r3, [r3, #0]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	0003022c 	.word	0x0003022c

000b5450 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <HAL_Pin_Mode+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	689b      	ldr	r3, [r3, #8]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	0003022c 	.word	0x0003022c

000b5460 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <HAL_Get_Pin_Mode+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	68db      	ldr	r3, [r3, #12]
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	0003022c 	.word	0x0003022c

000b5470 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <HAL_GPIO_Write+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	691b      	ldr	r3, [r3, #16]
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003022c 	.word	0x0003022c

000b5480 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <HAL_GPIO_Read+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	695b      	ldr	r3, [r3, #20]
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003022c 	.word	0x0003022c

000b5490 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <HAL_Pulse_In+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003022c 	.word	0x0003022c

000b54a0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <hal_i2c_begin+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	68db      	ldr	r3, [r3, #12]
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	00030228 	.word	0x00030228

000b54b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b54b0:	b508      	push	{r3, lr}
   b54b2:	4b02      	ldr	r3, [pc, #8]	; (b54bc <hal_i2c_begin_transmission+0xc>)
   b54b4:	681b      	ldr	r3, [r3, #0]
   b54b6:	699b      	ldr	r3, [r3, #24]
   b54b8:	9301      	str	r3, [sp, #4]
   b54ba:	bd08      	pop	{r3, pc}
   b54bc:	00030228 	.word	0x00030228

000b54c0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b54c0:	b508      	push	{r3, lr}
   b54c2:	4b02      	ldr	r3, [pc, #8]	; (b54cc <hal_i2c_end_transmission+0xc>)
   b54c4:	681b      	ldr	r3, [r3, #0]
   b54c6:	69db      	ldr	r3, [r3, #28]
   b54c8:	9301      	str	r3, [sp, #4]
   b54ca:	bd08      	pop	{r3, pc}
   b54cc:	00030228 	.word	0x00030228

000b54d0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b54d0:	b508      	push	{r3, lr}
   b54d2:	4b02      	ldr	r3, [pc, #8]	; (b54dc <hal_i2c_write+0xc>)
   b54d4:	681b      	ldr	r3, [r3, #0]
   b54d6:	6a1b      	ldr	r3, [r3, #32]
   b54d8:	9301      	str	r3, [sp, #4]
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	00030228 	.word	0x00030228

000b54e0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b54e0:	b508      	push	{r3, lr}
   b54e2:	4b02      	ldr	r3, [pc, #8]	; (b54ec <hal_i2c_available+0xc>)
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54e8:	9301      	str	r3, [sp, #4]
   b54ea:	bd08      	pop	{r3, pc}
   b54ec:	00030228 	.word	0x00030228

000b54f0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b54f0:	b508      	push	{r3, lr}
   b54f2:	4b02      	ldr	r3, [pc, #8]	; (b54fc <hal_i2c_read+0xc>)
   b54f4:	681b      	ldr	r3, [r3, #0]
   b54f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b54f8:	9301      	str	r3, [sp, #4]
   b54fa:	bd08      	pop	{r3, pc}
   b54fc:	00030228 	.word	0x00030228

000b5500 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5500:	b508      	push	{r3, lr}
   b5502:	4b02      	ldr	r3, [pc, #8]	; (b550c <hal_i2c_peek+0xc>)
   b5504:	681b      	ldr	r3, [r3, #0]
   b5506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5508:	9301      	str	r3, [sp, #4]
   b550a:	bd08      	pop	{r3, pc}
   b550c:	00030228 	.word	0x00030228

000b5510 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5510:	b508      	push	{r3, lr}
   b5512:	4b02      	ldr	r3, [pc, #8]	; (b551c <hal_i2c_flush+0xc>)
   b5514:	681b      	ldr	r3, [r3, #0]
   b5516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5518:	9301      	str	r3, [sp, #4]
   b551a:	bd08      	pop	{r3, pc}
   b551c:	00030228 	.word	0x00030228

000b5520 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5520:	b508      	push	{r3, lr}
   b5522:	4b02      	ldr	r3, [pc, #8]	; (b552c <hal_i2c_is_enabled+0xc>)
   b5524:	681b      	ldr	r3, [r3, #0]
   b5526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5528:	9301      	str	r3, [sp, #4]
   b552a:	bd08      	pop	{r3, pc}
   b552c:	00030228 	.word	0x00030228

000b5530 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5530:	b508      	push	{r3, lr}
   b5532:	4b02      	ldr	r3, [pc, #8]	; (b553c <hal_i2c_init+0xc>)
   b5534:	681b      	ldr	r3, [r3, #0]
   b5536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5538:	9301      	str	r3, [sp, #4]
   b553a:	bd08      	pop	{r3, pc}
   b553c:	00030228 	.word	0x00030228

000b5540 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5540:	b508      	push	{r3, lr}
   b5542:	4b02      	ldr	r3, [pc, #8]	; (b554c <if_index_to_name+0xc>)
   b5544:	681b      	ldr	r3, [r3, #0]
   b5546:	695b      	ldr	r3, [r3, #20]
   b5548:	9301      	str	r3, [sp, #4]
   b554a:	bd08      	pop	{r3, pc}
   b554c:	0003026c 	.word	0x0003026c

000b5550 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5550:	b508      	push	{r3, lr}
   b5552:	4b02      	ldr	r3, [pc, #8]	; (b555c <inet_inet_ntop+0xc>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	695b      	ldr	r3, [r3, #20]
   b5558:	9301      	str	r3, [sp, #4]
   b555a:	bd08      	pop	{r3, pc}
   b555c:	00030264 	.word	0x00030264

000b5560 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5560:	b508      	push	{r3, lr}
   b5562:	4b02      	ldr	r3, [pc, #8]	; (b556c <inet_htonl+0xc>)
   b5564:	681b      	ldr	r3, [r3, #0]
   b5566:	6a1b      	ldr	r3, [r3, #32]
   b5568:	9301      	str	r3, [sp, #4]
   b556a:	bd08      	pop	{r3, pc}
   b556c:	00030264 	.word	0x00030264

000b5570 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5570:	b508      	push	{r3, lr}
   b5572:	4b02      	ldr	r3, [pc, #8]	; (b557c <inet_htons+0xc>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5578:	9301      	str	r3, [sp, #4]
   b557a:	bd08      	pop	{r3, pc}
   b557c:	00030264 	.word	0x00030264

000b5580 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5580:	b508      	push	{r3, lr}
   b5582:	4b02      	ldr	r3, [pc, #8]	; (b558c <netdb_freeaddrinfo+0xc>)
   b5584:	681b      	ldr	r3, [r3, #0]
   b5586:	689b      	ldr	r3, [r3, #8]
   b5588:	9301      	str	r3, [sp, #4]
   b558a:	bd08      	pop	{r3, pc}
   b558c:	00030268 	.word	0x00030268

000b5590 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5590:	b508      	push	{r3, lr}
   b5592:	4b02      	ldr	r3, [pc, #8]	; (b559c <netdb_getaddrinfo+0xc>)
   b5594:	681b      	ldr	r3, [r3, #0]
   b5596:	68db      	ldr	r3, [r3, #12]
   b5598:	9301      	str	r3, [sp, #4]
   b559a:	bd08      	pop	{r3, pc}
   b559c:	00030268 	.word	0x00030268

000b55a0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b55a0:	b508      	push	{r3, lr}
   b55a2:	4b02      	ldr	r3, [pc, #8]	; (b55ac <sock_setsockopt+0xc>)
   b55a4:	681b      	ldr	r3, [r3, #0]
   b55a6:	699b      	ldr	r3, [r3, #24]
   b55a8:	9301      	str	r3, [sp, #4]
   b55aa:	bd08      	pop	{r3, pc}
   b55ac:	00030238 	.word	0x00030238

000b55b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b55b0:	b508      	push	{r3, lr}
   b55b2:	4b02      	ldr	r3, [pc, #8]	; (b55bc <sock_close+0xc>)
   b55b4:	681b      	ldr	r3, [r3, #0]
   b55b6:	69db      	ldr	r3, [r3, #28]
   b55b8:	9301      	str	r3, [sp, #4]
   b55ba:	bd08      	pop	{r3, pc}
   b55bc:	00030238 	.word	0x00030238

000b55c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b55c0:	b508      	push	{r3, lr}
   b55c2:	4b02      	ldr	r3, [pc, #8]	; (b55cc <sock_connect+0xc>)
   b55c4:	681b      	ldr	r3, [r3, #0]
   b55c6:	6a1b      	ldr	r3, [r3, #32]
   b55c8:	9301      	str	r3, [sp, #4]
   b55ca:	bd08      	pop	{r3, pc}
   b55cc:	00030238 	.word	0x00030238

000b55d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b55d0:	b508      	push	{r3, lr}
   b55d2:	4b02      	ldr	r3, [pc, #8]	; (b55dc <sock_recv+0xc>)
   b55d4:	681b      	ldr	r3, [r3, #0]
   b55d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55d8:	9301      	str	r3, [sp, #4]
   b55da:	bd08      	pop	{r3, pc}
   b55dc:	00030238 	.word	0x00030238

000b55e0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b55e0:	b508      	push	{r3, lr}
   b55e2:	4b02      	ldr	r3, [pc, #8]	; (b55ec <sock_send+0xc>)
   b55e4:	681b      	ldr	r3, [r3, #0]
   b55e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b55e8:	9301      	str	r3, [sp, #4]
   b55ea:	bd08      	pop	{r3, pc}
   b55ec:	00030238 	.word	0x00030238

000b55f0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b55f0:	b508      	push	{r3, lr}
   b55f2:	4b02      	ldr	r3, [pc, #8]	; (b55fc <sock_socket+0xc>)
   b55f4:	681b      	ldr	r3, [r3, #0]
   b55f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b55f8:	9301      	str	r3, [sp, #4]
   b55fa:	bd08      	pop	{r3, pc}
   b55fc:	00030238 	.word	0x00030238

000b5600 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5600:	b508      	push	{r3, lr}
   b5602:	4b02      	ldr	r3, [pc, #8]	; (b560c <hal_spi_begin+0xc>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	681b      	ldr	r3, [r3, #0]
   b5608:	9301      	str	r3, [sp, #4]
   b560a:	bd08      	pop	{r3, pc}
   b560c:	00030230 	.word	0x00030230

000b5610 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5610:	b508      	push	{r3, lr}
   b5612:	4b02      	ldr	r3, [pc, #8]	; (b561c <hal_spi_set_bit_order+0xc>)
   b5614:	681b      	ldr	r3, [r3, #0]
   b5616:	689b      	ldr	r3, [r3, #8]
   b5618:	9301      	str	r3, [sp, #4]
   b561a:	bd08      	pop	{r3, pc}
   b561c:	00030230 	.word	0x00030230

000b5620 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5620:	b508      	push	{r3, lr}
   b5622:	4b02      	ldr	r3, [pc, #8]	; (b562c <hal_spi_set_data_mode+0xc>)
   b5624:	681b      	ldr	r3, [r3, #0]
   b5626:	68db      	ldr	r3, [r3, #12]
   b5628:	9301      	str	r3, [sp, #4]
   b562a:	bd08      	pop	{r3, pc}
   b562c:	00030230 	.word	0x00030230

000b5630 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5630:	b508      	push	{r3, lr}
   b5632:	4b02      	ldr	r3, [pc, #8]	; (b563c <hal_spi_set_clock_divider+0xc>)
   b5634:	681b      	ldr	r3, [r3, #0]
   b5636:	691b      	ldr	r3, [r3, #16]
   b5638:	9301      	str	r3, [sp, #4]
   b563a:	bd08      	pop	{r3, pc}
   b563c:	00030230 	.word	0x00030230

000b5640 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5640:	b508      	push	{r3, lr}
   b5642:	4b02      	ldr	r3, [pc, #8]	; (b564c <hal_spi_transfer+0xc>)
   b5644:	681b      	ldr	r3, [r3, #0]
   b5646:	695b      	ldr	r3, [r3, #20]
   b5648:	9301      	str	r3, [sp, #4]
   b564a:	bd08      	pop	{r3, pc}
   b564c:	00030230 	.word	0x00030230

000b5650 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <hal_spi_init+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	69db      	ldr	r3, [r3, #28]
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030230 	.word	0x00030230

000b5660 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <hal_spi_is_enabled+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	6a1b      	ldr	r3, [r3, #32]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030230 	.word	0x00030230

000b5670 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <hal_spi_info+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030230 	.word	0x00030230

000b5680 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <hal_spi_acquire+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030230 	.word	0x00030230

000b5690 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <hal_spi_release+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030230 	.word	0x00030230

000b56a0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <hal_usart_write+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	68db      	ldr	r3, [r3, #12]
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	0003023c 	.word	0x0003023c

000b56b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <hal_usart_available+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	691b      	ldr	r3, [r3, #16]
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	0003023c 	.word	0x0003023c

000b56c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <hal_usart_read+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	695b      	ldr	r3, [r3, #20]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	0003023c 	.word	0x0003023c

000b56d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <hal_usart_peek+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	699b      	ldr	r3, [r3, #24]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	0003023c 	.word	0x0003023c

000b56e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <hal_usart_flush+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	69db      	ldr	r3, [r3, #28]
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	0003023c 	.word	0x0003023c

000b56f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <hal_usart_is_enabled+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6a1b      	ldr	r3, [r3, #32]
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	0003023c 	.word	0x0003023c

000b5700 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <hal_usart_available_data_for_write+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	0003023c 	.word	0x0003023c

000b5710 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <hal_usart_init_ex+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	0003023c 	.word	0x0003023c

000b5720 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <HAL_USB_USART_Init+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	681b      	ldr	r3, [r3, #0]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003024c 	.word	0x0003024c

000b5730 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <HAL_USB_USART_Available_Data+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	691b      	ldr	r3, [r3, #16]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003024c 	.word	0x0003024c

000b5740 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	695b      	ldr	r3, [r3, #20]
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003024c 	.word	0x0003024c

000b5750 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <HAL_USB_USART_Receive_Data+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	699b      	ldr	r3, [r3, #24]
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	0003024c 	.word	0x0003024c

000b5760 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5760:	b508      	push	{r3, lr}
   b5762:	4b02      	ldr	r3, [pc, #8]	; (b576c <HAL_USB_USART_Send_Data+0xc>)
   b5764:	681b      	ldr	r3, [r3, #0]
   b5766:	69db      	ldr	r3, [r3, #28]
   b5768:	9301      	str	r3, [sp, #4]
   b576a:	bd08      	pop	{r3, pc}
   b576c:	0003024c 	.word	0x0003024c

000b5770 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5770:	b508      	push	{r3, lr}
   b5772:	4b02      	ldr	r3, [pc, #8]	; (b577c <HAL_USB_USART_Flush_Data+0xc>)
   b5774:	681b      	ldr	r3, [r3, #0]
   b5776:	6a1b      	ldr	r3, [r3, #32]
   b5778:	9301      	str	r3, [sp, #4]
   b577a:	bd08      	pop	{r3, pc}
   b577c:	0003024c 	.word	0x0003024c

000b5780 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5780:	b508      	push	{r3, lr}
   b5782:	4b02      	ldr	r3, [pc, #8]	; (b578c <panic_+0xc>)
   b5784:	681b      	ldr	r3, [r3, #0]
   b5786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5788:	9301      	str	r3, [sp, #4]
   b578a:	bd08      	pop	{r3, pc}
   b578c:	00030260 	.word	0x00030260

000b5790 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5790:	b508      	push	{r3, lr}
   b5792:	4b02      	ldr	r3, [pc, #8]	; (b579c <log_message+0xc>)
   b5794:	681b      	ldr	r3, [r3, #0]
   b5796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5798:	9301      	str	r3, [sp, #4]
   b579a:	bd08      	pop	{r3, pc}
   b579c:	00030260 	.word	0x00030260

000b57a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b57a0:	b508      	push	{r3, lr}
   b57a2:	4b02      	ldr	r3, [pc, #8]	; (b57ac <set_system_mode+0xc>)
   b57a4:	681b      	ldr	r3, [r3, #0]
   b57a6:	685b      	ldr	r3, [r3, #4]
   b57a8:	9301      	str	r3, [sp, #4]
   b57aa:	bd08      	pop	{r3, pc}
   b57ac:	00030220 	.word	0x00030220

000b57b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b57b0:	b508      	push	{r3, lr}
   b57b2:	4b02      	ldr	r3, [pc, #8]	; (b57bc <system_delay_ms+0xc>)
   b57b4:	681b      	ldr	r3, [r3, #0]
   b57b6:	695b      	ldr	r3, [r3, #20]
   b57b8:	9301      	str	r3, [sp, #4]
   b57ba:	bd08      	pop	{r3, pc}
   b57bc:	00030220 	.word	0x00030220

000b57c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b57c0:	b508      	push	{r3, lr}
   b57c2:	4b03      	ldr	r3, [pc, #12]	; (b57d0 <system_ctrl_set_app_request_handler+0x10>)
   b57c4:	681b      	ldr	r3, [r3, #0]
   b57c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b57ca:	9301      	str	r3, [sp, #4]
   b57cc:	bd08      	pop	{r3, pc}
   b57ce:	0000      	.short	0x0000
   b57d0:	00030220 	.word	0x00030220

000b57d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b03      	ldr	r3, [pc, #12]	; (b57e4 <system_ctrl_set_result+0x10>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b57de:	9301      	str	r3, [sp, #4]
   b57e0:	bd08      	pop	{r3, pc}
   b57e2:	0000      	.short	0x0000
   b57e4:	00030220 	.word	0x00030220

000b57e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030244 	.word	0x00030244

000b57f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <network_connect+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	685b      	ldr	r3, [r3, #4]
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030240 	.word	0x00030240

000b5808 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <network_connecting+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	689b      	ldr	r3, [r3, #8]
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030240 	.word	0x00030240

000b5818 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <network_disconnect+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	68db      	ldr	r3, [r3, #12]
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030240 	.word	0x00030240

000b5828 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <network_ready+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	691b      	ldr	r3, [r3, #16]
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030240 	.word	0x00030240

000b5838 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <network_on+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	695b      	ldr	r3, [r3, #20]
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030240 	.word	0x00030240

000b5848 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <network_off+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	699b      	ldr	r3, [r3, #24]
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030240 	.word	0x00030240

000b5858 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <network_listen+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	69db      	ldr	r3, [r3, #28]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030240 	.word	0x00030240

000b5868 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <network_listening+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	6a1b      	ldr	r3, [r3, #32]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030240 	.word	0x00030240

000b5878 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <network_set_listen_timeout+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030240 	.word	0x00030240

000b5888 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <network_get_listen_timeout+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030240 	.word	0x00030240

000b5898 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <network_is_on+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030240 	.word	0x00030240

000b58a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <network_is_off+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030240 	.word	0x00030240

000b58b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <malloc+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	681b      	ldr	r3, [r3, #0]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	0003021c 	.word	0x0003021c

000b58c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <free+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	685b      	ldr	r3, [r3, #4]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	0003021c 	.word	0x0003021c

000b58d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <realloc+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	689b      	ldr	r3, [r3, #8]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	0003021c 	.word	0x0003021c

000b58e8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <vsnprintf+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	0003021c 	.word	0x0003021c

000b58f8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <__errno+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003021c 	.word	0x0003021c

000b5908 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <__assert_func+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003021c 	.word	0x0003021c

000b5918 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <newlib_impure_ptr_callback+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	0003021c 	.word	0x0003021c

000b5928 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5928:	2100      	movs	r1, #0
   b592a:	f7ff bf41 	b.w	b57b0 <system_delay_ms>
	...

000b5930 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5930:	4802      	ldr	r0, [pc, #8]	; (b593c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5932:	2300      	movs	r3, #0
   b5934:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5936:	f7ff bd5b 	b.w	b53f0 <os_mutex_recursive_create>
   b593a:	bf00      	nop
   b593c:	2003e6c4 	.word	0x2003e6c4

000b5940 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5940:	2200      	movs	r2, #0
   b5942:	6840      	ldr	r0, [r0, #4]
   b5944:	4611      	mov	r1, r2
   b5946:	f7ff bf8f 	b.w	b5868 <network_listening>

000b594a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b594a:	2200      	movs	r2, #0
   b594c:	6840      	ldr	r0, [r0, #4]
   b594e:	4611      	mov	r1, r2
   b5950:	f7ff bf9a 	b.w	b5888 <network_get_listen_timeout>

000b5954 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5954:	6840      	ldr	r0, [r0, #4]
   b5956:	2200      	movs	r2, #0
   b5958:	f7ff bf8e 	b.w	b5878 <network_set_listen_timeout>

000b595c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b595c:	6840      	ldr	r0, [r0, #4]
   b595e:	2200      	movs	r2, #0
   b5960:	f081 0101 	eor.w	r1, r1, #1
   b5964:	f7ff bf78 	b.w	b5858 <network_listen>

000b5968 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5968:	2300      	movs	r3, #0
   b596a:	6840      	ldr	r0, [r0, #4]
   b596c:	461a      	mov	r2, r3
   b596e:	4619      	mov	r1, r3
   b5970:	f7ff bf6a 	b.w	b5848 <network_off>

000b5974 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5974:	2300      	movs	r3, #0
   b5976:	6840      	ldr	r0, [r0, #4]
   b5978:	461a      	mov	r2, r3
   b597a:	4619      	mov	r1, r3
   b597c:	f7ff bf5c 	b.w	b5838 <network_on>

000b5980 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5980:	2200      	movs	r2, #0
   b5982:	6840      	ldr	r0, [r0, #4]
   b5984:	4611      	mov	r1, r2
   b5986:	f7ff bf4f 	b.w	b5828 <network_ready>

000b598a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b598a:	2200      	movs	r2, #0
   b598c:	6840      	ldr	r0, [r0, #4]
   b598e:	4611      	mov	r1, r2
   b5990:	f7ff bf3a 	b.w	b5808 <network_connecting>

000b5994 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5994:	6840      	ldr	r0, [r0, #4]
   b5996:	2200      	movs	r2, #0
   b5998:	2102      	movs	r1, #2
   b599a:	f7ff bf3d 	b.w	b5818 <network_disconnect>

000b599e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b599e:	2300      	movs	r3, #0
   b59a0:	6840      	ldr	r0, [r0, #4]
   b59a2:	461a      	mov	r2, r3
   b59a4:	f7ff bf28 	b.w	b57f8 <network_connect>

000b59a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b59a8:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b59aa:	2203      	movs	r2, #3
   b59ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b59ae:	4a02      	ldr	r2, [pc, #8]	; (b59b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b59b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b59b2:	4770      	bx	lr
   b59b4:	2003e6c8 	.word	0x2003e6c8
   b59b8:	000b9094 	.word	0x000b9094

000b59bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b59bc:	4770      	bx	lr

000b59be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b59be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59c0:	4606      	mov	r6, r0
   b59c2:	4615      	mov	r5, r2
   b59c4:	460c      	mov	r4, r1
   b59c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b59c8:	42bc      	cmp	r4, r7
   b59ca:	d006      	beq.n	b59da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b59cc:	6833      	ldr	r3, [r6, #0]
   b59ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b59d2:	689b      	ldr	r3, [r3, #8]
   b59d4:	4630      	mov	r0, r6
   b59d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b59d8:	e7f6      	b.n	b59c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b59da:	4628      	mov	r0, r5
   b59dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b59de:	7c00      	ldrb	r0, [r0, #16]
   b59e0:	2200      	movs	r2, #0
   b59e2:	f7ff bd75 	b.w	b54d0 <hal_i2c_write>

000b59e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b59e6:	7c00      	ldrb	r0, [r0, #16]
   b59e8:	2100      	movs	r1, #0
   b59ea:	f7ff bd79 	b.w	b54e0 <hal_i2c_available>

000b59ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b59ee:	7c00      	ldrb	r0, [r0, #16]
   b59f0:	2100      	movs	r1, #0
   b59f2:	f7ff bd7d 	b.w	b54f0 <hal_i2c_read>

000b59f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b59f6:	7c00      	ldrb	r0, [r0, #16]
   b59f8:	2100      	movs	r1, #0
   b59fa:	f7ff bd81 	b.w	b5500 <hal_i2c_peek>

000b59fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b59fe:	7c00      	ldrb	r0, [r0, #16]
   b5a00:	2100      	movs	r1, #0
   b5a02:	f7ff bd85 	b.w	b5510 <hal_i2c_flush>

000b5a06 <_ZN7TwoWireD0Ev>:
   b5a06:	b510      	push	{r4, lr}
   b5a08:	2114      	movs	r1, #20
   b5a0a:	4604      	mov	r4, r0
   b5a0c:	f7fe fb47 	bl	b409e <_ZdlPvj>
   b5a10:	4620      	mov	r0, r4
   b5a12:	bd10      	pop	{r4, pc}

000b5a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a14:	b538      	push	{r3, r4, r5, lr}
   b5a16:	4604      	mov	r4, r0
   b5a18:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a1e:	2200      	movs	r2, #0
   b5a20:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a24:	4b09      	ldr	r3, [pc, #36]	; (b5a4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5a26:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a28:	4608      	mov	r0, r1
   b5a2a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5a2c:	4629      	mov	r1, r5
   b5a2e:	f7ff fd7f 	bl	b5530 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a32:	30bf      	adds	r0, #191	; 0xbf
   b5a34:	d108      	bne.n	b5a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5a36:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5a38:	07db      	lsls	r3, r3, #31
   b5a3a:	d505      	bpl.n	b5a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5a3c:	6868      	ldr	r0, [r5, #4]
   b5a3e:	f7ff ff43 	bl	b58c8 <free>
    free(conf.tx_buffer);
   b5a42:	68e8      	ldr	r0, [r5, #12]
   b5a44:	f7ff ff40 	bl	b58c8 <free>
}
   b5a48:	4620      	mov	r0, r4
   b5a4a:	bd38      	pop	{r3, r4, r5, pc}
   b5a4c:	000b90d0 	.word	0x000b90d0

000b5a50 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5a50:	2300      	movs	r3, #0
   b5a52:	7c00      	ldrb	r0, [r0, #16]
   b5a54:	461a      	mov	r2, r3
   b5a56:	4619      	mov	r1, r3
   b5a58:	f7ff bd22 	b.w	b54a0 <hal_i2c_begin>

000b5a5c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5a5c:	7c00      	ldrb	r0, [r0, #16]
   b5a5e:	2200      	movs	r2, #0
   b5a60:	f7ff bd26 	b.w	b54b0 <hal_i2c_begin_transmission>

000b5a64 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5a64:	b2c9      	uxtb	r1, r1
   b5a66:	f7ff bff9 	b.w	b5a5c <_ZN7TwoWire17beginTransmissionEh>

000b5a6a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5a6a:	7c00      	ldrb	r0, [r0, #16]
   b5a6c:	2200      	movs	r2, #0
   b5a6e:	f7ff bd27 	b.w	b54c0 <hal_i2c_end_transmission>

000b5a72 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5a72:	2101      	movs	r1, #1
   b5a74:	f7ff bff9 	b.w	b5a6a <_ZN7TwoWire15endTransmissionEh>

000b5a78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5a78:	4770      	bx	lr

000b5a7a <_ZN9IPAddressD0Ev>:
   b5a7a:	b510      	push	{r4, lr}
   b5a7c:	2118      	movs	r1, #24
   b5a7e:	4604      	mov	r4, r0
   b5a80:	f7fe fb0d 	bl	b409e <_ZdlPvj>
   b5a84:	4620      	mov	r0, r4
   b5a86:	bd10      	pop	{r4, pc}

000b5a88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5a8a:	7d03      	ldrb	r3, [r0, #20]
   b5a8c:	2b06      	cmp	r3, #6
{
   b5a8e:	b08d      	sub	sp, #52	; 0x34
   b5a90:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5a92:	f100 0704 	add.w	r7, r0, #4
   b5a96:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5a9a:	d012      	beq.n	b5ac2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5a9c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5aa0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5aa4:	220a      	movs	r2, #10
   b5aa6:	4630      	mov	r0, r6
   b5aa8:	f000 f965 	bl	b5d76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5aac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5aae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5ab0:	d019      	beq.n	b5ae6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ab2:	2c00      	cmp	r4, #0
   b5ab4:	d0f4      	beq.n	b5aa0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5ab6:	212e      	movs	r1, #46	; 0x2e
   b5ab8:	4630      	mov	r0, r6
   b5aba:	f000 f94d 	bl	b5d58 <_ZN5Print5printEc>
   b5abe:	4404      	add	r4, r0
   b5ac0:	e7ee      	b.n	b5aa0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5ac2:	232f      	movs	r3, #47	; 0x2f
   b5ac4:	466a      	mov	r2, sp
   b5ac6:	4639      	mov	r1, r7
   b5ac8:	200a      	movs	r0, #10
		buf[0] = 0;
   b5aca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5ace:	f7ff fd3f 	bl	b5550 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5ad2:	4668      	mov	r0, sp
   b5ad4:	f002 ff1a 	bl	b890c <strlen>
   b5ad8:	6833      	ldr	r3, [r6, #0]
   b5ada:	4602      	mov	r2, r0
   b5adc:	68db      	ldr	r3, [r3, #12]
   b5ade:	4669      	mov	r1, sp
   b5ae0:	4630      	mov	r0, r6
   b5ae2:	4798      	blx	r3
   b5ae4:	4604      	mov	r4, r0
    }
    return n;
}
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	b00d      	add	sp, #52	; 0x34
   b5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5aec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5aec:	b510      	push	{r4, lr}
   b5aee:	4b05      	ldr	r3, [pc, #20]	; (b5b04 <_ZN9IPAddressC1Ev+0x18>)
   b5af0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5af2:	2211      	movs	r2, #17
   b5af4:	f840 3b04 	str.w	r3, [r0], #4
   b5af8:	2100      	movs	r1, #0
   b5afa:	f002 fec7 	bl	b888c <memset>
}
   b5afe:	4620      	mov	r0, r4
   b5b00:	bd10      	pop	{r4, pc}
   b5b02:	bf00      	nop
   b5b04:	000b90f8 	.word	0x000b90f8

000b5b08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5b08:	4603      	mov	r3, r0
   b5b0a:	4a07      	ldr	r2, [pc, #28]	; (b5b28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5b0c:	b510      	push	{r4, lr}
   b5b0e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5b12:	f101 0210 	add.w	r2, r1, #16
   b5b16:	f851 4b04 	ldr.w	r4, [r1], #4
   b5b1a:	f843 4b04 	str.w	r4, [r3], #4
   b5b1e:	4291      	cmp	r1, r2
   b5b20:	d1f9      	bne.n	b5b16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5b22:	780a      	ldrb	r2, [r1, #0]
   b5b24:	701a      	strb	r2, [r3, #0]
}
   b5b26:	bd10      	pop	{r4, pc}
   b5b28:	000b90f8 	.word	0x000b90f8

000b5b2c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5b2c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5b2e:	2b04      	cmp	r3, #4
   b5b30:	d104      	bne.n	b5b3c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5b32:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5b34:	3800      	subs	r0, #0
   b5b36:	bf18      	it	ne
   b5b38:	2001      	movne	r0, #1
   b5b3a:	4770      	bx	lr
    } else if (version() == 6) {
   b5b3c:	2b06      	cmp	r3, #6
   b5b3e:	d107      	bne.n	b5b50 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5b40:	6843      	ldr	r3, [r0, #4]
   b5b42:	b93b      	cbnz	r3, b5b54 <_ZNK9IPAddresscvbEv+0x28>
   b5b44:	6883      	ldr	r3, [r0, #8]
   b5b46:	b92b      	cbnz	r3, b5b54 <_ZNK9IPAddresscvbEv+0x28>
   b5b48:	68c3      	ldr	r3, [r0, #12]
   b5b4a:	b91b      	cbnz	r3, b5b54 <_ZNK9IPAddresscvbEv+0x28>
   b5b4c:	6900      	ldr	r0, [r0, #16]
   b5b4e:	e7f1      	b.n	b5b34 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5b50:	2000      	movs	r0, #0
   b5b52:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5b54:	2001      	movs	r0, #1
}
   b5b56:	4770      	bx	lr

000b5b58 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5b58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5b5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5b5e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5b62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5b66:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5b6a:	2304      	movs	r3, #4
   b5b6c:	6041      	str	r1, [r0, #4]
   b5b6e:	7503      	strb	r3, [r0, #20]
}
   b5b70:	bd10      	pop	{r4, pc}
	...

000b5b74 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5b74:	b507      	push	{r0, r1, r2, lr}
   b5b76:	4b06      	ldr	r3, [pc, #24]	; (b5b90 <_ZN9IPAddressC1EPKh+0x1c>)
   b5b78:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5b7a:	78cb      	ldrb	r3, [r1, #3]
   b5b7c:	9300      	str	r3, [sp, #0]
   b5b7e:	788b      	ldrb	r3, [r1, #2]
   b5b80:	784a      	ldrb	r2, [r1, #1]
   b5b82:	7809      	ldrb	r1, [r1, #0]
   b5b84:	f7ff ffe8 	bl	b5b58 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5b88:	b003      	add	sp, #12
   b5b8a:	f85d fb04 	ldr.w	pc, [sp], #4
   b5b8e:	bf00      	nop
   b5b90:	000b90f8 	.word	0x000b90f8

000b5b94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5b94:	4b01      	ldr	r3, [pc, #4]	; (b5b9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5b96:	4a02      	ldr	r2, [pc, #8]	; (b5ba0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5b98:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5b9a:	4770      	bx	lr
   b5b9c:	2003e6d0 	.word	0x2003e6d0
   b5ba0:	000b9104 	.word	0x000b9104

000b5ba4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5ba4:	2300      	movs	r3, #0
   b5ba6:	6840      	ldr	r0, [r0, #4]
   b5ba8:	461a      	mov	r2, r3
   b5baa:	f7ff be25 	b.w	b57f8 <network_connect>

000b5bae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5bae:	6840      	ldr	r0, [r0, #4]
   b5bb0:	2200      	movs	r2, #0
   b5bb2:	2102      	movs	r1, #2
   b5bb4:	f7ff be30 	b.w	b5818 <network_disconnect>

000b5bb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5bb8:	2200      	movs	r2, #0
   b5bba:	6840      	ldr	r0, [r0, #4]
   b5bbc:	4611      	mov	r1, r2
   b5bbe:	f7ff be23 	b.w	b5808 <network_connecting>

000b5bc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5bc2:	2200      	movs	r2, #0
   b5bc4:	6840      	ldr	r0, [r0, #4]
   b5bc6:	4611      	mov	r1, r2
   b5bc8:	f7ff be2e 	b.w	b5828 <network_ready>

000b5bcc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5bcc:	2300      	movs	r3, #0
   b5bce:	6840      	ldr	r0, [r0, #4]
   b5bd0:	461a      	mov	r2, r3
   b5bd2:	4619      	mov	r1, r3
   b5bd4:	f7ff be30 	b.w	b5838 <network_on>

000b5bd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5bd8:	2300      	movs	r3, #0
   b5bda:	6840      	ldr	r0, [r0, #4]
   b5bdc:	461a      	mov	r2, r3
   b5bde:	4619      	mov	r1, r3
   b5be0:	f7ff be32 	b.w	b5848 <network_off>

000b5be4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5be4:	6840      	ldr	r0, [r0, #4]
   b5be6:	2100      	movs	r1, #0
   b5be8:	f7ff be56 	b.w	b5898 <network_is_on>

000b5bec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5bec:	6840      	ldr	r0, [r0, #4]
   b5bee:	2100      	movs	r1, #0
   b5bf0:	f7ff be5a 	b.w	b58a8 <network_is_off>

000b5bf4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5bf4:	6840      	ldr	r0, [r0, #4]
   b5bf6:	2200      	movs	r2, #0
   b5bf8:	f081 0101 	eor.w	r1, r1, #1
   b5bfc:	f7ff be2c 	b.w	b5858 <network_listen>

000b5c00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5c00:	6840      	ldr	r0, [r0, #4]
   b5c02:	2200      	movs	r2, #0
   b5c04:	f7ff be38 	b.w	b5878 <network_set_listen_timeout>

000b5c08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5c08:	2200      	movs	r2, #0
   b5c0a:	6840      	ldr	r0, [r0, #4]
   b5c0c:	4611      	mov	r1, r2
   b5c0e:	f7ff be3b 	b.w	b5888 <network_get_listen_timeout>

000b5c12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5c12:	2200      	movs	r2, #0
   b5c14:	6840      	ldr	r0, [r0, #4]
   b5c16:	4611      	mov	r1, r2
   b5c18:	f7ff be26 	b.w	b5868 <network_listening>

000b5c1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5c20:	b095      	sub	sp, #84	; 0x54
   b5c22:	4614      	mov	r4, r2
   b5c24:	460d      	mov	r5, r1
   b5c26:	4607      	mov	r7, r0
    IPAddress addr;
   b5c28:	f7ff ff60 	bl	b5aec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5c2c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5c2e:	221c      	movs	r2, #28
   b5c30:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5c32:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5c34:	f002 fe2a 	bl	b888c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5c38:	2340      	movs	r3, #64	; 0x40
   b5c3a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	466b      	mov	r3, sp
   b5c40:	aa0c      	add	r2, sp, #48	; 0x30
   b5c42:	2100      	movs	r1, #0
   b5c44:	f7ff fca4 	bl	b5590 <netdb_getaddrinfo>
    if (!r) {
   b5c48:	4604      	mov	r4, r0
   b5c4a:	2800      	cmp	r0, #0
   b5c4c:	d14b      	bne.n	b5ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5c4e:	4602      	mov	r2, r0
   b5c50:	2101      	movs	r1, #1
   b5c52:	6868      	ldr	r0, [r5, #4]
   b5c54:	f7ff fde8 	bl	b5828 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c58:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5c5a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c5c:	4622      	mov	r2, r4
   b5c5e:	6868      	ldr	r0, [r5, #4]
   b5c60:	f7ff fde2 	bl	b5828 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c64:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c66:	4681      	mov	r9, r0
        bool ok = false;
   b5c68:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c6a:	2e00      	cmp	r6, #0
   b5c6c:	d03b      	beq.n	b5ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5c6e:	2900      	cmp	r1, #0
   b5c70:	d139      	bne.n	b5ce6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5c72:	6873      	ldr	r3, [r6, #4]
   b5c74:	2b02      	cmp	r3, #2
   b5c76:	d003      	beq.n	b5c80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5c78:	2b0a      	cmp	r3, #10
   b5c7a:	d011      	beq.n	b5ca0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c7c:	69f6      	ldr	r6, [r6, #28]
   b5c7e:	e7f4      	b.n	b5c6a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5c80:	f1b8 0f00 	cmp.w	r8, #0
   b5c84:	d0fa      	beq.n	b5c7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5c86:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5c88:	a806      	add	r0, sp, #24
   b5c8a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5c8c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5c8e:	f7ff ff71 	bl	b5b74 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c94:	1d3c      	adds	r4, r7, #4
   b5c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c98:	682b      	ldr	r3, [r5, #0]
   b5c9a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5c9c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5c9e:	e7ed      	b.n	b5c7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ca0:	f1b9 0f00 	cmp.w	r9, #0
   b5ca4:	d0ea      	beq.n	b5c7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5ca6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5ca8:	2210      	movs	r2, #16
   b5caa:	a801      	add	r0, sp, #4
   b5cac:	f002 fdee 	bl	b888c <memset>
                    a.v = 6;
   b5cb0:	2306      	movs	r3, #6
   b5cb2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5cb6:	ad01      	add	r5, sp, #4
   b5cb8:	f104 0308 	add.w	r3, r4, #8
   b5cbc:	3418      	adds	r4, #24
   b5cbe:	6818      	ldr	r0, [r3, #0]
   b5cc0:	6859      	ldr	r1, [r3, #4]
   b5cc2:	462a      	mov	r2, r5
   b5cc4:	c203      	stmia	r2!, {r0, r1}
   b5cc6:	3308      	adds	r3, #8
   b5cc8:	42a3      	cmp	r3, r4
   b5cca:	4615      	mov	r5, r2
   b5ccc:	d1f7      	bne.n	b5cbe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5cce:	a901      	add	r1, sp, #4
   b5cd0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5cd2:	ad07      	add	r5, sp, #28
   b5cd4:	f7ff ff18 	bl	b5b08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cda:	1d3c      	adds	r4, r7, #4
   b5cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cde:	682b      	ldr	r3, [r5, #0]
   b5ce0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ce2:	4649      	mov	r1, r9
   b5ce4:	e7ca      	b.n	b5c7c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5ce6:	9800      	ldr	r0, [sp, #0]
   b5ce8:	f7ff fc4a 	bl	b5580 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5cec:	4638      	mov	r0, r7
   b5cee:	b015      	add	sp, #84	; 0x54
   b5cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5cf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5cf4:	4b02      	ldr	r3, [pc, #8]	; (b5d00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5cf6:	4a03      	ldr	r2, [pc, #12]	; (b5d04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5cf8:	601a      	str	r2, [r3, #0]
   b5cfa:	2200      	movs	r2, #0
   b5cfc:	605a      	str	r2, [r3, #4]

} // spark
   b5cfe:	4770      	bx	lr
   b5d00:	2003e6d4 	.word	0x2003e6d4
   b5d04:	000b9110 	.word	0x000b9110

000b5d08 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d0a:	4606      	mov	r6, r0
   b5d0c:	460d      	mov	r5, r1
  size_t n = 0;
   b5d0e:	188f      	adds	r7, r1, r2
   b5d10:	2400      	movs	r4, #0
  while (size--) {
   b5d12:	42bd      	cmp	r5, r7
   b5d14:	d00c      	beq.n	b5d30 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5d16:	6833      	ldr	r3, [r6, #0]
   b5d18:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d1c:	689b      	ldr	r3, [r3, #8]
   b5d1e:	4630      	mov	r0, r6
   b5d20:	4798      	blx	r3
     if (chunk>=0)
   b5d22:	1e03      	subs	r3, r0, #0
   b5d24:	db01      	blt.n	b5d2a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5d26:	441c      	add	r4, r3
  while (size--) {
   b5d28:	e7f3      	b.n	b5d12 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5d2a:	2c00      	cmp	r4, #0
   b5d2c:	bf08      	it	eq
   b5d2e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5d30:	4620      	mov	r0, r4
   b5d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d34 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5d34:	b513      	push	{r0, r1, r4, lr}
   b5d36:	4604      	mov	r4, r0
    }
   b5d38:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5d3a:	b159      	cbz	r1, b5d54 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5d3c:	9101      	str	r1, [sp, #4]
   b5d3e:	f002 fde5 	bl	b890c <strlen>
   b5d42:	6823      	ldr	r3, [r4, #0]
   b5d44:	9901      	ldr	r1, [sp, #4]
   b5d46:	68db      	ldr	r3, [r3, #12]
   b5d48:	4602      	mov	r2, r0
   b5d4a:	4620      	mov	r0, r4
    }
   b5d4c:	b002      	add	sp, #8
   b5d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5d52:	4718      	bx	r3
    }
   b5d54:	b002      	add	sp, #8
   b5d56:	bd10      	pop	{r4, pc}

000b5d58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5d58:	6803      	ldr	r3, [r0, #0]
   b5d5a:	689b      	ldr	r3, [r3, #8]
   b5d5c:	4718      	bx	r3

000b5d5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5d5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5d60:	210d      	movs	r1, #13
{
   b5d62:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5d64:	f7ff fff8 	bl	b5d58 <_ZN5Print5printEc>
  n += print('\n');
   b5d68:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5d6a:	4604      	mov	r4, r0
  n += print('\n');
   b5d6c:	4628      	mov	r0, r5
   b5d6e:	f7ff fff3 	bl	b5d58 <_ZN5Print5printEc>
  return n;
}
   b5d72:	4420      	add	r0, r4
   b5d74:	bd38      	pop	{r3, r4, r5, pc}

000b5d76 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5d76:	b530      	push	{r4, r5, lr}
   b5d78:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5d7a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5d7c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5d7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5d82:	bf98      	it	ls
   b5d84:	220a      	movls	r2, #10
   b5d86:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5d88:	460d      	mov	r5, r1
   b5d8a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5d8e:	fb01 5312 	mls	r3, r1, r2, r5
   b5d92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d96:	2b09      	cmp	r3, #9
   b5d98:	bf94      	ite	ls
   b5d9a:	3330      	addls	r3, #48	; 0x30
   b5d9c:	3337      	addhi	r3, #55	; 0x37
   b5d9e:	b2db      	uxtb	r3, r3
  } while(n);
   b5da0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5da2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5da6:	d9ef      	bls.n	b5d88 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5da8:	4621      	mov	r1, r4
   b5daa:	f7ff ffc3 	bl	b5d34 <_ZN5Print5writeEPKc>
}
   b5dae:	b00b      	add	sp, #44	; 0x2c
   b5db0:	bd30      	pop	{r4, r5, pc}

000b5db2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5db6:	b086      	sub	sp, #24
   b5db8:	af00      	add	r7, sp, #0
   b5dba:	4605      	mov	r5, r0
   b5dbc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5dbe:	1d38      	adds	r0, r7, #4
   b5dc0:	2114      	movs	r1, #20
{
   b5dc2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5dc4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5dc6:	f7ff fd8f 	bl	b58e8 <vsnprintf>

    if (n<bufsize)
   b5dca:	2813      	cmp	r0, #19
   b5dcc:	d80e      	bhi.n	b5dec <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5dce:	1d39      	adds	r1, r7, #4
   b5dd0:	4628      	mov	r0, r5
   b5dd2:	f7ff ffaf 	bl	b5d34 <_ZN5Print5writeEPKc>
   b5dd6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5dd8:	b11e      	cbz	r6, b5de2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5dda:	4628      	mov	r0, r5
   b5ddc:	f7ff ffbf 	bl	b5d5e <_ZN5Print7printlnEv>
   b5de0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5de2:	4620      	mov	r0, r4
   b5de4:	3718      	adds	r7, #24
   b5de6:	46bd      	mov	sp, r7
   b5de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5dec:	f100 0308 	add.w	r3, r0, #8
   b5df0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5df4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5df6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5dfa:	4622      	mov	r2, r4
   b5dfc:	1c41      	adds	r1, r0, #1
   b5dfe:	683b      	ldr	r3, [r7, #0]
   b5e00:	4668      	mov	r0, sp
   b5e02:	f7ff fd71 	bl	b58e8 <vsnprintf>
  return write(str);
   b5e06:	4669      	mov	r1, sp
   b5e08:	4628      	mov	r0, r5
   b5e0a:	f7ff ff93 	bl	b5d34 <_ZN5Print5writeEPKc>
   b5e0e:	4604      	mov	r4, r0
   b5e10:	46c5      	mov	sp, r8
   b5e12:	e7e1      	b.n	b5dd8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5e14 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5e14:	4b01      	ldr	r3, [pc, #4]	; (b5e1c <_GLOBAL__sub_I_RGB+0x8>)
   b5e16:	2200      	movs	r2, #0
   b5e18:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5e1a:	4770      	bx	lr
   b5e1c:	2003e6dc 	.word	0x2003e6dc

000b5e20 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5e20:	2100      	movs	r1, #0
   b5e22:	f7ff bc35 	b.w	b5690 <hal_spi_release>

000b5e26 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5e26:	2100      	movs	r1, #0
   b5e28:	f7ff bc2a 	b.w	b5680 <hal_spi_acquire>

000b5e2c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5e2c:	b510      	push	{r4, lr}
   b5e2e:	4604      	mov	r4, r0
   b5e30:	4608      	mov	r0, r1
{
    _spi = spi;
   b5e32:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5e34:	f7ff fc0c 	bl	b5650 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5e38:	2300      	movs	r3, #0
   b5e3a:	6063      	str	r3, [r4, #4]
}
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	bd10      	pop	{r4, pc}

000b5e40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5e40:	b513      	push	{r0, r1, r4, lr}
   b5e42:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5e44:	7800      	ldrb	r0, [r0, #0]
   b5e46:	f7ff ffee 	bl	b5e26 <_ZN8SPIClass4lockEv.isra.0>
   b5e4a:	b958      	cbnz	r0, b5e64 <_ZN8SPIClass5beginEv+0x24>
   b5e4c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5e4e:	9001      	str	r0, [sp, #4]
   b5e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5e54:	f7ff fbd4 	bl	b5600 <hal_spi_begin>
        unlock();
   b5e58:	9801      	ldr	r0, [sp, #4]
    }
}
   b5e5a:	b002      	add	sp, #8
   b5e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5e60:	f7ff bfde 	b.w	b5e20 <_ZN8SPIClass6unlockEv.isra.0>
   b5e64:	b002      	add	sp, #8
   b5e66:	bd10      	pop	{r4, pc}

000b5e68 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5e68:	b513      	push	{r0, r1, r4, lr}
   b5e6a:	4604      	mov	r4, r0
    if (!lock())
   b5e6c:	7800      	ldrb	r0, [r0, #0]
{
   b5e6e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5e70:	f7ff ffd9 	bl	b5e26 <_ZN8SPIClass4lockEv.isra.0>
   b5e74:	9901      	ldr	r1, [sp, #4]
   b5e76:	b948      	cbnz	r0, b5e8c <_ZN8SPIClass11setBitOrderEh+0x24>
   b5e78:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5e7a:	9001      	str	r0, [sp, #4]
   b5e7c:	f7ff fbc8 	bl	b5610 <hal_spi_set_bit_order>
        unlock();
   b5e80:	9801      	ldr	r0, [sp, #4]
    }
}
   b5e82:	b002      	add	sp, #8
   b5e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5e88:	f7ff bfca 	b.w	b5e20 <_ZN8SPIClass6unlockEv.isra.0>
   b5e8c:	b002      	add	sp, #8
   b5e8e:	bd10      	pop	{r4, pc}

000b5e90 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5e90:	b513      	push	{r0, r1, r4, lr}
   b5e92:	4604      	mov	r4, r0
    if (!lock())
   b5e94:	7800      	ldrb	r0, [r0, #0]
{
   b5e96:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5e98:	f7ff ffc5 	bl	b5e26 <_ZN8SPIClass4lockEv.isra.0>
   b5e9c:	9901      	ldr	r1, [sp, #4]
   b5e9e:	b948      	cbnz	r0, b5eb4 <_ZN8SPIClass11setDataModeEh+0x24>
   b5ea0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5ea2:	9001      	str	r0, [sp, #4]
   b5ea4:	f7ff fbbc 	bl	b5620 <hal_spi_set_data_mode>
        unlock();
   b5ea8:	9801      	ldr	r0, [sp, #4]
    }
}
   b5eaa:	b002      	add	sp, #8
   b5eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5eb0:	f7ff bfb6 	b.w	b5e20 <_ZN8SPIClass6unlockEv.isra.0>
   b5eb4:	b002      	add	sp, #8
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5eb8:	0840      	lsrs	r0, r0, #1
{
   b5eba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5ebc:	6018      	str	r0, [r3, #0]
   b5ebe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5ec0:	6818      	ldr	r0, [r3, #0]
   b5ec2:	4288      	cmp	r0, r1
   b5ec4:	b2e5      	uxtb	r5, r4
   b5ec6:	d906      	bls.n	b5ed6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5ec8:	3401      	adds	r4, #1
   b5eca:	2c08      	cmp	r4, #8
   b5ecc:	d002      	beq.n	b5ed4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5ece:	0840      	lsrs	r0, r0, #1
   b5ed0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5ed2:	e7f5      	b.n	b5ec0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5ed4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5ed6:	4b02      	ldr	r3, [pc, #8]	; (b5ee0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5ed8:	5d5b      	ldrb	r3, [r3, r5]
   b5eda:	7013      	strb	r3, [r2, #0]
}
   b5edc:	bd30      	pop	{r4, r5, pc}
   b5ede:	bf00      	nop
   b5ee0:	000b9144 	.word	0x000b9144

000b5ee4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ee8:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5eea:	2300      	movs	r3, #0
{
   b5eec:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5eee:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5ef0:	9302      	str	r3, [sp, #8]
{
   b5ef2:	460e      	mov	r6, r1
   b5ef4:	4617      	mov	r7, r2
    if (!lock())
   b5ef6:	f7ff ff96 	bl	b5e26 <_ZN8SPIClass4lockEv.isra.0>
   b5efa:	4605      	mov	r5, r0
   b5efc:	bb00      	cbnz	r0, b5f40 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5efe:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5f02:	4601      	mov	r1, r0
   b5f04:	2214      	movs	r2, #20
   b5f06:	a803      	add	r0, sp, #12
   b5f08:	f002 fcc0 	bl	b888c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5f0c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5f0e:	462a      	mov	r2, r5
   b5f10:	a903      	add	r1, sp, #12
   b5f12:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5f14:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5f18:	f7ff fbaa 	bl	b5670 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5f1c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5f1e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5f22:	ab02      	add	r3, sp, #8
   b5f24:	f10d 0207 	add.w	r2, sp, #7
   b5f28:	fb07 f106 	mul.w	r1, r7, r6
   b5f2c:	f7ff ffc4 	bl	b5eb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5f30:	7820      	ldrb	r0, [r4, #0]
   b5f32:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5f36:	f7ff fb7b 	bl	b5630 <hal_spi_set_clock_divider>
        unlock();
   b5f3a:	7820      	ldrb	r0, [r4, #0]
   b5f3c:	f7ff ff70 	bl	b5e20 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5f40:	9802      	ldr	r0, [sp, #8]
   b5f42:	b008      	add	sp, #32
   b5f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5f48 <_ZN8SPIClass15setClockDividerEh>:
{
   b5f48:	b538      	push	{r3, r4, r5, lr}
   b5f4a:	4604      	mov	r4, r0
    if (!lock())
   b5f4c:	7800      	ldrb	r0, [r0, #0]
{
   b5f4e:	460d      	mov	r5, r1
    if (!lock())
   b5f50:	f7ff ff69 	bl	b5e26 <_ZN8SPIClass4lockEv.isra.0>
   b5f54:	4603      	mov	r3, r0
   b5f56:	b9d0      	cbnz	r0, b5f8e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5f58:	6861      	ldr	r1, [r4, #4]
   b5f5a:	b199      	cbz	r1, b5f84 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5f5c:	4a0c      	ldr	r2, [pc, #48]	; (b5f90 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5f5e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5f62:	4285      	cmp	r5, r0
   b5f64:	d002      	beq.n	b5f6c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5f66:	3301      	adds	r3, #1
   b5f68:	2b08      	cmp	r3, #8
   b5f6a:	d1f8      	bne.n	b5f5e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5f6c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5f6e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5f70:	2201      	movs	r2, #1
   b5f72:	40d9      	lsrs	r1, r3
   b5f74:	4620      	mov	r0, r4
   b5f76:	f7ff ffb5 	bl	b5ee4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5f7a:	7820      	ldrb	r0, [r4, #0]
}
   b5f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5f80:	f7ff bf4e 	b.w	b5e20 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5f84:	7820      	ldrb	r0, [r4, #0]
   b5f86:	4629      	mov	r1, r5
   b5f88:	f7ff fb52 	bl	b5630 <hal_spi_set_clock_divider>
   b5f8c:	e7f5      	b.n	b5f7a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5f8e:	bd38      	pop	{r3, r4, r5, pc}
   b5f90:	000b9144 	.word	0x000b9144

000b5f94 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5f94:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5f96:	7800      	ldrb	r0, [r0, #0]
   b5f98:	f7ff fb52 	bl	b5640 <hal_spi_transfer>
}
   b5f9c:	b2c0      	uxtb	r0, r0
   b5f9e:	bd08      	pop	{r3, pc}

000b5fa0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5fa0:	b510      	push	{r4, lr}
   b5fa2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5fa4:	6800      	ldr	r0, [r0, #0]
   b5fa6:	b108      	cbz	r0, b5fac <_ZN6String10invalidateEv+0xc>
   b5fa8:	f7ff fc8e 	bl	b58c8 <free>
	buffer = NULL;
   b5fac:	2300      	movs	r3, #0
	capacity = len = 0;
   b5fae:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5fb2:	6023      	str	r3, [r4, #0]
}
   b5fb4:	bd10      	pop	{r4, pc}

000b5fb6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5fb6:	b538      	push	{r3, r4, r5, lr}
   b5fb8:	4604      	mov	r4, r0
   b5fba:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5fbc:	6800      	ldr	r0, [r0, #0]
   b5fbe:	3101      	adds	r1, #1
   b5fc0:	f7ff fc8a 	bl	b58d8 <realloc>
	if (newbuffer) {
   b5fc4:	b110      	cbz	r0, b5fcc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5fc6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5fca:	2001      	movs	r0, #1
	}
	return 0;
}
   b5fcc:	bd38      	pop	{r3, r4, r5, pc}

000b5fce <_ZN6String7reserveEj>:
{
   b5fce:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5fd0:	6803      	ldr	r3, [r0, #0]
{
   b5fd2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5fd4:	b123      	cbz	r3, b5fe0 <_ZN6String7reserveEj+0x12>
   b5fd6:	6843      	ldr	r3, [r0, #4]
   b5fd8:	428b      	cmp	r3, r1
   b5fda:	d301      	bcc.n	b5fe0 <_ZN6String7reserveEj+0x12>
   b5fdc:	2001      	movs	r0, #1
}
   b5fde:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	f7ff ffe8 	bl	b5fb6 <_ZN6String12changeBufferEj>
   b5fe6:	2800      	cmp	r0, #0
   b5fe8:	d0f9      	beq.n	b5fde <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5fea:	68a3      	ldr	r3, [r4, #8]
   b5fec:	2b00      	cmp	r3, #0
   b5fee:	d1f5      	bne.n	b5fdc <_ZN6String7reserveEj+0xe>
   b5ff0:	6822      	ldr	r2, [r4, #0]
   b5ff2:	7013      	strb	r3, [r2, #0]
   b5ff4:	e7f2      	b.n	b5fdc <_ZN6String7reserveEj+0xe>

000b5ff6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ff8:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5ffa:	4611      	mov	r1, r2
   b5ffc:	9201      	str	r2, [sp, #4]
{
   b5ffe:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6000:	f7ff ffe5 	bl	b5fce <_ZN6String7reserveEj>
   b6004:	9a01      	ldr	r2, [sp, #4]
   b6006:	b928      	cbnz	r0, b6014 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6008:	4620      	mov	r0, r4
   b600a:	f7ff ffc9 	bl	b5fa0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b600e:	4620      	mov	r0, r4
   b6010:	b003      	add	sp, #12
   b6012:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6014:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6016:	4629      	mov	r1, r5
   b6018:	6820      	ldr	r0, [r4, #0]
   b601a:	f002 fc29 	bl	b8870 <memcpy>
	buffer[len] = 0;
   b601e:	6822      	ldr	r2, [r4, #0]
   b6020:	68a3      	ldr	r3, [r4, #8]
   b6022:	2100      	movs	r1, #0
   b6024:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6026:	e7f2      	b.n	b600e <_ZN6String4copyEPKcj+0x18>

000b6028 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6028:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b602a:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b602c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6030:	4604      	mov	r4, r0
	len = 0;
   b6032:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6034:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6036:	b141      	cbz	r1, b604a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6038:	4608      	mov	r0, r1
   b603a:	9101      	str	r1, [sp, #4]
   b603c:	f002 fc66 	bl	b890c <strlen>
   b6040:	9901      	ldr	r1, [sp, #4]
   b6042:	4602      	mov	r2, r0
   b6044:	4620      	mov	r0, r4
   b6046:	f7ff ffd6 	bl	b5ff6 <_ZN6String4copyEPKcj>
}
   b604a:	4620      	mov	r0, r4
   b604c:	b002      	add	sp, #8
   b604e:	bd10      	pop	{r4, pc}

000b6050 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6050:	4b05      	ldr	r3, [pc, #20]	; (b6068 <_GLOBAL__sub_I_System+0x18>)
   b6052:	2202      	movs	r2, #2
   b6054:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6056:	4b05      	ldr	r3, [pc, #20]	; (b606c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6058:	4a05      	ldr	r2, [pc, #20]	; (b6070 <_GLOBAL__sub_I_System+0x20>)
   b605a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b605c:	2000      	movs	r0, #0
   b605e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6062:	f7ff bb9d 	b.w	b57a0 <set_system_mode>
   b6066:	bf00      	nop
   b6068:	2003e6f8 	.word	0x2003e6f8
   b606c:	2003e6ec 	.word	0x2003e6ec
   b6070:	ffff0000 	.word	0xffff0000

000b6074 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6074:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6076:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6078:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b607c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b607e:	2201      	movs	r2, #1
   b6080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6084:	f10d 0107 	add.w	r1, sp, #7
   b6088:	47a0      	blx	r4
}
   b608a:	b002      	add	sp, #8
   b608c:	bd10      	pop	{r4, pc}

000b608e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b608e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6090:	6803      	ldr	r3, [r0, #0]
   b6092:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6098:	46a4      	mov	ip, r4
}
   b609a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b609e:	4760      	bx	ip

000b60a0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b60a0:	b513      	push	{r0, r1, r4, lr}
   b60a2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b60a4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b60a6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b60aa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b60ac:	f10d 0107 	add.w	r1, sp, #7
   b60b0:	2201      	movs	r2, #1
   b60b2:	47a0      	blx	r4
}
   b60b4:	b002      	add	sp, #8
   b60b6:	bd10      	pop	{r4, pc}

000b60b8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b60b8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b60ba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b60bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b60c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b60c4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b60c6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b60c8:	d008      	beq.n	b60dc <_ZN9TCPClient4readEv+0x24>
   b60ca:	6963      	ldr	r3, [r4, #20]
   b60cc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b60d0:	1c51      	adds	r1, r2, #1
   b60d2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b60d6:	4413      	add	r3, r2
   b60d8:	7918      	ldrb	r0, [r3, #4]
}
   b60da:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b60dc:	6803      	ldr	r3, [r0, #0]
   b60de:	691b      	ldr	r3, [r3, #16]
   b60e0:	4798      	blx	r3
   b60e2:	2800      	cmp	r0, #0
   b60e4:	d1f1      	bne.n	b60ca <_ZN9TCPClient4readEv+0x12>
   b60e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b60ea:	e7f6      	b.n	b60da <_ZN9TCPClient4readEv+0x22>

000b60ec <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b60ec:	4770      	bx	lr

000b60ee <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b60ee:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b60f0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b60f2:	43c0      	mvns	r0, r0
   b60f4:	0fc0      	lsrs	r0, r0, #31
   b60f6:	4770      	bx	lr

000b60f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b60f8:	4770      	bx	lr
	...

000b60fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b60fc:	4b06      	ldr	r3, [pc, #24]	; (b6118 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b60fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6100:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6102:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6106:	d005      	beq.n	b6114 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6108:	4608      	mov	r0, r1
   b610a:	f000 fd55 	bl	b6bb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b610e:	2800      	cmp	r0, #0
   b6110:	bf08      	it	eq
   b6112:	2400      	moveq	r4, #0
      }
   b6114:	4620      	mov	r0, r4
   b6116:	bd10      	pop	{r4, pc}
   b6118:	000b9084 	.word	0x000b9084

000b611c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b611c:	b510      	push	{r4, lr}
   b611e:	21ac      	movs	r1, #172	; 0xac
   b6120:	4604      	mov	r4, r0
   b6122:	f7fd ffbc 	bl	b409e <_ZdlPvj>
   b6126:	4620      	mov	r0, r4
   b6128:	bd10      	pop	{r4, pc}

000b612a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b612a:	21ac      	movs	r1, #172	; 0xac
   b612c:	f7fd bfb7 	b.w	b409e <_ZdlPvj>

000b6130 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6134:	f04f 0800 	mov.w	r8, #0
   b6138:	b086      	sub	sp, #24
   b613a:	461c      	mov	r4, r3
   b613c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6140:	4605      	mov	r5, r0
   b6142:	460e      	mov	r6, r1
   b6144:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6146:	4641      	mov	r1, r8
   b6148:	2210      	movs	r2, #16
   b614a:	a802      	add	r0, sp, #8
   b614c:	f002 fb9e 	bl	b888c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6150:	1c63      	adds	r3, r4, #1
   b6152:	d009      	beq.n	b6168 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6158:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b615c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6160:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6164:	435c      	muls	r4, r3
   b6166:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6168:	6968      	ldr	r0, [r5, #20]
   b616a:	2310      	movs	r3, #16
   b616c:	9300      	str	r3, [sp, #0]
   b616e:	6800      	ldr	r0, [r0, #0]
   b6170:	ab02      	add	r3, sp, #8
   b6172:	f241 0205 	movw	r2, #4101	; 0x1005
   b6176:	f640 71ff 	movw	r1, #4095	; 0xfff
   b617a:	f7ff fa11 	bl	b55a0 <sock_setsockopt>
    if (ret < 0) {
   b617e:	2800      	cmp	r0, #0
   b6180:	da07      	bge.n	b6192 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6182:	f7ff fbb9 	bl	b58f8 <__errno>
   b6186:	6803      	ldr	r3, [r0, #0]
   b6188:	606b      	str	r3, [r5, #4]
        return 0;
   b618a:	2000      	movs	r0, #0
}
   b618c:	b006      	add	sp, #24
   b618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6192:	6968      	ldr	r0, [r5, #20]
   b6194:	2300      	movs	r3, #0
   b6196:	6800      	ldr	r0, [r0, #0]
   b6198:	463a      	mov	r2, r7
   b619a:	4631      	mov	r1, r6
   b619c:	f7ff fa20 	bl	b55e0 <sock_send>
    if (ret < 0) {
   b61a0:	1e03      	subs	r3, r0, #0
   b61a2:	dbee      	blt.n	b6182 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b61a4:	4618      	mov	r0, r3
   b61a6:	e7f1      	b.n	b618c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b61a8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b61a8:	b530      	push	{r4, r5, lr}
   b61aa:	b087      	sub	sp, #28
   b61ac:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b61ae:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b61b0:	4668      	mov	r0, sp
   b61b2:	f7ff fcdf 	bl	b5b74 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b61b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61b8:	3404      	adds	r4, #4
   b61ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61bc:	682b      	ldr	r3, [r5, #0]
   b61be:	7023      	strb	r3, [r4, #0]
    }
   b61c0:	b007      	add	sp, #28
   b61c2:	bd30      	pop	{r4, r5, pc}

000b61c4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b61c4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b61c6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b61c8:	4b05      	ldr	r3, [pc, #20]	; (b61e0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b61ca:	4604      	mov	r4, r0
   b61cc:	358c      	adds	r5, #140	; 0x8c
   b61ce:	f844 3b04 	str.w	r3, [r4], #4
   b61d2:	4606      	mov	r6, r0
   b61d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61d8:	682b      	ldr	r3, [r5, #0]
   b61da:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b61dc:	4630      	mov	r0, r6
   b61de:	bd70      	pop	{r4, r5, r6, pc}
   b61e0:	000b90f8 	.word	0x000b90f8

000b61e4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b61e8:	4698      	mov	r8, r3
    stop();
   b61ea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61ec:	b093      	sub	sp, #76	; 0x4c
   b61ee:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b61f0:	2400      	movs	r4, #0
    stop();
   b61f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b61f4:	4606      	mov	r6, r0
   b61f6:	4617      	mov	r7, r2
    stop();
   b61f8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b61fa:	4628      	mov	r0, r5
   b61fc:	466b      	mov	r3, sp
   b61fe:	4622      	mov	r2, r4
   b6200:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6202:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6204:	f7ff f9c4 	bl	b5590 <netdb_getaddrinfo>
   b6208:	4605      	mov	r5, r0
   b620a:	2800      	cmp	r0, #0
   b620c:	d163      	bne.n	b62d6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b620e:	9b00      	ldr	r3, [sp, #0]
   b6210:	2b00      	cmp	r3, #0
   b6212:	d04b      	beq.n	b62ac <_ZN9TCPClient7connectEPKctm+0xc8>
   b6214:	695b      	ldr	r3, [r3, #20]
   b6216:	2b00      	cmp	r3, #0
   b6218:	d048      	beq.n	b62ac <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b621a:	a806      	add	r0, sp, #24
   b621c:	f7ff fc66 	bl	b5aec <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6220:	9b00      	ldr	r3, [sp, #0]
   b6222:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6224:	7863      	ldrb	r3, [r4, #1]
   b6226:	2b02      	cmp	r3, #2
   b6228:	d104      	bne.n	b6234 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b622a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b622c:	a806      	add	r0, sp, #24
   b622e:	f7ff ffbb 	bl	b61a8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6232:	e026      	b.n	b6282 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6234:	2b0a      	cmp	r3, #10
   b6236:	d124      	bne.n	b6282 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6238:	2211      	movs	r2, #17
   b623a:	4629      	mov	r1, r5
   b623c:	a801      	add	r0, sp, #4
   b623e:	f002 fb25 	bl	b888c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6242:	68a3      	ldr	r3, [r4, #8]
   b6244:	2b00      	cmp	r3, #0
   b6246:	d038      	beq.n	b62ba <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6248:	f104 0308 	add.w	r3, r4, #8
   b624c:	f10d 0c04 	add.w	ip, sp, #4
   b6250:	3418      	adds	r4, #24
   b6252:	6818      	ldr	r0, [r3, #0]
   b6254:	6859      	ldr	r1, [r3, #4]
   b6256:	4662      	mov	r2, ip
   b6258:	c203      	stmia	r2!, {r0, r1}
   b625a:	3308      	adds	r3, #8
   b625c:	42a3      	cmp	r3, r4
   b625e:	4694      	mov	ip, r2
   b6260:	d1f7      	bne.n	b6252 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6262:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6264:	a901      	add	r1, sp, #4
   b6266:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6268:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b626c:	f7ff fc4c 	bl	b5b08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6270:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6274:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6278:	ac07      	add	r4, sp, #28
   b627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b627c:	f8dc 3000 	ldr.w	r3, [ip]
   b6280:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6282:	a806      	add	r0, sp, #24
   b6284:	f7ff fc52 	bl	b5b2c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6288:	b180      	cbz	r0, b62ac <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b628a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b628c:	ad07      	add	r5, sp, #28
   b628e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6292:	4b12      	ldr	r3, [pc, #72]	; (b62dc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6294:	930c      	str	r3, [sp, #48]	; 0x30
   b6296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6298:	ac0d      	add	r4, sp, #52	; 0x34
   b629a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b629c:	682b      	ldr	r3, [r5, #0]
   b629e:	7023      	strb	r3, [r4, #0]
   b62a0:	463a      	mov	r2, r7
   b62a2:	4643      	mov	r3, r8
   b62a4:	a90c      	add	r1, sp, #48	; 0x30
   b62a6:	4630      	mov	r0, r6
   b62a8:	47c8      	blx	r9
   b62aa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b62ac:	9800      	ldr	r0, [sp, #0]
   b62ae:	f7ff f967 	bl	b5580 <netdb_freeaddrinfo>
}
   b62b2:	4628      	mov	r0, r5
   b62b4:	b013      	add	sp, #76	; 0x4c
   b62b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b62ba:	68e3      	ldr	r3, [r4, #12]
   b62bc:	2b00      	cmp	r3, #0
   b62be:	d1c3      	bne.n	b6248 <_ZN9TCPClient7connectEPKctm+0x64>
   b62c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b62c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b62c8:	f7ff f94a 	bl	b5560 <inet_htonl>
   b62cc:	4581      	cmp	r9, r0
   b62ce:	d1bb      	bne.n	b6248 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b62d0:	f104 0114 	add.w	r1, r4, #20
   b62d4:	e7aa      	b.n	b622c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b62d6:	4625      	mov	r5, r4
   b62d8:	e7e8      	b.n	b62ac <_ZN9TCPClient7connectEPKctm+0xc8>
   b62da:	bf00      	nop
   b62dc:	000b90f8 	.word	0x000b90f8

000b62e0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b62e0:	b538      	push	{r3, r4, r5, lr}
   b62e2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b62e4:	681a      	ldr	r2, [r3, #0]
   b62e6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b62e8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b62ea:	da10      	bge.n	b630e <_ZN9TCPClient9connectedEv+0x2e>
   b62ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b62f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b62f4:	429a      	cmp	r2, r3
   b62f6:	d10a      	bne.n	b630e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b62f8:	6803      	ldr	r3, [r0, #0]
   b62fa:	691b      	ldr	r3, [r3, #16]
   b62fc:	4798      	blx	r3
        if (!rv) {
   b62fe:	4604      	mov	r4, r0
   b6300:	b928      	cbnz	r0, b630e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6302:	682b      	ldr	r3, [r5, #0]
   b6304:	4628      	mov	r0, r5
   b6306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6308:	4798      	blx	r3
        rv = available();
   b630a:	4620      	mov	r0, r4
}
   b630c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b630e:	2001      	movs	r0, #1
   b6310:	e7fc      	b.n	b630c <_ZN9TCPClient9connectedEv+0x2c>

000b6312 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6312:	b510      	push	{r4, lr}
   b6314:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6316:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b631a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b631e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6320:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6322:	d005      	beq.n	b6330 <_ZN9TCPClient4peekEv+0x1e>
   b6324:	6963      	ldr	r3, [r4, #20]
   b6326:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b632a:	4413      	add	r3, r2
   b632c:	7918      	ldrb	r0, [r3, #4]
}
   b632e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6330:	6803      	ldr	r3, [r0, #0]
   b6332:	691b      	ldr	r3, [r3, #16]
   b6334:	4798      	blx	r3
   b6336:	2800      	cmp	r0, #0
   b6338:	d1f4      	bne.n	b6324 <_ZN9TCPClient4peekEv+0x12>
   b633a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b633e:	e7f6      	b.n	b632e <_ZN9TCPClient4peekEv+0x1c>

000b6340 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6342:	6943      	ldr	r3, [r0, #20]
   b6344:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6346:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b634a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b634e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6350:	4605      	mov	r5, r0
   b6352:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6354:	d016      	beq.n	b6384 <_ZN9TCPClient4readEPhj+0x44>
   b6356:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6358:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b635c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6360:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6362:	42bc      	cmp	r4, r7
   b6364:	bf28      	it	cs
   b6366:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6368:	3304      	adds	r3, #4
   b636a:	4622      	mov	r2, r4
   b636c:	4419      	add	r1, r3
   b636e:	4630      	mov	r0, r6
   b6370:	f002 fa7e 	bl	b8870 <memcpy>
   b6374:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6376:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b637a:	4423      	add	r3, r4
   b637c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6380:	4620      	mov	r0, r4
   b6382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6384:	6803      	ldr	r3, [r0, #0]
   b6386:	691b      	ldr	r3, [r3, #16]
   b6388:	4798      	blx	r3
   b638a:	2800      	cmp	r0, #0
   b638c:	d1e3      	bne.n	b6356 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b638e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6392:	e7f5      	b.n	b6380 <_ZN9TCPClient4readEPhj+0x40>

000b6394 <_ZN9TCPClient12flush_bufferEv>:
   b6394:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6396:	2300      	movs	r3, #0
   b6398:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b639c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b639e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b63a2:	4770      	bx	lr

000b63a4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b63a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63a8:	461f      	mov	r7, r3
    stop();
   b63aa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b63ac:	460c      	mov	r4, r1
    stop();
   b63ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b63b0:	b08a      	sub	sp, #40	; 0x28
   b63b2:	4605      	mov	r5, r0
   b63b4:	4616      	mov	r6, r2
    stop();
   b63b6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b63b8:	7d23      	ldrb	r3, [r4, #20]
   b63ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b63be:	2b04      	cmp	r3, #4
   b63c0:	bf0c      	ite	eq
   b63c2:	2002      	moveq	r0, #2
   b63c4:	200a      	movne	r0, #10
   b63c6:	2206      	movs	r2, #6
   b63c8:	2101      	movs	r1, #1
   b63ca:	f7ff f911 	bl	b55f0 <sock_socket>
   b63ce:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b63d2:	696b      	ldr	r3, [r5, #20]
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	2b00      	cmp	r3, #0
   b63d8:	da08      	bge.n	b63ec <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b63da:	682b      	ldr	r3, [r5, #0]
   b63dc:	4628      	mov	r0, r5
   b63de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b63e0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b63e2:	4798      	blx	r3
}
   b63e4:	4620      	mov	r0, r4
   b63e6:	b00a      	add	sp, #40	; 0x28
   b63e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b63ec:	4628      	mov	r0, r5
   b63ee:	f7ff ffd1 	bl	b6394 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b63f2:	b1b7      	cbz	r7, b6422 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b63f4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b63f6:	a903      	add	r1, sp, #12
   b63f8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b63fa:	9303      	str	r3, [sp, #12]
   b63fc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6400:	f7ff f89e 	bl	b5540 <if_index_to_name>
   b6404:	2800      	cmp	r0, #0
   b6406:	d1e8      	bne.n	b63da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6408:	6968      	ldr	r0, [r5, #20]
   b640a:	2306      	movs	r3, #6
   b640c:	9300      	str	r3, [sp, #0]
   b640e:	6800      	ldr	r0, [r0, #0]
   b6410:	ab03      	add	r3, sp, #12
   b6412:	f241 020b 	movw	r2, #4107	; 0x100b
   b6416:	f640 71ff 	movw	r1, #4095	; 0xfff
   b641a:	f7ff f8c1 	bl	b55a0 <sock_setsockopt>
   b641e:	2800      	cmp	r0, #0
   b6420:	d1db      	bne.n	b63da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6422:	221c      	movs	r2, #28
   b6424:	2100      	movs	r1, #0
   b6426:	a803      	add	r0, sp, #12
   b6428:	f002 fa30 	bl	b888c <memset>
    if (ip.version() == 4) {
   b642c:	7d23      	ldrb	r3, [r4, #20]
   b642e:	2b04      	cmp	r3, #4
   b6430:	d11d      	bne.n	b646e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6432:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6436:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6438:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b643c:	f7ff f898 	bl	b5570 <inet_htons>
   b6440:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6444:	6860      	ldr	r0, [r4, #4]
   b6446:	f7ff f88b 	bl	b5560 <inet_htonl>
   b644a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b644c:	696b      	ldr	r3, [r5, #20]
   b644e:	221c      	movs	r2, #28
   b6450:	6818      	ldr	r0, [r3, #0]
   b6452:	a903      	add	r1, sp, #12
   b6454:	f7ff f8b4 	bl	b55c0 <sock_connect>
   b6458:	2800      	cmp	r0, #0
   b645a:	d1be      	bne.n	b63da <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b645c:	3404      	adds	r4, #4
   b645e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6460:	696d      	ldr	r5, [r5, #20]
   b6462:	358c      	adds	r5, #140	; 0x8c
   b6464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6466:	6823      	ldr	r3, [r4, #0]
   b6468:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b646a:	2401      	movs	r4, #1
   b646c:	e7ba      	b.n	b63e4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b646e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6472:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6474:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6478:	f7ff f87a 	bl	b5570 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b647c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b647e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6482:	1d23      	adds	r3, r4, #4
   b6484:	f104 0714 	add.w	r7, r4, #20
   b6488:	6818      	ldr	r0, [r3, #0]
   b648a:	6859      	ldr	r1, [r3, #4]
   b648c:	4632      	mov	r2, r6
   b648e:	c203      	stmia	r2!, {r0, r1}
   b6490:	3308      	adds	r3, #8
   b6492:	42bb      	cmp	r3, r7
   b6494:	4616      	mov	r6, r2
   b6496:	d1f7      	bne.n	b6488 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6498:	e7d8      	b.n	b644c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b649c <_ZN9TCPClient9availableEv>:
{
   b649c:	b530      	push	{r4, r5, lr}
   b649e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b64a0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b64a4:	b08b      	sub	sp, #44	; 0x2c
   b64a6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b64a8:	b12b      	cbz	r3, b64b6 <_ZN9TCPClient9availableEv+0x1a>
   b64aa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b64ae:	429a      	cmp	r2, r3
   b64b0:	d101      	bne.n	b64b6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b64b2:	f7ff ff6f 	bl	b6394 <_ZN9TCPClient12flush_bufferEv>
   b64b6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b64b8:	6808      	ldr	r0, [r1, #0]
   b64ba:	2800      	cmp	r0, #0
   b64bc:	db18      	blt.n	b64f0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b64be:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b64c2:	2d7f      	cmp	r5, #127	; 0x7f
   b64c4:	d814      	bhi.n	b64f0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b64c6:	3104      	adds	r1, #4
   b64c8:	2308      	movs	r3, #8
   b64ca:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b64ce:	4429      	add	r1, r5
   b64d0:	f7ff f87e 	bl	b55d0 <sock_recv>
            if (ret > 0) {
   b64d4:	2800      	cmp	r0, #0
   b64d6:	dd13      	ble.n	b6500 <_ZN9TCPClient9availableEv+0x64>
   b64d8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b64da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b64de:	b90a      	cbnz	r2, b64e4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b64e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b64e4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b64e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b64ea:	4410      	add	r0, r2
   b64ec:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b64f0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b64f2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b64f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b64fa:	1ac0      	subs	r0, r0, r3
   b64fc:	b00b      	add	sp, #44	; 0x2c
   b64fe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6500:	f7ff f9fa 	bl	b58f8 <__errno>
   b6504:	6803      	ldr	r3, [r0, #0]
   b6506:	2b0b      	cmp	r3, #11
   b6508:	d0f2      	beq.n	b64f0 <_ZN9TCPClient9availableEv+0x54>
   b650a:	f7ff f9f5 	bl	b58f8 <__errno>
   b650e:	6803      	ldr	r3, [r0, #0]
   b6510:	2b0b      	cmp	r3, #11
   b6512:	d0ed      	beq.n	b64f0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6514:	2320      	movs	r3, #32
   b6516:	2500      	movs	r5, #0
   b6518:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b651c:	f7ff f9ec 	bl	b58f8 <__errno>
   b6520:	6803      	ldr	r3, [r0, #0]
   b6522:	9301      	str	r3, [sp, #4]
   b6524:	4b08      	ldr	r3, [pc, #32]	; (b6548 <_ZN9TCPClient9availableEv+0xac>)
   b6526:	4909      	ldr	r1, [pc, #36]	; (b654c <_ZN9TCPClient9availableEv+0xb0>)
   b6528:	9300      	str	r3, [sp, #0]
   b652a:	aa02      	add	r2, sp, #8
   b652c:	462b      	mov	r3, r5
   b652e:	2032      	movs	r0, #50	; 0x32
   b6530:	f7ff f92e 	bl	b5790 <log_message>
                    sock_close(d_->sock);
   b6534:	6963      	ldr	r3, [r4, #20]
   b6536:	6818      	ldr	r0, [r3, #0]
   b6538:	f7ff f83a 	bl	b55b0 <sock_close>
   b653c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b653e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6542:	601a      	str	r2, [r3, #0]
   b6544:	e7d4      	b.n	b64f0 <_ZN9TCPClient9availableEv+0x54>
   b6546:	bf00      	nop
   b6548:	000b9153 	.word	0x000b9153
   b654c:	000b914c 	.word	0x000b914c

000b6550 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6550:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6552:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6554:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6556:	6818      	ldr	r0, [r3, #0]
   b6558:	2800      	cmp	r0, #0
   b655a:	db01      	blt.n	b6560 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b655c:	f7ff f828 	bl	b55b0 <sock_close>
   b6560:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6566:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6568:	6960      	ldr	r0, [r4, #20]
   b656a:	2211      	movs	r2, #17
   b656c:	2100      	movs	r1, #0
   b656e:	308c      	adds	r0, #140	; 0x8c
   b6570:	f002 f98c 	bl	b888c <memset>
    flush_buffer();
   b6574:	4620      	mov	r0, r4
}
   b6576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b657a:	f7ff bf0b 	b.w	b6394 <_ZN9TCPClient12flush_bufferEv>

000b657e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b657e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6580:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6582:	4604      	mov	r4, r0
          total(0) {
   b6584:	6001      	str	r1, [r0, #0]
   b6586:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b658a:	3088      	adds	r0, #136	; 0x88
   b658c:	f7ff faae 	bl	b5aec <_ZN9IPAddressC1Ev>
}
   b6590:	4620      	mov	r0, r4
   b6592:	bd10      	pop	{r4, pc}

000b6594 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6594:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6596:	2300      	movs	r3, #0
   b6598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b659c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b65a0:	4a0e      	ldr	r2, [pc, #56]	; (b65dc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b65a2:	6103      	str	r3, [r0, #16]
   b65a4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b65a6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b65a8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b65aa:	20ac      	movs	r0, #172	; 0xac
   b65ac:	9101      	str	r1, [sp, #4]
   b65ae:	f7fd fd72 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b65b2:	1e05      	subs	r5, r0, #0
   b65b4:	f105 060c 	add.w	r6, r5, #12
   b65b8:	d008      	beq.n	b65cc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b65ba:	2301      	movs	r3, #1
   b65bc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b65c0:	4b07      	ldr	r3, [pc, #28]	; (b65e0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b65c2:	9901      	ldr	r1, [sp, #4]
   b65c4:	602b      	str	r3, [r5, #0]
   b65c6:	4630      	mov	r0, r6
   b65c8:	f7ff ffd9 	bl	b657e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b65cc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b65ce:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b65d2:	f7ff fedf 	bl	b6394 <_ZN9TCPClient12flush_bufferEv>
}
   b65d6:	b002      	add	sp, #8
   b65d8:	bd70      	pop	{r4, r5, r6, pc}
   b65da:	bf00      	nop
   b65dc:	000b9188 	.word	0x000b9188
   b65e0:	000b916c 	.word	0x000b916c

000b65e4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b65e4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b65e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b65ea:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b65ec:	f7ff ffd2 	bl	b6594 <_ZN9TCPClientC1Ei>
}
   b65f0:	4620      	mov	r0, r4
   b65f2:	bd10      	pop	{r4, pc}

000b65f4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b65f4:	b510      	push	{r4, lr}
   b65f6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b65f8:	6800      	ldr	r0, [r0, #0]
   b65fa:	2800      	cmp	r0, #0
   b65fc:	db01      	blt.n	b6602 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b65fe:	f7fe ffd7 	bl	b55b0 <sock_close>
    }
}
   b6602:	4620      	mov	r0, r4
   b6604:	bd10      	pop	{r4, pc}

000b6606 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6606:	300c      	adds	r0, #12
   b6608:	f7ff bff4 	b.w	b65f4 <_ZN9TCPClient4DataD1Ev>

000b660c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b660c:	4b02      	ldr	r3, [pc, #8]	; (b6618 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b660e:	681a      	ldr	r2, [r3, #0]
   b6610:	4b02      	ldr	r3, [pc, #8]	; (b661c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6612:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6614:	4770      	bx	lr
   b6616:	bf00      	nop
   b6618:	2003e57c 	.word	0x2003e57c
   b661c:	2003e6fc 	.word	0x2003e6fc

000b6620 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6620:	4770      	bx	lr

000b6622 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6622:	7441      	strb	r1, [r0, #17]
}
   b6624:	4770      	bx	lr

000b6626 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6626:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6628:	7c00      	ldrb	r0, [r0, #16]
   b662a:	f7ff f869 	bl	b5700 <hal_usart_available_data_for_write>
}
   b662e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6632:	bd08      	pop	{r3, pc}

000b6634 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6634:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6636:	7c00      	ldrb	r0, [r0, #16]
   b6638:	f7ff f83a 	bl	b56b0 <hal_usart_available>
}
   b663c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6640:	bd08      	pop	{r3, pc}

000b6642 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6642:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6644:	7c00      	ldrb	r0, [r0, #16]
   b6646:	f7ff f843 	bl	b56d0 <hal_usart_peek>
}
   b664a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b664e:	bd08      	pop	{r3, pc}

000b6650 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6650:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6652:	7c00      	ldrb	r0, [r0, #16]
   b6654:	f7ff f834 	bl	b56c0 <hal_usart_read>
}
   b6658:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b665c:	bd08      	pop	{r3, pc}

000b665e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b665e:	7c00      	ldrb	r0, [r0, #16]
   b6660:	f7ff b83e 	b.w	b56e0 <hal_usart_flush>

000b6664 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6664:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6666:	7c45      	ldrb	r5, [r0, #17]
{
   b6668:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b666a:	b12d      	cbz	r5, b6678 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b666c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b666e:	b003      	add	sp, #12
   b6670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6674:	f7ff b814 	b.w	b56a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6678:	7c00      	ldrb	r0, [r0, #16]
   b667a:	9101      	str	r1, [sp, #4]
   b667c:	f7ff f840 	bl	b5700 <hal_usart_available_data_for_write>
   b6680:	2800      	cmp	r0, #0
   b6682:	9901      	ldr	r1, [sp, #4]
   b6684:	dcf2      	bgt.n	b666c <_ZN11USARTSerial5writeEh+0x8>
}
   b6686:	4628      	mov	r0, r5
   b6688:	b003      	add	sp, #12
   b668a:	bd30      	pop	{r4, r5, pc}

000b668c <_ZN11USARTSerialD0Ev>:
   b668c:	b510      	push	{r4, lr}
   b668e:	2114      	movs	r1, #20
   b6690:	4604      	mov	r4, r0
   b6692:	f7fd fd04 	bl	b409e <_ZdlPvj>
   b6696:	4620      	mov	r0, r4
   b6698:	bd10      	pop	{r4, pc}
	...

000b669c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b669c:	b510      	push	{r4, lr}
   b669e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66a2:	4604      	mov	r4, r0
   b66a4:	4608      	mov	r0, r1
   b66a6:	4611      	mov	r1, r2
   b66a8:	2200      	movs	r2, #0
   b66aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b66ae:	4b04      	ldr	r3, [pc, #16]	; (b66c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b66b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b66b2:	2301      	movs	r3, #1
  _serial = serial;
   b66b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b66b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b66b8:	f7ff f82a 	bl	b5710 <hal_usart_init_ex>
}
   b66bc:	4620      	mov	r0, r4
   b66be:	bd10      	pop	{r4, pc}
   b66c0:	000b91f0 	.word	0x000b91f0

000b66c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b66c4:	7441      	strb	r1, [r0, #17]
}
   b66c6:	4770      	bx	lr

000b66c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b66c8:	4770      	bx	lr

000b66ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b66ca:	4770      	bx	lr

000b66cc <_ZN9USBSerial4readEv>:
{
   b66cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b66ce:	2100      	movs	r1, #0
   b66d0:	7c00      	ldrb	r0, [r0, #16]
   b66d2:	f7ff f83d 	bl	b5750 <HAL_USB_USART_Receive_Data>
}
   b66d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66da:	bd08      	pop	{r3, pc}

000b66dc <_ZN9USBSerial4peekEv>:
{
   b66dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b66de:	2101      	movs	r1, #1
   b66e0:	7c00      	ldrb	r0, [r0, #16]
   b66e2:	f7ff f835 	bl	b5750 <HAL_USB_USART_Receive_Data>
}
   b66e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b66ea:	bd08      	pop	{r3, pc}

000b66ec <_ZN9USBSerial17availableForWriteEv>:
{
   b66ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b66ee:	7c00      	ldrb	r0, [r0, #16]
   b66f0:	f7ff f826 	bl	b5740 <HAL_USB_USART_Available_Data_For_Write>
}
   b66f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b66f8:	bd08      	pop	{r3, pc}

000b66fa <_ZN9USBSerial9availableEv>:
{
   b66fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b66fc:	7c00      	ldrb	r0, [r0, #16]
   b66fe:	f7ff f817 	bl	b5730 <HAL_USB_USART_Available_Data>
}
   b6702:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6706:	bd08      	pop	{r3, pc}

000b6708 <_ZN9USBSerial5writeEh>:
{
   b6708:	b513      	push	{r0, r1, r4, lr}
   b670a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b670c:	7c00      	ldrb	r0, [r0, #16]
{
   b670e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6710:	f7ff f816 	bl	b5740 <HAL_USB_USART_Available_Data_For_Write>
   b6714:	2800      	cmp	r0, #0
   b6716:	9901      	ldr	r1, [sp, #4]
   b6718:	dc01      	bgt.n	b671e <_ZN9USBSerial5writeEh+0x16>
   b671a:	7c60      	ldrb	r0, [r4, #17]
   b671c:	b120      	cbz	r0, b6728 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b671e:	7c20      	ldrb	r0, [r4, #16]
   b6720:	f7ff f81e 	bl	b5760 <HAL_USB_USART_Send_Data>
   b6724:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6728:	b002      	add	sp, #8
   b672a:	bd10      	pop	{r4, pc}

000b672c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b672c:	7c00      	ldrb	r0, [r0, #16]
   b672e:	f7ff b81f 	b.w	b5770 <HAL_USB_USART_Flush_Data>

000b6732 <_ZN9USBSerialD0Ev>:
   b6732:	b510      	push	{r4, lr}
   b6734:	2114      	movs	r1, #20
   b6736:	4604      	mov	r4, r0
   b6738:	f7fd fcb1 	bl	b409e <_ZdlPvj>
   b673c:	4620      	mov	r0, r4
   b673e:	bd10      	pop	{r4, pc}

000b6740 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6740:	b510      	push	{r4, lr}
   b6742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6746:	4604      	mov	r4, r0
   b6748:	4608      	mov	r0, r1
   b674a:	2100      	movs	r1, #0
   b674c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6750:	4b04      	ldr	r3, [pc, #16]	; (b6764 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6752:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6754:	2301      	movs	r3, #1
  _serial = serial;
   b6756:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6758:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b675a:	4611      	mov	r1, r2
   b675c:	f7fe ffe0 	bl	b5720 <HAL_USB_USART_Init>
}
   b6760:	4620      	mov	r0, r4
   b6762:	bd10      	pop	{r4, pc}
   b6764:	000b9220 	.word	0x000b9220

000b6768 <_Z19acquireSerialBufferv>:
{
   b6768:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b676a:	2214      	movs	r2, #20
{
   b676c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b676e:	2100      	movs	r1, #0
   b6770:	f002 f88c 	bl	b888c <memset>
}
   b6774:	4620      	mov	r0, r4
   b6776:	bd10      	pop	{r4, pc}

000b6778 <_Z16_fetch_usbserialv>:
{
   b6778:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b677a:	4c0f      	ldr	r4, [pc, #60]	; (b67b8 <_Z16_fetch_usbserialv+0x40>)
{
   b677c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b677e:	a803      	add	r0, sp, #12
   b6780:	f7ff fff2 	bl	b6768 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6784:	7821      	ldrb	r1, [r4, #0]
   b6786:	f3bf 8f5b 	dmb	ish
   b678a:	f011 0101 	ands.w	r1, r1, #1
   b678e:	d10f      	bne.n	b67b0 <_Z16_fetch_usbserialv+0x38>
   b6790:	4620      	mov	r0, r4
   b6792:	9101      	str	r1, [sp, #4]
   b6794:	f7fd fc92 	bl	b40bc <__cxa_guard_acquire>
   b6798:	9901      	ldr	r1, [sp, #4]
   b679a:	b148      	cbz	r0, b67b0 <_Z16_fetch_usbserialv+0x38>
   b679c:	aa03      	add	r2, sp, #12
   b679e:	4807      	ldr	r0, [pc, #28]	; (b67bc <_Z16_fetch_usbserialv+0x44>)
   b67a0:	f7ff ffce 	bl	b6740 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b67a4:	4620      	mov	r0, r4
   b67a6:	f7fd fc8e 	bl	b40c6 <__cxa_guard_release>
   b67aa:	4805      	ldr	r0, [pc, #20]	; (b67c0 <_Z16_fetch_usbserialv+0x48>)
   b67ac:	f002 f85a 	bl	b8864 <atexit>
	return _usbserial;
}
   b67b0:	4802      	ldr	r0, [pc, #8]	; (b67bc <_Z16_fetch_usbserialv+0x44>)
   b67b2:	b008      	add	sp, #32
   b67b4:	bd10      	pop	{r4, pc}
   b67b6:	bf00      	nop
   b67b8:	2003e700 	.word	0x2003e700
   b67bc:	2003e704 	.word	0x2003e704
   b67c0:	000b66c9 	.word	0x000b66c9

000b67c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b67c4:	2200      	movs	r2, #0
   b67c6:	6840      	ldr	r0, [r0, #4]
   b67c8:	4611      	mov	r1, r2
   b67ca:	f7ff b82d 	b.w	b5828 <network_ready>

000b67ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b67ce:	2200      	movs	r2, #0
   b67d0:	6840      	ldr	r0, [r0, #4]
   b67d2:	4611      	mov	r1, r2
   b67d4:	f7ff b848 	b.w	b5868 <network_listening>

000b67d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b67d8:	2200      	movs	r2, #0
   b67da:	6840      	ldr	r0, [r0, #4]
   b67dc:	4611      	mov	r1, r2
   b67de:	f7ff b853 	b.w	b5888 <network_get_listen_timeout>

000b67e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b67e2:	6840      	ldr	r0, [r0, #4]
   b67e4:	2200      	movs	r2, #0
   b67e6:	f7ff b847 	b.w	b5878 <network_set_listen_timeout>

000b67ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b67ea:	6840      	ldr	r0, [r0, #4]
   b67ec:	2200      	movs	r2, #0
   b67ee:	f081 0101 	eor.w	r1, r1, #1
   b67f2:	f7ff b831 	b.w	b5858 <network_listen>

000b67f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b67f6:	2300      	movs	r3, #0
   b67f8:	6840      	ldr	r0, [r0, #4]
   b67fa:	461a      	mov	r2, r3
   b67fc:	4619      	mov	r1, r3
   b67fe:	f7ff b823 	b.w	b5848 <network_off>

000b6802 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6802:	2300      	movs	r3, #0
   b6804:	6840      	ldr	r0, [r0, #4]
   b6806:	461a      	mov	r2, r3
   b6808:	4619      	mov	r1, r3
   b680a:	f7ff b815 	b.w	b5838 <network_on>

000b680e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b680e:	2200      	movs	r2, #0
   b6810:	6840      	ldr	r0, [r0, #4]
   b6812:	4611      	mov	r1, r2
   b6814:	f7fe bff8 	b.w	b5808 <network_connecting>

000b6818 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6818:	6840      	ldr	r0, [r0, #4]
   b681a:	2200      	movs	r2, #0
   b681c:	2102      	movs	r1, #2
   b681e:	f7fe bffb 	b.w	b5818 <network_disconnect>

000b6822 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6822:	2300      	movs	r3, #0
   b6824:	6840      	ldr	r0, [r0, #4]
   b6826:	461a      	mov	r2, r3
   b6828:	f7fe bfe6 	b.w	b57f8 <network_connect>

000b682c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b682c:	4b02      	ldr	r3, [pc, #8]	; (b6838 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b682e:	2204      	movs	r2, #4
   b6830:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6832:	4a02      	ldr	r2, [pc, #8]	; (b683c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6834:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6836:	4770      	bx	lr
   b6838:	2003e718 	.word	0x2003e718
   b683c:	000b9250 	.word	0x000b9250

000b6840 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6840:	4b01      	ldr	r3, [pc, #4]	; (b6848 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6842:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6844:	4770      	bx	lr
   b6846:	bf00      	nop
   b6848:	2003e584 	.word	0x2003e584

000b684c <serialEventRun>:
{
   b684c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b684e:	4b0b      	ldr	r3, [pc, #44]	; (b687c <serialEventRun+0x30>)
   b6850:	b143      	cbz	r3, b6864 <serialEventRun+0x18>
   b6852:	f7ff ff91 	bl	b6778 <_Z16_fetch_usbserialv>
   b6856:	6803      	ldr	r3, [r0, #0]
   b6858:	691b      	ldr	r3, [r3, #16]
   b685a:	4798      	blx	r3
   b685c:	2800      	cmp	r0, #0
   b685e:	dd01      	ble.n	b6864 <serialEventRun+0x18>
        serialEvent();
   b6860:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6864:	4b06      	ldr	r3, [pc, #24]	; (b6880 <serialEventRun+0x34>)
   b6866:	b143      	cbz	r3, b687a <serialEventRun+0x2e>
   b6868:	f000 f980 	bl	b6b6c <_Z22__fetch_global_Serial1v>
   b686c:	6803      	ldr	r3, [r0, #0]
   b686e:	691b      	ldr	r3, [r3, #16]
   b6870:	4798      	blx	r3
   b6872:	2800      	cmp	r0, #0
   b6874:	dd01      	ble.n	b687a <serialEventRun+0x2e>
        serialEvent1();
   b6876:	f3af 8000 	nop.w
}
   b687a:	bd08      	pop	{r3, pc}
	...

000b6884 <_post_loop>:
{
   b6884:	b508      	push	{r3, lr}
	serialEventRun();
   b6886:	f7ff ffe1 	bl	b684c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b688a:	f7fe fdd1 	bl	b5430 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b688e:	4b01      	ldr	r3, [pc, #4]	; (b6894 <_post_loop+0x10>)
   b6890:	6018      	str	r0, [r3, #0]
}
   b6892:	bd08      	pop	{r3, pc}
   b6894:	2003e728 	.word	0x2003e728

000b6898 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6898:	4805      	ldr	r0, [pc, #20]	; (b68b0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b689a:	4a06      	ldr	r2, [pc, #24]	; (b68b4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b689c:	4906      	ldr	r1, [pc, #24]	; (b68b8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b689e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b68a0:	1a12      	subs	r2, r2, r0
   b68a2:	f001 ffe5 	bl	b8870 <memcpy>
    __backup_sram_signature = signature;
   b68a6:	4b05      	ldr	r3, [pc, #20]	; (b68bc <_Z33system_initialize_user_backup_ramv+0x24>)
   b68a8:	4a05      	ldr	r2, [pc, #20]	; (b68c0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b68aa:	601a      	str	r2, [r3, #0]
}
   b68ac:	bd08      	pop	{r3, pc}
   b68ae:	bf00      	nop
   b68b0:	2003f400 	.word	0x2003f400
   b68b4:	2003f404 	.word	0x2003f404
   b68b8:	000b9454 	.word	0x000b9454
   b68bc:	2003f400 	.word	0x2003f400
   b68c0:	9a271c1e 	.word	0x9a271c1e

000b68c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b68c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b68c6:	2300      	movs	r3, #0
   b68c8:	9300      	str	r3, [sp, #0]
   b68ca:	461a      	mov	r2, r3
   b68cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b68d0:	f7fe ff80 	bl	b57d4 <system_ctrl_set_result>
}
   b68d4:	b003      	add	sp, #12
   b68d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b68dc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b68dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b68de:	8843      	ldrh	r3, [r0, #2]
   b68e0:	2b0a      	cmp	r3, #10
   b68e2:	d008      	beq.n	b68f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b68e4:	2b50      	cmp	r3, #80	; 0x50
   b68e6:	d10b      	bne.n	b6900 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b68e8:	4b09      	ldr	r3, [pc, #36]	; (b6910 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b68ea:	681b      	ldr	r3, [r3, #0]
   b68ec:	b14b      	cbz	r3, b6902 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b68ee:	b003      	add	sp, #12
   b68f0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b68f4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b68f6:	f7ff ffe5 	bl	b68c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b68fa:	b003      	add	sp, #12
   b68fc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6900:	2300      	movs	r3, #0
   b6902:	9300      	str	r3, [sp, #0]
   b6904:	461a      	mov	r2, r3
   b6906:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b690a:	f7fe ff63 	bl	b57d4 <system_ctrl_set_result>
}
   b690e:	e7f4      	b.n	b68fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6910:	2003e724 	.word	0x2003e724

000b6914 <module_user_init_hook>:
{
   b6914:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6916:	4812      	ldr	r0, [pc, #72]	; (b6960 <module_user_init_hook+0x4c>)
   b6918:	2100      	movs	r1, #0
   b691a:	f7fe fffd 	bl	b5918 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b691e:	4b11      	ldr	r3, [pc, #68]	; (b6964 <module_user_init_hook+0x50>)
   b6920:	681a      	ldr	r2, [r3, #0]
   b6922:	4b11      	ldr	r3, [pc, #68]	; (b6968 <module_user_init_hook+0x54>)
   b6924:	429a      	cmp	r2, r3
   b6926:	4b11      	ldr	r3, [pc, #68]	; (b696c <module_user_init_hook+0x58>)
   b6928:	bf0c      	ite	eq
   b692a:	2201      	moveq	r2, #1
   b692c:	2200      	movne	r2, #0
   b692e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6930:	d001      	beq.n	b6936 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6932:	f7ff ffb1 	bl	b6898 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6936:	f7fe fd63 	bl	b5400 <HAL_RNG_GetRandomNumber>
   b693a:	4604      	mov	r4, r0
    srand(seed);
   b693c:	f001 ffae 	bl	b889c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6940:	4b0b      	ldr	r3, [pc, #44]	; (b6970 <module_user_init_hook+0x5c>)
   b6942:	b113      	cbz	r3, b694a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6944:	4620      	mov	r0, r4
   b6946:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b694a:	2100      	movs	r1, #0
   b694c:	4808      	ldr	r0, [pc, #32]	; (b6970 <module_user_init_hook+0x5c>)
   b694e:	f7fe ff4b 	bl	b57e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6956:	4807      	ldr	r0, [pc, #28]	; (b6974 <module_user_init_hook+0x60>)
   b6958:	2100      	movs	r1, #0
   b695a:	f7fe bf31 	b.w	b57c0 <system_ctrl_set_app_request_handler>
   b695e:	bf00      	nop
   b6960:	000b6841 	.word	0x000b6841
   b6964:	2003f400 	.word	0x2003f400
   b6968:	9a271c1e 	.word	0x9a271c1e
   b696c:	2003e720 	.word	0x2003e720
   b6970:	00000000 	.word	0x00000000
   b6974:	000b68dd 	.word	0x000b68dd

000b6978 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6978:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b697a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b697c:	d902      	bls.n	b6984 <pinAvailable+0xc>
    return false;
   b697e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6980:	b002      	add	sp, #8
   b6982:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6984:	f1a0 030b 	sub.w	r3, r0, #11
   b6988:	2b02      	cmp	r3, #2
   b698a:	d81a      	bhi.n	b69c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b698c:	4c17      	ldr	r4, [pc, #92]	; (b69ec <pinAvailable+0x74>)
   b698e:	7821      	ldrb	r1, [r4, #0]
   b6990:	f3bf 8f5b 	dmb	ish
   b6994:	f011 0101 	ands.w	r1, r1, #1
   b6998:	d10b      	bne.n	b69b2 <pinAvailable+0x3a>
   b699a:	4620      	mov	r0, r4
   b699c:	9101      	str	r1, [sp, #4]
   b699e:	f7fd fb8d 	bl	b40bc <__cxa_guard_acquire>
   b69a2:	9901      	ldr	r1, [sp, #4]
   b69a4:	b128      	cbz	r0, b69b2 <pinAvailable+0x3a>
   b69a6:	4812      	ldr	r0, [pc, #72]	; (b69f0 <pinAvailable+0x78>)
   b69a8:	f7ff fa40 	bl	b5e2c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b69ac:	4620      	mov	r0, r4
   b69ae:	f7fd fb8a 	bl	b40c6 <__cxa_guard_release>
   b69b2:	4b0f      	ldr	r3, [pc, #60]	; (b69f0 <pinAvailable+0x78>)
   b69b4:	7818      	ldrb	r0, [r3, #0]
   b69b6:	f7fe fe53 	bl	b5660 <hal_spi_is_enabled>
   b69ba:	2800      	cmp	r0, #0
   b69bc:	d1df      	bne.n	b697e <pinAvailable+0x6>
  return true; // 'pin' is available
   b69be:	2001      	movs	r0, #1
   b69c0:	e7de      	b.n	b6980 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b69c2:	2801      	cmp	r0, #1
   b69c4:	d809      	bhi.n	b69da <pinAvailable+0x62>
   b69c6:	f000 f891 	bl	b6aec <_Z19__fetch_global_Wirev>
   b69ca:	2100      	movs	r1, #0
   b69cc:	7c00      	ldrb	r0, [r0, #16]
   b69ce:	f7fe fda7 	bl	b5520 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b69d2:	f080 0001 	eor.w	r0, r0, #1
   b69d6:	b2c0      	uxtb	r0, r0
   b69d8:	e7d2      	b.n	b6980 <pinAvailable+0x8>
   b69da:	3809      	subs	r0, #9
   b69dc:	2801      	cmp	r0, #1
   b69de:	d8ee      	bhi.n	b69be <pinAvailable+0x46>
   b69e0:	f000 f8c4 	bl	b6b6c <_Z22__fetch_global_Serial1v>
   b69e4:	7c00      	ldrb	r0, [r0, #16]
   b69e6:	f7fe fe83 	bl	b56f0 <hal_usart_is_enabled>
   b69ea:	e7f2      	b.n	b69d2 <pinAvailable+0x5a>
   b69ec:	2003e6b4 	.word	0x2003e6b4
   b69f0:	2003e6b8 	.word	0x2003e6b8

000b69f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69f4:	2823      	cmp	r0, #35	; 0x23
{
   b69f6:	b538      	push	{r3, r4, r5, lr}
   b69f8:	4604      	mov	r4, r0
   b69fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b69fc:	d80a      	bhi.n	b6a14 <pinMode+0x20>
   b69fe:	29ff      	cmp	r1, #255	; 0xff
   b6a00:	d008      	beq.n	b6a14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6a02:	f7ff ffb9 	bl	b6978 <pinAvailable>
   b6a06:	b128      	cbz	r0, b6a14 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6a08:	4629      	mov	r1, r5
   b6a0a:	4620      	mov	r0, r4
}
   b6a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6a10:	f7fe bd1e 	b.w	b5450 <HAL_Pin_Mode>
}
   b6a14:	bd38      	pop	{r3, r4, r5, pc}

000b6a16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6a16:	b538      	push	{r3, r4, r5, lr}
   b6a18:	4604      	mov	r4, r0
   b6a1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a1c:	f7fe fd20 	bl	b5460 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6a20:	28ff      	cmp	r0, #255	; 0xff
   b6a22:	d010      	beq.n	b6a46 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6a24:	2806      	cmp	r0, #6
   b6a26:	d804      	bhi.n	b6a32 <digitalWrite+0x1c>
   b6a28:	234d      	movs	r3, #77	; 0x4d
   b6a2a:	fa23 f000 	lsr.w	r0, r3, r0
   b6a2e:	07c3      	lsls	r3, r0, #31
   b6a30:	d409      	bmi.n	b6a46 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6a32:	4620      	mov	r0, r4
   b6a34:	f7ff ffa0 	bl	b6978 <pinAvailable>
   b6a38:	b128      	cbz	r0, b6a46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6a3a:	4629      	mov	r1, r5
   b6a3c:	4620      	mov	r0, r4
}
   b6a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6a42:	f7fe bd15 	b.w	b5470 <HAL_GPIO_Write>
}
   b6a46:	bd38      	pop	{r3, r4, r5, pc}

000b6a48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6a48:	b510      	push	{r4, lr}
   b6a4a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a4c:	f7fe fd08 	bl	b5460 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6a50:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6a52:	b2db      	uxtb	r3, r3
   b6a54:	2b01      	cmp	r3, #1
   b6a56:	d908      	bls.n	b6a6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6a58:	4620      	mov	r0, r4
   b6a5a:	f7ff ff8d 	bl	b6978 <pinAvailable>
   b6a5e:	b120      	cbz	r0, b6a6a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6a60:	4620      	mov	r0, r4
}
   b6a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6a66:	f7fe bd0b 	b.w	b5480 <HAL_GPIO_Read>
}
   b6a6a:	2000      	movs	r0, #0
   b6a6c:	bd10      	pop	{r4, pc}

000b6a6e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b6a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a72:	4690      	mov	r8, r2
   b6a74:	461f      	mov	r7, r3
   b6a76:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6a78:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6a7a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6a7c:	f1c4 0107 	rsb	r1, r4, #7
   b6a80:	f1b8 0f00 	cmp.w	r8, #0
   b6a84:	d112      	bne.n	b6aac <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6a86:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6a8a:	f001 0101 	and.w	r1, r1, #1
   b6a8e:	4630      	mov	r0, r6
   b6a90:	f7ff ffc1 	bl	b6a16 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6a94:	2101      	movs	r1, #1
   b6a96:	4628      	mov	r0, r5
   b6a98:	f7ff ffbd 	bl	b6a16 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6a9c:	2100      	movs	r1, #0
   b6a9e:	4628      	mov	r0, r5
   b6aa0:	f7ff ffb9 	bl	b6a16 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6aa4:	3c01      	subs	r4, #1
   b6aa6:	d2e9      	bcs.n	b6a7c <shiftOut+0xe>
  }
}
   b6aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6aac:	fa47 f104 	asr.w	r1, r7, r4
   b6ab0:	e7eb      	b.n	b6a8a <shiftOut+0x1c>

000b6ab2 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b6ab2:	f7fe bced 	b.w	b5490 <HAL_Pulse_In>

000b6ab6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ab6:	4770      	bx	lr

000b6ab8 <_Z17acquireWireBufferv>:
{
   b6ab8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6aba:	4b0a      	ldr	r3, [pc, #40]	; (b6ae4 <_Z17acquireWireBufferv+0x2c>)
   b6abc:	6003      	str	r3, [r0, #0]
   b6abe:	2301      	movs	r3, #1
{
   b6ac0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6ac2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6ac4:	4908      	ldr	r1, [pc, #32]	; (b6ae8 <_Z17acquireWireBufferv+0x30>)
   b6ac6:	2020      	movs	r0, #32
   b6ac8:	f000 f874 	bl	b6bb4 <_ZnajRKSt9nothrow_t>
	};
   b6acc:	2520      	movs	r5, #32
   b6ace:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6ad0:	4905      	ldr	r1, [pc, #20]	; (b6ae8 <_Z17acquireWireBufferv+0x30>)
	};
   b6ad2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6ad4:	4628      	mov	r0, r5
   b6ad6:	f000 f86d 	bl	b6bb4 <_ZnajRKSt9nothrow_t>
	};
   b6ada:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6ade:	4620      	mov	r0, r4
   b6ae0:	bd38      	pop	{r3, r4, r5, pc}
   b6ae2:	bf00      	nop
   b6ae4:	00010018 	.word	0x00010018
   b6ae8:	000b9284 	.word	0x000b9284

000b6aec <_Z19__fetch_global_Wirev>:
{
   b6aec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6aee:	4d0e      	ldr	r5, [pc, #56]	; (b6b28 <_Z19__fetch_global_Wirev+0x3c>)
   b6af0:	7829      	ldrb	r1, [r5, #0]
   b6af2:	f3bf 8f5b 	dmb	ish
   b6af6:	f011 0401 	ands.w	r4, r1, #1
{
   b6afa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6afc:	d111      	bne.n	b6b22 <_Z19__fetch_global_Wirev+0x36>
   b6afe:	4628      	mov	r0, r5
   b6b00:	f7fd fadc 	bl	b40bc <__cxa_guard_acquire>
   b6b04:	b168      	cbz	r0, b6b22 <_Z19__fetch_global_Wirev+0x36>
   b6b06:	4668      	mov	r0, sp
   b6b08:	f7ff ffd6 	bl	b6ab8 <_Z17acquireWireBufferv>
   b6b0c:	466a      	mov	r2, sp
   b6b0e:	4621      	mov	r1, r4
   b6b10:	4806      	ldr	r0, [pc, #24]	; (b6b2c <_Z19__fetch_global_Wirev+0x40>)
   b6b12:	f7fe ff7f 	bl	b5a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6b16:	4628      	mov	r0, r5
   b6b18:	f7fd fad5 	bl	b40c6 <__cxa_guard_release>
   b6b1c:	4804      	ldr	r0, [pc, #16]	; (b6b30 <_Z19__fetch_global_Wirev+0x44>)
   b6b1e:	f001 fea1 	bl	b8864 <atexit>
	return wire;
}
   b6b22:	4802      	ldr	r0, [pc, #8]	; (b6b2c <_Z19__fetch_global_Wirev+0x40>)
   b6b24:	b007      	add	sp, #28
   b6b26:	bd30      	pop	{r4, r5, pc}
   b6b28:	2003e72c 	.word	0x2003e72c
   b6b2c:	2003e730 	.word	0x2003e730
   b6b30:	000b6ab7 	.word	0x000b6ab7

000b6b34 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b34:	4770      	bx	lr
	...

000b6b38 <_Z20acquireSerial1Bufferv>:
{
   b6b38:	b538      	push	{r3, r4, r5, lr}
   b6b3a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6b3c:	2514      	movs	r5, #20
   b6b3e:	462a      	mov	r2, r5
   b6b40:	2100      	movs	r1, #0
   b6b42:	f001 fea3 	bl	b888c <memset>
   b6b46:	8025      	strh	r5, [r4, #0]
   b6b48:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b4a:	4907      	ldr	r1, [pc, #28]	; (b6b68 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6b4c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b4e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6b50:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b52:	f000 f82f 	bl	b6bb4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b56:	4904      	ldr	r1, [pc, #16]	; (b6b68 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6b58:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b5a:	4628      	mov	r0, r5
   b6b5c:	f000 f82a 	bl	b6bb4 <_ZnajRKSt9nothrow_t>
    };
   b6b60:	60e0      	str	r0, [r4, #12]
}
   b6b62:	4620      	mov	r0, r4
   b6b64:	bd38      	pop	{r3, r4, r5, pc}
   b6b66:	bf00      	nop
   b6b68:	000b9284 	.word	0x000b9284

000b6b6c <_Z22__fetch_global_Serial1v>:
{
   b6b6c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b6e:	4d0e      	ldr	r5, [pc, #56]	; (b6ba8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6b70:	7829      	ldrb	r1, [r5, #0]
   b6b72:	f3bf 8f5b 	dmb	ish
   b6b76:	f011 0401 	ands.w	r4, r1, #1
{
   b6b7a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b7c:	d111      	bne.n	b6ba2 <_Z22__fetch_global_Serial1v+0x36>
   b6b7e:	4628      	mov	r0, r5
   b6b80:	f7fd fa9c 	bl	b40bc <__cxa_guard_acquire>
   b6b84:	b168      	cbz	r0, b6ba2 <_Z22__fetch_global_Serial1v+0x36>
   b6b86:	a801      	add	r0, sp, #4
   b6b88:	f7ff ffd6 	bl	b6b38 <_Z20acquireSerial1Bufferv>
   b6b8c:	aa01      	add	r2, sp, #4
   b6b8e:	4621      	mov	r1, r4
   b6b90:	4806      	ldr	r0, [pc, #24]	; (b6bac <_Z22__fetch_global_Serial1v+0x40>)
   b6b92:	f7ff fd83 	bl	b669c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6b96:	4628      	mov	r0, r5
   b6b98:	f7fd fa95 	bl	b40c6 <__cxa_guard_release>
   b6b9c:	4804      	ldr	r0, [pc, #16]	; (b6bb0 <_Z22__fetch_global_Serial1v+0x44>)
   b6b9e:	f001 fe61 	bl	b8864 <atexit>
    return serial1;
}
   b6ba2:	4802      	ldr	r0, [pc, #8]	; (b6bac <_Z22__fetch_global_Serial1v+0x40>)
   b6ba4:	b007      	add	sp, #28
   b6ba6:	bd30      	pop	{r4, r5, pc}
   b6ba8:	2003e744 	.word	0x2003e744
   b6bac:	2003e748 	.word	0x2003e748
   b6bb0:	000b6b35 	.word	0x000b6b35

000b6bb4 <_ZnajRKSt9nothrow_t>:
   b6bb4:	f7fd ba71 	b.w	b409a <_Znaj>

000b6bb8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6bb8:	4901      	ldr	r1, [pc, #4]	; (b6bc0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6bba:	f000 b8f9 	b.w	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6bbe:	bf00      	nop
   b6bc0:	000b92a0 	.word	0x000b92a0

000b6bc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6bc6:	2400      	movs	r4, #0
   b6bc8:	2310      	movs	r3, #16
   b6bca:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6bce:	6803      	ldr	r3, [r0, #0]
   b6bd0:	4615      	mov	r5, r2
   b6bd2:	699e      	ldr	r6, [r3, #24]
   b6bd4:	6812      	ldr	r2, [r2, #0]
   b6bd6:	466b      	mov	r3, sp
   b6bd8:	e9cd 4400 	strd	r4, r4, [sp]
   b6bdc:	47b0      	blx	r6
   b6bde:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6be2:	f003 0306 	and.w	r3, r3, #6
   b6be6:	2b06      	cmp	r3, #6
   b6be8:	bf03      	ittte	eq
   b6bea:	9b00      	ldreq	r3, [sp, #0]
   b6bec:	602b      	streq	r3, [r5, #0]
   b6bee:	2001      	moveq	r0, #1
   b6bf0:	4620      	movne	r0, r4
   b6bf2:	b004      	add	sp, #16
   b6bf4:	bd70      	pop	{r4, r5, r6, pc}

000b6bf6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6bf6:	9800      	ldr	r0, [sp, #0]
   b6bf8:	4290      	cmp	r0, r2
   b6bfa:	bf14      	ite	ne
   b6bfc:	2001      	movne	r0, #1
   b6bfe:	2006      	moveq	r0, #6
   b6c00:	4770      	bx	lr
	...

000b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6c04:	b510      	push	{r4, lr}
   b6c06:	4b03      	ldr	r3, [pc, #12]	; (b6c14 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6c08:	6003      	str	r3, [r0, #0]
   b6c0a:	4604      	mov	r4, r0
   b6c0c:	f000 f8cd 	bl	b6daa <_ZNSt9type_infoD1Ev>
   b6c10:	4620      	mov	r0, r4
   b6c12:	bd10      	pop	{r4, pc}
   b6c14:	000b92e0 	.word	0x000b92e0

000b6c18 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6c18:	b510      	push	{r4, lr}
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	f7ff fff2 	bl	b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6c20:	4620      	mov	r0, r4
   b6c22:	2108      	movs	r1, #8
   b6c24:	f7fd fa3b 	bl	b409e <_ZdlPvj>
   b6c28:	4620      	mov	r0, r4
   b6c2a:	bd10      	pop	{r4, pc}

000b6c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c30:	461f      	mov	r7, r3
   b6c32:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6c36:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6c3a:	4598      	cmp	r8, r3
   b6c3c:	4606      	mov	r6, r0
   b6c3e:	4615      	mov	r5, r2
   b6c40:	d107      	bne.n	b6c52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6c42:	9907      	ldr	r1, [sp, #28]
   b6c44:	f000 f8b4 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c48:	b118      	cbz	r0, b6c52 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6c4a:	7165      	strb	r5, [r4, #5]
   b6c4c:	2000      	movs	r0, #0
   b6c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c52:	4639      	mov	r1, r7
   b6c54:	4630      	mov	r0, r6
   b6c56:	f000 f8ab 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c5a:	2800      	cmp	r0, #0
   b6c5c:	d0f6      	beq.n	b6c4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6c5e:	2301      	movs	r3, #1
   b6c60:	f8c4 8000 	str.w	r8, [r4]
   b6c64:	7125      	strb	r5, [r4, #4]
   b6c66:	71a3      	strb	r3, [r4, #6]
   b6c68:	e7f0      	b.n	b6c4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6c6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6c6a:	b538      	push	{r3, r4, r5, lr}
   b6c6c:	4615      	mov	r5, r2
   b6c6e:	461c      	mov	r4, r3
   b6c70:	f000 f89e 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c74:	b120      	cbz	r0, b6c80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6c76:	2308      	movs	r3, #8
   b6c78:	60e3      	str	r3, [r4, #12]
   b6c7a:	2306      	movs	r3, #6
   b6c7c:	6025      	str	r5, [r4, #0]
   b6c7e:	7123      	strb	r3, [r4, #4]
   b6c80:	bd38      	pop	{r3, r4, r5, pc}

000b6c82 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c84:	4605      	mov	r5, r0
   b6c86:	460c      	mov	r4, r1
   b6c88:	9201      	str	r2, [sp, #4]
   b6c8a:	461e      	mov	r6, r3
   b6c8c:	f000 f890 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6c90:	b950      	cbnz	r0, b6ca8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c92:	2e03      	cmp	r6, #3
   b6c94:	d808      	bhi.n	b6ca8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6c96:	6823      	ldr	r3, [r4, #0]
   b6c98:	9a01      	ldr	r2, [sp, #4]
   b6c9a:	695b      	ldr	r3, [r3, #20]
   b6c9c:	4629      	mov	r1, r5
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	b002      	add	sp, #8
   b6ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6ca6:	4718      	bx	r3
   b6ca8:	b002      	add	sp, #8
   b6caa:	bd70      	pop	{r4, r5, r6, pc}

000b6cac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6cac:	b510      	push	{r4, lr}
   b6cae:	4b03      	ldr	r3, [pc, #12]	; (b6cbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6cb0:	6003      	str	r3, [r0, #0]
   b6cb2:	4604      	mov	r4, r0
   b6cb4:	f7ff ffa6 	bl	b6c04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6cb8:	4620      	mov	r0, r4
   b6cba:	bd10      	pop	{r4, pc}
   b6cbc:	000b9340 	.word	0x000b9340

000b6cc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6cc0:	b510      	push	{r4, lr}
   b6cc2:	4604      	mov	r4, r0
   b6cc4:	f7ff fff2 	bl	b6cac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6cc8:	4620      	mov	r0, r4
   b6cca:	210c      	movs	r1, #12
   b6ccc:	f7fd f9e7 	bl	b409e <_ZdlPvj>
   b6cd0:	4620      	mov	r0, r4
   b6cd2:	bd10      	pop	{r4, pc}

000b6cd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6cd6:	9f08      	ldr	r7, [sp, #32]
   b6cd8:	4297      	cmp	r7, r2
   b6cda:	4605      	mov	r5, r0
   b6cdc:	460e      	mov	r6, r1
   b6cde:	4614      	mov	r4, r2
   b6ce0:	d00a      	beq.n	b6cf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6ce2:	68a8      	ldr	r0, [r5, #8]
   b6ce4:	6802      	ldr	r2, [r0, #0]
   b6ce6:	9708      	str	r7, [sp, #32]
   b6ce8:	6a15      	ldr	r5, [r2, #32]
   b6cea:	4631      	mov	r1, r6
   b6cec:	4622      	mov	r2, r4
   b6cee:	46ac      	mov	ip, r5
   b6cf0:	b003      	add	sp, #12
   b6cf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6cf6:	4760      	bx	ip
   b6cf8:	4619      	mov	r1, r3
   b6cfa:	9301      	str	r3, [sp, #4]
   b6cfc:	f000 f858 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d00:	9b01      	ldr	r3, [sp, #4]
   b6d02:	2800      	cmp	r0, #0
   b6d04:	d0ed      	beq.n	b6ce2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6d06:	2006      	movs	r0, #6
   b6d08:	b003      	add	sp, #12
   b6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6d0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d10:	460d      	mov	r5, r1
   b6d12:	4619      	mov	r1, r3
   b6d14:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6d18:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6d1c:	4681      	mov	r9, r0
   b6d1e:	4617      	mov	r7, r2
   b6d20:	4698      	mov	r8, r3
   b6d22:	f000 f845 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d26:	b190      	cbz	r0, b6d4e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6d28:	2d00      	cmp	r5, #0
   b6d2a:	6034      	str	r4, [r6, #0]
   b6d2c:	7137      	strb	r7, [r6, #4]
   b6d2e:	db09      	blt.n	b6d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6d30:	1961      	adds	r1, r4, r5
   b6d32:	458a      	cmp	sl, r1
   b6d34:	bf0c      	ite	eq
   b6d36:	2106      	moveq	r1, #6
   b6d38:	2101      	movne	r1, #1
   b6d3a:	71b1      	strb	r1, [r6, #6]
   b6d3c:	2000      	movs	r0, #0
   b6d3e:	b001      	add	sp, #4
   b6d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d44:	3502      	adds	r5, #2
   b6d46:	d1f9      	bne.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d48:	2301      	movs	r3, #1
   b6d4a:	71b3      	strb	r3, [r6, #6]
   b6d4c:	e7f6      	b.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d4e:	4554      	cmp	r4, sl
   b6d50:	d106      	bne.n	b6d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6d52:	4659      	mov	r1, fp
   b6d54:	4648      	mov	r0, r9
   b6d56:	f000 f82b 	bl	b6db0 <_ZNKSt9type_infoeqERKS_>
   b6d5a:	b108      	cbz	r0, b6d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6d5c:	7177      	strb	r7, [r6, #5]
   b6d5e:	e7ed      	b.n	b6d3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6d60:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6d64:	6803      	ldr	r3, [r0, #0]
   b6d66:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6d6a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6d6e:	69dc      	ldr	r4, [r3, #28]
   b6d70:	463a      	mov	r2, r7
   b6d72:	4643      	mov	r3, r8
   b6d74:	4629      	mov	r1, r5
   b6d76:	46a4      	mov	ip, r4
   b6d78:	b001      	add	sp, #4
   b6d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d7e:	4760      	bx	ip

000b6d80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d84:	4607      	mov	r7, r0
   b6d86:	460c      	mov	r4, r1
   b6d88:	4615      	mov	r5, r2
   b6d8a:	461e      	mov	r6, r3
   b6d8c:	f7ff ff6d 	bl	b6c6a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6d90:	b948      	cbnz	r0, b6da6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6d92:	68b8      	ldr	r0, [r7, #8]
   b6d94:	6803      	ldr	r3, [r0, #0]
   b6d96:	699f      	ldr	r7, [r3, #24]
   b6d98:	462a      	mov	r2, r5
   b6d9a:	4633      	mov	r3, r6
   b6d9c:	4621      	mov	r1, r4
   b6d9e:	46bc      	mov	ip, r7
   b6da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6da4:	4760      	bx	ip
   b6da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6daa <_ZNSt9type_infoD1Ev>:
   b6daa:	4770      	bx	lr

000b6dac <_ZNKSt9type_info14__is_pointer_pEv>:
   b6dac:	2000      	movs	r0, #0
   b6dae:	4770      	bx	lr

000b6db0 <_ZNKSt9type_infoeqERKS_>:
   b6db0:	4281      	cmp	r1, r0
   b6db2:	b508      	push	{r3, lr}
   b6db4:	d00e      	beq.n	b6dd4 <_ZNKSt9type_infoeqERKS_+0x24>
   b6db6:	6840      	ldr	r0, [r0, #4]
   b6db8:	7803      	ldrb	r3, [r0, #0]
   b6dba:	2b2a      	cmp	r3, #42	; 0x2a
   b6dbc:	d00c      	beq.n	b6dd8 <_ZNKSt9type_infoeqERKS_+0x28>
   b6dbe:	6849      	ldr	r1, [r1, #4]
   b6dc0:	780b      	ldrb	r3, [r1, #0]
   b6dc2:	2b2a      	cmp	r3, #42	; 0x2a
   b6dc4:	bf08      	it	eq
   b6dc6:	3101      	addeq	r1, #1
   b6dc8:	f001 fd96 	bl	b88f8 <strcmp>
   b6dcc:	fab0 f080 	clz	r0, r0
   b6dd0:	0940      	lsrs	r0, r0, #5
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	2001      	movs	r0, #1
   b6dd6:	e7fc      	b.n	b6dd2 <_ZNKSt9type_infoeqERKS_+0x22>
   b6dd8:	2000      	movs	r0, #0
   b6dda:	e7fa      	b.n	b6dd2 <_ZNKSt9type_infoeqERKS_+0x22>
   b6ddc:	0000      	movs	r0, r0
	...

000b6de0 <pow>:
   b6de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6de2:	ed2d 8b02 	vpush	{d8}
   b6de6:	ec57 6b10 	vmov	r6, r7, d0
   b6dea:	ec55 4b11 	vmov	r4, r5, d1
   b6dee:	f000 f8cb 	bl	b6f88 <__ieee754_pow>
   b6df2:	4b63      	ldr	r3, [pc, #396]	; (b6f80 <pow+0x1a0>)
   b6df4:	eeb0 8a40 	vmov.f32	s16, s0
   b6df8:	eef0 8a60 	vmov.f32	s17, s1
   b6dfc:	f993 3000 	ldrsb.w	r3, [r3]
   b6e00:	3301      	adds	r3, #1
   b6e02:	d02a      	beq.n	b6e5a <pow+0x7a>
   b6e04:	4622      	mov	r2, r4
   b6e06:	462b      	mov	r3, r5
   b6e08:	4620      	mov	r0, r4
   b6e0a:	4629      	mov	r1, r5
   b6e0c:	f001 fcc4 	bl	b8798 <__aeabi_dcmpun>
   b6e10:	bb18      	cbnz	r0, b6e5a <pow+0x7a>
   b6e12:	4632      	mov	r2, r6
   b6e14:	463b      	mov	r3, r7
   b6e16:	4630      	mov	r0, r6
   b6e18:	4639      	mov	r1, r7
   b6e1a:	f001 fcbd 	bl	b8798 <__aeabi_dcmpun>
   b6e1e:	2800      	cmp	r0, #0
   b6e20:	d144      	bne.n	b6eac <pow+0xcc>
   b6e22:	2200      	movs	r2, #0
   b6e24:	2300      	movs	r3, #0
   b6e26:	4630      	mov	r0, r6
   b6e28:	4639      	mov	r1, r7
   b6e2a:	f001 fc83 	bl	b8734 <__aeabi_dcmpeq>
   b6e2e:	b1d8      	cbz	r0, b6e68 <pow+0x88>
   b6e30:	2200      	movs	r2, #0
   b6e32:	2300      	movs	r3, #0
   b6e34:	4620      	mov	r0, r4
   b6e36:	4629      	mov	r1, r5
   b6e38:	f001 fc7c 	bl	b8734 <__aeabi_dcmpeq>
   b6e3c:	2800      	cmp	r0, #0
   b6e3e:	d13d      	bne.n	b6ebc <pow+0xdc>
   b6e40:	ec45 4b10 	vmov	d0, r4, r5
   b6e44:	f000 ff10 	bl	b7c68 <finite>
   b6e48:	b138      	cbz	r0, b6e5a <pow+0x7a>
   b6e4a:	4620      	mov	r0, r4
   b6e4c:	4629      	mov	r1, r5
   b6e4e:	2200      	movs	r2, #0
   b6e50:	2300      	movs	r3, #0
   b6e52:	f001 fc79 	bl	b8748 <__aeabi_dcmplt>
   b6e56:	2800      	cmp	r0, #0
   b6e58:	d15c      	bne.n	b6f14 <pow+0x134>
   b6e5a:	eeb0 0a48 	vmov.f32	s0, s16
   b6e5e:	eef0 0a68 	vmov.f32	s1, s17
   b6e62:	ecbd 8b02 	vpop	{d8}
   b6e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6e68:	eeb0 0a48 	vmov.f32	s0, s16
   b6e6c:	eef0 0a68 	vmov.f32	s1, s17
   b6e70:	f000 fefa 	bl	b7c68 <finite>
   b6e74:	b358      	cbz	r0, b6ece <pow+0xee>
   b6e76:	ec51 0b18 	vmov	r0, r1, d8
   b6e7a:	2200      	movs	r2, #0
   b6e7c:	2300      	movs	r3, #0
   b6e7e:	f001 fc59 	bl	b8734 <__aeabi_dcmpeq>
   b6e82:	2800      	cmp	r0, #0
   b6e84:	d0e9      	beq.n	b6e5a <pow+0x7a>
   b6e86:	ec47 6b10 	vmov	d0, r6, r7
   b6e8a:	f000 feed 	bl	b7c68 <finite>
   b6e8e:	2800      	cmp	r0, #0
   b6e90:	d0e3      	beq.n	b6e5a <pow+0x7a>
   b6e92:	ec45 4b10 	vmov	d0, r4, r5
   b6e96:	f000 fee7 	bl	b7c68 <finite>
   b6e9a:	2800      	cmp	r0, #0
   b6e9c:	d0dd      	beq.n	b6e5a <pow+0x7a>
   b6e9e:	f7fe fd2b 	bl	b58f8 <__errno>
   b6ea2:	2322      	movs	r3, #34	; 0x22
   b6ea4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6f60 <pow+0x180>
   b6ea8:	6003      	str	r3, [r0, #0]
   b6eaa:	e7d6      	b.n	b6e5a <pow+0x7a>
   b6eac:	4620      	mov	r0, r4
   b6eae:	4629      	mov	r1, r5
   b6eb0:	2200      	movs	r2, #0
   b6eb2:	2300      	movs	r3, #0
   b6eb4:	f001 fc3e 	bl	b8734 <__aeabi_dcmpeq>
   b6eb8:	2800      	cmp	r0, #0
   b6eba:	d0ce      	beq.n	b6e5a <pow+0x7a>
   b6ebc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6f68 <pow+0x188>
   b6ec0:	eeb0 0a48 	vmov.f32	s0, s16
   b6ec4:	eef0 0a68 	vmov.f32	s1, s17
   b6ec8:	ecbd 8b02 	vpop	{d8}
   b6ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6ece:	ec47 6b10 	vmov	d0, r6, r7
   b6ed2:	f000 fec9 	bl	b7c68 <finite>
   b6ed6:	2800      	cmp	r0, #0
   b6ed8:	d0cd      	beq.n	b6e76 <pow+0x96>
   b6eda:	ec45 4b10 	vmov	d0, r4, r5
   b6ede:	f000 fec3 	bl	b7c68 <finite>
   b6ee2:	2800      	cmp	r0, #0
   b6ee4:	d0c7      	beq.n	b6e76 <pow+0x96>
   b6ee6:	ec53 2b18 	vmov	r2, r3, d8
   b6eea:	ee18 0a10 	vmov	r0, s16
   b6eee:	4619      	mov	r1, r3
   b6ef0:	f001 fc52 	bl	b8798 <__aeabi_dcmpun>
   b6ef4:	bb20      	cbnz	r0, b6f40 <pow+0x160>
   b6ef6:	f7fe fcff 	bl	b58f8 <__errno>
   b6efa:	4603      	mov	r3, r0
   b6efc:	2222      	movs	r2, #34	; 0x22
   b6efe:	601a      	str	r2, [r3, #0]
   b6f00:	4630      	mov	r0, r6
   b6f02:	4639      	mov	r1, r7
   b6f04:	2200      	movs	r2, #0
   b6f06:	2300      	movs	r3, #0
   b6f08:	f001 fc1e 	bl	b8748 <__aeabi_dcmplt>
   b6f0c:	b948      	cbnz	r0, b6f22 <pow+0x142>
   b6f0e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6f70 <pow+0x190>
   b6f12:	e7a2      	b.n	b6e5a <pow+0x7a>
   b6f14:	f7fe fcf0 	bl	b58f8 <__errno>
   b6f18:	2321      	movs	r3, #33	; 0x21
   b6f1a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6f78 <pow+0x198>
   b6f1e:	6003      	str	r3, [r0, #0]
   b6f20:	e79b      	b.n	b6e5a <pow+0x7a>
   b6f22:	ec45 4b10 	vmov	d0, r4, r5
   b6f26:	f000 feb3 	bl	b7c90 <rint>
   b6f2a:	4622      	mov	r2, r4
   b6f2c:	ec51 0b10 	vmov	r0, r1, d0
   b6f30:	462b      	mov	r3, r5
   b6f32:	f001 fbff 	bl	b8734 <__aeabi_dcmpeq>
   b6f36:	2800      	cmp	r0, #0
   b6f38:	d1e9      	bne.n	b6f0e <pow+0x12e>
   b6f3a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6f78 <pow+0x198>
   b6f3e:	e78c      	b.n	b6e5a <pow+0x7a>
   b6f40:	f7fe fcda 	bl	b58f8 <__errno>
   b6f44:	2200      	movs	r2, #0
   b6f46:	2300      	movs	r3, #0
   b6f48:	2121      	movs	r1, #33	; 0x21
   b6f4a:	6001      	str	r1, [r0, #0]
   b6f4c:	4610      	mov	r0, r2
   b6f4e:	4619      	mov	r1, r3
   b6f50:	f001 fab2 	bl	b84b8 <__aeabi_ddiv>
   b6f54:	ec41 0b18 	vmov	d8, r0, r1
   b6f58:	e77f      	b.n	b6e5a <pow+0x7a>
   b6f5a:	bf00      	nop
   b6f5c:	f3af 8000 	nop.w
	...
   b6f6c:	3ff00000 	.word	0x3ff00000
   b6f70:	00000000 	.word	0x00000000
   b6f74:	7ff00000 	.word	0x7ff00000
   b6f78:	00000000 	.word	0x00000000
   b6f7c:	fff00000 	.word	0xfff00000
   b6f80:	2003e580 	.word	0x2003e580
   b6f84:	00000000 	.word	0x00000000

000b6f88 <__ieee754_pow>:
   b6f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f8c:	ec57 6b11 	vmov	r6, r7, d1
   b6f90:	ed2d 8b0c 	vpush	{d8-d13}
   b6f94:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b6f98:	ea5a 0206 	orrs.w	r2, sl, r6
   b6f9c:	b087      	sub	sp, #28
   b6f9e:	d03d      	beq.n	b701c <__ieee754_pow+0x94>
   b6fa0:	ec55 4b10 	vmov	r4, r5, d0
   b6fa4:	4972      	ldr	r1, [pc, #456]	; (b7170 <__ieee754_pow+0x1e8>)
   b6fa6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b6faa:	4588      	cmp	r8, r1
   b6fac:	ee10 2a10 	vmov	r2, s0
   b6fb0:	46a9      	mov	r9, r5
   b6fb2:	dc2c      	bgt.n	b700e <__ieee754_pow+0x86>
   b6fb4:	ee11 3a10 	vmov	r3, s2
   b6fb8:	46bb      	mov	fp, r7
   b6fba:	d036      	beq.n	b702a <__ieee754_pow+0xa2>
   b6fbc:	458a      	cmp	sl, r1
   b6fbe:	dc26      	bgt.n	b700e <__ieee754_pow+0x86>
   b6fc0:	496b      	ldr	r1, [pc, #428]	; (b7170 <__ieee754_pow+0x1e8>)
   b6fc2:	458a      	cmp	sl, r1
   b6fc4:	d021      	beq.n	b700a <__ieee754_pow+0x82>
   b6fc6:	f1b9 0f00 	cmp.w	r9, #0
   b6fca:	db39      	blt.n	b7040 <__ieee754_pow+0xb8>
   b6fcc:	2100      	movs	r1, #0
   b6fce:	9100      	str	r1, [sp, #0]
   b6fd0:	2b00      	cmp	r3, #0
   b6fd2:	d151      	bne.n	b7078 <__ieee754_pow+0xf0>
   b6fd4:	4b66      	ldr	r3, [pc, #408]	; (b7170 <__ieee754_pow+0x1e8>)
   b6fd6:	459a      	cmp	sl, r3
   b6fd8:	f000 80a2 	beq.w	b7120 <__ieee754_pow+0x198>
   b6fdc:	4b65      	ldr	r3, [pc, #404]	; (b7174 <__ieee754_pow+0x1ec>)
   b6fde:	459a      	cmp	sl, r3
   b6fe0:	f000 80b0 	beq.w	b7144 <__ieee754_pow+0x1bc>
   b6fe4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b6fe8:	f000 84c0 	beq.w	b796c <__ieee754_pow+0x9e4>
   b6fec:	4b62      	ldr	r3, [pc, #392]	; (b7178 <__ieee754_pow+0x1f0>)
   b6fee:	459b      	cmp	fp, r3
   b6ff0:	d142      	bne.n	b7078 <__ieee754_pow+0xf0>
   b6ff2:	f1b9 0f00 	cmp.w	r9, #0
   b6ff6:	db3f      	blt.n	b7078 <__ieee754_pow+0xf0>
   b6ff8:	ec45 4b10 	vmov	d0, r4, r5
   b6ffc:	b007      	add	sp, #28
   b6ffe:	ecbd 8b0c 	vpop	{d8-d13}
   b7002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7006:	f000 bd59 	b.w	b7abc <__ieee754_sqrt>
   b700a:	2b00      	cmp	r3, #0
   b700c:	d0db      	beq.n	b6fc6 <__ieee754_pow+0x3e>
   b700e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7012:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7016:	ea58 0302 	orrs.w	r3, r8, r2
   b701a:	d109      	bne.n	b7030 <__ieee754_pow+0xa8>
   b701c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7160 <__ieee754_pow+0x1d8>
   b7020:	b007      	add	sp, #28
   b7022:	ecbd 8b0c 	vpop	{d8-d13}
   b7026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b702a:	b90c      	cbnz	r4, b7030 <__ieee754_pow+0xa8>
   b702c:	45c2      	cmp	sl, r8
   b702e:	ddc7      	ble.n	b6fc0 <__ieee754_pow+0x38>
   b7030:	4852      	ldr	r0, [pc, #328]	; (b717c <__ieee754_pow+0x1f4>)
   b7032:	b007      	add	sp, #28
   b7034:	ecbd 8b0c 	vpop	{d8-d13}
   b7038:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b703c:	f000 be20 	b.w	b7c80 <nan>
   b7040:	494f      	ldr	r1, [pc, #316]	; (b7180 <__ieee754_pow+0x1f8>)
   b7042:	458a      	cmp	sl, r1
   b7044:	f300 8085 	bgt.w	b7152 <__ieee754_pow+0x1ca>
   b7048:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b704c:	458a      	cmp	sl, r1
   b704e:	dd0f      	ble.n	b7070 <__ieee754_pow+0xe8>
   b7050:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7054:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7058:	2914      	cmp	r1, #20
   b705a:	f340 849b 	ble.w	b7994 <__ieee754_pow+0xa0c>
   b705e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7062:	fa23 f001 	lsr.w	r0, r3, r1
   b7066:	fa00 f101 	lsl.w	r1, r0, r1
   b706a:	4299      	cmp	r1, r3
   b706c:	f000 84ed 	beq.w	b7a4a <__ieee754_pow+0xac2>
   b7070:	2100      	movs	r1, #0
   b7072:	9100      	str	r1, [sp, #0]
   b7074:	2b00      	cmp	r3, #0
   b7076:	d0b1      	beq.n	b6fdc <__ieee754_pow+0x54>
   b7078:	ec45 4b10 	vmov	d0, r4, r5
   b707c:	9202      	str	r2, [sp, #8]
   b707e:	f000 fde9 	bl	b7c54 <fabs>
   b7082:	9a02      	ldr	r2, [sp, #8]
   b7084:	bb5a      	cbnz	r2, b70de <__ieee754_pow+0x156>
   b7086:	f1b8 0f00 	cmp.w	r8, #0
   b708a:	d004      	beq.n	b7096 <__ieee754_pow+0x10e>
   b708c:	4b39      	ldr	r3, [pc, #228]	; (b7174 <__ieee754_pow+0x1ec>)
   b708e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b7092:	429a      	cmp	r2, r3
   b7094:	d123      	bne.n	b70de <__ieee754_pow+0x156>
   b7096:	f1bb 0f00 	cmp.w	fp, #0
   b709a:	da07      	bge.n	b70ac <__ieee754_pow+0x124>
   b709c:	ec53 2b10 	vmov	r2, r3, d0
   b70a0:	4934      	ldr	r1, [pc, #208]	; (b7174 <__ieee754_pow+0x1ec>)
   b70a2:	2000      	movs	r0, #0
   b70a4:	f001 fa08 	bl	b84b8 <__aeabi_ddiv>
   b70a8:	ec41 0b10 	vmov	d0, r0, r1
   b70ac:	f1b9 0f00 	cmp.w	r9, #0
   b70b0:	dab6      	bge.n	b7020 <__ieee754_pow+0x98>
   b70b2:	9b00      	ldr	r3, [sp, #0]
   b70b4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b70b8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b70bc:	ea58 0303 	orrs.w	r3, r8, r3
   b70c0:	f040 848d 	bne.w	b79de <__ieee754_pow+0xa56>
   b70c4:	ec53 2b10 	vmov	r2, r3, d0
   b70c8:	4610      	mov	r0, r2
   b70ca:	4619      	mov	r1, r3
   b70cc:	f000 ff12 	bl	b7ef4 <__aeabi_dsub>
   b70d0:	4602      	mov	r2, r0
   b70d2:	460b      	mov	r3, r1
   b70d4:	f001 f9f0 	bl	b84b8 <__aeabi_ddiv>
   b70d8:	ec41 0b10 	vmov	d0, r0, r1
   b70dc:	e7a0      	b.n	b7020 <__ieee754_pow+0x98>
   b70de:	9a00      	ldr	r2, [sp, #0]
   b70e0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b70e4:	3b01      	subs	r3, #1
   b70e6:	9304      	str	r3, [sp, #16]
   b70e8:	4313      	orrs	r3, r2
   b70ea:	d035      	beq.n	b7158 <__ieee754_pow+0x1d0>
   b70ec:	4b25      	ldr	r3, [pc, #148]	; (b7184 <__ieee754_pow+0x1fc>)
   b70ee:	459a      	cmp	sl, r3
   b70f0:	dd4c      	ble.n	b718c <__ieee754_pow+0x204>
   b70f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b70f6:	459a      	cmp	sl, r3
   b70f8:	4b23      	ldr	r3, [pc, #140]	; (b7188 <__ieee754_pow+0x200>)
   b70fa:	f340 83db 	ble.w	b78b4 <__ieee754_pow+0x92c>
   b70fe:	4598      	cmp	r8, r3
   b7100:	f340 8360 	ble.w	b77c4 <__ieee754_pow+0x83c>
   b7104:	f1bb 0f00 	cmp.w	fp, #0
   b7108:	f340 8360 	ble.w	b77cc <__ieee754_pow+0x844>
   b710c:	a316      	add	r3, pc, #88	; (adr r3, b7168 <__ieee754_pow+0x1e0>)
   b710e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7112:	4610      	mov	r0, r2
   b7114:	4619      	mov	r1, r3
   b7116:	f001 f8a5 	bl	b8264 <__aeabi_dmul>
   b711a:	ec41 0b10 	vmov	d0, r0, r1
   b711e:	e77f      	b.n	b7020 <__ieee754_pow+0x98>
   b7120:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b7124:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7128:	4313      	orrs	r3, r2
   b712a:	f43f af77 	beq.w	b701c <__ieee754_pow+0x94>
   b712e:	4b16      	ldr	r3, [pc, #88]	; (b7188 <__ieee754_pow+0x200>)
   b7130:	4598      	cmp	r8, r3
   b7132:	f340 837a 	ble.w	b782a <__ieee754_pow+0x8a2>
   b7136:	f1bb 0f00 	cmp.w	fp, #0
   b713a:	f2c0 8347 	blt.w	b77cc <__ieee754_pow+0x844>
   b713e:	ec47 6b10 	vmov	d0, r6, r7
   b7142:	e76d      	b.n	b7020 <__ieee754_pow+0x98>
   b7144:	f1bb 0f00 	cmp.w	fp, #0
   b7148:	f2c0 841a 	blt.w	b7980 <__ieee754_pow+0x9f8>
   b714c:	ec45 4b10 	vmov	d0, r4, r5
   b7150:	e766      	b.n	b7020 <__ieee754_pow+0x98>
   b7152:	2102      	movs	r1, #2
   b7154:	9100      	str	r1, [sp, #0]
   b7156:	e73b      	b.n	b6fd0 <__ieee754_pow+0x48>
   b7158:	4622      	mov	r2, r4
   b715a:	462b      	mov	r3, r5
   b715c:	e7b4      	b.n	b70c8 <__ieee754_pow+0x140>
   b715e:	bf00      	nop
   b7160:	00000000 	.word	0x00000000
   b7164:	3ff00000 	.word	0x3ff00000
   b7168:	8800759c 	.word	0x8800759c
   b716c:	7e37e43c 	.word	0x7e37e43c
   b7170:	7ff00000 	.word	0x7ff00000
   b7174:	3ff00000 	.word	0x3ff00000
   b7178:	3fe00000 	.word	0x3fe00000
   b717c:	000b937c 	.word	0x000b937c
   b7180:	433fffff 	.word	0x433fffff
   b7184:	41e00000 	.word	0x41e00000
   b7188:	3fefffff 	.word	0x3fefffff
   b718c:	4be4      	ldr	r3, [pc, #912]	; (b7520 <__ieee754_pow+0x598>)
   b718e:	ea09 0303 	and.w	r3, r9, r3
   b7192:	2200      	movs	r2, #0
   b7194:	b953      	cbnz	r3, b71ac <__ieee754_pow+0x224>
   b7196:	ec51 0b10 	vmov	r0, r1, d0
   b719a:	4be2      	ldr	r3, [pc, #904]	; (b7524 <__ieee754_pow+0x59c>)
   b719c:	f001 f862 	bl	b8264 <__aeabi_dmul>
   b71a0:	ec41 0b10 	vmov	d0, r0, r1
   b71a4:	ee10 8a90 	vmov	r8, s1
   b71a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b71ac:	ea4f 5328 	mov.w	r3, r8, asr #20
   b71b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b71b4:	189a      	adds	r2, r3, r2
   b71b6:	4bdc      	ldr	r3, [pc, #880]	; (b7528 <__ieee754_pow+0x5a0>)
   b71b8:	9205      	str	r2, [sp, #20]
   b71ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b71be:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b71c2:	4598      	cmp	r8, r3
   b71c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b71c8:	dd07      	ble.n	b71da <__ieee754_pow+0x252>
   b71ca:	4bd8      	ldr	r3, [pc, #864]	; (b752c <__ieee754_pow+0x5a4>)
   b71cc:	4598      	cmp	r8, r3
   b71ce:	f340 8414 	ble.w	b79fa <__ieee754_pow+0xa72>
   b71d2:	3201      	adds	r2, #1
   b71d4:	9205      	str	r2, [sp, #20]
   b71d6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b71da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b74c0 <__ieee754_pow+0x538>
   b71de:	ed9f 7bba 	vldr	d7, [pc, #744]	; b74c8 <__ieee754_pow+0x540>
   b71e2:	ec53 2b16 	vmov	r2, r3, d6
   b71e6:	eeb0 ca47 	vmov.f32	s24, s14
   b71ea:	eef0 ca67 	vmov.f32	s25, s15
   b71ee:	2500      	movs	r5, #0
   b71f0:	eeb0 da47 	vmov.f32	s26, s14
   b71f4:	eef0 da67 	vmov.f32	s27, s15
   b71f8:	ec5b ab10 	vmov	sl, fp, d0
   b71fc:	46a3      	mov	fp, r4
   b71fe:	4650      	mov	r0, sl
   b7200:	4659      	mov	r1, fp
   b7202:	ec43 2b1a 	vmov	d10, r2, r3
   b7206:	f000 fe75 	bl	b7ef4 <__aeabi_dsub>
   b720a:	ec53 2b1a 	vmov	r2, r3, d10
   b720e:	4680      	mov	r8, r0
   b7210:	4689      	mov	r9, r1
   b7212:	4650      	mov	r0, sl
   b7214:	4659      	mov	r1, fp
   b7216:	f000 fe6f 	bl	b7ef8 <__adddf3>
   b721a:	4602      	mov	r2, r0
   b721c:	460b      	mov	r3, r1
   b721e:	2000      	movs	r0, #0
   b7220:	49c3      	ldr	r1, [pc, #780]	; (b7530 <__ieee754_pow+0x5a8>)
   b7222:	f001 f949 	bl	b84b8 <__aeabi_ddiv>
   b7226:	ec41 0b1b 	vmov	d11, r0, r1
   b722a:	4640      	mov	r0, r8
   b722c:	ec53 2b1b 	vmov	r2, r3, d11
   b7230:	4649      	mov	r1, r9
   b7232:	f001 f817 	bl	b8264 <__aeabi_dmul>
   b7236:	ec41 0b18 	vmov	d8, r0, r1
   b723a:	460a      	mov	r2, r1
   b723c:	4601      	mov	r1, r0
   b723e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7242:	2100      	movs	r1, #0
   b7244:	9102      	str	r1, [sp, #8]
   b7246:	1064      	asrs	r4, r4, #1
   b7248:	ec4b ab19 	vmov	d9, sl, fp
   b724c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7250:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b7254:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7258:	2000      	movs	r0, #0
   b725a:	1959      	adds	r1, r3, r5
   b725c:	4604      	mov	r4, r0
   b725e:	460d      	mov	r5, r1
   b7260:	4602      	mov	r2, r0
   b7262:	460b      	mov	r3, r1
   b7264:	4650      	mov	r0, sl
   b7266:	4659      	mov	r1, fp
   b7268:	f000 fffc 	bl	b8264 <__aeabi_dmul>
   b726c:	4602      	mov	r2, r0
   b726e:	460b      	mov	r3, r1
   b7270:	4640      	mov	r0, r8
   b7272:	4649      	mov	r1, r9
   b7274:	f000 fe3e 	bl	b7ef4 <__aeabi_dsub>
   b7278:	ec53 2b1a 	vmov	r2, r3, d10
   b727c:	4680      	mov	r8, r0
   b727e:	4689      	mov	r9, r1
   b7280:	4620      	mov	r0, r4
   b7282:	4629      	mov	r1, r5
   b7284:	f000 fe36 	bl	b7ef4 <__aeabi_dsub>
   b7288:	4602      	mov	r2, r0
   b728a:	460b      	mov	r3, r1
   b728c:	ec51 0b19 	vmov	r0, r1, d9
   b7290:	f000 fe30 	bl	b7ef4 <__aeabi_dsub>
   b7294:	4652      	mov	r2, sl
   b7296:	465b      	mov	r3, fp
   b7298:	f000 ffe4 	bl	b8264 <__aeabi_dmul>
   b729c:	4602      	mov	r2, r0
   b729e:	460b      	mov	r3, r1
   b72a0:	4640      	mov	r0, r8
   b72a2:	4649      	mov	r1, r9
   b72a4:	f000 fe26 	bl	b7ef4 <__aeabi_dsub>
   b72a8:	ec53 2b1b 	vmov	r2, r3, d11
   b72ac:	f000 ffda 	bl	b8264 <__aeabi_dmul>
   b72b0:	ec53 2b18 	vmov	r2, r3, d8
   b72b4:	ec41 0b19 	vmov	d9, r0, r1
   b72b8:	ec51 0b18 	vmov	r0, r1, d8
   b72bc:	f000 ffd2 	bl	b8264 <__aeabi_dmul>
   b72c0:	a383      	add	r3, pc, #524	; (adr r3, b74d0 <__ieee754_pow+0x548>)
   b72c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72c6:	4604      	mov	r4, r0
   b72c8:	460d      	mov	r5, r1
   b72ca:	f000 ffcb 	bl	b8264 <__aeabi_dmul>
   b72ce:	a382      	add	r3, pc, #520	; (adr r3, b74d8 <__ieee754_pow+0x550>)
   b72d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72d4:	f000 fe10 	bl	b7ef8 <__adddf3>
   b72d8:	4622      	mov	r2, r4
   b72da:	462b      	mov	r3, r5
   b72dc:	f000 ffc2 	bl	b8264 <__aeabi_dmul>
   b72e0:	a37f      	add	r3, pc, #508	; (adr r3, b74e0 <__ieee754_pow+0x558>)
   b72e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72e6:	f000 fe07 	bl	b7ef8 <__adddf3>
   b72ea:	4622      	mov	r2, r4
   b72ec:	462b      	mov	r3, r5
   b72ee:	f000 ffb9 	bl	b8264 <__aeabi_dmul>
   b72f2:	a37d      	add	r3, pc, #500	; (adr r3, b74e8 <__ieee754_pow+0x560>)
   b72f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72f8:	f000 fdfe 	bl	b7ef8 <__adddf3>
   b72fc:	4622      	mov	r2, r4
   b72fe:	462b      	mov	r3, r5
   b7300:	f000 ffb0 	bl	b8264 <__aeabi_dmul>
   b7304:	a37a      	add	r3, pc, #488	; (adr r3, b74f0 <__ieee754_pow+0x568>)
   b7306:	e9d3 2300 	ldrd	r2, r3, [r3]
   b730a:	f000 fdf5 	bl	b7ef8 <__adddf3>
   b730e:	4622      	mov	r2, r4
   b7310:	462b      	mov	r3, r5
   b7312:	f000 ffa7 	bl	b8264 <__aeabi_dmul>
   b7316:	a378      	add	r3, pc, #480	; (adr r3, b74f8 <__ieee754_pow+0x570>)
   b7318:	e9d3 2300 	ldrd	r2, r3, [r3]
   b731c:	f000 fdec 	bl	b7ef8 <__adddf3>
   b7320:	4622      	mov	r2, r4
   b7322:	4680      	mov	r8, r0
   b7324:	4689      	mov	r9, r1
   b7326:	462b      	mov	r3, r5
   b7328:	4620      	mov	r0, r4
   b732a:	4629      	mov	r1, r5
   b732c:	f000 ff9a 	bl	b8264 <__aeabi_dmul>
   b7330:	4602      	mov	r2, r0
   b7332:	460b      	mov	r3, r1
   b7334:	4640      	mov	r0, r8
   b7336:	4649      	mov	r1, r9
   b7338:	f000 ff94 	bl	b8264 <__aeabi_dmul>
   b733c:	4652      	mov	r2, sl
   b733e:	4604      	mov	r4, r0
   b7340:	460d      	mov	r5, r1
   b7342:	465b      	mov	r3, fp
   b7344:	ec51 0b18 	vmov	r0, r1, d8
   b7348:	f000 fdd6 	bl	b7ef8 <__adddf3>
   b734c:	ec53 2b19 	vmov	r2, r3, d9
   b7350:	f000 ff88 	bl	b8264 <__aeabi_dmul>
   b7354:	4622      	mov	r2, r4
   b7356:	462b      	mov	r3, r5
   b7358:	f000 fdce 	bl	b7ef8 <__adddf3>
   b735c:	4652      	mov	r2, sl
   b735e:	4680      	mov	r8, r0
   b7360:	4689      	mov	r9, r1
   b7362:	465b      	mov	r3, fp
   b7364:	4650      	mov	r0, sl
   b7366:	4659      	mov	r1, fp
   b7368:	f000 ff7c 	bl	b8264 <__aeabi_dmul>
   b736c:	4602      	mov	r2, r0
   b736e:	460b      	mov	r3, r1
   b7370:	ec43 2b1a 	vmov	d10, r2, r3
   b7374:	4b6f      	ldr	r3, [pc, #444]	; (b7534 <__ieee754_pow+0x5ac>)
   b7376:	2200      	movs	r2, #0
   b7378:	f000 fdbe 	bl	b7ef8 <__adddf3>
   b737c:	4642      	mov	r2, r8
   b737e:	464b      	mov	r3, r9
   b7380:	f000 fdba 	bl	b7ef8 <__adddf3>
   b7384:	2400      	movs	r4, #0
   b7386:	460d      	mov	r5, r1
   b7388:	4622      	mov	r2, r4
   b738a:	462b      	mov	r3, r5
   b738c:	4650      	mov	r0, sl
   b738e:	4659      	mov	r1, fp
   b7390:	f000 ff68 	bl	b8264 <__aeabi_dmul>
   b7394:	4b67      	ldr	r3, [pc, #412]	; (b7534 <__ieee754_pow+0x5ac>)
   b7396:	4682      	mov	sl, r0
   b7398:	468b      	mov	fp, r1
   b739a:	2200      	movs	r2, #0
   b739c:	4620      	mov	r0, r4
   b739e:	4629      	mov	r1, r5
   b73a0:	f000 fda8 	bl	b7ef4 <__aeabi_dsub>
   b73a4:	ec53 2b1a 	vmov	r2, r3, d10
   b73a8:	f000 fda4 	bl	b7ef4 <__aeabi_dsub>
   b73ac:	4602      	mov	r2, r0
   b73ae:	460b      	mov	r3, r1
   b73b0:	4640      	mov	r0, r8
   b73b2:	4649      	mov	r1, r9
   b73b4:	f000 fd9e 	bl	b7ef4 <__aeabi_dsub>
   b73b8:	ec53 2b18 	vmov	r2, r3, d8
   b73bc:	f000 ff52 	bl	b8264 <__aeabi_dmul>
   b73c0:	4622      	mov	r2, r4
   b73c2:	462b      	mov	r3, r5
   b73c4:	4604      	mov	r4, r0
   b73c6:	460d      	mov	r5, r1
   b73c8:	ec51 0b19 	vmov	r0, r1, d9
   b73cc:	f000 ff4a 	bl	b8264 <__aeabi_dmul>
   b73d0:	4602      	mov	r2, r0
   b73d2:	460b      	mov	r3, r1
   b73d4:	4620      	mov	r0, r4
   b73d6:	4629      	mov	r1, r5
   b73d8:	f000 fd8e 	bl	b7ef8 <__adddf3>
   b73dc:	4680      	mov	r8, r0
   b73de:	4689      	mov	r9, r1
   b73e0:	4642      	mov	r2, r8
   b73e2:	464b      	mov	r3, r9
   b73e4:	4650      	mov	r0, sl
   b73e6:	4659      	mov	r1, fp
   b73e8:	f000 fd86 	bl	b7ef8 <__adddf3>
   b73ec:	a344      	add	r3, pc, #272	; (adr r3, b7500 <__ieee754_pow+0x578>)
   b73ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73f2:	2000      	movs	r0, #0
   b73f4:	4604      	mov	r4, r0
   b73f6:	460d      	mov	r5, r1
   b73f8:	f000 ff34 	bl	b8264 <__aeabi_dmul>
   b73fc:	4652      	mov	r2, sl
   b73fe:	ec41 0b19 	vmov	d9, r0, r1
   b7402:	465b      	mov	r3, fp
   b7404:	4620      	mov	r0, r4
   b7406:	4629      	mov	r1, r5
   b7408:	f000 fd74 	bl	b7ef4 <__aeabi_dsub>
   b740c:	4602      	mov	r2, r0
   b740e:	460b      	mov	r3, r1
   b7410:	4640      	mov	r0, r8
   b7412:	4649      	mov	r1, r9
   b7414:	f000 fd6e 	bl	b7ef4 <__aeabi_dsub>
   b7418:	a33b      	add	r3, pc, #236	; (adr r3, b7508 <__ieee754_pow+0x580>)
   b741a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b741e:	f000 ff21 	bl	b8264 <__aeabi_dmul>
   b7422:	4602      	mov	r2, r0
   b7424:	460b      	mov	r3, r1
   b7426:	4620      	mov	r0, r4
   b7428:	4629      	mov	r1, r5
   b742a:	4614      	mov	r4, r2
   b742c:	461d      	mov	r5, r3
   b742e:	a338      	add	r3, pc, #224	; (adr r3, b7510 <__ieee754_pow+0x588>)
   b7430:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7434:	f000 ff16 	bl	b8264 <__aeabi_dmul>
   b7438:	4602      	mov	r2, r0
   b743a:	460b      	mov	r3, r1
   b743c:	4620      	mov	r0, r4
   b743e:	4629      	mov	r1, r5
   b7440:	f000 fd5a 	bl	b7ef8 <__adddf3>
   b7444:	ec53 2b1d 	vmov	r2, r3, d13
   b7448:	f000 fd56 	bl	b7ef8 <__adddf3>
   b744c:	4680      	mov	r8, r0
   b744e:	9805      	ldr	r0, [sp, #20]
   b7450:	4689      	mov	r9, r1
   b7452:	f000 fe9d 	bl	b8190 <__aeabi_i2d>
   b7456:	4642      	mov	r2, r8
   b7458:	4682      	mov	sl, r0
   b745a:	468b      	mov	fp, r1
   b745c:	464b      	mov	r3, r9
   b745e:	ec51 0b19 	vmov	r0, r1, d9
   b7462:	f000 fd49 	bl	b7ef8 <__adddf3>
   b7466:	ec53 2b1c 	vmov	r2, r3, d12
   b746a:	f000 fd45 	bl	b7ef8 <__adddf3>
   b746e:	4652      	mov	r2, sl
   b7470:	465b      	mov	r3, fp
   b7472:	f000 fd41 	bl	b7ef8 <__adddf3>
   b7476:	4652      	mov	r2, sl
   b7478:	465b      	mov	r3, fp
   b747a:	2000      	movs	r0, #0
   b747c:	4604      	mov	r4, r0
   b747e:	460d      	mov	r5, r1
   b7480:	f000 fd38 	bl	b7ef4 <__aeabi_dsub>
   b7484:	ec53 2b1c 	vmov	r2, r3, d12
   b7488:	f000 fd34 	bl	b7ef4 <__aeabi_dsub>
   b748c:	ec53 2b19 	vmov	r2, r3, d9
   b7490:	f000 fd30 	bl	b7ef4 <__aeabi_dsub>
   b7494:	4602      	mov	r2, r0
   b7496:	460b      	mov	r3, r1
   b7498:	4640      	mov	r0, r8
   b749a:	4649      	mov	r1, r9
   b749c:	f000 fd2a 	bl	b7ef4 <__aeabi_dsub>
   b74a0:	9b00      	ldr	r3, [sp, #0]
   b74a2:	9a04      	ldr	r2, [sp, #16]
   b74a4:	3b01      	subs	r3, #1
   b74a6:	4313      	orrs	r3, r2
   b74a8:	4682      	mov	sl, r0
   b74aa:	468b      	mov	fp, r1
   b74ac:	f040 81b6 	bne.w	b781c <__ieee754_pow+0x894>
   b74b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b7518 <__ieee754_pow+0x590>
   b74b4:	eeb0 8a47 	vmov.f32	s16, s14
   b74b8:	eef0 8a67 	vmov.f32	s17, s15
   b74bc:	e03c      	b.n	b7538 <__ieee754_pow+0x5b0>
   b74be:	bf00      	nop
   b74c0:	00000000 	.word	0x00000000
   b74c4:	3ff00000 	.word	0x3ff00000
	...
   b74d0:	4a454eef 	.word	0x4a454eef
   b74d4:	3fca7e28 	.word	0x3fca7e28
   b74d8:	93c9db65 	.word	0x93c9db65
   b74dc:	3fcd864a 	.word	0x3fcd864a
   b74e0:	a91d4101 	.word	0xa91d4101
   b74e4:	3fd17460 	.word	0x3fd17460
   b74e8:	518f264d 	.word	0x518f264d
   b74ec:	3fd55555 	.word	0x3fd55555
   b74f0:	db6fabff 	.word	0xdb6fabff
   b74f4:	3fdb6db6 	.word	0x3fdb6db6
   b74f8:	33333303 	.word	0x33333303
   b74fc:	3fe33333 	.word	0x3fe33333
   b7500:	e0000000 	.word	0xe0000000
   b7504:	3feec709 	.word	0x3feec709
   b7508:	dc3a03fd 	.word	0xdc3a03fd
   b750c:	3feec709 	.word	0x3feec709
   b7510:	145b01f5 	.word	0x145b01f5
   b7514:	be3e2fe0 	.word	0xbe3e2fe0
   b7518:	00000000 	.word	0x00000000
   b751c:	bff00000 	.word	0xbff00000
   b7520:	7ff00000 	.word	0x7ff00000
   b7524:	43400000 	.word	0x43400000
   b7528:	0003988e 	.word	0x0003988e
   b752c:	000bb679 	.word	0x000bb679
   b7530:	3ff00000 	.word	0x3ff00000
   b7534:	40080000 	.word	0x40080000
   b7538:	2300      	movs	r3, #0
   b753a:	e9cd 6700 	strd	r6, r7, [sp]
   b753e:	9300      	str	r3, [sp, #0]
   b7540:	e9dd 8900 	ldrd	r8, r9, [sp]
   b7544:	4630      	mov	r0, r6
   b7546:	4642      	mov	r2, r8
   b7548:	464b      	mov	r3, r9
   b754a:	4639      	mov	r1, r7
   b754c:	f000 fcd2 	bl	b7ef4 <__aeabi_dsub>
   b7550:	4622      	mov	r2, r4
   b7552:	462b      	mov	r3, r5
   b7554:	f000 fe86 	bl	b8264 <__aeabi_dmul>
   b7558:	4632      	mov	r2, r6
   b755a:	463b      	mov	r3, r7
   b755c:	4606      	mov	r6, r0
   b755e:	460f      	mov	r7, r1
   b7560:	4650      	mov	r0, sl
   b7562:	4659      	mov	r1, fp
   b7564:	f000 fe7e 	bl	b8264 <__aeabi_dmul>
   b7568:	4602      	mov	r2, r0
   b756a:	460b      	mov	r3, r1
   b756c:	4630      	mov	r0, r6
   b756e:	4639      	mov	r1, r7
   b7570:	f000 fcc2 	bl	b7ef8 <__adddf3>
   b7574:	4642      	mov	r2, r8
   b7576:	464b      	mov	r3, r9
   b7578:	4606      	mov	r6, r0
   b757a:	460f      	mov	r7, r1
   b757c:	4620      	mov	r0, r4
   b757e:	4629      	mov	r1, r5
   b7580:	f000 fe70 	bl	b8264 <__aeabi_dmul>
   b7584:	4604      	mov	r4, r0
   b7586:	460d      	mov	r5, r1
   b7588:	462b      	mov	r3, r5
   b758a:	4630      	mov	r0, r6
   b758c:	4639      	mov	r1, r7
   b758e:	4622      	mov	r2, r4
   b7590:	f000 fcb2 	bl	b7ef8 <__adddf3>
   b7594:	4bc2      	ldr	r3, [pc, #776]	; (b78a0 <__ieee754_pow+0x918>)
   b7596:	4299      	cmp	r1, r3
   b7598:	4680      	mov	r8, r0
   b759a:	4689      	mov	r9, r1
   b759c:	468a      	mov	sl, r1
   b759e:	f340 8118 	ble.w	b77d2 <__ieee754_pow+0x84a>
   b75a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b75a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b75aa:	4303      	orrs	r3, r0
   b75ac:	f040 8207 	bne.w	b79be <__ieee754_pow+0xa36>
   b75b0:	a3a3      	add	r3, pc, #652	; (adr r3, b7840 <__ieee754_pow+0x8b8>)
   b75b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75b6:	4630      	mov	r0, r6
   b75b8:	4639      	mov	r1, r7
   b75ba:	f000 fc9d 	bl	b7ef8 <__adddf3>
   b75be:	4602      	mov	r2, r0
   b75c0:	460b      	mov	r3, r1
   b75c2:	4640      	mov	r0, r8
   b75c4:	4649      	mov	r1, r9
   b75c6:	4690      	mov	r8, r2
   b75c8:	4699      	mov	r9, r3
   b75ca:	4622      	mov	r2, r4
   b75cc:	462b      	mov	r3, r5
   b75ce:	f000 fc91 	bl	b7ef4 <__aeabi_dsub>
   b75d2:	4602      	mov	r2, r0
   b75d4:	460b      	mov	r3, r1
   b75d6:	4640      	mov	r0, r8
   b75d8:	4649      	mov	r1, r9
   b75da:	f001 f8d3 	bl	b8784 <__aeabi_dcmpgt>
   b75de:	2800      	cmp	r0, #0
   b75e0:	f040 81ed 	bne.w	b79be <__ieee754_pow+0xa36>
   b75e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b75e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b75ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b75f0:	fa42 f303 	asr.w	r3, r2, r3
   b75f4:	4453      	add	r3, sl
   b75f6:	49ab      	ldr	r1, [pc, #684]	; (b78a4 <__ieee754_pow+0x91c>)
   b75f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b75fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b7600:	fa41 fc02 	asr.w	ip, r1, r2
   b7604:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b7608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b760c:	f1c2 0214 	rsb	r2, r2, #20
   b7610:	fa41 f202 	asr.w	r2, r1, r2
   b7614:	2000      	movs	r0, #0
   b7616:	ea23 010c 	bic.w	r1, r3, ip
   b761a:	f1ba 0f00 	cmp.w	sl, #0
   b761e:	9200      	str	r2, [sp, #0]
   b7620:	460b      	mov	r3, r1
   b7622:	4602      	mov	r2, r0
   b7624:	da02      	bge.n	b762c <__ieee754_pow+0x6a4>
   b7626:	9900      	ldr	r1, [sp, #0]
   b7628:	4249      	negs	r1, r1
   b762a:	9100      	str	r1, [sp, #0]
   b762c:	4620      	mov	r0, r4
   b762e:	4629      	mov	r1, r5
   b7630:	f000 fc60 	bl	b7ef4 <__aeabi_dsub>
   b7634:	9b00      	ldr	r3, [sp, #0]
   b7636:	051b      	lsls	r3, r3, #20
   b7638:	9302      	str	r3, [sp, #8]
   b763a:	4602      	mov	r2, r0
   b763c:	460b      	mov	r3, r1
   b763e:	4604      	mov	r4, r0
   b7640:	460d      	mov	r5, r1
   b7642:	4630      	mov	r0, r6
   b7644:	4639      	mov	r1, r7
   b7646:	f000 fc57 	bl	b7ef8 <__adddf3>
   b764a:	4689      	mov	r9, r1
   b764c:	f04f 0800 	mov.w	r8, #0
   b7650:	a37d      	add	r3, pc, #500	; (adr r3, b7848 <__ieee754_pow+0x8c0>)
   b7652:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7656:	4640      	mov	r0, r8
   b7658:	4649      	mov	r1, r9
   b765a:	f000 fe03 	bl	b8264 <__aeabi_dmul>
   b765e:	4622      	mov	r2, r4
   b7660:	462b      	mov	r3, r5
   b7662:	4682      	mov	sl, r0
   b7664:	468b      	mov	fp, r1
   b7666:	4640      	mov	r0, r8
   b7668:	4649      	mov	r1, r9
   b766a:	f000 fc43 	bl	b7ef4 <__aeabi_dsub>
   b766e:	4602      	mov	r2, r0
   b7670:	460b      	mov	r3, r1
   b7672:	4630      	mov	r0, r6
   b7674:	4639      	mov	r1, r7
   b7676:	f000 fc3d 	bl	b7ef4 <__aeabi_dsub>
   b767a:	a375      	add	r3, pc, #468	; (adr r3, b7850 <__ieee754_pow+0x8c8>)
   b767c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7680:	f000 fdf0 	bl	b8264 <__aeabi_dmul>
   b7684:	a374      	add	r3, pc, #464	; (adr r3, b7858 <__ieee754_pow+0x8d0>)
   b7686:	e9d3 2300 	ldrd	r2, r3, [r3]
   b768a:	4604      	mov	r4, r0
   b768c:	460d      	mov	r5, r1
   b768e:	4640      	mov	r0, r8
   b7690:	4649      	mov	r1, r9
   b7692:	f000 fde7 	bl	b8264 <__aeabi_dmul>
   b7696:	4602      	mov	r2, r0
   b7698:	460b      	mov	r3, r1
   b769a:	4620      	mov	r0, r4
   b769c:	4629      	mov	r1, r5
   b769e:	f000 fc2b 	bl	b7ef8 <__adddf3>
   b76a2:	4606      	mov	r6, r0
   b76a4:	460f      	mov	r7, r1
   b76a6:	4632      	mov	r2, r6
   b76a8:	463b      	mov	r3, r7
   b76aa:	4650      	mov	r0, sl
   b76ac:	4659      	mov	r1, fp
   b76ae:	f000 fc23 	bl	b7ef8 <__adddf3>
   b76b2:	4652      	mov	r2, sl
   b76b4:	465b      	mov	r3, fp
   b76b6:	4604      	mov	r4, r0
   b76b8:	460d      	mov	r5, r1
   b76ba:	f000 fc1b 	bl	b7ef4 <__aeabi_dsub>
   b76be:	4602      	mov	r2, r0
   b76c0:	460b      	mov	r3, r1
   b76c2:	4630      	mov	r0, r6
   b76c4:	4639      	mov	r1, r7
   b76c6:	f000 fc15 	bl	b7ef4 <__aeabi_dsub>
   b76ca:	4622      	mov	r2, r4
   b76cc:	4680      	mov	r8, r0
   b76ce:	4689      	mov	r9, r1
   b76d0:	462b      	mov	r3, r5
   b76d2:	4620      	mov	r0, r4
   b76d4:	4629      	mov	r1, r5
   b76d6:	f000 fdc5 	bl	b8264 <__aeabi_dmul>
   b76da:	a361      	add	r3, pc, #388	; (adr r3, b7860 <__ieee754_pow+0x8d8>)
   b76dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76e0:	4606      	mov	r6, r0
   b76e2:	460f      	mov	r7, r1
   b76e4:	f000 fdbe 	bl	b8264 <__aeabi_dmul>
   b76e8:	a35f      	add	r3, pc, #380	; (adr r3, b7868 <__ieee754_pow+0x8e0>)
   b76ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76ee:	f000 fc01 	bl	b7ef4 <__aeabi_dsub>
   b76f2:	4632      	mov	r2, r6
   b76f4:	463b      	mov	r3, r7
   b76f6:	f000 fdb5 	bl	b8264 <__aeabi_dmul>
   b76fa:	a35d      	add	r3, pc, #372	; (adr r3, b7870 <__ieee754_pow+0x8e8>)
   b76fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7700:	f000 fbfa 	bl	b7ef8 <__adddf3>
   b7704:	4632      	mov	r2, r6
   b7706:	463b      	mov	r3, r7
   b7708:	f000 fdac 	bl	b8264 <__aeabi_dmul>
   b770c:	a35a      	add	r3, pc, #360	; (adr r3, b7878 <__ieee754_pow+0x8f0>)
   b770e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7712:	f000 fbef 	bl	b7ef4 <__aeabi_dsub>
   b7716:	4632      	mov	r2, r6
   b7718:	463b      	mov	r3, r7
   b771a:	f000 fda3 	bl	b8264 <__aeabi_dmul>
   b771e:	a358      	add	r3, pc, #352	; (adr r3, b7880 <__ieee754_pow+0x8f8>)
   b7720:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7724:	f000 fbe8 	bl	b7ef8 <__adddf3>
   b7728:	4632      	mov	r2, r6
   b772a:	463b      	mov	r3, r7
   b772c:	f000 fd9a 	bl	b8264 <__aeabi_dmul>
   b7730:	4602      	mov	r2, r0
   b7732:	460b      	mov	r3, r1
   b7734:	4620      	mov	r0, r4
   b7736:	4629      	mov	r1, r5
   b7738:	f000 fbdc 	bl	b7ef4 <__aeabi_dsub>
   b773c:	4606      	mov	r6, r0
   b773e:	460f      	mov	r7, r1
   b7740:	4632      	mov	r2, r6
   b7742:	463b      	mov	r3, r7
   b7744:	4620      	mov	r0, r4
   b7746:	4629      	mov	r1, r5
   b7748:	f000 fd8c 	bl	b8264 <__aeabi_dmul>
   b774c:	4602      	mov	r2, r0
   b774e:	460b      	mov	r3, r1
   b7750:	4630      	mov	r0, r6
   b7752:	4639      	mov	r1, r7
   b7754:	4616      	mov	r6, r2
   b7756:	461f      	mov	r7, r3
   b7758:	2200      	movs	r2, #0
   b775a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b775e:	f000 fbc9 	bl	b7ef4 <__aeabi_dsub>
   b7762:	4602      	mov	r2, r0
   b7764:	460b      	mov	r3, r1
   b7766:	4630      	mov	r0, r6
   b7768:	4639      	mov	r1, r7
   b776a:	f000 fea5 	bl	b84b8 <__aeabi_ddiv>
   b776e:	4642      	mov	r2, r8
   b7770:	4606      	mov	r6, r0
   b7772:	460f      	mov	r7, r1
   b7774:	464b      	mov	r3, r9
   b7776:	4620      	mov	r0, r4
   b7778:	4629      	mov	r1, r5
   b777a:	f000 fd73 	bl	b8264 <__aeabi_dmul>
   b777e:	4642      	mov	r2, r8
   b7780:	464b      	mov	r3, r9
   b7782:	f000 fbb9 	bl	b7ef8 <__adddf3>
   b7786:	4602      	mov	r2, r0
   b7788:	460b      	mov	r3, r1
   b778a:	4630      	mov	r0, r6
   b778c:	4639      	mov	r1, r7
   b778e:	f000 fbb1 	bl	b7ef4 <__aeabi_dsub>
   b7792:	4622      	mov	r2, r4
   b7794:	462b      	mov	r3, r5
   b7796:	f000 fbad 	bl	b7ef4 <__aeabi_dsub>
   b779a:	4602      	mov	r2, r0
   b779c:	460b      	mov	r3, r1
   b779e:	2000      	movs	r0, #0
   b77a0:	4941      	ldr	r1, [pc, #260]	; (b78a8 <__ieee754_pow+0x920>)
   b77a2:	f000 fba7 	bl	b7ef4 <__aeabi_dsub>
   b77a6:	9a02      	ldr	r2, [sp, #8]
   b77a8:	460b      	mov	r3, r1
   b77aa:	4413      	add	r3, r2
   b77ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b77b0:	f2c0 8143 	blt.w	b7a3a <__ieee754_pow+0xab2>
   b77b4:	4619      	mov	r1, r3
   b77b6:	ec53 2b18 	vmov	r2, r3, d8
   b77ba:	f000 fd53 	bl	b8264 <__aeabi_dmul>
   b77be:	ec41 0b10 	vmov	d0, r0, r1
   b77c2:	e42d      	b.n	b7020 <__ieee754_pow+0x98>
   b77c4:	f1bb 0f00 	cmp.w	fp, #0
   b77c8:	f6ff aca0 	blt.w	b710c <__ieee754_pow+0x184>
   b77cc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b7888 <__ieee754_pow+0x900>
   b77d0:	e426      	b.n	b7020 <__ieee754_pow+0x98>
   b77d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b78b0 <__ieee754_pow+0x928>
   b77d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b77da:	4563      	cmp	r3, ip
   b77dc:	f340 80e7 	ble.w	b79ae <__ieee754_pow+0xa26>
   b77e0:	4b32      	ldr	r3, [pc, #200]	; (b78ac <__ieee754_pow+0x924>)
   b77e2:	440b      	add	r3, r1
   b77e4:	4303      	orrs	r3, r0
   b77e6:	d10a      	bne.n	b77fe <__ieee754_pow+0x876>
   b77e8:	4622      	mov	r2, r4
   b77ea:	462b      	mov	r3, r5
   b77ec:	f000 fb82 	bl	b7ef4 <__aeabi_dsub>
   b77f0:	4632      	mov	r2, r6
   b77f2:	463b      	mov	r3, r7
   b77f4:	f000 ffbc 	bl	b8770 <__aeabi_dcmpge>
   b77f8:	2800      	cmp	r0, #0
   b77fa:	f43f aef3 	beq.w	b75e4 <__ieee754_pow+0x65c>
   b77fe:	a324      	add	r3, pc, #144	; (adr r3, b7890 <__ieee754_pow+0x908>)
   b7800:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7804:	ec51 0b18 	vmov	r0, r1, d8
   b7808:	f000 fd2c 	bl	b8264 <__aeabi_dmul>
   b780c:	a320      	add	r3, pc, #128	; (adr r3, b7890 <__ieee754_pow+0x908>)
   b780e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7812:	f000 fd27 	bl	b8264 <__aeabi_dmul>
   b7816:	ec41 0b10 	vmov	d0, r0, r1
   b781a:	e401      	b.n	b7020 <__ieee754_pow+0x98>
   b781c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b7898 <__ieee754_pow+0x910>
   b7820:	eeb0 8a47 	vmov.f32	s16, s14
   b7824:	eef0 8a67 	vmov.f32	s17, s15
   b7828:	e686      	b.n	b7538 <__ieee754_pow+0x5b0>
   b782a:	f1bb 0f00 	cmp.w	fp, #0
   b782e:	dacd      	bge.n	b77cc <__ieee754_pow+0x844>
   b7830:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7834:	ee00 6a10 	vmov	s0, r6
   b7838:	ee00 3a90 	vmov	s1, r3
   b783c:	f7ff bbf0 	b.w	b7020 <__ieee754_pow+0x98>
   b7840:	652b82fe 	.word	0x652b82fe
   b7844:	3c971547 	.word	0x3c971547
   b7848:	00000000 	.word	0x00000000
   b784c:	3fe62e43 	.word	0x3fe62e43
   b7850:	fefa39ef 	.word	0xfefa39ef
   b7854:	3fe62e42 	.word	0x3fe62e42
   b7858:	0ca86c39 	.word	0x0ca86c39
   b785c:	be205c61 	.word	0xbe205c61
   b7860:	72bea4d0 	.word	0x72bea4d0
   b7864:	3e663769 	.word	0x3e663769
   b7868:	c5d26bf1 	.word	0xc5d26bf1
   b786c:	3ebbbd41 	.word	0x3ebbbd41
   b7870:	af25de2c 	.word	0xaf25de2c
   b7874:	3f11566a 	.word	0x3f11566a
   b7878:	16bebd93 	.word	0x16bebd93
   b787c:	3f66c16c 	.word	0x3f66c16c
   b7880:	5555553e 	.word	0x5555553e
   b7884:	3fc55555 	.word	0x3fc55555
	...
   b7890:	c2f8f359 	.word	0xc2f8f359
   b7894:	01a56e1f 	.word	0x01a56e1f
   b7898:	00000000 	.word	0x00000000
   b789c:	3ff00000 	.word	0x3ff00000
   b78a0:	408fffff 	.word	0x408fffff
   b78a4:	000fffff 	.word	0x000fffff
   b78a8:	3ff00000 	.word	0x3ff00000
   b78ac:	3f6f3400 	.word	0x3f6f3400
   b78b0:	4090cbff 	.word	0x4090cbff
   b78b4:	4598      	cmp	r8, r3
   b78b6:	db85      	blt.n	b77c4 <__ieee754_pow+0x83c>
   b78b8:	4b7d      	ldr	r3, [pc, #500]	; (b7ab0 <__ieee754_pow+0xb28>)
   b78ba:	4598      	cmp	r8, r3
   b78bc:	f73f ac22 	bgt.w	b7104 <__ieee754_pow+0x17c>
   b78c0:	ec51 0b10 	vmov	r0, r1, d0
   b78c4:	4b7a      	ldr	r3, [pc, #488]	; (b7ab0 <__ieee754_pow+0xb28>)
   b78c6:	2200      	movs	r2, #0
   b78c8:	f000 fb14 	bl	b7ef4 <__aeabi_dsub>
   b78cc:	a368      	add	r3, pc, #416	; (adr r3, b7a70 <__ieee754_pow+0xae8>)
   b78ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78d2:	4604      	mov	r4, r0
   b78d4:	460d      	mov	r5, r1
   b78d6:	f000 fcc5 	bl	b8264 <__aeabi_dmul>
   b78da:	a367      	add	r3, pc, #412	; (adr r3, b7a78 <__ieee754_pow+0xaf0>)
   b78dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78e0:	4682      	mov	sl, r0
   b78e2:	468b      	mov	fp, r1
   b78e4:	4620      	mov	r0, r4
   b78e6:	4629      	mov	r1, r5
   b78e8:	f000 fcbc 	bl	b8264 <__aeabi_dmul>
   b78ec:	4b71      	ldr	r3, [pc, #452]	; (b7ab4 <__ieee754_pow+0xb2c>)
   b78ee:	ec41 0b18 	vmov	d8, r0, r1
   b78f2:	2200      	movs	r2, #0
   b78f4:	4620      	mov	r0, r4
   b78f6:	4629      	mov	r1, r5
   b78f8:	f000 fcb4 	bl	b8264 <__aeabi_dmul>
   b78fc:	4602      	mov	r2, r0
   b78fe:	460b      	mov	r3, r1
   b7900:	a15f      	add	r1, pc, #380	; (adr r1, b7a80 <__ieee754_pow+0xaf8>)
   b7902:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7906:	f000 faf5 	bl	b7ef4 <__aeabi_dsub>
   b790a:	4622      	mov	r2, r4
   b790c:	462b      	mov	r3, r5
   b790e:	f000 fca9 	bl	b8264 <__aeabi_dmul>
   b7912:	4602      	mov	r2, r0
   b7914:	460b      	mov	r3, r1
   b7916:	2000      	movs	r0, #0
   b7918:	4967      	ldr	r1, [pc, #412]	; (b7ab8 <__ieee754_pow+0xb30>)
   b791a:	f000 faeb 	bl	b7ef4 <__aeabi_dsub>
   b791e:	4622      	mov	r2, r4
   b7920:	4680      	mov	r8, r0
   b7922:	4689      	mov	r9, r1
   b7924:	462b      	mov	r3, r5
   b7926:	4620      	mov	r0, r4
   b7928:	4629      	mov	r1, r5
   b792a:	f000 fc9b 	bl	b8264 <__aeabi_dmul>
   b792e:	4602      	mov	r2, r0
   b7930:	460b      	mov	r3, r1
   b7932:	4640      	mov	r0, r8
   b7934:	4649      	mov	r1, r9
   b7936:	f000 fc95 	bl	b8264 <__aeabi_dmul>
   b793a:	a353      	add	r3, pc, #332	; (adr r3, b7a88 <__ieee754_pow+0xb00>)
   b793c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7940:	f000 fc90 	bl	b8264 <__aeabi_dmul>
   b7944:	4602      	mov	r2, r0
   b7946:	460b      	mov	r3, r1
   b7948:	ec51 0b18 	vmov	r0, r1, d8
   b794c:	f000 fad2 	bl	b7ef4 <__aeabi_dsub>
   b7950:	4680      	mov	r8, r0
   b7952:	4689      	mov	r9, r1
   b7954:	4642      	mov	r2, r8
   b7956:	464b      	mov	r3, r9
   b7958:	4650      	mov	r0, sl
   b795a:	4659      	mov	r1, fp
   b795c:	f000 facc 	bl	b7ef8 <__adddf3>
   b7960:	2000      	movs	r0, #0
   b7962:	4652      	mov	r2, sl
   b7964:	465b      	mov	r3, fp
   b7966:	4604      	mov	r4, r0
   b7968:	460d      	mov	r5, r1
   b796a:	e591      	b.n	b7490 <__ieee754_pow+0x508>
   b796c:	4622      	mov	r2, r4
   b796e:	462b      	mov	r3, r5
   b7970:	4620      	mov	r0, r4
   b7972:	4629      	mov	r1, r5
   b7974:	f000 fc76 	bl	b8264 <__aeabi_dmul>
   b7978:	ec41 0b10 	vmov	d0, r0, r1
   b797c:	f7ff bb50 	b.w	b7020 <__ieee754_pow+0x98>
   b7980:	494b      	ldr	r1, [pc, #300]	; (b7ab0 <__ieee754_pow+0xb28>)
   b7982:	2000      	movs	r0, #0
   b7984:	4622      	mov	r2, r4
   b7986:	462b      	mov	r3, r5
   b7988:	f000 fd96 	bl	b84b8 <__aeabi_ddiv>
   b798c:	ec41 0b10 	vmov	d0, r0, r1
   b7990:	f7ff bb46 	b.w	b7020 <__ieee754_pow+0x98>
   b7994:	2b00      	cmp	r3, #0
   b7996:	d144      	bne.n	b7a22 <__ieee754_pow+0xa9a>
   b7998:	f1c1 0114 	rsb	r1, r1, #20
   b799c:	fa4a f001 	asr.w	r0, sl, r1
   b79a0:	fa00 f101 	lsl.w	r1, r0, r1
   b79a4:	4551      	cmp	r1, sl
   b79a6:	d05a      	beq.n	b7a5e <__ieee754_pow+0xad6>
   b79a8:	9300      	str	r3, [sp, #0]
   b79aa:	f7ff bb17 	b.w	b6fdc <__ieee754_pow+0x54>
   b79ae:	4a42      	ldr	r2, [pc, #264]	; (b7ab8 <__ieee754_pow+0xb30>)
   b79b0:	4293      	cmp	r3, r2
   b79b2:	dc5b      	bgt.n	b7a6c <__ieee754_pow+0xae4>
   b79b4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b79b8:	9102      	str	r1, [sp, #8]
   b79ba:	9100      	str	r1, [sp, #0]
   b79bc:	e646      	b.n	b764c <__ieee754_pow+0x6c4>
   b79be:	a334      	add	r3, pc, #208	; (adr r3, b7a90 <__ieee754_pow+0xb08>)
   b79c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b79c4:	ec51 0b18 	vmov	r0, r1, d8
   b79c8:	f000 fc4c 	bl	b8264 <__aeabi_dmul>
   b79cc:	a330      	add	r3, pc, #192	; (adr r3, b7a90 <__ieee754_pow+0xb08>)
   b79ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b79d2:	f000 fc47 	bl	b8264 <__aeabi_dmul>
   b79d6:	ec41 0b10 	vmov	d0, r0, r1
   b79da:	f7ff bb21 	b.w	b7020 <__ieee754_pow+0x98>
   b79de:	9b00      	ldr	r3, [sp, #0]
   b79e0:	2b01      	cmp	r3, #1
   b79e2:	f47f ab1d 	bne.w	b7020 <__ieee754_pow+0x98>
   b79e6:	ee10 1a90 	vmov	r1, s1
   b79ea:	ee10 2a10 	vmov	r2, s0
   b79ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b79f2:	ec43 2b10 	vmov	d0, r2, r3
   b79f6:	f7ff bb13 	b.w	b7020 <__ieee754_pow+0x98>
   b79fa:	ed9f 7b27 	vldr	d7, [pc, #156]	; b7a98 <__ieee754_pow+0xb10>
   b79fe:	eeb0 ca47 	vmov.f32	s24, s14
   b7a02:	eef0 ca67 	vmov.f32	s25, s15
   b7a06:	ed9f 7b26 	vldr	d7, [pc, #152]	; b7aa0 <__ieee754_pow+0xb18>
   b7a0a:	eeb0 da47 	vmov.f32	s26, s14
   b7a0e:	eef0 da67 	vmov.f32	s27, s15
   b7a12:	ed9f 7b25 	vldr	d7, [pc, #148]	; b7aa8 <__ieee754_pow+0xb20>
   b7a16:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b7a1a:	ec53 2b17 	vmov	r2, r3, d7
   b7a1e:	f7ff bbeb 	b.w	b71f8 <__ieee754_pow+0x270>
   b7a22:	ec45 4b10 	vmov	d0, r4, r5
   b7a26:	9200      	str	r2, [sp, #0]
   b7a28:	f000 f914 	bl	b7c54 <fabs>
   b7a2c:	9a00      	ldr	r2, [sp, #0]
   b7a2e:	2a00      	cmp	r2, #0
   b7a30:	f47f ab92 	bne.w	b7158 <__ieee754_pow+0x1d0>
   b7a34:	9200      	str	r2, [sp, #0]
   b7a36:	f7ff bb26 	b.w	b7086 <__ieee754_pow+0xfe>
   b7a3a:	ec41 0b10 	vmov	d0, r0, r1
   b7a3e:	9800      	ldr	r0, [sp, #0]
   b7a40:	f000 f9c2 	bl	b7dc8 <scalbn>
   b7a44:	ec51 0b10 	vmov	r0, r1, d0
   b7a48:	e6b5      	b.n	b77b6 <__ieee754_pow+0x82e>
   b7a4a:	f000 0001 	and.w	r0, r0, #1
   b7a4e:	f1c0 0102 	rsb	r1, r0, #2
   b7a52:	9100      	str	r1, [sp, #0]
   b7a54:	2b00      	cmp	r3, #0
   b7a56:	f43f aac1 	beq.w	b6fdc <__ieee754_pow+0x54>
   b7a5a:	f7ff bb0d 	b.w	b7078 <__ieee754_pow+0xf0>
   b7a5e:	f000 0001 	and.w	r0, r0, #1
   b7a62:	f1c0 0302 	rsb	r3, r0, #2
   b7a66:	9300      	str	r3, [sp, #0]
   b7a68:	f7ff bab8 	b.w	b6fdc <__ieee754_pow+0x54>
   b7a6c:	151b      	asrs	r3, r3, #20
   b7a6e:	e5bb      	b.n	b75e8 <__ieee754_pow+0x660>
   b7a70:	60000000 	.word	0x60000000
   b7a74:	3ff71547 	.word	0x3ff71547
   b7a78:	f85ddf44 	.word	0xf85ddf44
   b7a7c:	3e54ae0b 	.word	0x3e54ae0b
   b7a80:	55555555 	.word	0x55555555
   b7a84:	3fd55555 	.word	0x3fd55555
   b7a88:	652b82fe 	.word	0x652b82fe
   b7a8c:	3ff71547 	.word	0x3ff71547
   b7a90:	8800759c 	.word	0x8800759c
   b7a94:	7e37e43c 	.word	0x7e37e43c
   b7a98:	40000000 	.word	0x40000000
   b7a9c:	3fe2b803 	.word	0x3fe2b803
   b7aa0:	43cfd006 	.word	0x43cfd006
   b7aa4:	3e4cfdeb 	.word	0x3e4cfdeb
   b7aa8:	00000000 	.word	0x00000000
   b7aac:	3ff80000 	.word	0x3ff80000
   b7ab0:	3ff00000 	.word	0x3ff00000
   b7ab4:	3fd00000 	.word	0x3fd00000
   b7ab8:	3fe00000 	.word	0x3fe00000

000b7abc <__ieee754_sqrt>:
   b7abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ac0:	4a63      	ldr	r2, [pc, #396]	; (b7c50 <__ieee754_sqrt+0x194>)
   b7ac2:	ec55 4b10 	vmov	r4, r5, d0
   b7ac6:	43aa      	bics	r2, r5
   b7ac8:	f000 809f 	beq.w	b7c0a <__ieee754_sqrt+0x14e>
   b7acc:	2d00      	cmp	r5, #0
   b7ace:	ee10 ca10 	vmov	ip, s0
   b7ad2:	462b      	mov	r3, r5
   b7ad4:	dd54      	ble.n	b7b80 <__ieee754_sqrt+0xc4>
   b7ad6:	1529      	asrs	r1, r5, #20
   b7ad8:	d063      	beq.n	b7ba2 <__ieee754_sqrt+0xe6>
   b7ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7ade:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b7ae2:	07c9      	lsls	r1, r1, #31
   b7ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7ae8:	d404      	bmi.n	b7af4 <__ieee754_sqrt+0x38>
   b7aea:	005b      	lsls	r3, r3, #1
   b7aec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7af0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7af4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b7af8:	2600      	movs	r6, #0
   b7afa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b7afe:	107f      	asrs	r7, r7, #1
   b7b00:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7b04:	f04f 0e16 	mov.w	lr, #22
   b7b08:	4634      	mov	r4, r6
   b7b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b7b0e:	18a1      	adds	r1, r4, r2
   b7b10:	4299      	cmp	r1, r3
   b7b12:	dc02      	bgt.n	b7b1a <__ieee754_sqrt+0x5e>
   b7b14:	1a5b      	subs	r3, r3, r1
   b7b16:	188c      	adds	r4, r1, r2
   b7b18:	4416      	add	r6, r2
   b7b1a:	005b      	lsls	r3, r3, #1
   b7b1c:	f1be 0e01 	subs.w	lr, lr, #1
   b7b20:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7b24:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7b28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7b2c:	d1ef      	bne.n	b7b0e <__ieee754_sqrt+0x52>
   b7b2e:	4675      	mov	r5, lr
   b7b30:	2020      	movs	r0, #32
   b7b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b7b36:	e00a      	b.n	b7b4e <__ieee754_sqrt+0x92>
   b7b38:	d044      	beq.n	b7bc4 <__ieee754_sqrt+0x108>
   b7b3a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b7b3e:	3801      	subs	r0, #1
   b7b40:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b7b44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7b48:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7b4c:	d043      	beq.n	b7bd6 <__ieee754_sqrt+0x11a>
   b7b4e:	42a3      	cmp	r3, r4
   b7b50:	eb02 010e 	add.w	r1, r2, lr
   b7b54:	ddf0      	ble.n	b7b38 <__ieee754_sqrt+0x7c>
   b7b56:	2900      	cmp	r1, #0
   b7b58:	eb01 0e02 	add.w	lr, r1, r2
   b7b5c:	db0a      	blt.n	b7b74 <__ieee754_sqrt+0xb8>
   b7b5e:	46a0      	mov	r8, r4
   b7b60:	1b1b      	subs	r3, r3, r4
   b7b62:	4561      	cmp	r1, ip
   b7b64:	bf88      	it	hi
   b7b66:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b7b6a:	ebac 0c01 	sub.w	ip, ip, r1
   b7b6e:	4415      	add	r5, r2
   b7b70:	4644      	mov	r4, r8
   b7b72:	e7e2      	b.n	b7b3a <__ieee754_sqrt+0x7e>
   b7b74:	f1be 0f00 	cmp.w	lr, #0
   b7b78:	dbf1      	blt.n	b7b5e <__ieee754_sqrt+0xa2>
   b7b7a:	f104 0801 	add.w	r8, r4, #1
   b7b7e:	e7ef      	b.n	b7b60 <__ieee754_sqrt+0xa4>
   b7b80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b7b84:	4322      	orrs	r2, r4
   b7b86:	d038      	beq.n	b7bfa <__ieee754_sqrt+0x13e>
   b7b88:	2d00      	cmp	r5, #0
   b7b8a:	d14e      	bne.n	b7c2a <__ieee754_sqrt+0x16e>
   b7b8c:	4629      	mov	r1, r5
   b7b8e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b7b92:	3915      	subs	r1, #21
   b7b94:	4613      	mov	r3, r2
   b7b96:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b7b9a:	2a00      	cmp	r2, #0
   b7b9c:	d0f7      	beq.n	b7b8e <__ieee754_sqrt+0xd2>
   b7b9e:	02d6      	lsls	r6, r2, #11
   b7ba0:	d450      	bmi.n	b7c44 <__ieee754_sqrt+0x188>
   b7ba2:	2000      	movs	r0, #0
   b7ba4:	005b      	lsls	r3, r3, #1
   b7ba6:	02dd      	lsls	r5, r3, #11
   b7ba8:	4604      	mov	r4, r0
   b7baa:	f100 0001 	add.w	r0, r0, #1
   b7bae:	d5f9      	bpl.n	b7ba4 <__ieee754_sqrt+0xe8>
   b7bb0:	461a      	mov	r2, r3
   b7bb2:	4663      	mov	r3, ip
   b7bb4:	fa0c fc00 	lsl.w	ip, ip, r0
   b7bb8:	f1c0 0020 	rsb	r0, r0, #32
   b7bbc:	40c3      	lsrs	r3, r0
   b7bbe:	1b09      	subs	r1, r1, r4
   b7bc0:	4313      	orrs	r3, r2
   b7bc2:	e78a      	b.n	b7ada <__ieee754_sqrt+0x1e>
   b7bc4:	4561      	cmp	r1, ip
   b7bc6:	d8b8      	bhi.n	b7b3a <__ieee754_sqrt+0x7e>
   b7bc8:	2900      	cmp	r1, #0
   b7bca:	eb01 0e02 	add.w	lr, r1, r2
   b7bce:	dbd1      	blt.n	b7b74 <__ieee754_sqrt+0xb8>
   b7bd0:	4698      	mov	r8, r3
   b7bd2:	2300      	movs	r3, #0
   b7bd4:	e7c9      	b.n	b7b6a <__ieee754_sqrt+0xae>
   b7bd6:	ea53 030c 	orrs.w	r3, r3, ip
   b7bda:	d110      	bne.n	b7bfe <__ieee754_sqrt+0x142>
   b7bdc:	0868      	lsrs	r0, r5, #1
   b7bde:	1071      	asrs	r1, r6, #1
   b7be0:	07f3      	lsls	r3, r6, #31
   b7be2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b7be6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b7bea:	bf48      	it	mi
   b7bec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b7bf0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b7bf4:	4602      	mov	r2, r0
   b7bf6:	ec43 2b10 	vmov	d0, r2, r3
   b7bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7bfe:	1c6a      	adds	r2, r5, #1
   b7c00:	bf16      	itet	ne
   b7c02:	1c68      	addne	r0, r5, #1
   b7c04:	3601      	addeq	r6, #1
   b7c06:	0840      	lsrne	r0, r0, #1
   b7c08:	e7e9      	b.n	b7bde <__ieee754_sqrt+0x122>
   b7c0a:	ee10 2a10 	vmov	r2, s0
   b7c0e:	ee10 0a10 	vmov	r0, s0
   b7c12:	462b      	mov	r3, r5
   b7c14:	4629      	mov	r1, r5
   b7c16:	f000 fb25 	bl	b8264 <__aeabi_dmul>
   b7c1a:	4622      	mov	r2, r4
   b7c1c:	462b      	mov	r3, r5
   b7c1e:	f000 f96b 	bl	b7ef8 <__adddf3>
   b7c22:	ec41 0b10 	vmov	d0, r0, r1
   b7c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7c2a:	ee10 2a10 	vmov	r2, s0
   b7c2e:	4620      	mov	r0, r4
   b7c30:	4629      	mov	r1, r5
   b7c32:	f000 f95f 	bl	b7ef4 <__aeabi_dsub>
   b7c36:	4602      	mov	r2, r0
   b7c38:	460b      	mov	r3, r1
   b7c3a:	f000 fc3d 	bl	b84b8 <__aeabi_ddiv>
   b7c3e:	ec41 0b10 	vmov	d0, r0, r1
   b7c42:	e7da      	b.n	b7bfa <__ieee754_sqrt+0x13e>
   b7c44:	4663      	mov	r3, ip
   b7c46:	2020      	movs	r0, #32
   b7c48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7c4c:	e7b6      	b.n	b7bbc <__ieee754_sqrt+0x100>
   b7c4e:	bf00      	nop
   b7c50:	7ff00000 	.word	0x7ff00000

000b7c54 <fabs>:
   b7c54:	ec51 0b10 	vmov	r0, r1, d0
   b7c58:	ee10 2a10 	vmov	r2, s0
   b7c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7c60:	ec43 2b10 	vmov	d0, r2, r3
   b7c64:	4770      	bx	lr
   b7c66:	bf00      	nop

000b7c68 <finite>:
   b7c68:	b082      	sub	sp, #8
   b7c6a:	ed8d 0b00 	vstr	d0, [sp]
   b7c6e:	9801      	ldr	r0, [sp, #4]
   b7c70:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b7c74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7c78:	0fc0      	lsrs	r0, r0, #31
   b7c7a:	b002      	add	sp, #8
   b7c7c:	4770      	bx	lr
   b7c7e:	bf00      	nop

000b7c80 <nan>:
   b7c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7c88 <nan+0x8>
   b7c84:	4770      	bx	lr
   b7c86:	bf00      	nop
   b7c88:	00000000 	.word	0x00000000
   b7c8c:	7ff80000 	.word	0x7ff80000

000b7c90 <rint>:
   b7c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c92:	ec53 2b10 	vmov	r2, r3, d0
   b7c96:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b7c9a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b7c9e:	2913      	cmp	r1, #19
   b7ca0:	ee10 0a10 	vmov	r0, s0
   b7ca4:	b083      	sub	sp, #12
   b7ca6:	461c      	mov	r4, r3
   b7ca8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b7cac:	dc3a      	bgt.n	b7d24 <rint+0x94>
   b7cae:	2900      	cmp	r1, #0
   b7cb0:	db30      	blt.n	b7d14 <rint+0x84>
   b7cb2:	4d42      	ldr	r5, [pc, #264]	; (b7dbc <rint+0x12c>)
   b7cb4:	fa45 fc01 	asr.w	ip, r5, r1
   b7cb8:	ea03 050c 	and.w	r5, r3, ip
   b7cbc:	4315      	orrs	r5, r2
   b7cbe:	d02d      	beq.n	b7d1c <rint+0x8c>
   b7cc0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b7cc4:	4318      	orrs	r0, r3
   b7cc6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b7cca:	d00c      	beq.n	b7ce6 <rint+0x56>
   b7ccc:	ea24 0c0c 	bic.w	ip, r4, ip
   b7cd0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b7cd4:	2913      	cmp	r1, #19
   b7cd6:	fa44 f101 	asr.w	r1, r4, r1
   b7cda:	bf0c      	ite	eq
   b7cdc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b7ce0:	2000      	movne	r0, #0
   b7ce2:	ea4c 0401 	orr.w	r4, ip, r1
   b7ce6:	4936      	ldr	r1, [pc, #216]	; (b7dc0 <rint+0x130>)
   b7ce8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b7cec:	4623      	mov	r3, r4
   b7cee:	e9de 4500 	ldrd	r4, r5, [lr]
   b7cf2:	4602      	mov	r2, r0
   b7cf4:	4629      	mov	r1, r5
   b7cf6:	4620      	mov	r0, r4
   b7cf8:	f000 f8fe 	bl	b7ef8 <__adddf3>
   b7cfc:	e9cd 0100 	strd	r0, r1, [sp]
   b7d00:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7d04:	4622      	mov	r2, r4
   b7d06:	462b      	mov	r3, r5
   b7d08:	f000 f8f4 	bl	b7ef4 <__aeabi_dsub>
   b7d0c:	ec41 0b10 	vmov	d0, r0, r1
   b7d10:	b003      	add	sp, #12
   b7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7d18:	4311      	orrs	r1, r2
   b7d1a:	d124      	bne.n	b7d66 <rint+0xd6>
   b7d1c:	ec43 2b10 	vmov	d0, r2, r3
   b7d20:	b003      	add	sp, #12
   b7d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7d24:	2933      	cmp	r1, #51	; 0x33
   b7d26:	dd08      	ble.n	b7d3a <rint+0xaa>
   b7d28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7d2c:	d1f6      	bne.n	b7d1c <rint+0x8c>
   b7d2e:	4619      	mov	r1, r3
   b7d30:	f000 f8e2 	bl	b7ef8 <__adddf3>
   b7d34:	ec41 0b10 	vmov	d0, r0, r1
   b7d38:	e7f2      	b.n	b7d20 <rint+0x90>
   b7d3a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7d42:	fa21 f10c 	lsr.w	r1, r1, ip
   b7d46:	420a      	tst	r2, r1
   b7d48:	d0e8      	beq.n	b7d1c <rint+0x8c>
   b7d4a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7d4e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b7d52:	d0c8      	beq.n	b7ce6 <rint+0x56>
   b7d54:	ea20 0303 	bic.w	r3, r0, r3
   b7d58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b7d5c:	fa40 fc0c 	asr.w	ip, r0, ip
   b7d60:	ea43 000c 	orr.w	r0, r3, ip
   b7d64:	e7bf      	b.n	b7ce6 <rint+0x56>
   b7d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7d6a:	4318      	orrs	r0, r3
   b7d6c:	4a14      	ldr	r2, [pc, #80]	; (b7dc0 <rint+0x130>)
   b7d6e:	4243      	negs	r3, r0
   b7d70:	4303      	orrs	r3, r0
   b7d72:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b7d76:	0b1b      	lsrs	r3, r3, #12
   b7d78:	0c62      	lsrs	r2, r4, #17
   b7d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b7d7e:	0452      	lsls	r2, r2, #17
   b7d80:	ea43 0702 	orr.w	r7, r3, r2
   b7d84:	463b      	mov	r3, r7
   b7d86:	e9de 6700 	ldrd	r6, r7, [lr]
   b7d8a:	ee10 2a10 	vmov	r2, s0
   b7d8e:	4630      	mov	r0, r6
   b7d90:	4639      	mov	r1, r7
   b7d92:	f000 f8b1 	bl	b7ef8 <__adddf3>
   b7d96:	e9cd 0100 	strd	r0, r1, [sp]
   b7d9a:	4632      	mov	r2, r6
   b7d9c:	463b      	mov	r3, r7
   b7d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7da2:	f000 f8a7 	bl	b7ef4 <__aeabi_dsub>
   b7da6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b7daa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7dae:	4602      	mov	r2, r0
   b7db0:	ea41 0304 	orr.w	r3, r1, r4
   b7db4:	ec43 2b10 	vmov	d0, r2, r3
   b7db8:	b003      	add	sp, #12
   b7dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7dbc:	000fffff 	.word	0x000fffff
   b7dc0:	000b9380 	.word	0x000b9380
   b7dc4:	00000000 	.word	0x00000000

000b7dc8 <scalbn>:
   b7dc8:	b538      	push	{r3, r4, r5, lr}
   b7dca:	ec53 2b10 	vmov	r2, r3, d0
   b7dce:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b7dd2:	4604      	mov	r4, r0
   b7dd4:	469c      	mov	ip, r3
   b7dd6:	bb89      	cbnz	r1, b7e3c <scalbn+0x74>
   b7dd8:	ee10 1a10 	vmov	r1, s0
   b7ddc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b7de0:	ea5c 0101 	orrs.w	r1, ip, r1
   b7de4:	d029      	beq.n	b7e3a <scalbn+0x72>
   b7de6:	4619      	mov	r1, r3
   b7de8:	2200      	movs	r2, #0
   b7dea:	4b3d      	ldr	r3, [pc, #244]	; (b7ee0 <scalbn+0x118>)
   b7dec:	4d3d      	ldr	r5, [pc, #244]	; (b7ee4 <scalbn+0x11c>)
   b7dee:	ee10 0a10 	vmov	r0, s0
   b7df2:	f000 fa37 	bl	b8264 <__aeabi_dmul>
   b7df6:	42ac      	cmp	r4, r5
   b7df8:	4602      	mov	r2, r0
   b7dfa:	460b      	mov	r3, r1
   b7dfc:	db16      	blt.n	b7e2c <scalbn+0x64>
   b7dfe:	468c      	mov	ip, r1
   b7e00:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b7e04:	3936      	subs	r1, #54	; 0x36
   b7e06:	4421      	add	r1, r4
   b7e08:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b7e0c:	4281      	cmp	r1, r0
   b7e0e:	dc21      	bgt.n	b7e54 <scalbn+0x8c>
   b7e10:	2900      	cmp	r1, #0
   b7e12:	dc47      	bgt.n	b7ea4 <scalbn+0xdc>
   b7e14:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7e18:	da34      	bge.n	b7e84 <scalbn+0xbc>
   b7e1a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7e1e:	428c      	cmp	r4, r1
   b7e20:	dc18      	bgt.n	b7e54 <scalbn+0x8c>
   b7e22:	2b00      	cmp	r3, #0
   b7e24:	a126      	add	r1, pc, #152	; (adr r1, b7ec0 <scalbn+0xf8>)
   b7e26:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7e2a:	db44      	blt.n	b7eb6 <scalbn+0xee>
   b7e2c:	a324      	add	r3, pc, #144	; (adr r3, b7ec0 <scalbn+0xf8>)
   b7e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e32:	f000 fa17 	bl	b8264 <__aeabi_dmul>
   b7e36:	ec41 0b10 	vmov	d0, r0, r1
   b7e3a:	bd38      	pop	{r3, r4, r5, pc}
   b7e3c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7e40:	4281      	cmp	r1, r0
   b7e42:	d1e0      	bne.n	b7e06 <scalbn+0x3e>
   b7e44:	ee10 0a10 	vmov	r0, s0
   b7e48:	4619      	mov	r1, r3
   b7e4a:	f000 f855 	bl	b7ef8 <__adddf3>
   b7e4e:	ec41 0b10 	vmov	d0, r0, r1
   b7e52:	bd38      	pop	{r3, r4, r5, pc}
   b7e54:	2b00      	cmp	r3, #0
   b7e56:	a11c      	add	r1, pc, #112	; (adr r1, b7ec8 <scalbn+0x100>)
   b7e58:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7e5c:	db07      	blt.n	b7e6e <scalbn+0xa6>
   b7e5e:	a31a      	add	r3, pc, #104	; (adr r3, b7ec8 <scalbn+0x100>)
   b7e60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e64:	f000 f9fe 	bl	b8264 <__aeabi_dmul>
   b7e68:	ec41 0b10 	vmov	d0, r0, r1
   b7e6c:	bd38      	pop	{r3, r4, r5, pc}
   b7e6e:	a118      	add	r1, pc, #96	; (adr r1, b7ed0 <scalbn+0x108>)
   b7e70:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7e74:	a314      	add	r3, pc, #80	; (adr r3, b7ec8 <scalbn+0x100>)
   b7e76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e7a:	f000 f9f3 	bl	b8264 <__aeabi_dmul>
   b7e7e:	ec41 0b10 	vmov	d0, r0, r1
   b7e82:	e7f3      	b.n	b7e6c <scalbn+0xa4>
   b7e84:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7e88:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7e8c:	3136      	adds	r1, #54	; 0x36
   b7e8e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7e92:	4610      	mov	r0, r2
   b7e94:	4619      	mov	r1, r3
   b7e96:	2200      	movs	r2, #0
   b7e98:	4b13      	ldr	r3, [pc, #76]	; (b7ee8 <scalbn+0x120>)
   b7e9a:	f000 f9e3 	bl	b8264 <__aeabi_dmul>
   b7e9e:	ec41 0b10 	vmov	d0, r0, r1
   b7ea2:	bd38      	pop	{r3, r4, r5, pc}
   b7ea4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7ea8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7eac:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7eb0:	ec43 2b10 	vmov	d0, r2, r3
   b7eb4:	bd38      	pop	{r3, r4, r5, pc}
   b7eb6:	a108      	add	r1, pc, #32	; (adr r1, b7ed8 <scalbn+0x110>)
   b7eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7ebc:	e7b6      	b.n	b7e2c <scalbn+0x64>
   b7ebe:	bf00      	nop
   b7ec0:	c2f8f359 	.word	0xc2f8f359
   b7ec4:	01a56e1f 	.word	0x01a56e1f
   b7ec8:	8800759c 	.word	0x8800759c
   b7ecc:	7e37e43c 	.word	0x7e37e43c
   b7ed0:	8800759c 	.word	0x8800759c
   b7ed4:	fe37e43c 	.word	0xfe37e43c
   b7ed8:	c2f8f359 	.word	0xc2f8f359
   b7edc:	81a56e1f 	.word	0x81a56e1f
   b7ee0:	43500000 	.word	0x43500000
   b7ee4:	ffff3cb0 	.word	0xffff3cb0
   b7ee8:	3c900000 	.word	0x3c900000

000b7eec <__aeabi_drsub>:
   b7eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7ef0:	e002      	b.n	b7ef8 <__adddf3>
   b7ef2:	bf00      	nop

000b7ef4 <__aeabi_dsub>:
   b7ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7ef8 <__adddf3>:
   b7ef8:	b530      	push	{r4, r5, lr}
   b7efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7f02:	ea94 0f05 	teq	r4, r5
   b7f06:	bf08      	it	eq
   b7f08:	ea90 0f02 	teqeq	r0, r2
   b7f0c:	bf1f      	itttt	ne
   b7f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7f12:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7f1e:	f000 80e2 	beq.w	b80e6 <__adddf3+0x1ee>
   b7f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7f2a:	bfb8      	it	lt
   b7f2c:	426d      	neglt	r5, r5
   b7f2e:	dd0c      	ble.n	b7f4a <__adddf3+0x52>
   b7f30:	442c      	add	r4, r5
   b7f32:	ea80 0202 	eor.w	r2, r0, r2
   b7f36:	ea81 0303 	eor.w	r3, r1, r3
   b7f3a:	ea82 0000 	eor.w	r0, r2, r0
   b7f3e:	ea83 0101 	eor.w	r1, r3, r1
   b7f42:	ea80 0202 	eor.w	r2, r0, r2
   b7f46:	ea81 0303 	eor.w	r3, r1, r3
   b7f4a:	2d36      	cmp	r5, #54	; 0x36
   b7f4c:	bf88      	it	hi
   b7f4e:	bd30      	pophi	{r4, r5, pc}
   b7f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7f60:	d002      	beq.n	b7f68 <__adddf3+0x70>
   b7f62:	4240      	negs	r0, r0
   b7f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7f74:	d002      	beq.n	b7f7c <__adddf3+0x84>
   b7f76:	4252      	negs	r2, r2
   b7f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7f7c:	ea94 0f05 	teq	r4, r5
   b7f80:	f000 80a7 	beq.w	b80d2 <__adddf3+0x1da>
   b7f84:	f1a4 0401 	sub.w	r4, r4, #1
   b7f88:	f1d5 0e20 	rsbs	lr, r5, #32
   b7f8c:	db0d      	blt.n	b7faa <__adddf3+0xb2>
   b7f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7f92:	fa22 f205 	lsr.w	r2, r2, r5
   b7f96:	1880      	adds	r0, r0, r2
   b7f98:	f141 0100 	adc.w	r1, r1, #0
   b7f9c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7fa0:	1880      	adds	r0, r0, r2
   b7fa2:	fa43 f305 	asr.w	r3, r3, r5
   b7fa6:	4159      	adcs	r1, r3
   b7fa8:	e00e      	b.n	b7fc8 <__adddf3+0xd0>
   b7faa:	f1a5 0520 	sub.w	r5, r5, #32
   b7fae:	f10e 0e20 	add.w	lr, lr, #32
   b7fb2:	2a01      	cmp	r2, #1
   b7fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7fb8:	bf28      	it	cs
   b7fba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7fbe:	fa43 f305 	asr.w	r3, r3, r5
   b7fc2:	18c0      	adds	r0, r0, r3
   b7fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7fcc:	d507      	bpl.n	b7fde <__adddf3+0xe6>
   b7fce:	f04f 0e00 	mov.w	lr, #0
   b7fd2:	f1dc 0c00 	rsbs	ip, ip, #0
   b7fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7fda:	eb6e 0101 	sbc.w	r1, lr, r1
   b7fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7fe2:	d31b      	bcc.n	b801c <__adddf3+0x124>
   b7fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7fe8:	d30c      	bcc.n	b8004 <__adddf3+0x10c>
   b7fea:	0849      	lsrs	r1, r1, #1
   b7fec:	ea5f 0030 	movs.w	r0, r0, rrx
   b7ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7ff4:	f104 0401 	add.w	r4, r4, #1
   b7ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8000:	f080 809a 	bcs.w	b8138 <__adddf3+0x240>
   b8004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8008:	bf08      	it	eq
   b800a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b800e:	f150 0000 	adcs.w	r0, r0, #0
   b8012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8016:	ea41 0105 	orr.w	r1, r1, r5
   b801a:	bd30      	pop	{r4, r5, pc}
   b801c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8020:	4140      	adcs	r0, r0
   b8022:	eb41 0101 	adc.w	r1, r1, r1
   b8026:	3c01      	subs	r4, #1
   b8028:	bf28      	it	cs
   b802a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b802e:	d2e9      	bcs.n	b8004 <__adddf3+0x10c>
   b8030:	f091 0f00 	teq	r1, #0
   b8034:	bf04      	itt	eq
   b8036:	4601      	moveq	r1, r0
   b8038:	2000      	moveq	r0, #0
   b803a:	fab1 f381 	clz	r3, r1
   b803e:	bf08      	it	eq
   b8040:	3320      	addeq	r3, #32
   b8042:	f1a3 030b 	sub.w	r3, r3, #11
   b8046:	f1b3 0220 	subs.w	r2, r3, #32
   b804a:	da0c      	bge.n	b8066 <__adddf3+0x16e>
   b804c:	320c      	adds	r2, #12
   b804e:	dd08      	ble.n	b8062 <__adddf3+0x16a>
   b8050:	f102 0c14 	add.w	ip, r2, #20
   b8054:	f1c2 020c 	rsb	r2, r2, #12
   b8058:	fa01 f00c 	lsl.w	r0, r1, ip
   b805c:	fa21 f102 	lsr.w	r1, r1, r2
   b8060:	e00c      	b.n	b807c <__adddf3+0x184>
   b8062:	f102 0214 	add.w	r2, r2, #20
   b8066:	bfd8      	it	le
   b8068:	f1c2 0c20 	rsble	ip, r2, #32
   b806c:	fa01 f102 	lsl.w	r1, r1, r2
   b8070:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8074:	bfdc      	itt	le
   b8076:	ea41 010c 	orrle.w	r1, r1, ip
   b807a:	4090      	lslle	r0, r2
   b807c:	1ae4      	subs	r4, r4, r3
   b807e:	bfa2      	ittt	ge
   b8080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8084:	4329      	orrge	r1, r5
   b8086:	bd30      	popge	{r4, r5, pc}
   b8088:	ea6f 0404 	mvn.w	r4, r4
   b808c:	3c1f      	subs	r4, #31
   b808e:	da1c      	bge.n	b80ca <__adddf3+0x1d2>
   b8090:	340c      	adds	r4, #12
   b8092:	dc0e      	bgt.n	b80b2 <__adddf3+0x1ba>
   b8094:	f104 0414 	add.w	r4, r4, #20
   b8098:	f1c4 0220 	rsb	r2, r4, #32
   b809c:	fa20 f004 	lsr.w	r0, r0, r4
   b80a0:	fa01 f302 	lsl.w	r3, r1, r2
   b80a4:	ea40 0003 	orr.w	r0, r0, r3
   b80a8:	fa21 f304 	lsr.w	r3, r1, r4
   b80ac:	ea45 0103 	orr.w	r1, r5, r3
   b80b0:	bd30      	pop	{r4, r5, pc}
   b80b2:	f1c4 040c 	rsb	r4, r4, #12
   b80b6:	f1c4 0220 	rsb	r2, r4, #32
   b80ba:	fa20 f002 	lsr.w	r0, r0, r2
   b80be:	fa01 f304 	lsl.w	r3, r1, r4
   b80c2:	ea40 0003 	orr.w	r0, r0, r3
   b80c6:	4629      	mov	r1, r5
   b80c8:	bd30      	pop	{r4, r5, pc}
   b80ca:	fa21 f004 	lsr.w	r0, r1, r4
   b80ce:	4629      	mov	r1, r5
   b80d0:	bd30      	pop	{r4, r5, pc}
   b80d2:	f094 0f00 	teq	r4, #0
   b80d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b80da:	bf06      	itte	eq
   b80dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b80e0:	3401      	addeq	r4, #1
   b80e2:	3d01      	subne	r5, #1
   b80e4:	e74e      	b.n	b7f84 <__adddf3+0x8c>
   b80e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b80ea:	bf18      	it	ne
   b80ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b80f0:	d029      	beq.n	b8146 <__adddf3+0x24e>
   b80f2:	ea94 0f05 	teq	r4, r5
   b80f6:	bf08      	it	eq
   b80f8:	ea90 0f02 	teqeq	r0, r2
   b80fc:	d005      	beq.n	b810a <__adddf3+0x212>
   b80fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b8102:	bf04      	itt	eq
   b8104:	4619      	moveq	r1, r3
   b8106:	4610      	moveq	r0, r2
   b8108:	bd30      	pop	{r4, r5, pc}
   b810a:	ea91 0f03 	teq	r1, r3
   b810e:	bf1e      	ittt	ne
   b8110:	2100      	movne	r1, #0
   b8112:	2000      	movne	r0, #0
   b8114:	bd30      	popne	{r4, r5, pc}
   b8116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b811a:	d105      	bne.n	b8128 <__adddf3+0x230>
   b811c:	0040      	lsls	r0, r0, #1
   b811e:	4149      	adcs	r1, r1
   b8120:	bf28      	it	cs
   b8122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8126:	bd30      	pop	{r4, r5, pc}
   b8128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b812c:	bf3c      	itt	cc
   b812e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8132:	bd30      	popcc	{r4, r5, pc}
   b8134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b813c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8140:	f04f 0000 	mov.w	r0, #0
   b8144:	bd30      	pop	{r4, r5, pc}
   b8146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b814a:	bf1a      	itte	ne
   b814c:	4619      	movne	r1, r3
   b814e:	4610      	movne	r0, r2
   b8150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8154:	bf1c      	itt	ne
   b8156:	460b      	movne	r3, r1
   b8158:	4602      	movne	r2, r0
   b815a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b815e:	bf06      	itte	eq
   b8160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8164:	ea91 0f03 	teqeq	r1, r3
   b8168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b816c:	bd30      	pop	{r4, r5, pc}
   b816e:	bf00      	nop

000b8170 <__aeabi_ui2d>:
   b8170:	f090 0f00 	teq	r0, #0
   b8174:	bf04      	itt	eq
   b8176:	2100      	moveq	r1, #0
   b8178:	4770      	bxeq	lr
   b817a:	b530      	push	{r4, r5, lr}
   b817c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8180:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8184:	f04f 0500 	mov.w	r5, #0
   b8188:	f04f 0100 	mov.w	r1, #0
   b818c:	e750      	b.n	b8030 <__adddf3+0x138>
   b818e:	bf00      	nop

000b8190 <__aeabi_i2d>:
   b8190:	f090 0f00 	teq	r0, #0
   b8194:	bf04      	itt	eq
   b8196:	2100      	moveq	r1, #0
   b8198:	4770      	bxeq	lr
   b819a:	b530      	push	{r4, r5, lr}
   b819c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b81a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b81a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b81a8:	bf48      	it	mi
   b81aa:	4240      	negmi	r0, r0
   b81ac:	f04f 0100 	mov.w	r1, #0
   b81b0:	e73e      	b.n	b8030 <__adddf3+0x138>
   b81b2:	bf00      	nop

000b81b4 <__aeabi_f2d>:
   b81b4:	0042      	lsls	r2, r0, #1
   b81b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b81ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b81be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b81c2:	bf1f      	itttt	ne
   b81c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b81c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b81cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b81d0:	4770      	bxne	lr
   b81d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b81d6:	bf08      	it	eq
   b81d8:	4770      	bxeq	lr
   b81da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b81de:	bf04      	itt	eq
   b81e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b81e4:	4770      	bxeq	lr
   b81e6:	b530      	push	{r4, r5, lr}
   b81e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b81ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b81f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b81f4:	e71c      	b.n	b8030 <__adddf3+0x138>
   b81f6:	bf00      	nop

000b81f8 <__aeabi_ul2d>:
   b81f8:	ea50 0201 	orrs.w	r2, r0, r1
   b81fc:	bf08      	it	eq
   b81fe:	4770      	bxeq	lr
   b8200:	b530      	push	{r4, r5, lr}
   b8202:	f04f 0500 	mov.w	r5, #0
   b8206:	e00a      	b.n	b821e <__aeabi_l2d+0x16>

000b8208 <__aeabi_l2d>:
   b8208:	ea50 0201 	orrs.w	r2, r0, r1
   b820c:	bf08      	it	eq
   b820e:	4770      	bxeq	lr
   b8210:	b530      	push	{r4, r5, lr}
   b8212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8216:	d502      	bpl.n	b821e <__aeabi_l2d+0x16>
   b8218:	4240      	negs	r0, r0
   b821a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b821e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8222:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b822a:	f43f aed8 	beq.w	b7fde <__adddf3+0xe6>
   b822e:	f04f 0203 	mov.w	r2, #3
   b8232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8236:	bf18      	it	ne
   b8238:	3203      	addne	r2, #3
   b823a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b823e:	bf18      	it	ne
   b8240:	3203      	addne	r2, #3
   b8242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8246:	f1c2 0320 	rsb	r3, r2, #32
   b824a:	fa00 fc03 	lsl.w	ip, r0, r3
   b824e:	fa20 f002 	lsr.w	r0, r0, r2
   b8252:	fa01 fe03 	lsl.w	lr, r1, r3
   b8256:	ea40 000e 	orr.w	r0, r0, lr
   b825a:	fa21 f102 	lsr.w	r1, r1, r2
   b825e:	4414      	add	r4, r2
   b8260:	e6bd      	b.n	b7fde <__adddf3+0xe6>
   b8262:	bf00      	nop

000b8264 <__aeabi_dmul>:
   b8264:	b570      	push	{r4, r5, r6, lr}
   b8266:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b826a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b826e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8272:	bf1d      	ittte	ne
   b8274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8278:	ea94 0f0c 	teqne	r4, ip
   b827c:	ea95 0f0c 	teqne	r5, ip
   b8280:	f000 f8de 	bleq	b8440 <__aeabi_dmul+0x1dc>
   b8284:	442c      	add	r4, r5
   b8286:	ea81 0603 	eor.w	r6, r1, r3
   b828a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b828e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8296:	bf18      	it	ne
   b8298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b829c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b82a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b82a4:	d038      	beq.n	b8318 <__aeabi_dmul+0xb4>
   b82a6:	fba0 ce02 	umull	ip, lr, r0, r2
   b82aa:	f04f 0500 	mov.w	r5, #0
   b82ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b82b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b82b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b82ba:	f04f 0600 	mov.w	r6, #0
   b82be:	fbe1 5603 	umlal	r5, r6, r1, r3
   b82c2:	f09c 0f00 	teq	ip, #0
   b82c6:	bf18      	it	ne
   b82c8:	f04e 0e01 	orrne.w	lr, lr, #1
   b82cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b82d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b82d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b82d8:	d204      	bcs.n	b82e4 <__aeabi_dmul+0x80>
   b82da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b82de:	416d      	adcs	r5, r5
   b82e0:	eb46 0606 	adc.w	r6, r6, r6
   b82e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b82e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b82ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b82f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b82f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b82f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b82fc:	bf88      	it	hi
   b82fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8302:	d81e      	bhi.n	b8342 <__aeabi_dmul+0xde>
   b8304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8308:	bf08      	it	eq
   b830a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b830e:	f150 0000 	adcs.w	r0, r0, #0
   b8312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8316:	bd70      	pop	{r4, r5, r6, pc}
   b8318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b831c:	ea46 0101 	orr.w	r1, r6, r1
   b8320:	ea40 0002 	orr.w	r0, r0, r2
   b8324:	ea81 0103 	eor.w	r1, r1, r3
   b8328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b832c:	bfc2      	ittt	gt
   b832e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8336:	bd70      	popgt	{r4, r5, r6, pc}
   b8338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b833c:	f04f 0e00 	mov.w	lr, #0
   b8340:	3c01      	subs	r4, #1
   b8342:	f300 80ab 	bgt.w	b849c <__aeabi_dmul+0x238>
   b8346:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b834a:	bfde      	ittt	le
   b834c:	2000      	movle	r0, #0
   b834e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8352:	bd70      	pople	{r4, r5, r6, pc}
   b8354:	f1c4 0400 	rsb	r4, r4, #0
   b8358:	3c20      	subs	r4, #32
   b835a:	da35      	bge.n	b83c8 <__aeabi_dmul+0x164>
   b835c:	340c      	adds	r4, #12
   b835e:	dc1b      	bgt.n	b8398 <__aeabi_dmul+0x134>
   b8360:	f104 0414 	add.w	r4, r4, #20
   b8364:	f1c4 0520 	rsb	r5, r4, #32
   b8368:	fa00 f305 	lsl.w	r3, r0, r5
   b836c:	fa20 f004 	lsr.w	r0, r0, r4
   b8370:	fa01 f205 	lsl.w	r2, r1, r5
   b8374:	ea40 0002 	orr.w	r0, r0, r2
   b8378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b837c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8384:	fa21 f604 	lsr.w	r6, r1, r4
   b8388:	eb42 0106 	adc.w	r1, r2, r6
   b838c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8390:	bf08      	it	eq
   b8392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8396:	bd70      	pop	{r4, r5, r6, pc}
   b8398:	f1c4 040c 	rsb	r4, r4, #12
   b839c:	f1c4 0520 	rsb	r5, r4, #32
   b83a0:	fa00 f304 	lsl.w	r3, r0, r4
   b83a4:	fa20 f005 	lsr.w	r0, r0, r5
   b83a8:	fa01 f204 	lsl.w	r2, r1, r4
   b83ac:	ea40 0002 	orr.w	r0, r0, r2
   b83b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b83b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b83b8:	f141 0100 	adc.w	r1, r1, #0
   b83bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b83c0:	bf08      	it	eq
   b83c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b83c6:	bd70      	pop	{r4, r5, r6, pc}
   b83c8:	f1c4 0520 	rsb	r5, r4, #32
   b83cc:	fa00 f205 	lsl.w	r2, r0, r5
   b83d0:	ea4e 0e02 	orr.w	lr, lr, r2
   b83d4:	fa20 f304 	lsr.w	r3, r0, r4
   b83d8:	fa01 f205 	lsl.w	r2, r1, r5
   b83dc:	ea43 0302 	orr.w	r3, r3, r2
   b83e0:	fa21 f004 	lsr.w	r0, r1, r4
   b83e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b83e8:	fa21 f204 	lsr.w	r2, r1, r4
   b83ec:	ea20 0002 	bic.w	r0, r0, r2
   b83f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b83f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b83f8:	bf08      	it	eq
   b83fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b83fe:	bd70      	pop	{r4, r5, r6, pc}
   b8400:	f094 0f00 	teq	r4, #0
   b8404:	d10f      	bne.n	b8426 <__aeabi_dmul+0x1c2>
   b8406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b840a:	0040      	lsls	r0, r0, #1
   b840c:	eb41 0101 	adc.w	r1, r1, r1
   b8410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8414:	bf08      	it	eq
   b8416:	3c01      	subeq	r4, #1
   b8418:	d0f7      	beq.n	b840a <__aeabi_dmul+0x1a6>
   b841a:	ea41 0106 	orr.w	r1, r1, r6
   b841e:	f095 0f00 	teq	r5, #0
   b8422:	bf18      	it	ne
   b8424:	4770      	bxne	lr
   b8426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b842a:	0052      	lsls	r2, r2, #1
   b842c:	eb43 0303 	adc.w	r3, r3, r3
   b8430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8434:	bf08      	it	eq
   b8436:	3d01      	subeq	r5, #1
   b8438:	d0f7      	beq.n	b842a <__aeabi_dmul+0x1c6>
   b843a:	ea43 0306 	orr.w	r3, r3, r6
   b843e:	4770      	bx	lr
   b8440:	ea94 0f0c 	teq	r4, ip
   b8444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8448:	bf18      	it	ne
   b844a:	ea95 0f0c 	teqne	r5, ip
   b844e:	d00c      	beq.n	b846a <__aeabi_dmul+0x206>
   b8450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8454:	bf18      	it	ne
   b8456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b845a:	d1d1      	bne.n	b8400 <__aeabi_dmul+0x19c>
   b845c:	ea81 0103 	eor.w	r1, r1, r3
   b8460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8464:	f04f 0000 	mov.w	r0, #0
   b8468:	bd70      	pop	{r4, r5, r6, pc}
   b846a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b846e:	bf06      	itte	eq
   b8470:	4610      	moveq	r0, r2
   b8472:	4619      	moveq	r1, r3
   b8474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8478:	d019      	beq.n	b84ae <__aeabi_dmul+0x24a>
   b847a:	ea94 0f0c 	teq	r4, ip
   b847e:	d102      	bne.n	b8486 <__aeabi_dmul+0x222>
   b8480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8484:	d113      	bne.n	b84ae <__aeabi_dmul+0x24a>
   b8486:	ea95 0f0c 	teq	r5, ip
   b848a:	d105      	bne.n	b8498 <__aeabi_dmul+0x234>
   b848c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8490:	bf1c      	itt	ne
   b8492:	4610      	movne	r0, r2
   b8494:	4619      	movne	r1, r3
   b8496:	d10a      	bne.n	b84ae <__aeabi_dmul+0x24a>
   b8498:	ea81 0103 	eor.w	r1, r1, r3
   b849c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b84a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b84a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b84a8:	f04f 0000 	mov.w	r0, #0
   b84ac:	bd70      	pop	{r4, r5, r6, pc}
   b84ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b84b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b84b6:	bd70      	pop	{r4, r5, r6, pc}

000b84b8 <__aeabi_ddiv>:
   b84b8:	b570      	push	{r4, r5, r6, lr}
   b84ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b84be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b84c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b84c6:	bf1d      	ittte	ne
   b84c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b84cc:	ea94 0f0c 	teqne	r4, ip
   b84d0:	ea95 0f0c 	teqne	r5, ip
   b84d4:	f000 f8a7 	bleq	b8626 <__aeabi_ddiv+0x16e>
   b84d8:	eba4 0405 	sub.w	r4, r4, r5
   b84dc:	ea81 0e03 	eor.w	lr, r1, r3
   b84e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b84e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b84e8:	f000 8088 	beq.w	b85fc <__aeabi_ddiv+0x144>
   b84ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b84f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b84f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b84f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b84fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8508:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b850c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8510:	429d      	cmp	r5, r3
   b8512:	bf08      	it	eq
   b8514:	4296      	cmpeq	r6, r2
   b8516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b851a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b851e:	d202      	bcs.n	b8526 <__aeabi_ddiv+0x6e>
   b8520:	085b      	lsrs	r3, r3, #1
   b8522:	ea4f 0232 	mov.w	r2, r2, rrx
   b8526:	1ab6      	subs	r6, r6, r2
   b8528:	eb65 0503 	sbc.w	r5, r5, r3
   b852c:	085b      	lsrs	r3, r3, #1
   b852e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b853a:	ebb6 0e02 	subs.w	lr, r6, r2
   b853e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8542:	bf22      	ittt	cs
   b8544:	1ab6      	subcs	r6, r6, r2
   b8546:	4675      	movcs	r5, lr
   b8548:	ea40 000c 	orrcs.w	r0, r0, ip
   b854c:	085b      	lsrs	r3, r3, #1
   b854e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8552:	ebb6 0e02 	subs.w	lr, r6, r2
   b8556:	eb75 0e03 	sbcs.w	lr, r5, r3
   b855a:	bf22      	ittt	cs
   b855c:	1ab6      	subcs	r6, r6, r2
   b855e:	4675      	movcs	r5, lr
   b8560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8564:	085b      	lsrs	r3, r3, #1
   b8566:	ea4f 0232 	mov.w	r2, r2, rrx
   b856a:	ebb6 0e02 	subs.w	lr, r6, r2
   b856e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8572:	bf22      	ittt	cs
   b8574:	1ab6      	subcs	r6, r6, r2
   b8576:	4675      	movcs	r5, lr
   b8578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b857c:	085b      	lsrs	r3, r3, #1
   b857e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8582:	ebb6 0e02 	subs.w	lr, r6, r2
   b8586:	eb75 0e03 	sbcs.w	lr, r5, r3
   b858a:	bf22      	ittt	cs
   b858c:	1ab6      	subcs	r6, r6, r2
   b858e:	4675      	movcs	r5, lr
   b8590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8594:	ea55 0e06 	orrs.w	lr, r5, r6
   b8598:	d018      	beq.n	b85cc <__aeabi_ddiv+0x114>
   b859a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b859e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b85a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b85a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b85aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b85ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b85b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b85b6:	d1c0      	bne.n	b853a <__aeabi_ddiv+0x82>
   b85b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b85bc:	d10b      	bne.n	b85d6 <__aeabi_ddiv+0x11e>
   b85be:	ea41 0100 	orr.w	r1, r1, r0
   b85c2:	f04f 0000 	mov.w	r0, #0
   b85c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b85ca:	e7b6      	b.n	b853a <__aeabi_ddiv+0x82>
   b85cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b85d0:	bf04      	itt	eq
   b85d2:	4301      	orreq	r1, r0
   b85d4:	2000      	moveq	r0, #0
   b85d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b85da:	bf88      	it	hi
   b85dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b85e0:	f63f aeaf 	bhi.w	b8342 <__aeabi_dmul+0xde>
   b85e4:	ebb5 0c03 	subs.w	ip, r5, r3
   b85e8:	bf04      	itt	eq
   b85ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b85ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b85f2:	f150 0000 	adcs.w	r0, r0, #0
   b85f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b85fa:	bd70      	pop	{r4, r5, r6, pc}
   b85fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8608:	bfc2      	ittt	gt
   b860a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b860e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8612:	bd70      	popgt	{r4, r5, r6, pc}
   b8614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8618:	f04f 0e00 	mov.w	lr, #0
   b861c:	3c01      	subs	r4, #1
   b861e:	e690      	b.n	b8342 <__aeabi_dmul+0xde>
   b8620:	ea45 0e06 	orr.w	lr, r5, r6
   b8624:	e68d      	b.n	b8342 <__aeabi_dmul+0xde>
   b8626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b862a:	ea94 0f0c 	teq	r4, ip
   b862e:	bf08      	it	eq
   b8630:	ea95 0f0c 	teqeq	r5, ip
   b8634:	f43f af3b 	beq.w	b84ae <__aeabi_dmul+0x24a>
   b8638:	ea94 0f0c 	teq	r4, ip
   b863c:	d10a      	bne.n	b8654 <__aeabi_ddiv+0x19c>
   b863e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8642:	f47f af34 	bne.w	b84ae <__aeabi_dmul+0x24a>
   b8646:	ea95 0f0c 	teq	r5, ip
   b864a:	f47f af25 	bne.w	b8498 <__aeabi_dmul+0x234>
   b864e:	4610      	mov	r0, r2
   b8650:	4619      	mov	r1, r3
   b8652:	e72c      	b.n	b84ae <__aeabi_dmul+0x24a>
   b8654:	ea95 0f0c 	teq	r5, ip
   b8658:	d106      	bne.n	b8668 <__aeabi_ddiv+0x1b0>
   b865a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b865e:	f43f aefd 	beq.w	b845c <__aeabi_dmul+0x1f8>
   b8662:	4610      	mov	r0, r2
   b8664:	4619      	mov	r1, r3
   b8666:	e722      	b.n	b84ae <__aeabi_dmul+0x24a>
   b8668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b866c:	bf18      	it	ne
   b866e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8672:	f47f aec5 	bne.w	b8400 <__aeabi_dmul+0x19c>
   b8676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b867a:	f47f af0d 	bne.w	b8498 <__aeabi_dmul+0x234>
   b867e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8682:	f47f aeeb 	bne.w	b845c <__aeabi_dmul+0x1f8>
   b8686:	e712      	b.n	b84ae <__aeabi_dmul+0x24a>

000b8688 <__gedf2>:
   b8688:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b868c:	e006      	b.n	b869c <__cmpdf2+0x4>
   b868e:	bf00      	nop

000b8690 <__ledf2>:
   b8690:	f04f 0c01 	mov.w	ip, #1
   b8694:	e002      	b.n	b869c <__cmpdf2+0x4>
   b8696:	bf00      	nop

000b8698 <__cmpdf2>:
   b8698:	f04f 0c01 	mov.w	ip, #1
   b869c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b86a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b86a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b86a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b86ac:	bf18      	it	ne
   b86ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b86b2:	d01b      	beq.n	b86ec <__cmpdf2+0x54>
   b86b4:	b001      	add	sp, #4
   b86b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b86ba:	bf0c      	ite	eq
   b86bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b86c0:	ea91 0f03 	teqne	r1, r3
   b86c4:	bf02      	ittt	eq
   b86c6:	ea90 0f02 	teqeq	r0, r2
   b86ca:	2000      	moveq	r0, #0
   b86cc:	4770      	bxeq	lr
   b86ce:	f110 0f00 	cmn.w	r0, #0
   b86d2:	ea91 0f03 	teq	r1, r3
   b86d6:	bf58      	it	pl
   b86d8:	4299      	cmppl	r1, r3
   b86da:	bf08      	it	eq
   b86dc:	4290      	cmpeq	r0, r2
   b86de:	bf2c      	ite	cs
   b86e0:	17d8      	asrcs	r0, r3, #31
   b86e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b86e6:	f040 0001 	orr.w	r0, r0, #1
   b86ea:	4770      	bx	lr
   b86ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b86f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b86f4:	d102      	bne.n	b86fc <__cmpdf2+0x64>
   b86f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b86fa:	d107      	bne.n	b870c <__cmpdf2+0x74>
   b86fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8704:	d1d6      	bne.n	b86b4 <__cmpdf2+0x1c>
   b8706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b870a:	d0d3      	beq.n	b86b4 <__cmpdf2+0x1c>
   b870c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8710:	4770      	bx	lr
   b8712:	bf00      	nop

000b8714 <__aeabi_cdrcmple>:
   b8714:	4684      	mov	ip, r0
   b8716:	4610      	mov	r0, r2
   b8718:	4662      	mov	r2, ip
   b871a:	468c      	mov	ip, r1
   b871c:	4619      	mov	r1, r3
   b871e:	4663      	mov	r3, ip
   b8720:	e000      	b.n	b8724 <__aeabi_cdcmpeq>
   b8722:	bf00      	nop

000b8724 <__aeabi_cdcmpeq>:
   b8724:	b501      	push	{r0, lr}
   b8726:	f7ff ffb7 	bl	b8698 <__cmpdf2>
   b872a:	2800      	cmp	r0, #0
   b872c:	bf48      	it	mi
   b872e:	f110 0f00 	cmnmi.w	r0, #0
   b8732:	bd01      	pop	{r0, pc}

000b8734 <__aeabi_dcmpeq>:
   b8734:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8738:	f7ff fff4 	bl	b8724 <__aeabi_cdcmpeq>
   b873c:	bf0c      	ite	eq
   b873e:	2001      	moveq	r0, #1
   b8740:	2000      	movne	r0, #0
   b8742:	f85d fb08 	ldr.w	pc, [sp], #8
   b8746:	bf00      	nop

000b8748 <__aeabi_dcmplt>:
   b8748:	f84d ed08 	str.w	lr, [sp, #-8]!
   b874c:	f7ff ffea 	bl	b8724 <__aeabi_cdcmpeq>
   b8750:	bf34      	ite	cc
   b8752:	2001      	movcc	r0, #1
   b8754:	2000      	movcs	r0, #0
   b8756:	f85d fb08 	ldr.w	pc, [sp], #8
   b875a:	bf00      	nop

000b875c <__aeabi_dcmple>:
   b875c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8760:	f7ff ffe0 	bl	b8724 <__aeabi_cdcmpeq>
   b8764:	bf94      	ite	ls
   b8766:	2001      	movls	r0, #1
   b8768:	2000      	movhi	r0, #0
   b876a:	f85d fb08 	ldr.w	pc, [sp], #8
   b876e:	bf00      	nop

000b8770 <__aeabi_dcmpge>:
   b8770:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8774:	f7ff ffce 	bl	b8714 <__aeabi_cdrcmple>
   b8778:	bf94      	ite	ls
   b877a:	2001      	movls	r0, #1
   b877c:	2000      	movhi	r0, #0
   b877e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8782:	bf00      	nop

000b8784 <__aeabi_dcmpgt>:
   b8784:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8788:	f7ff ffc4 	bl	b8714 <__aeabi_cdrcmple>
   b878c:	bf34      	ite	cc
   b878e:	2001      	movcc	r0, #1
   b8790:	2000      	movcs	r0, #0
   b8792:	f85d fb08 	ldr.w	pc, [sp], #8
   b8796:	bf00      	nop

000b8798 <__aeabi_dcmpun>:
   b8798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b879c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b87a0:	d102      	bne.n	b87a8 <__aeabi_dcmpun+0x10>
   b87a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b87a6:	d10a      	bne.n	b87be <__aeabi_dcmpun+0x26>
   b87a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b87ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b87b0:	d102      	bne.n	b87b8 <__aeabi_dcmpun+0x20>
   b87b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b87b6:	d102      	bne.n	b87be <__aeabi_dcmpun+0x26>
   b87b8:	f04f 0000 	mov.w	r0, #0
   b87bc:	4770      	bx	lr
   b87be:	f04f 0001 	mov.w	r0, #1
   b87c2:	4770      	bx	lr

000b87c4 <__aeabi_d2f>:
   b87c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b87c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b87cc:	bf24      	itt	cs
   b87ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b87d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b87d6:	d90d      	bls.n	b87f4 <__aeabi_d2f+0x30>
   b87d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b87dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b87e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b87e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b87e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b87ec:	bf08      	it	eq
   b87ee:	f020 0001 	biceq.w	r0, r0, #1
   b87f2:	4770      	bx	lr
   b87f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b87f8:	d121      	bne.n	b883e <__aeabi_d2f+0x7a>
   b87fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b87fe:	bfbc      	itt	lt
   b8800:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8804:	4770      	bxlt	lr
   b8806:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b880a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b880e:	f1c2 0218 	rsb	r2, r2, #24
   b8812:	f1c2 0c20 	rsb	ip, r2, #32
   b8816:	fa10 f30c 	lsls.w	r3, r0, ip
   b881a:	fa20 f002 	lsr.w	r0, r0, r2
   b881e:	bf18      	it	ne
   b8820:	f040 0001 	orrne.w	r0, r0, #1
   b8824:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8828:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b882c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8830:	ea40 000c 	orr.w	r0, r0, ip
   b8834:	fa23 f302 	lsr.w	r3, r3, r2
   b8838:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b883c:	e7cc      	b.n	b87d8 <__aeabi_d2f+0x14>
   b883e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8842:	d107      	bne.n	b8854 <__aeabi_d2f+0x90>
   b8844:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8848:	bf1e      	ittt	ne
   b884a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b884e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8852:	4770      	bxne	lr
   b8854:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8858:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b885c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8860:	4770      	bx	lr
   b8862:	bf00      	nop

000b8864 <atexit>:
   b8864:	2300      	movs	r3, #0
   b8866:	4601      	mov	r1, r0
   b8868:	461a      	mov	r2, r3
   b886a:	4618      	mov	r0, r3
   b886c:	f000 b856 	b.w	b891c <__register_exitproc>

000b8870 <memcpy>:
   b8870:	440a      	add	r2, r1
   b8872:	4291      	cmp	r1, r2
   b8874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8878:	d100      	bne.n	b887c <memcpy+0xc>
   b887a:	4770      	bx	lr
   b887c:	b510      	push	{r4, lr}
   b887e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8882:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8886:	4291      	cmp	r1, r2
   b8888:	d1f9      	bne.n	b887e <memcpy+0xe>
   b888a:	bd10      	pop	{r4, pc}

000b888c <memset>:
   b888c:	4402      	add	r2, r0
   b888e:	4603      	mov	r3, r0
   b8890:	4293      	cmp	r3, r2
   b8892:	d100      	bne.n	b8896 <memset+0xa>
   b8894:	4770      	bx	lr
   b8896:	f803 1b01 	strb.w	r1, [r3], #1
   b889a:	e7f9      	b.n	b8890 <memset+0x4>

000b889c <srand>:
   b889c:	b538      	push	{r3, r4, r5, lr}
   b889e:	4b10      	ldr	r3, [pc, #64]	; (b88e0 <srand+0x44>)
   b88a0:	681d      	ldr	r5, [r3, #0]
   b88a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b88a4:	4604      	mov	r4, r0
   b88a6:	b9b3      	cbnz	r3, b88d6 <srand+0x3a>
   b88a8:	2018      	movs	r0, #24
   b88aa:	f7fd f805 	bl	b58b8 <malloc>
   b88ae:	4602      	mov	r2, r0
   b88b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b88b2:	b920      	cbnz	r0, b88be <srand+0x22>
   b88b4:	4b0b      	ldr	r3, [pc, #44]	; (b88e4 <srand+0x48>)
   b88b6:	480c      	ldr	r0, [pc, #48]	; (b88e8 <srand+0x4c>)
   b88b8:	2142      	movs	r1, #66	; 0x42
   b88ba:	f7fd f825 	bl	b5908 <__assert_func>
   b88be:	490b      	ldr	r1, [pc, #44]	; (b88ec <srand+0x50>)
   b88c0:	4b0b      	ldr	r3, [pc, #44]	; (b88f0 <srand+0x54>)
   b88c2:	e9c0 1300 	strd	r1, r3, [r0]
   b88c6:	4b0b      	ldr	r3, [pc, #44]	; (b88f4 <srand+0x58>)
   b88c8:	6083      	str	r3, [r0, #8]
   b88ca:	230b      	movs	r3, #11
   b88cc:	8183      	strh	r3, [r0, #12]
   b88ce:	2100      	movs	r1, #0
   b88d0:	2001      	movs	r0, #1
   b88d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b88d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b88d8:	2200      	movs	r2, #0
   b88da:	611c      	str	r4, [r3, #16]
   b88dc:	615a      	str	r2, [r3, #20]
   b88de:	bd38      	pop	{r3, r4, r5, pc}
   b88e0:	2003e584 	.word	0x2003e584
   b88e4:	000b9390 	.word	0x000b9390
   b88e8:	000b93a7 	.word	0x000b93a7
   b88ec:	abcd330e 	.word	0xabcd330e
   b88f0:	e66d1234 	.word	0xe66d1234
   b88f4:	0005deec 	.word	0x0005deec

000b88f8 <strcmp>:
   b88f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b88fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8900:	2a01      	cmp	r2, #1
   b8902:	bf28      	it	cs
   b8904:	429a      	cmpcs	r2, r3
   b8906:	d0f7      	beq.n	b88f8 <strcmp>
   b8908:	1ad0      	subs	r0, r2, r3
   b890a:	4770      	bx	lr

000b890c <strlen>:
   b890c:	4603      	mov	r3, r0
   b890e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8912:	2a00      	cmp	r2, #0
   b8914:	d1fb      	bne.n	b890e <strlen+0x2>
   b8916:	1a18      	subs	r0, r3, r0
   b8918:	3801      	subs	r0, #1
   b891a:	4770      	bx	lr

000b891c <__register_exitproc>:
   b891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8920:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b89dc <__register_exitproc+0xc0>
   b8924:	4606      	mov	r6, r0
   b8926:	f8d8 0000 	ldr.w	r0, [r8]
   b892a:	461f      	mov	r7, r3
   b892c:	460d      	mov	r5, r1
   b892e:	4691      	mov	r9, r2
   b8930:	f000 f856 	bl	b89e0 <__retarget_lock_acquire_recursive>
   b8934:	4b25      	ldr	r3, [pc, #148]	; (b89cc <__register_exitproc+0xb0>)
   b8936:	681c      	ldr	r4, [r3, #0]
   b8938:	b934      	cbnz	r4, b8948 <__register_exitproc+0x2c>
   b893a:	4c25      	ldr	r4, [pc, #148]	; (b89d0 <__register_exitproc+0xb4>)
   b893c:	601c      	str	r4, [r3, #0]
   b893e:	4b25      	ldr	r3, [pc, #148]	; (b89d4 <__register_exitproc+0xb8>)
   b8940:	b113      	cbz	r3, b8948 <__register_exitproc+0x2c>
   b8942:	681b      	ldr	r3, [r3, #0]
   b8944:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8948:	6863      	ldr	r3, [r4, #4]
   b894a:	2b1f      	cmp	r3, #31
   b894c:	dd07      	ble.n	b895e <__register_exitproc+0x42>
   b894e:	f8d8 0000 	ldr.w	r0, [r8]
   b8952:	f000 f847 	bl	b89e4 <__retarget_lock_release_recursive>
   b8956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b895e:	b34e      	cbz	r6, b89b4 <__register_exitproc+0x98>
   b8960:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8964:	b988      	cbnz	r0, b898a <__register_exitproc+0x6e>
   b8966:	4b1c      	ldr	r3, [pc, #112]	; (b89d8 <__register_exitproc+0xbc>)
   b8968:	b923      	cbnz	r3, b8974 <__register_exitproc+0x58>
   b896a:	f8d8 0000 	ldr.w	r0, [r8]
   b896e:	f000 f838 	bl	b89e2 <__retarget_lock_release>
   b8972:	e7f0      	b.n	b8956 <__register_exitproc+0x3a>
   b8974:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8978:	f7fc ff9e 	bl	b58b8 <malloc>
   b897c:	2800      	cmp	r0, #0
   b897e:	d0f4      	beq.n	b896a <__register_exitproc+0x4e>
   b8980:	2300      	movs	r3, #0
   b8982:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8986:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b898a:	6863      	ldr	r3, [r4, #4]
   b898c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8990:	2201      	movs	r2, #1
   b8992:	409a      	lsls	r2, r3
   b8994:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8998:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b899c:	4313      	orrs	r3, r2
   b899e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b89a2:	2e02      	cmp	r6, #2
   b89a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b89a8:	bf02      	ittt	eq
   b89aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b89ae:	4313      	orreq	r3, r2
   b89b0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b89b4:	6863      	ldr	r3, [r4, #4]
   b89b6:	f8d8 0000 	ldr.w	r0, [r8]
   b89ba:	1c5a      	adds	r2, r3, #1
   b89bc:	3302      	adds	r3, #2
   b89be:	6062      	str	r2, [r4, #4]
   b89c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b89c4:	f000 f80e 	bl	b89e4 <__retarget_lock_release_recursive>
   b89c8:	2000      	movs	r0, #0
   b89ca:	e7c6      	b.n	b895a <__register_exitproc+0x3e>
   b89cc:	2003e7e8 	.word	0x2003e7e8
   b89d0:	2003e75c 	.word	0x2003e75c
   b89d4:	00000000 	.word	0x00000000
   b89d8:	000b58b9 	.word	0x000b58b9
   b89dc:	2003e5e8 	.word	0x2003e5e8

000b89e0 <__retarget_lock_acquire_recursive>:
   b89e0:	4770      	bx	lr

000b89e2 <__retarget_lock_release>:
   b89e2:	4770      	bx	lr

000b89e4 <__retarget_lock_release_recursive>:
   b89e4:	4770      	bx	lr

000b89e6 <link_code_end>:
	...

000b89e8 <dynalib_user>:
   b89e8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b89f8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8a08:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b8a18:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b8a28:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b8a38:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b8a48:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b8a58:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b8a68:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b8a78:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b8a88:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b8a98:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b8aa8:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b8ab8:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b8ac8:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b8ad8:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b8ae8:	5300 414d 5452 4853 504f 000a 6d53 6b6f     .SMARTSHOP..Smok
   b8af8:	2065 6564 6574 7463 6465 0a21                e detected!..

000b8b05 <_ZL4font>:
   b8b05:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8b15:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8b25:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8b35:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8b45:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8b55:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8b65:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8b75:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8b85:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8b95:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8ba5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8bb5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8bc5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8bd5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8be5:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8bf5:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8c05:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8c15:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8c25:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8c35:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8c45:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8c55:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8c65:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8c75:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8c85:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8c95:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8ca5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8cb5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8cc5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8cd5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8ce5:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8cf5:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8d05:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8d15:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8d25:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8d35:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8d45:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8d55:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8d65:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8d75:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8d85:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8d95:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8da5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8db5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8dc5:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8dd5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8de5:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8df5:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8e05:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8e15:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8e25:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8e35:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8e45:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8e55:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8e65:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8e75:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8e85:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8e95:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8ea5:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8eb5:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8ec5:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8ed5:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8ee5:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8ef5:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8f05:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8f15:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8f25:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8f35:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8f45:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8f55:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8f65:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8f75:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8f85:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8f95:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8fa5:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8fb5:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8fc5:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8fd5:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8fe5:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8ff5:	0012 3c3c 3c3c 0000 0000                     ..<<<<.....

000b9000 <_ZTV12Adafruit_GFX>:
	...
   b9010:	472d 000b 5d09 000b 40a5 000b 4445 000b     -G...]...@..ED..
   b9020:	456b 000b 4587 000b 4503 000b 45a1 000b     kE...E...E...E..
   b9030:	45d7 000b 45f3 000b                         .E...E..

000b9038 <_ZTV16Adafruit_SSD1306>:
	...
   b9040:	4a9d 000b 4b2d 000b 472d 000b 5d09 000b     .J..-K..-G...]..
   b9050:	4aa1 000b 4445 000b 4929 000b 47b9 000b     .J..ED..)I...G..
   b9060:	4503 000b 45a1 000b 45d7 000b 45f3 000b     .E...E...E...E..

000b9070 <CSWTCH.88>:
   b9070:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b9080:	0050 0000                                   P...

000b9084 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b908c <_ZTVN5spark13EthernetClassE>:
	...
   b9094:	599f 000b 5995 000b 598b 000b 5981 000b     .Y...Y...Y...Y..
   b90a4:	5975 000b 5969 000b 5be5 000b 5bed 000b     uY..iY...[...[..
   b90b4:	595d 000b 5955 000b 594b 000b 5941 000b     ]Y..UY..KY..AY..
   b90c4:	5c1d 000b                                   .\..

000b90c8 <_ZTV7TwoWire>:
	...
   b90d0:	59bd 000b 5a07 000b 59df 000b 59bf 000b     .Y...Z...Y...Y..
   b90e0:	59e7 000b 59ef 000b 59f7 000b 59ff 000b     .Y...Y...Y...Y..

000b90f0 <_ZTV9IPAddress>:
	...
   b90f8:	5a89 000b 5a79 000b 5a7b 000b 7061 0070     .Z..yZ..{Z..app.

000b9108 <_ZTVN5spark12NetworkClassE>:
	...
   b9110:	5ba5 000b 5baf 000b 5bb9 000b 5bc3 000b     .[...[...[...[..
   b9120:	5bcd 000b 5bd9 000b 5be5 000b 5bed 000b     .[...[...[...[..
   b9130:	5bf5 000b 5c01 000b 5c09 000b 5c13 000b     .[...\...\...\..
   b9140:	5c1d 000b                                   .\..

000b9144 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9144:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b9154:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b9164 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b916c:	60f9 000b 611d 000b 6607 000b 612b 000b     .`...a...f..+a..
   b917c:	60fd 000b                                   .`..

000b9180 <_ZTV9TCPClient>:
	...
   b9188:	40e9 000b 411d 000b 6075 000b 608f 000b     .@...A..u`...`..
   b9198:	649d 000b 60b9 000b 6313 000b 60ed 000b     .d...`...c...`..
   b91a8:	63a5 000b 61e5 000b 6341 000b 6551 000b     .c...a..Ac..Qe..
   b91b8:	62e1 000b 60ef 000b 60a1 000b 6131 000b     .b...`...`..1a..
   b91c8:	61c5 000b 5925 252d 2d6d 6425 2554 3a48     .a..%Y-%m-%dT%H:
   b91d8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b91e8 <_ZTV11USARTSerial>:
	...
   b91f0:	6621 000b 668d 000b 6665 000b 5d09 000b     !f...f..ef...]..
   b9200:	6635 000b 6651 000b 6643 000b 665f 000b     5f..Qf..Cf.._f..
   b9210:	6623 000b 6627 000b                         #f..'f..

000b9218 <_ZTV9USBSerial>:
	...
   b9220:	66cb 000b 6733 000b 6709 000b 5d09 000b     .f..3g...g...]..
   b9230:	66fb 000b 66cd 000b 66dd 000b 672d 000b     .f...f...f..-g..
   b9240:	66ed 000b 66c5 000b                         .f...f..

000b9248 <_ZTVN5spark9WiFiClassE>:
	...
   b9250:	6823 000b 6819 000b 680f 000b 67c5 000b     #h...h...h...g..
   b9260:	6803 000b 67f7 000b 5be5 000b 5bed 000b     .h...g...[...[..
   b9270:	67eb 000b 67e3 000b 67d9 000b 67cf 000b     .g...g...g...g..
   b9280:	5c1d 000b                                   .\..

000b9284 <_ZSt7nothrow>:
	...

000b9285 <_ZTSSt19_Sp_make_shared_tag>:
   b9285:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9295:	6572 5f64 6174 0067 0000                     red_tag....

000b92a0 <_ZTISt19_Sp_make_shared_tag>:
   b92a0:	92e0 000b 9285 000b                         ........

000b92a8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b92a8:	9340 000b 92b4 000b 9364 000b               @.......d...

000b92b4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b92b4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b92c4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b92d4:	0045 0000                                   E...

000b92d8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b92d8:	0000 0000 92a8 000b 6c05 000b 6c19 000b     .........l...l..
   b92e8:	6dad 000b 6dad 000b 6c83 000b 6bc5 000b     .m...m...l...k..
   b92f8:	6c6b 000b 6c2d 000b 6bf7 000b               kl..-l...k..

000b9304 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9304:	9340 000b 9310 000b 92a8 000b               @...........

000b9310 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9310:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9320:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9330:	666e 456f 0000 0000                         nfoE....

000b9338 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9338:	0000 0000 9304 000b 6cad 000b 6cc1 000b     .........l...l..
   b9348:	6dad 000b 6dad 000b 6c83 000b 6bc5 000b     .m...m...l...k..
   b9358:	6d81 000b 6d0d 000b 6cd5 000b               .m...m...l..

000b9364 <_ZTISt9type_info>:
   b9364:	92e0 000b 936c 000b                         ....l...

000b936c <_ZTSSt9type_info>:
   b936c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   b937c:	0000 0000                                   ....

000b9380 <TWO52>:
   b9380:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b9390:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b93a0:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b93b0:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b93c0:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b93d0:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b93e0:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b93f0:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b9400 <link_const_variable_data_end>:
   b9400:	000b4399 	.word	0x000b4399
   b9404:	000b53e1 	.word	0x000b53e1
   b9408:	000b5931 	.word	0x000b5931
   b940c:	000b59a9 	.word	0x000b59a9
   b9410:	000b5b95 	.word	0x000b5b95
   b9414:	000b5cf5 	.word	0x000b5cf5
   b9418:	000b5e15 	.word	0x000b5e15
   b941c:	000b6051 	.word	0x000b6051
   b9420:	000b660d 	.word	0x000b660d
   b9424:	000b682d 	.word	0x000b682d

000b9428 <link_constructors_end>:
	...
